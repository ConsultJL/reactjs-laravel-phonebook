--- app/Console/Kernel.php
+++ PHP_CodeSniffer
@@ -19,7 +19,7 @@
     /**
      * Define the application's command schedule.
      *
-     * @param  \Illuminate\Console\Scheduling\Schedule  $schedule
+     * @param  \Illuminate\Console\Scheduling\Schedule $schedule
      * @return void
      */
     protected function schedule(Schedule $schedule)

--- app/Exceptions/Handler.php
+++ PHP_CodeSniffer
@@ -28,7 +28,7 @@
      *
      * This is a great spot to send exceptions to Sentry, Bugsnag, etc.
      *
-     * @param  \Exception  $e
+     * @param  \Exception $e
      * @return void
      */
     public function report(Exception $e)
@@ -39,8 +39,8 @@
     /**
      * Render an exception into an HTTP response.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Exception  $e
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Exception               $e
      * @return \Illuminate\Http\Response
      */
     public function render($request, Exception $e)

--- app/Http/Controllers/Auth/AuthController.php
+++ PHP_CodeSniffer
@@ -43,30 +43,34 @@
     /**
      * Get a validator for an incoming registration request.
      *
-     * @param  array  $data
+     * @param  array $data
      * @return \Illuminate\Contracts\Validation\Validator
      */
     protected function validator(array $data)
     {
-        return Validator::make($data, [
+        return Validator::make(
+            $data, [
             'name' => 'required|max:255',
             'email' => 'required|email|max:255|unique:users',
             'password' => 'required|min:6|confirmed',
-        ]);
+            ]
+        );
     }
 
     /**
      * Create a new user instance after a valid registration.
      *
-     * @param  array  $data
+     * @param  array $data
      * @return User
      */
     protected function create(array $data)
     {
-        return User::create([
+        return User::create(
+            [
             'name' => $data['name'],
             'email' => $data['email'],
             'password' => bcrypt($data['password']),
-        ]);
+            ]
+        );
     }
 }

--- app/Http/Controllers/PhonebookController.php
+++ PHP_CodeSniffer
@@ -14,11 +14,13 @@
 {
     protected $phonebookRepo;
 
-    public function __construct(PhonebooksRepositoryInterface $phonebookRepo) {
+    public function __construct(PhonebooksRepositoryInterface $phonebookRepo) 
+    {
         $this->phonebook = $phonebookRepo;
     }
 
-    public function create(Request $request) {
+    public function create(Request $request) 
+    {
         $name = $request->input('name');
         $phone = $request->input('phone');
         $address1 = $request->input('address1');
@@ -30,17 +32,20 @@
         $this->phonebook->createPhonebookEntry($name, $phone, $address1, $address2, $city, $state, $zip);
     }
 
-    public function getall() {
+    public function getall() 
+    {
         return $this->phonebook->getAllPhonebookEntries();
     }
 
-    public function delete(Request $request) {
+    public function delete(Request $request) 
+    {
         $id = $request->input('id');
 
         $this->phonebook->deletePhonebookEntry($id);
     }
 
-    public function edit(Request $request) {
+    public function edit(Request $request) 
+    {
         $id = $request->input('id');
         $editedName = $request->input('name');
         $editedPhone = $request->input('phone');

--- app/Http/Middleware/Authenticate.php
+++ PHP_CodeSniffer
@@ -10,9 +10,9 @@
     /**
      * Handle an incoming request.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Closure  $next
-     * @param  string|null  $guard
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Closure                 $next
+     * @param  string|null              $guard
      * @return mixed
      */
     public function handle($request, Closure $next, $guard = null)

--- app/Http/Middleware/RedirectIfAuthenticated.php
+++ PHP_CodeSniffer
@@ -10,9 +10,9 @@
     /**
      * Handle an incoming request.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Closure  $next
-     * @param  string|null  $guard
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Closure                 $next
+     * @param  string|null              $guard
      * @return mixed
      */
     public function handle($request, Closure $next, $guard = null)

--- app/Http/routes.php
+++ PHP_CodeSniffer
@@ -11,20 +11,24 @@
 |
 */
 
-Route::get('/', function() {
-    return view('phonebook');
-});
+Route::get(
+    '/', function () {
+        return view('phonebook');
+    }
+);
 
-Route::group(['prefix' => 'api'], function () {
-    //route for inserting
-    Route::post('/phonebook/create', 'PhonebookController@create');
+Route::group(
+    ['prefix' => 'api'], function () {
+        //route for inserting
+        Route::post('/phonebook/create', 'PhonebookController@create');
 
-    //route for deleting
-    Route::post('/phonebook/delete', 'PhonebookController@delete');
+        //route for deleting
+        Route::post('/phonebook/delete', 'PhonebookController@delete');
 
-    //route for updating
-    Route::post('/phonebook/edit', 'PhonebookController@edit');
+        //route for updating
+        Route::post('/phonebook/edit', 'PhonebookController@edit');
 
-    //route for retrieving all
-    Route::get('/phonebook/all', 'PhonebookController@getall');
-});
+        //route for retrieving all
+        Route::get('/phonebook/all', 'PhonebookController@getall');
+    }
+);

--- app/Providers/AuthServiceProvider.php
+++ PHP_CodeSniffer
@@ -19,7 +19,7 @@
     /**
      * Register any application authentication / authorization services.
      *
-     * @param  \Illuminate\Contracts\Auth\Access\Gate  $gate
+     * @param  \Illuminate\Contracts\Auth\Access\Gate $gate
      * @return void
      */
     public function boot(GateContract $gate)

--- app/Providers/EventServiceProvider.php
+++ PHP_CodeSniffer
@@ -21,7 +21,7 @@
     /**
      * Register any other events for your application.
      *
-     * @param  \Illuminate\Contracts\Events\Dispatcher  $events
+     * @param  \Illuminate\Contracts\Events\Dispatcher $events
      * @return void
      */
     public function boot(DispatcherContract $events)

--- app/Providers/PhonebookProvider.php
+++ PHP_CodeSniffer
@@ -7,7 +7,8 @@
 
 class PhonebookProvider extends ServiceProvider
 {
-    public function register() {
+    public function register() 
+    {
         $this->app->bind("App\Repositories\PhonebooksRepositoryInterface", "App\Repositories\PhonebooksRepository");
     }
 }
\ No newline at end of file

--- app/Providers/RouteServiceProvider.php
+++ PHP_CodeSniffer
@@ -19,7 +19,7 @@
     /**
      * Define your route model bindings, pattern filters, etc.
      *
-     * @param  \Illuminate\Routing\Router  $router
+     * @param  \Illuminate\Routing\Router $router
      * @return void
      */
     public function boot(Router $router)
@@ -32,7 +32,7 @@
     /**
      * Define the routes for the application.
      *
-     * @param  \Illuminate\Routing\Router  $router
+     * @param  \Illuminate\Routing\Router $router
      * @return void
      */
     public function map(Router $router)
@@ -47,15 +47,17 @@
      *
      * These routes all receive session state, CSRF protection, etc.
      *
-     * @param  \Illuminate\Routing\Router  $router
+     * @param  \Illuminate\Routing\Router $router
      * @return void
      */
     protected function mapWebRoutes(Router $router)
     {
-        $router->group([
+        $router->group(
+            [
             'namespace' => $this->namespace, 'middleware' => 'web',
-        ], function ($router) {
-            require app_path('Http/routes.php');
-        });
+            ], function ($router) {
+                include app_path('Http/routes.php');
+            }
+        );
     }
 }

--- app/Repositories/PhonebooksRepository.php
+++ PHP_CodeSniffer
@@ -5,11 +5,13 @@
 
 class PhonebooksRepository implements PhonebooksRepositoryInterface
 {
-    public function getAllPhonebookEntries() {
+    public function getAllPhonebookEntries() 
+    {
         return Phonebooks::all();
     }
 
-    public function createPhonebookEntry($name, $phone, $address1, $address2, $city, $state, $zip) {
+    public function createPhonebookEntry($name, $phone, $address1, $address2, $city, $state, $zip) 
+    {
         $spec = new Phonebooks;
         $spec->name = $name;
         $spec->phone_number = $phone;
@@ -21,7 +23,8 @@
         $spec->save();
     }
 
-    public function updatePhonebookEntry($id, $name, $phone, $address1, $address2, $city, $state, $zip) {
+    public function updatePhonebookEntry($id, $name, $phone, $address1, $address2, $city, $state, $zip) 
+    {
         $spec = Phonebooks::find($id);
         $spec->name = $name;
         $spec->phone_number = $phone;
@@ -33,7 +36,8 @@
         $spec->save();
     }
 
-    public function deletePhonebookEntry($id) {
+    public function deletePhonebookEntry($id) 
+    {
         $spec = Phonebooks::find($id);
         $spec->delete();
     }

--- app/Repositories/PhonebooksRepositoryInterface.php
+++ PHP_CodeSniffer
@@ -2,7 +2,8 @@
 
 namespace App\Repositories;
 
-interface PhonebooksRepositoryInterface {
+interface PhonebooksRepositoryInterface
+{
     public function getAllPhonebookEntries();
     public function createPhonebookEntry($name, $phone, $address1, $address2, $city, $state, $zip);
     public function updatePhonebookEntry($id, $name, $phone, $address1, $address2, $city, $state, $zip);

--- bootstrap/autoload.php
+++ PHP_CodeSniffer
@@ -30,5 +30,5 @@
 $compiledPath = __DIR__.'/cache/compiled.php';
 
 if (file_exists($compiledPath)) {
-    require $compiledPath;
+    include $compiledPath;
 }

--- database/factories/ModelFactory.php
+++ PHP_CodeSniffer
@@ -11,17 +11,20 @@
 |
 */
 
-$factory->define(App\User::class, function (Faker\Generator $faker) {
-    return [
+$factory->define(
+    App\User::class, function (Faker\Generator $faker) {
+        return [
         'name' => $faker->name,
         'email' => $faker->safeEmail,
         'password' => bcrypt(str_random(10)),
         'remember_token' => str_random(10),
-    ];
-});
+        ];
+    }
+);
 
-$factory->define(App\Phonebooks::class, function (Faker\Generator $faker) {
-    return [
+$factory->define(
+    App\Phonebooks::class, function (Faker\Generator $faker) {
+        return [
         'name' => $faker->name,
         'phone_number' => $faker->phoneNumber,
         'address1' => $faker->streetAddress,
@@ -29,5 +32,6 @@
         'city' => $faker->city,
         'state' => $faker->country, // This should be a state but we are only using this for verification.
         'zip_code' => rand(12345, 99999)
-    ];
-});
+        ];
+    }
+);

--- database/migrations/2014_10_12_000000_create_users_table.php
+++ PHP_CodeSniffer
@@ -12,14 +12,16 @@
      */
     public function up()
     {
-        Schema::create('users', function (Blueprint $table) {
-            $table->increments('id');
-            $table->string('name');
-            $table->string('email')->unique();
-            $table->string('password');
-            $table->rememberToken();
-            $table->timestamps();
-        });
+        Schema::create(
+            'users', function (Blueprint $table) {
+                $table->increments('id');
+                $table->string('name');
+                $table->string('email')->unique();
+                $table->string('password');
+                $table->rememberToken();
+                $table->timestamps();
+            }
+        );
     }
 
     /**

--- database/migrations/2014_10_12_100000_create_password_resets_table.php
+++ PHP_CodeSniffer
@@ -12,11 +12,13 @@
      */
     public function up()
     {
-        Schema::create('password_resets', function (Blueprint $table) {
-            $table->string('email')->index();
-            $table->string('token')->index();
-            $table->timestamp('created_at')->nullable();
-        });
+        Schema::create(
+            'password_resets', function (Blueprint $table) {
+                $table->string('email')->index();
+                $table->string('token')->index();
+                $table->timestamp('created_at')->nullable();
+            }
+        );
     }
 
     /**

--- database/migrations/2016_07_31_161701_create_phonebooks_table.php
+++ PHP_CodeSniffer
@@ -12,17 +12,19 @@
      */
     public function up()
     {
-        Schema::create('phonebooks', function (Blueprint $table) {
-            $table->increments('id');
-            $table->string('name');
-            $table->string('phone_number');
-            $table->string('address1');
-            $table->string('address2')->nullable();
-            $table->string('city');
-            $table->string('state');
-            $table->string('zip_code');
-            $table->timestamps();
-        });
+        Schema::create(
+            'phonebooks', function (Blueprint $table) {
+                $table->increments('id');
+                $table->string('name');
+                $table->string('phone_number');
+                $table->string('address1');
+                $table->string('address2')->nullable();
+                $table->string('city');
+                $table->string('state');
+                $table->string('zip_code');
+                $table->timestamps();
+            }
+        );
     }
 
     /**

--- gulpfile.js
+++ PHP_CodeSniffer
@@ -11,6 +11,8 @@
  |
  */
 
-elixir(function(mix) {
-    mix.sass('app.scss');
-});
+elixir(
+    function(mix) {
+        mix.sass('app.scss');
+    }
+);

--- public/index.php
+++ PHP_CodeSniffer
@@ -3,8 +3,8 @@
 /**
  * Laravel - A PHP Framework For Web Artisans
  *
- * @package  Laravel
- * @author   Taylor Otwell <taylorotwell@gmail.com>
+ * @package Laravel
+ * @author  Taylor Otwell <taylorotwell@gmail.com>
  */
 
 /*
@@ -33,7 +33,7 @@
 |
 */
 
-$app = require_once __DIR__.'/../bootstrap/app.php';
+$app = include_once __DIR__.'/../bootstrap/app.php';
 
 /*
 |--------------------------------------------------------------------------

--- server.php
+++ PHP_CodeSniffer
@@ -3,8 +3,8 @@
 /**
  * Laravel - A PHP Framework For Web Artisans
  *
- * @package  Laravel
- * @author   Taylor Otwell <taylorotwell@gmail.com>
+ * @package Laravel
+ * @author  Taylor Otwell <taylorotwell@gmail.com>
  */
 
 $uri = urldecode(

--- tests/Acceptance/AcceptanceTest.php
+++ PHP_CodeSniffer
@@ -4,20 +4,24 @@
 
 class AcceptanceTest extends TestCase
 {
-    /** @test */
+    /**
+ * @test 
+*/
     public function Page_Rendered_Header_Properly()
     {
         $this->visit('/')
             ->see('AdGate Media Phonebook');
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     public function React_Properly_Loaded()
     {
         $this->visit('/')
-             ->see('Enter the details to be saved')
-             ->see('Name')
-             ->see('Phone')
-             ->see('Add');
+            ->see('Enter the details to be saved')
+            ->see('Name')
+            ->see('Phone')
+            ->see('Add');
     }
 }

--- tests/Integration/Models/PhonebooksTest.php
+++ PHP_CodeSniffer
@@ -7,7 +7,9 @@
 {
     use DatabaseTransactions;
 
-    /** @test */
+    /**
+ * @test 
+*/
     function it_fetches_all_phonebook_entries()
     {
         // Given
@@ -21,7 +23,9 @@
         $this->assertNotNull($phonebookEntries[0]->name);
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     function can_insert_phone_entry_into_database()
     {
         $spec = new Phonebooks;

--- tests/TestCase.php
+++ PHP_CodeSniffer
@@ -16,7 +16,7 @@
      */
     public function createApplication()
     {
-        $app = require __DIR__.'/../bootstrap/app.php';
+        $app = include __DIR__.'/../bootstrap/app.php';
 
         $app->make(Illuminate\Contracts\Console\Kernel::class)->bootstrap();
 

--- vendor/composer/autoload_real.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     public static function loadClassLoader($class)
     {
         if ('Composer\Autoload\ClassLoader' === $class) {
-            require __DIR__ . '/ClassLoader.php';
+            include __DIR__ . '/ClassLoader.php';
         }
     }
 
@@ -25,21 +25,21 @@
 
         $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION');
         if ($useStaticLoader) {
-            require_once __DIR__ . '/autoload_static.php';
+            include_once __DIR__ . '/autoload_static.php';
 
             call_user_func(\Composer\Autoload\ComposerStaticInit42ae86d646a6d7f692514fbf8e229de0::getInitializer($loader));
         } else {
-            $map = require __DIR__ . '/autoload_namespaces.php';
+            $map = include __DIR__ . '/autoload_namespaces.php';
             foreach ($map as $namespace => $path) {
                 $loader->set($namespace, $path);
             }
 
-            $map = require __DIR__ . '/autoload_psr4.php';
+            $map = include __DIR__ . '/autoload_psr4.php';
             foreach ($map as $namespace => $path) {
                 $loader->setPsr4($namespace, $path);
             }
 
-            $classMap = require __DIR__ . '/autoload_classmap.php';
+            $classMap = include __DIR__ . '/autoload_classmap.php';
             if ($classMap) {
                 $loader->addClassMap($classMap);
             }
@@ -50,7 +50,7 @@
         if ($useStaticLoader) {
             $includeFiles = Composer\Autoload\ComposerStaticInit42ae86d646a6d7f692514fbf8e229de0::$files;
         } else {
-            $includeFiles = require __DIR__ . '/autoload_files.php';
+            $includeFiles = include __DIR__ . '/autoload_files.php';
         }
         foreach ($includeFiles as $fileIdentifier => $file) {
             composerRequire42ae86d646a6d7f692514fbf8e229de0($fileIdentifier, $file);
@@ -63,7 +63,7 @@
 function composerRequire42ae86d646a6d7f692514fbf8e229de0($fileIdentifier, $file)
 {
     if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {
-        require $file;
+        include $file;
 
         $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;
     }

--- vendor/composer/autoload_static.php
+++ PHP_CodeSniffer
@@ -777,12 +777,14 @@
 
     public static function getInitializer(ClassLoader $loader)
     {
-        return \Closure::bind(function () use ($loader) {
-            $loader->prefixLengthsPsr4 = ComposerStaticInit42ae86d646a6d7f692514fbf8e229de0::$prefixLengthsPsr4;
-            $loader->prefixDirsPsr4 = ComposerStaticInit42ae86d646a6d7f692514fbf8e229de0::$prefixDirsPsr4;
-            $loader->prefixesPsr0 = ComposerStaticInit42ae86d646a6d7f692514fbf8e229de0::$prefixesPsr0;
-            $loader->classMap = ComposerStaticInit42ae86d646a6d7f692514fbf8e229de0::$classMap;
+        return \Closure::bind(
+            function () use ($loader) {
+                $loader->prefixLengthsPsr4 = ComposerStaticInit42ae86d646a6d7f692514fbf8e229de0::$prefixLengthsPsr4;
+                $loader->prefixDirsPsr4 = ComposerStaticInit42ae86d646a6d7f692514fbf8e229de0::$prefixDirsPsr4;
+                $loader->prefixesPsr0 = ComposerStaticInit42ae86d646a6d7f692514fbf8e229de0::$prefixesPsr0;
+                $loader->classMap = ComposerStaticInit42ae86d646a6d7f692514fbf8e229de0::$classMap;
 
-        }, null, ClassLoader::class);
+            }, null, ClassLoader::class
+        );
     }
 }

--- vendor/composer/ClassLoader.php
+++ PHP_CodeSniffer
@@ -292,7 +292,7 @@
     /**
      * Loads the given class or interface.
      *
-     * @param  string    $class The name of the class
+     * @param  string $class The name of the class
      * @return bool|null True if loaded, null otherwise
      */
     public function loadClass($class)

--- vendor/dnoegel/php-xdg-base-dir/src/Xdg.php
+++ PHP_CodeSniffer
@@ -8,6 +8,7 @@
  * Based on the python implementation https://github.com/takluyver/pyxdg/blob/master/xdg/BaseDirectory.py
  *
  * Class Xdg
+ *
  * @package ShopwareCli\Application
  */
 class Xdg
@@ -100,12 +101,12 @@
 
         $st = lstat($fallback);
 
-        # The fallback must be a directory
+        // The fallback must be a directory
         if (!$st['mode'] & self::S_IFDIR) {
             rmdir($fallback);
             $create = true;
-        } elseif ($st['uid'] != getmyuid() ||
-            $st['mode'] & (self::S_IRWXG | self::S_IRWXO)
+        } elseif ($st['uid'] != getmyuid() 
+            || $st['mode'] & (self::S_IRWXG | self::S_IRWXO)
         ) {
             rmdir($fallback);
             $create = true;

--- vendor/doctrine/inflector/lib/Doctrine/Common/Inflector/Inflector.php
+++ PHP_CodeSniffer
@@ -287,7 +287,7 @@
      * ?>
      * </code>
      *
-     * @param string $string The string to operate on.
+     * @param string $string     The string to operate on.
      * @param string $delimiters A list of word separators.
      *
      * @return string The string with all delimeter-separated words capitalized.
@@ -296,7 +296,7 @@
     {
         return preg_replace_callback(
             '/[^' . preg_quote($delimiters, '/') . ']+/',
-            function($matches) {
+            function ($matches) {
                 return ucfirst($matches[0]);
             },
             $string
@@ -348,7 +348,7 @@
     public static function rules($type, $rules, $reset = false)
     {
         foreach ($rules as $rule => $pattern) {
-            if ( ! is_array($pattern)) {
+            if (! is_array($pattern)) {
                 continue;
             }
 

--- vendor/doctrine/inflector/tests/Doctrine/Tests/Common/Inflector/InflectorTest.php
+++ PHP_CodeSniffer
@@ -148,7 +148,7 @@
      * testInflectingSingulars method
      *
      * @dataProvider dataSampleWords
-     * @return void
+     * @return       void
      */
     public function testInflectingSingulars($singular, $plural) 
     {
@@ -163,7 +163,7 @@
      * testInflectingPlurals method
      *
      * @dataProvider dataSampleWords
-     * @return void
+     * @return       void
      */
     public function testInflectingPlurals($singular, $plural) 
     {
@@ -190,11 +190,13 @@
         
         $this->assertEquals(Inflector::pluralize('uninflectable'), 'uninflectable');
 
-        Inflector::rules('plural', array(
+        Inflector::rules(
+            'plural', array(
             'rules' => array('/^(alert)$/i' => '\1ables'),
             'uninflected' => array('noflect', 'abtuse'),
             'irregular' => array('amaze' => 'amazable', 'phone' => 'phonezes')
-        ));
+            )
+        );
         
         $this->assertEquals(Inflector::pluralize('noflect'), 'noflect');
         $this->assertEquals(Inflector::pluralize('abtuse'), 'abtuse');
@@ -216,11 +218,13 @@
         $this->assertEquals(Inflector::singularize('epler'), 'eple');
         $this->assertEquals(Inflector::singularize('jenter'), 'jente');
 
-        Inflector::rules('singular', array(
+        Inflector::rules(
+            'singular', array(
             'rules' => array('/^(bil)er$/i' => '\1', '/^(inflec|contribu)tors$/i' => '\1ta'),
             'uninflected' => array('singulars'),
             'irregular' => array('spins' => 'spinor')
-        ));
+            )
+        );
 
         $this->assertEquals(Inflector::singularize('inflectors'), 'inflecta');
         $this->assertEquals(Inflector::singularize('contributors'), 'contributa');
@@ -240,16 +244,20 @@
         $this->assertEquals(Inflector::singularize('Bananas'), 'Banana');
         $this->assertEquals(Inflector::pluralize('Banana'), 'Bananas');
 
-        Inflector::rules('singular', array(
+        Inflector::rules(
+            'singular', array(
             'rules' => array('/(.*)nas$/i' => '\1zzz')
-        ));
+            )
+        );
         
         $this->assertEquals('Banazzz', Inflector::singularize('Bananas'), 'Was inflected with old rules.');
 
-        Inflector::rules('plural', array(
+        Inflector::rules(
+            'plural', array(
             'rules' => array('/(.*)na$/i' => '\1zzz'),
             'irregular' => array('corpus' => 'corpora')
-        ));
+            )
+        );
         
         $this->assertEquals(Inflector::pluralize('Banana'), 'Banazzz', 'Was inflected with old rules.');
         $this->assertEquals(Inflector::pluralize('corpus'), 'corpora', 'Was inflected with old irregular form.');
@@ -267,18 +275,22 @@
         $uninflected = array('atlas', 'lapis', 'onibus', 'pires', 'virus', '.*x');
         $pluralIrregular = array('as' => 'ases');
 
-        Inflector::rules('singular', array(
+        Inflector::rules(
+            'singular', array(
             'rules' => array('/^(.*)(a|e|o|u)is$/i' => '\1\2l'),
             'uninflected' => $uninflected,
-        ), true);
+            ), true
+        );
 
-        Inflector::rules('plural', array(
+        Inflector::rules(
+            'plural', array(
             'rules' => array(
                 '/^(.*)(a|e|o|u)l$/i' => '\1\2is',
             ),
             'uninflected' => $uninflected,
             'irregular' => $pluralIrregular
-        ), true);
+            ), true
+        );
 
         $this->assertEquals(Inflector::pluralize('Alcool'), 'Alcoois');
         $this->assertEquals(Inflector::pluralize('Atlas'), 'Atlas');
@@ -293,7 +305,7 @@
      */
     public function testUcwords()
     {
-        $this->assertSame('Top-O-The-Morning To All_of_you!', Inflector::ucwords( 'top-o-the-morning to all_of_you!'));
+        $this->assertSame('Top-O-The-Morning To All_of_you!', Inflector::ucwords('top-o-the-morning to all_of_you!'));
     }
 
     /**
@@ -303,7 +315,7 @@
      */
     public function testUcwordsWithCustomDelimeters()
     {
-        $this->assertSame('Top-O-The-Morning To All_Of_You!', Inflector::ucwords( 'top-o-the-morning to all_of_you!', '-_ '));
+        $this->assertSame('Top-O-The-Morning To All_Of_You!', Inflector::ucwords('top-o-the-morning to all_of_you!', '-_ '));
     }
 }
 

--- vendor/doctrine/inflector/tests/Doctrine/Tests/TestInit.php
+++ PHP_CodeSniffer
@@ -7,21 +7,23 @@
 error_reporting(E_ALL | E_STRICT);
 
 // register silently failing autoloader
-spl_autoload_register(function($class)
-{
-    if (0 === strpos($class, 'Doctrine\Tests\\')) {
-        $path = __DIR__.'/../../'.strtr($class, '\\', '/').'.php';
-        if (is_file($path) && is_readable($path)) {
-            require_once $path;
+spl_autoload_register(
+    function ($class) {
+    
+        if (0 === strpos($class, 'Doctrine\Tests\\')) {
+            $path = __DIR__.'/../../'.strtr($class, '\\', '/').'.php';
+            if (is_file($path) && is_readable($path)) {
+                include_once $path;
 
-            return true;
-        }
-    } else if (0 === strpos($class, 'Doctrine\Common\\')) {
-        $path = __DIR__.'/../../../lib/'.($class = strtr($class, '\\', '/')).'.php';
-        if (is_file($path) && is_readable($path)) {
-            require_once $path;
+                return true;
+            }
+        } else if (0 === strpos($class, 'Doctrine\Common\\')) {
+            $path = __DIR__.'/../../../lib/'.($class = strtr($class, '\\', '/')).'.php';
+            if (is_file($path) && is_readable($path)) {
+                include_once $path;
 
-            return true;
+                return true;
+            }
         }
     }
-});
+);

--- vendor/doctrine/instantiator/src/Doctrine/Instantiator/Exception/InvalidArgumentException.php
+++ PHP_CodeSniffer
@@ -54,9 +54,11 @@
      */
     public static function fromAbstractClass(ReflectionClass $reflectionClass)
     {
-        return new self(sprintf(
-            'The provided class "%s" is abstract, and can not be instantiated',
-            $reflectionClass->getName()
-        ));
+        return new self(
+            sprintf(
+                'The provided class "%s" is abstract, and can not be instantiated',
+                $reflectionClass->getName()
+            )
+        );
     }
 }

--- vendor/doctrine/instantiator/src/Doctrine/Instantiator/Instantiator.php
+++ PHP_CodeSniffer
@@ -151,15 +151,17 @@
      */
     private function checkIfUnSerializationIsSupported(ReflectionClass $reflectionClass, $serializedString)
     {
-        set_error_handler(function ($code, $message, $file, $line) use ($reflectionClass, & $error) {
-            $error = UnexpectedValueException::fromUncleanUnSerialization(
-                $reflectionClass,
-                $message,
-                $code,
-                $file,
-                $line
-            );
-        });
+        set_error_handler(
+            function ($code, $message, $file, $line) use ($reflectionClass, & $error) {
+                $error = UnexpectedValueException::fromUncleanUnSerialization(
+                    $reflectionClass,
+                    $message,
+                    $code,
+                    $file,
+                    $line
+                );
+            }
+        );
 
         $this->attemptInstantiationViaUnSerialization($reflectionClass, $serializedString);
 

--- vendor/fzaninotto/faker/src/autoload.php
+++ PHP_CodeSniffer
@@ -2,25 +2,28 @@
 
 /**
  * Simple autoloader that follow the PHP Standards Recommendation #0 (PSR-0)
+ *
  * @see https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md for more informations.
  *
  * Code inspired from the SplClassLoader RFC
  * @see https://wiki.php.net/rfc/splclassloader#example_implementation
  */
-spl_autoload_register(function ($className) {
-    $className = ltrim($className, '\\');
-    $fileName = '';
-    if ($lastNsPos = strripos($className, '\\')) {
-        $namespace = substr($className, 0, $lastNsPos);
-        $className = substr($className, $lastNsPos + 1);
-        $fileName = str_replace('\\', DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;
-    }
-    $fileName = __DIR__ . DIRECTORY_SEPARATOR . $fileName . $className . '.php';
-    if (file_exists($fileName)) {
-        require $fileName;
+spl_autoload_register(
+    function ($className) {
+        $className = ltrim($className, '\\');
+        $fileName = '';
+        if ($lastNsPos = strripos($className, '\\')) {
+            $namespace = substr($className, 0, $lastNsPos);
+            $className = substr($className, $lastNsPos + 1);
+            $fileName = str_replace('\\', DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;
+        }
+        $fileName = __DIR__ . DIRECTORY_SEPARATOR . $fileName . $className . '.php';
+        if (file_exists($fileName)) {
+            include $fileName;
 
-        return true;
-    }
+            return true;
+        }
 
-    return false;
-});
+        return false;
+    }
+);

--- vendor/fzaninotto/faker/src/Faker/Calculator/Iban.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Generates IBAN Checksum
      *
-     * @param string $iban
+     * @param  string $iban
      * @return string Checksum (numeric string)
      */
     public static function checksum($iban)
@@ -35,7 +35,7 @@
     /**
      * Converts letter to number
      *
-     * @param string $char
+     * @param  string $char
      * @return int
      */
     public static function alphaToNumber($char)
@@ -46,7 +46,7 @@
     /**
      * Calculates mod97 on a numeric string
      *
-     * @param string $number Numeric string
+     * @param  string $number Numeric string
      * @return int
      */
     public static function mod97($number)
@@ -61,7 +61,7 @@
     /**
      * Checks whether an IBAN has a valid checksum
      *
-     * @param string $iban
+     * @param  string $iban
      * @return boolean
      */
     public static function isValid($iban)

--- vendor/fzaninotto/faker/src/Faker/Calculator/Luhn.php
+++ PHP_CodeSniffer
@@ -48,7 +48,7 @@
     /**
      * Checks whether a number (partial number + check digit) is Luhn compliant
      *
-     * @param string $number
+     * @param  string $number
      * @return bool
      */
     public static function isValid($number)

--- vendor/fzaninotto/faker/src/Faker/DefaultGenerator.php
+++ PHP_CodeSniffer
@@ -25,7 +25,7 @@
 
     /**
      * @param string $method
-     * @param array $attributes
+     * @param array  $attributes
      */
     public function __call($method, $attributes)
     {

--- vendor/fzaninotto/faker/src/Faker/Factory.php
+++ PHP_CodeSniffer
@@ -11,7 +11,7 @@
     /**
      * Create a new generator
      * 
-     * @param string $locale
+     * @param  string $locale
      * @return Generator
      */
     public static function create($locale = self::DEFAULT_LOCALE)

--- vendor/fzaninotto/faker/src/Faker/Generator.php
+++ PHP_CodeSniffer
@@ -240,7 +240,7 @@
 
     /**
      * @param string $method
-     * @param array $attributes
+     * @param array  $attributes
      */
     public function __call($method, $attributes)
     {

--- vendor/fzaninotto/faker/src/Faker/Guesser/Name.php
+++ PHP_CodeSniffer
@@ -17,7 +17,7 @@
     }
 
     /**
-     * @param string $name
+     * @param string   $name
      * @param int|null $size Length of field, if known
      * @return callable
      */
@@ -36,10 +36,10 @@
             };
         }
         switch (str_replace('_', '', $name)) {
-            case 'firstname':
-                return function () use ($generator) {
+        case 'firstname':
+            return function () use ($generator) {
                     return $generator->firstName;
-                };
+            };
             case 'lastname':
                 return function () use ($generator) {
                     return $generator->lastName;
@@ -95,10 +95,10 @@
                 };
             case 'country':
                 switch ($size) {
-                    case 2:
-                        return function () use ($generator) {
+                case 2:
+                    return function () use ($generator) {
                             return $generator->countryCode;
-                        };
+                    };
                     case 3:
                         return function () use ($generator) {
                             return $generator->countryISOAlpha3;

--- vendor/fzaninotto/faker/src/Faker/ORM/CakePHP/ColumnTypeGuesser.php
+++ PHP_CodeSniffer
@@ -20,10 +20,10 @@
         $schema = $table->schema();
 
         switch ($schema->columnType($column)) {
-            case 'boolean':
-                return function () use ($generator) {
+        case 'boolean':
+            return function () use ($generator) {
                     return $generator->boolean;
-                };
+            };
             case 'integer':
                 return function () {
                     return mt_rand(0, intval('2147483647'));

--- vendor/fzaninotto/faker/src/Faker/ORM/CakePHP/EntityPopulator.php
+++ PHP_CodeSniffer
@@ -98,10 +98,12 @@
                     $foreignKeys = $insertedEntities[$foreignModel];
                 } else {
                     $foreignKeys = $table->find('all')
-                    ->select(['id'])
-                    ->map(function ($row) {
-                        return $row->id;
-                    })
+                        ->select(['id'])
+                        ->map(
+                            function ($row) {
+                                return $row->id;
+                            }
+                        )
                     ->toArray();
                 }
 

--- vendor/fzaninotto/faker/src/Faker/ORM/Doctrine/ColumnTypeGuesser.php
+++ PHP_CodeSniffer
@@ -25,10 +25,10 @@
         $generator = $this->generator;
         $type = $class->getTypeOfField($fieldName);
         switch ($type) {
-            case 'boolean':
-                return function () use ($generator) {
+        case 'boolean':
+            return function () use ($generator) {
                     return $generator->boolean;
-                };
+            };
             case 'decimal':
                 $size = isset($class->fieldMappings[$fieldName]['precision']) ? $class->fieldMappings[$fieldName]['precision'] : 2;
 

--- vendor/fzaninotto/faker/src/Faker/ORM/Doctrine/EntityPopulator.php
+++ PHP_CodeSniffer
@@ -158,8 +158,9 @@
 
     /**
      * Insert one new record using the Entity class.
-     * @param ObjectManager $manager
-     * @param bool $generateId
+     *
+     * @param  ObjectManager $manager
+     * @param  bool          $generateId
      * @return EntityPopulator
      */
     public function execute(ObjectManager $manager, $insertedEntities, $generateId = false)
@@ -190,12 +191,14 @@
                 try {
                     $value = is_callable($format) ? $format($insertedEntities, $obj) : $format;
                 } catch (\InvalidArgumentException $ex) {
-                    throw new \InvalidArgumentException(sprintf(
-                        "Failed to generate a value for %s::%s: %s",
-                        get_class($obj),
-                        $field,
-                        $ex->getMessage()
-                    ));
+                    throw new \InvalidArgumentException(
+                        sprintf(
+                            "Failed to generate a value for %s::%s: %s",
+                            get_class($obj),
+                            $field,
+                            $ex->getMessage()
+                        )
+                    );
                 }
                 // Try a standard setter if it's available, otherwise fall back on reflection
                 $setter = sprintf("set%s", ucfirst($field));
@@ -224,9 +227,9 @@
         /* @var $repository \Doctrine\ORM\EntityRepository */
         $repository = $manager->getRepository(get_class($obj));
         $result = $repository->createQueryBuilder('e')
-                ->select(sprintf('e.%s', $column))
-                ->getQuery()
-                ->getResult();
+            ->select(sprintf('e.%s', $column))
+            ->getQuery()
+            ->getResult();
         $ids = array_map('current', $result);
 
         $id = null;

--- vendor/fzaninotto/faker/src/Faker/ORM/Doctrine/Populator.php
+++ PHP_CodeSniffer
@@ -17,7 +17,7 @@
     protected $generateId = array();
 
     /**
-     * @param \Faker\Generator $generator
+     * @param \Faker\Generator   $generator
      * @param ObjectManager|null $manager
      */
     public function __construct(\Faker\Generator $generator, ObjectManager $manager = null)

--- vendor/fzaninotto/faker/src/Faker/ORM/Mandango/ColumnTypeGuesser.php
+++ PHP_CodeSniffer
@@ -21,10 +21,10 @@
     {
         $generator = $this->generator;
         switch ($field['type']) {
-            case 'boolean':
-                return function () use ($generator) {
+        case 'boolean':
+            return function () use ($generator) {
                     return $generator->boolean;
-                };
+            };
             case 'integer':
                 return function () {
                     return mt_rand(0, intval('4294967295'));

--- vendor/fzaninotto/faker/src/Faker/ORM/Mandango/EntityPopulator.php
+++ PHP_CodeSniffer
@@ -51,7 +51,7 @@
 
     /**
      * @param \Faker\Generator $generator
-     * @param Mandango $mandango
+     * @param Mandango         $mandango
      * @return array
      */
     public function guessColumnFormatters(\Faker\Generator $generator, Mandango $mandango)
@@ -93,6 +93,7 @@
 
     /**
      * Insert one new record using the Entity class.
+     *
      * @param Mandango $mandango
      */
     public function execute(Mandango $mandango, $insertedEntities)
@@ -104,8 +105,9 @@
             if (null !== $format) {
                 $value =  is_callable($format) ? $format($insertedEntities, $obj) : $format;
 
-                if (isset($metadata['fields'][$column]) ||
-                    isset($metadata['referencesOne'][$column])) {
+                if (isset($metadata['fields'][$column]) 
+                    || isset($metadata['referencesOne'][$column])
+                ) {
                     $obj->set($column, $value);
                 }
 

--- vendor/fzaninotto/faker/src/Faker/ORM/Mandango/Populator.php
+++ PHP_CodeSniffer
@@ -17,7 +17,7 @@
 
     /**
      * @param \Faker\Generator $generator
-     * @param Mandango $mandango
+     * @param Mandango         $mandango
      */
     public function __construct(\Faker\Generator $generator, Mandango $mandango)
     {

--- vendor/fzaninotto/faker/src/Faker/ORM/Propel/ColumnTypeGuesser.php
+++ PHP_CodeSniffer
@@ -37,11 +37,11 @@
         }
         $type = $column->getType();
         switch ($type) {
-            case PropelColumnTypes::BOOLEAN:
-            case PropelColumnTypes::BOOLEAN_EMU:
-                return function () use ($generator) {
+        case PropelColumnTypes::BOOLEAN:
+        case PropelColumnTypes::BOOLEAN_EMU:
+            return function () use ($generator) {
                     return $generator->boolean;
-                };
+            };
             case PropelColumnTypes::NUMERIC:
             case PropelColumnTypes::DECIMAL:
                 $size = $column->getSize();
@@ -100,7 +100,7 @@
             case PropelColumnTypes::OBJECT:
             case PropelColumnTypes::PHP_ARRAY:
             default:
-            // no smart way to guess what the user expects here
+                // no smart way to guess what the user expects here
                 return null;
         }
     }

--- vendor/fzaninotto/faker/src/Faker/ORM/Propel/EntityPopulator.php
+++ PHP_CodeSniffer
@@ -99,18 +99,18 @@
         foreach ($columnMap->getTable()->getBehaviors() as $name => $params) {
             $columnName = Base::toLower($columnMap->getName());
             switch ($name) {
-                case 'nested_set':
-                    $columnNames = array($params['left_column'], $params['right_column'], $params['level_column']);
-                    if (in_array($columnName, $columnNames)) {
-                        return true;
-                    }
-                    break;
-                case 'timestampable':
-                    $columnNames = array($params['create_column'], $params['update_column']);
-                    if (in_array($columnName, $columnNames)) {
-                        return true;
-                    }
-                    break;
+            case 'nested_set':
+                $columnNames = array($params['left_column'], $params['right_column'], $params['level_column']);
+                if (in_array($columnName, $columnNames)) {
+                    return true;
+                }
+                break;
+            case 'timestampable':
+                $columnNames = array($params['create_column'], $params['update_column']);
+                if (in_array($columnName, $columnNames)) {
+                    return true;
+                }
+                break;
             }
         }
 
@@ -147,23 +147,23 @@
         $tableMap = $peerClass::getTableMap();
         foreach ($tableMap->getBehaviors() as $name => $params) {
             switch ($name) {
-                case 'nested_set':
-                    $modifiers['nested_set'] = function ($obj, $inserted) use ($class, $generator) {
-                        if (isset($inserted[$class])) {
-                            $queryClass = $class . 'Query';
-                            $parent = $queryClass::create()->findPk($generator->randomElement($inserted[$class]));
-                            $obj->insertAsLastChildOf($parent);
-                        } else {
-                            $obj->makeRoot();
-                        }
-                    };
-                    break;
-                case 'sortable':
-                    $modifiers['sortable'] = function ($obj, $inserted) use ($class) {
-                        $maxRank = isset($inserted[$class]) ? count($inserted[$class]) : 0;
-                        $obj->insertAtRank(mt_rand(1, $maxRank + 1));
-                    };
-                    break;
+            case 'nested_set':
+                $modifiers['nested_set'] = function ($obj, $inserted) use ($class, $generator) {
+                    if (isset($inserted[$class])) {
+                        $queryClass = $class . 'Query';
+                        $parent = $queryClass::create()->findPk($generator->randomElement($inserted[$class]));
+                        $obj->insertAsLastChildOf($parent);
+                    } else {
+                        $obj->makeRoot();
+                    }
+                };
+                break;
+            case 'sortable':
+                $modifiers['sortable'] = function ($obj, $inserted) use ($class) {
+                    $maxRank = isset($inserted[$class]) ? count($inserted[$class]) : 0;
+                    $obj->insertAtRank(mt_rand(1, $maxRank + 1));
+                };
+                break;
             }
         }
 

--- vendor/fzaninotto/faker/src/Faker/ORM/Propel2/ColumnTypeGuesser.php
+++ PHP_CodeSniffer
@@ -37,11 +37,11 @@
         }
         $type = $column->getType();
         switch ($type) {
-            case PropelTypes::BOOLEAN:
-            case PropelTypes::BOOLEAN_EMU:
-                return function () use ($generator) {
+        case PropelTypes::BOOLEAN:
+        case PropelTypes::BOOLEAN_EMU:
+            return function () use ($generator) {
                     return $generator->boolean;
-                };
+            };
             case PropelTypes::NUMERIC:
             case PropelTypes::DECIMAL:
                 $size = $column->getSize();
@@ -100,7 +100,7 @@
             case PropelTypes::OBJECT:
             case PropelTypes::PHP_ARRAY:
             default:
-            // no smart way to guess what the user expects here
+                // no smart way to guess what the user expects here
                 return null;
         }
     }

--- vendor/fzaninotto/faker/src/Faker/ORM/Propel2/EntityPopulator.php
+++ PHP_CodeSniffer
@@ -100,18 +100,18 @@
         foreach ($columnMap->getTable()->getBehaviors() as $name => $params) {
             $columnName = Base::toLower($columnMap->getName());
             switch ($name) {
-                case 'nested_set':
-                    $columnNames = array($params['left_column'], $params['right_column'], $params['level_column']);
-                    if (in_array($columnName, $columnNames)) {
-                        return true;
-                    }
-                    break;
-                case 'timestampable':
-                    $columnNames = array($params['create_column'], $params['update_column']);
-                    if (in_array($columnName, $columnNames)) {
-                        return true;
-                    }
-                    break;
+            case 'nested_set':
+                $columnNames = array($params['left_column'], $params['right_column'], $params['level_column']);
+                if (in_array($columnName, $columnNames)) {
+                    return true;
+                }
+                break;
+            case 'timestampable':
+                $columnNames = array($params['create_column'], $params['update_column']);
+                if (in_array($columnName, $columnNames)) {
+                    return true;
+                }
+                break;
             }
         }
 
@@ -148,23 +148,23 @@
         $tableMap = $peerClass::getTableMap();
         foreach ($tableMap->getBehaviors() as $name => $params) {
             switch ($name) {
-                case 'nested_set':
-                    $modifiers['nested_set'] = function ($obj, $inserted) use ($class, $generator) {
-                        if (isset($inserted[$class])) {
-                            $queryClass = $class . 'Query';
-                            $parent = $queryClass::create()->findPk($generator->randomElement($inserted[$class]));
-                            $obj->insertAsLastChildOf($parent);
-                        } else {
-                            $obj->makeRoot();
-                        }
-                    };
-                    break;
-                case 'sortable':
-                    $modifiers['sortable'] = function ($obj, $inserted) use ($class) {
-                        $maxRank = isset($inserted[$class]) ? count($inserted[$class]) : 0;
-                        $obj->insertAtRank(mt_rand(1, $maxRank + 1));
-                    };
-                    break;
+            case 'nested_set':
+                $modifiers['nested_set'] = function ($obj, $inserted) use ($class, $generator) {
+                    if (isset($inserted[$class])) {
+                        $queryClass = $class . 'Query';
+                        $parent = $queryClass::create()->findPk($generator->randomElement($inserted[$class]));
+                        $obj->insertAsLastChildOf($parent);
+                    } else {
+                        $obj->makeRoot();
+                    }
+                };
+                break;
+            case 'sortable':
+                $modifiers['sortable'] = function ($obj, $inserted) use ($class) {
+                    $maxRank = isset($inserted[$class]) ? count($inserted[$class]) : 0;
+                    $obj->insertAtRank(mt_rand(1, $maxRank + 1));
+                };
+                break;
             }
         }
 

--- vendor/fzaninotto/faker/src/Faker/ORM/Spot/ColumnTypeGuesser.php
+++ PHP_CodeSniffer
@@ -11,6 +11,7 @@
 
     /**
      * ColumnTypeGuesser constructor.
+     *
      * @param Generator $generator
      */
     public function __construct(Generator $generator)
@@ -27,10 +28,10 @@
         $generator = $this->generator;
         $type = $field['type'];
         switch ($type) {
-            case 'boolean':
-                return function () use ($generator) {
+        case 'boolean':
+            return function () use ($generator) {
                     return $generator->boolean;
-                };
+            };
             case 'decimal':
                 $size = isset($field['precision']) ? $field['precision'] : 2;
 

--- vendor/fzaninotto/faker/src/Faker/ORM/Spot/EntityPopulator.php
+++ PHP_CodeSniffer
@@ -45,8 +45,8 @@
     /**
      * Class constructor.
      *
-     * @param Mapper $mapper
-     * @param Locator $locator
+     * @param Mapper          $mapper
+     * @param Locator         $locator
      * @param $useExistingData
      */
     public function __construct(Mapper $mapper, Locator $locator, $useExistingData = false)
@@ -179,7 +179,7 @@
     /**
      * Insert one new record using the Entity class.
      *
-     * @param $insertedEntities
+     * @param  $insertedEntities
      * @return string
      */
     public function execute($insertedEntities)

--- vendor/fzaninotto/faker/src/Faker/ORM/Spot/Populator.php
+++ PHP_CodeSniffer
@@ -17,8 +17,9 @@
 
     /**
      * Populator constructor.
+     *
      * @param \Faker\Generator $generator
-     * @param Locator|null $locator
+     * @param Locator|null     $locator
      */
     public function __construct(\Faker\Generator $generator, Locator $locator = null)
     {

--- vendor/fzaninotto/faker/src/Faker/Provider/ar_SA/Person.php
+++ PHP_CodeSniffer
@@ -125,6 +125,7 @@
 
     /**
      * Check sum the number.
+     *
      * @param $number
      *
      * @return bool

--- vendor/fzaninotto/faker/src/Faker/Provider/Barcode.php
+++ PHP_CodeSniffer
@@ -30,9 +30,10 @@
 
     /**
      * ISBN-10 check digit
+     *
      * @link http://en.wikipedia.org/wiki/International_Standard_Book_Number#ISBN-10_check_digits
      *
-     * @param  string           $input ISBN without check-digit
+     * @param  string $input ISBN without check-digit
      * @throws \LengthException When wrong input length passed
      *
      * @return integer Check digit
@@ -62,7 +63,8 @@
 
     /**
      * Get a random EAN13 barcode.
-     * @return string
+     *
+     * @return  string
      * @example '4006381333931'
      */
     public function ean13()
@@ -72,7 +74,8 @@
 
     /**
      * Get a random EAN8 barcode.
-     * @return string
+     *
+     * @return  string
      * @example '73513537'
      */
     public function ean8()
@@ -82,9 +85,10 @@
 
     /**
      * Get a random ISBN-10 code
+     *
      * @link http://en.wikipedia.org/wiki/International_Standard_Book_Number
      *
-     * @return string
+     * @return  string
      * @example '4881416324'
      */
     public function isbn10()
@@ -96,9 +100,10 @@
 
     /**
      * Get a random ISBN-13 code
+     *
      * @link http://en.wikipedia.org/wiki/International_Standard_Book_Number
      *
-     * @return string
+     * @return  string
      * @example '9790404436093'
      */
     public function isbn13()

--- vendor/fzaninotto/faker/src/Faker/Provider/Base.php
+++ PHP_CodeSniffer
@@ -50,7 +50,7 @@
     /**
      * Generates a random digit, which cannot be $except
      *
-     * @param int $except
+     * @param  int $except
      * @return int
      */
     public static function randomDigitNot($except)
@@ -67,8 +67,8 @@
      *
      * The maximum value returned is mt_getrandmax()
      *
-     * @param integer $nbDigits Defaults to a random number between 1 and 9
-     * @param boolean $strict   Whether the returned number should have exactly $nbDigits
+     * @param   integer $nbDigits Defaults to a random number between 1 and 9
+     * @param   boolean $strict   Whether the returned number should have exactly $nbDigits
      * @example 79907610
      *
      * @return integer
@@ -95,9 +95,9 @@
     /**
      * Return a random float number
      *
-     * @param int       $nbMaxDecimals
-     * @param int|float $min
-     * @param int|float $max
+     * @param   int       $nbMaxDecimals
+     * @param   int|float $min
+     * @param   int|float $max
      * @example 48.8932
      *
      * @return float
@@ -124,8 +124,8 @@
     /**
      * Returns a random number between $int1 and $int2 (any order)
      *
-     * @param integer $int1 default to 0
-     * @param integer $int2 defaults to 32 bit max integer, ie 2147483647
+     * @param   integer $int1 default to 0
+     * @param   integer $int2 defaults to 32 bit max integer, ie 2147483647
      * @example 79907610
      *
      * @return integer
@@ -158,8 +158,8 @@
     /**
      * Returns randomly ordered subsequence of $count elements from a provided array
      *
-     * @param  array            $array Array to take elements from. Defaults to a-f
-     * @param  integer          $count Number of elements to take.
+     * @param  array   $array Array to take elements from. Defaults to a-f
+     * @param  integer $count Number of elements to take.
      * @throws \LengthException When requesting more elements than provided
      *
      * @return array New array with $count elements from $array
@@ -235,7 +235,7 @@
      * @see shuffleArray()
      * @see shuffleString()
      *
-     * @param array|string $arg The set to shuffle
+     * @param  array|string $arg The set to shuffle
      * @return array|string The shuffled set
      */
     public static function shuffle($arg = '')
@@ -261,7 +261,7 @@
      *
      * @example $faker->shuffleArray([1, 2, 3]); // [2, 1, 3]
      *
-     * @param array $array The set to shuffle
+     * @param  array $array The set to shuffle
      * @return array The shuffled set
      */
     public static function shuffleArray($array = array())
@@ -299,8 +299,8 @@
      *
      * @example $faker->shuffleString('hello, world'); // 'rlo,h eold!lw'
      *
-     * @param string $string The set to shuffle
-     * @param string $encoding The string encoding (defaults to UTF-8)
+     * @param  string $string   The set to shuffle
+     * @param  string $encoding The string encoding (defaults to UTF-8)
      * @return string The shuffled set
      */
     public static function shuffleString($string = '', $encoding = 'UTF-8')
@@ -388,9 +388,11 @@
      */
     public static function bothify($string = '## ??')
     {
-        $string = self::replaceWildcard($string, '*', function () {
-            return mt_rand(0, 1) ? '#' : '?';
-        });
+        $string = self::replaceWildcard(
+            $string, '*', function () {
+                return mt_rand(0, 1) ? '#' : '?';
+            }
+        );
         return static::lexify(static::numerify($string));
     }
 
@@ -430,7 +432,7 @@
      *
      * @see https://github.com/icomefromthenet/ReverseRegex for a more robust implementation
      *
-     * @param string $regex A regular expression (delimiters are optional)
+     * @param  string $regex A regular expression (delimiters are optional)
      * @return string
      */
     public static function regexify($regex = '')
@@ -445,31 +447,45 @@
         $regex = preg_replace('/(?<!\\\)\*/', '{0,' . static::randomDigitNotNull() . '}', $regex);
         $regex = preg_replace('/(?<!\\\)\+/', '{1,' . static::randomDigitNotNull() . '}', $regex);
         // [12]{1,2} becomes [12] or [12][12]
-        $regex = preg_replace_callback('/(\[[^\]]+\])\{(\d+),(\d+)\}/', function ($matches) {
-            return str_repeat($matches[1], Base::randomElement(range($matches[2], $matches[3])));
-        }, $regex);
+        $regex = preg_replace_callback(
+            '/(\[[^\]]+\])\{(\d+),(\d+)\}/', function ($matches) {
+                return str_repeat($matches[1], Base::randomElement(range($matches[2], $matches[3])));
+            }, $regex
+        );
         // (12|34){1,2} becomes (12|34) or (12|34)(12|34)
-        $regex = preg_replace_callback('/(\([^\)]+\))\{(\d+),(\d+)\}/', function ($matches) {
-            return str_repeat($matches[1], Base::randomElement(range($matches[2], $matches[3])));
-        }, $regex);
+        $regex = preg_replace_callback(
+            '/(\([^\)]+\))\{(\d+),(\d+)\}/', function ($matches) {
+                return str_repeat($matches[1], Base::randomElement(range($matches[2], $matches[3])));
+            }, $regex
+        );
         // A{1,2} becomes A or AA or \d{3} becomes \d\d\d
-        $regex = preg_replace_callback('/(\\\?.)\{(\d+),(\d+)\}/', function ($matches) {
-            return str_repeat($matches[1], Base::randomElement(range($matches[2], $matches[3])));
-        }, $regex);
+        $regex = preg_replace_callback(
+            '/(\\\?.)\{(\d+),(\d+)\}/', function ($matches) {
+                return str_repeat($matches[1], Base::randomElement(range($matches[2], $matches[3])));
+            }, $regex
+        );
         // (this|that) becomes 'this' or 'that'
-        $regex = preg_replace_callback('/\((.*?)\)/', function ($matches) {
-            return Base::randomElement(explode('|', str_replace(array('(', ')'), '', $matches[1])));
-        }, $regex);
+        $regex = preg_replace_callback(
+            '/\((.*?)\)/', function ($matches) {
+                return Base::randomElement(explode('|', str_replace(array('(', ')'), '', $matches[1])));
+            }, $regex
+        );
         // All A-F inside of [] become ABCDEF
-        $regex = preg_replace_callback('/\[([^\]]+)\]/', function ($matches) {
-            return '[' . preg_replace_callback('/(\w|\d)\-(\w|\d)/', function ($range) {
-                return implode(range($range[1], $range[2]), '');
-            }, $matches[1]) . ']';
-        }, $regex);
+        $regex = preg_replace_callback(
+            '/\[([^\]]+)\]/', function ($matches) {
+                return '[' . preg_replace_callback(
+                    '/(\w|\d)\-(\w|\d)/', function ($range) {
+                        return implode(range($range[1], $range[2]), '');
+                    }, $matches[1]
+                ) . ']';
+            }, $regex
+        );
         // All [ABC] become B (or A or C)
-        $regex = preg_replace_callback('/\[([^\]]+)\]/', function ($matches) {
-            return Base::randomElement(str_split($matches[1]));
-        }, $regex);
+        $regex = preg_replace_callback(
+            '/\[([^\]]+)\]/', function ($matches) {
+                return Base::randomElement(str_split($matches[1]));
+            }, $regex
+        );
         // replace \d with number and \w with letter and . with ascii
         $regex = preg_replace_callback('/\\\w/', 'static::randomLetter', $regex);
         $regex = preg_replace_callback('/\\\d/', 'static::randomDigit', $regex);
@@ -507,7 +523,7 @@
     /**
      * Chainable method for making any formatter optional.
      *
-     * @param float|integer $weight Set the probability of receiving a null value.
+     * @param  float|integer $weight Set the probability of receiving a null value.
      *                              "0" will always return null, "1" will always return the generator.
      *                              If $weight is an integer value, then the same system works
      *                              between 0 (always get false) and 100 (always get true).
@@ -537,8 +553,8 @@
      * $faker->unique()->randomElement(array(1, 2, 3));
      * </code>
      *
-     * @param boolean $reset      If set to true, resets the list of existing values
-     * @param integer $maxRetries Maximum number of retries to find a unique value,
+     * @param  boolean $reset      If set to true, resets the list of existing values
+     * @param  integer $maxRetries Maximum number of retries to find a unique value,
      *                                       After which an OverflowException is thrown.
      * @throws \OverflowException When no unique value can be found by iterating $maxRetries times
      *
@@ -561,16 +577,16 @@
      * <code>
      * $values = array();
      * $evenValidator = function ($digit) {
-     * 	 return $digit % 2 === 0;
+     *      return $digit % 2 === 0;
      * };
      * for ($i=0; $i < 10; $i++) {
-     * 	 $values []= $faker->valid($evenValidator)->randomDigit;
+     *      $values []= $faker->valid($evenValidator)->randomDigit;
      * }
      * print_r($values); // [0, 4, 8, 4, 2, 6, 0, 8, 8, 6]
      * </code>
      *
-     * @param Closure $validator  A function returning true for valid values
-     * @param integer $maxRetries Maximum number of retries to find a unique value,
+     * @param  Closure $validator  A function returning true for valid values
+     * @param  integer $maxRetries Maximum number of retries to find a unique value,
      *                            After which an OverflowException is thrown.
      * @throws \OverflowException When no valid value can be found by iterating $maxRetries times
      *

--- vendor/fzaninotto/faker/src/Faker/Provider/bg_BG/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/Biased.php
+++ PHP_CodeSniffer
@@ -14,9 +14,9 @@
      * between $min and $max. Otherwise two new doubles are created until the pair
      * is accepted.
      *
-     * @param integer $min Minimum value of the generated integers.
-     * @param integer $max Maximum value of the generated integers.
-     * @param callable $function A function mapping x ∈ [0, 1] onto a double ∈ [0, 1]
+     * @param  integer  $min      Minimum value of the generated integers.
+     * @param  integer  $max      Maximum value of the generated integers.
+     * @param  callable $function A function mapping x ∈ [0, 1] onto a double ∈ [0, 1]
      * @return integer An integer between $min and $max.
      */
     public function biasedNumberBetween($min = 0, $max = 100, $function = 'sqrt')

--- vendor/fzaninotto/faker/src/Faker/Provider/cs_CZ/Company.php
+++ PHP_CodeSniffer
@@ -97,7 +97,7 @@
     /**
      * Generates valid czech IČO
      *
-     * @see http://phpfashion.com/jak-overit-platne-ic-a-rodne-cislo
+     * @see    http://phpfashion.com/jak-overit-platne-ic-a-rodne-cislo
      * @return string
      */
     public function ico()

--- vendor/fzaninotto/faker/src/Faker/Provider/cs_CZ/DateTime.php
+++ PHP_CodeSniffer
@@ -49,7 +49,8 @@
 
     /**
      * Full date with inflected month
-     * @return string
+     *
+     * @return  string
      * @example '16. listopadu 2003'
      */
     public function formattedDate()

--- vendor/fzaninotto/faker/src/Faker/Provider/cs_CZ/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/cs_CZ/Person.php
+++ PHP_CodeSniffer
@@ -428,8 +428,8 @@
     /**
      * @return czech birth number
      * @param string|null $gender 'male', 'female' or null for any
-     * @param int $minAge minimal age of "generated person" in years
-     * @param int $maxAge maximal age of "generated person" in years
+     * @param int         $minAge minimal age of "generated person" in years
+     * @param int         $maxAge maximal age of "generated person" in years
      */
 
     public function birthNumber($gender = null, $minAge = 0, $maxAge = 100, $slashProbability = 50)

--- vendor/fzaninotto/faker/src/Faker/Provider/da_DK/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/DateTime.php
+++ PHP_CodeSniffer
@@ -22,7 +22,7 @@
     /**
      * Get a timestamp between January 1, 1970 and now
      *
-     * @param \DateTime|int|string $max maximum timestamp used as random end limit, default to "now"
+     * @param  \DateTime|int|string $max maximum timestamp used as random end limit, default to "now"
      * @return int
      *
      * @example 1061306726
@@ -35,12 +35,12 @@
     /**
      * Get a datetime object for a date between January 1, 1970 and now
      *
-     * @param \DateTime|int|string $max maximum timestamp used as random end limit, default to "now"
-     * @param string $timezone time zone in which the date time should be set, default to result of `date_default_timezone_get`
+     * @param   \DateTime|int|string $max      maximum timestamp used as random end limit, default to "now"
+     * @param   string               $timezone time zone in which the date time should be set, default to result of `date_default_timezone_get`
      * @example DateTime('2005-08-16 20:39:21')
-     * @return \DateTime
-     * @see http://php.net/manual/en/timezones.php
-     * @see http://php.net/manual/en/function.date-default-timezone-get.php
+     * @return  \DateTime
+     * @see     http://php.net/manual/en/timezones.php
+     * @see     http://php.net/manual/en/function.date-default-timezone-get.php
      */
     public static function dateTime($max = 'now', $timezone = null)
     {
@@ -53,12 +53,12 @@
     /**
      * Get a datetime object for a date between January 1, 001 and now
      *
-     * @param \DateTime|int|string $max maximum timestamp used as random end limit, default to "now"
-     * @param string $timezone time zone in which the date time should be set, default to result of `date_default_timezone_get`
+     * @param   \DateTime|int|string $max      maximum timestamp used as random end limit, default to "now"
+     * @param   string               $timezone time zone in which the date time should be set, default to result of `date_default_timezone_get`
      * @example DateTime('1265-03-22 21:15:52')
-     * @return \DateTime
-     * @see http://php.net/manual/en/timezones.php
-     * @see http://php.net/manual/en/function.date-default-timezone-get.php
+     * @return  \DateTime
+     * @see     http://php.net/manual/en/timezones.php
+     * @see     http://php.net/manual/en/function.date-default-timezone-get.php
      */
     public static function dateTimeAD($max = 'now', $timezone = null)
     {
@@ -71,8 +71,8 @@
     /**
      * get a date string formatted with ISO8601
      *
-     * @param \DateTime|int|string $max maximum timestamp used as random end limit, default to "now"
-     * @return string
+     * @param   \DateTime|int|string $max maximum timestamp used as random end limit, default to "now"
+     * @return  string
      * @example '2003-10-21T16:05:52+0000'
      */
     public static function iso8601($max = 'now')
@@ -83,9 +83,9 @@
     /**
      * Get a date string between January 1, 1970 and now
      *
-     * @param string               $format
-     * @param \DateTime|int|string $max    maximum timestamp used as random end limit, default to "now"
-     * @return string
+     * @param   string               $format
+     * @param   \DateTime|int|string $max    maximum timestamp used as random end limit, default to "now"
+     * @return  string
      * @example '2008-11-27'
      */
     public static function date($format = 'Y-m-d', $max = 'now')
@@ -96,9 +96,9 @@
     /**
      * Get a time string (24h format by default)
      *
-     * @param string               $format
-     * @param \DateTime|int|string $max    maximum timestamp used as random end limit, default to "now"
-     * @return string
+     * @param   string               $format
+     * @param   \DateTime|int|string $max    maximum timestamp used as random end limit, default to "now"
+     * @return  string
      * @example '15:02:34'
      */
     public static function time($format = 'H:i:s', $max = 'now')
@@ -110,13 +110,13 @@
      * Get a DateTime object based on a random date between two given dates.
      * Accepts date strings that can be recognized by strtotime().
      *
-     * @param \DateTime|string $startDate Defaults to 30 years ago
-     * @param \DateTime|string $endDate   Defaults to "now"
-     * @param string $timezone time zone in which the date time should be set, default to result of `date_default_timezone_get`
+     * @param   \DateTime|string $startDate Defaults to 30 years ago
+     * @param   \DateTime|string $endDate   Defaults to "now"
+     * @param   string           $timezone  time zone in which the date time should be set, default to result of `date_default_timezone_get`
      * @example DateTime('1999-02-02 11:42:52')
-     * @return \DateTime
-     * @see http://php.net/manual/en/timezones.php
-     * @see http://php.net/manual/en/function.date-default-timezone-get.php
+     * @return  \DateTime
+     * @see     http://php.net/manual/en/timezones.php
+     * @see     http://php.net/manual/en/function.date-default-timezone-get.php
      */
     public static function dateTimeBetween($startDate = '-30 years', $endDate = 'now', $timezone = null)
     {
@@ -140,13 +140,13 @@
      * an interval
      * Accepts date string that can be recognized by strtotime().
      *
-     * @param string $date      Defaults to 30 years ago
-     * @param string $interval  Defaults to 5 days after
-     * @param string $timezone time zone in which the date time should be set, default to result of `date_default_timezone_get`
+     * @param   string $date     Defaults to 30 years ago
+     * @param   string $interval Defaults to 5 days after
+     * @param   string $timezone time zone in which the date time should be set, default to result of `date_default_timezone_get`
      * @example dateTimeInInterval('1999-02-02 11:42:52', '+ 5 days')
-     * @return \DateTime
-     * @see http://php.net/manual/en/timezones.php
-     * @see http://php.net/manual/en/function.date-default-timezone-get.php
+     * @return  \DateTime
+     * @see     http://php.net/manual/en/timezones.php
+     * @see     http://php.net/manual/en/function.date-default-timezone-get.php
      */
     public static function dateTimeInInterval($date = '-30 years', $interval = '+5 days', $timezone = null)
     {

--- vendor/fzaninotto/faker/src/Faker/Provider/de_AT/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/de_CH/Address.php
+++ PHP_CodeSniffer
@@ -120,8 +120,9 @@
 
     /**
      * Returns a random city name.
+     *
      * @example Luzern
-     * @return string
+     * @return  string
      */
     public function cityName()
     {
@@ -130,8 +131,9 @@
 
     /**
      * Returns a random street suffix.
+     *
      * @example str.
-     * @return string
+     * @return  string
      */
     public function streetSuffixShort()
     {
@@ -140,8 +142,9 @@
 
     /**
      * Returns a random street suffix.
+     *
      * @example Strasse
-     * @return string
+     * @return  string
      */
     public function streetSuffixLong()
     {
@@ -150,8 +153,9 @@
 
     /**
      * Returns a canton
+     *
      * @example array('BE' => 'Bern')
-     * @return array
+     * @return  array
      */
     public static function canton()
     {
@@ -160,6 +164,7 @@
 
     /**
      * Returns the abbreviation of a canton.
+     *
      * @return string
      */
     public static function cantonShort()
@@ -170,6 +175,7 @@
 
     /**
      * Returns the name of canton.
+     *
      * @return string
      */
     public static function cantonName()

--- vendor/fzaninotto/faker/src/Faker/Provider/de_CH/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/de_DE/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/el_GR/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/el_GR/Text.php
+++ PHP_CodeSniffer
@@ -23,8 +23,8 @@
      *
      * @licence Creative Commons Attribution-ShareAlike https://creativecommons.org/licenses/by-sa/3.0/deed.el
      *
-     * @see     https://wikimediafoundation.org/wiki/Terms_of_Use/
-     * @link    https://el.wikisource.org/wiki/%CE%A4%CF%81%CE%B5%CE%BB%CE%B1%CE%BD%CF%84%CF%8E%CE%BD%CE%B7%CF%82
+     * @see  https://wikimediafoundation.org/wiki/Terms_of_Use/
+     * @link https://el.wikisource.org/wiki/%CE%A4%CF%81%CE%B5%CE%BB%CE%B1%CE%BD%CF%84%CF%8E%CE%BD%CE%B7%CF%82
      *
      * @var string
      */

--- vendor/fzaninotto/faker/src/Faker/Provider/en_AU/Address.php
+++ PHP_CodeSniffer
@@ -4,7 +4,8 @@
 
 /**
  * Class Address
- * @see http://www.ipaustralia.gov.au/about-us/corporate/address-standards/
+ *
+ * @see     http://www.ipaustralia.gov.au/about-us/corporate/address-standards/
  * @package Faker\Provider\en_AU
  */
 class Address extends \Faker\Provider\en_US\Address
@@ -74,6 +75,7 @@
 
     /**
      * Returns a sane building letter
+     *
      * @example B
      */
     public static function buildingLetter()
@@ -83,6 +85,7 @@
 
     /**
      * Returns a sane city prefix
+     *
      * @example West
      */
     public static function cityPrefix()
@@ -92,6 +95,7 @@
 
     /**
      * Returns a sane street suffix
+     *
      * @example Beach
      */
     public static function streetSuffix()
@@ -101,6 +105,7 @@
 
     /**
      * Returns a sane state
+     *
      * @example New South Wales
      */
     public static function state()

--- vendor/fzaninotto/faker/src/Faker/Provider/en_CA/Address.php
+++ PHP_CodeSniffer
@@ -42,6 +42,7 @@
 
     /**
      * Returns a postalcode-safe letter
+     *
      * @example A1B 2C3
      */
     public static function randomPostcodeLetter()

--- vendor/fzaninotto/faker/src/Faker/Provider/en_GB/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/en_GB/PhoneNumber.php
+++ PHP_CodeSniffer
@@ -23,6 +23,7 @@
 
     /**
      * An array of en_GB mobile (cell) phone number formats
+     *
      * @var array
      */
     protected static $mobileFormats = array(
@@ -34,6 +35,7 @@
 
     /**
      * Return a en_GB mobile phone number
+     *
      * @return string
      */
     public static function mobileNumber()

--- vendor/fzaninotto/faker/src/Faker/Provider/en_IN/PhoneNumber.php
+++ PHP_CodeSniffer
@@ -13,6 +13,7 @@
 
     /**
      * An array of en_IN mobile (cell) phone number formats
+     *
      * @var array
      */
     protected static $mobileFormats = array(
@@ -26,6 +27,7 @@
 
     /**
      * Return a en_IN mobile phone number
+     *
      * @return string
      */
     public static function mobileNumber()

--- vendor/fzaninotto/faker/src/Faker/Provider/en_NZ/Address.php
+++ PHP_CodeSniffer
@@ -7,12 +7,14 @@
 
     /**
      * An array of en_NZ (New Zealand) building number formats
+     *
      * @var array
      */
     protected static $buildingNumber = array('#', '##', '###');
 
     /**
      * An array of en_NZ (New Zealand) street suffixes
+     *
      * @var array
      */
     protected static $streetSuffix = array(
@@ -21,18 +23,21 @@
 
     /**
      * City suffixes
+     *
      * @var array
      */
     protected static $citySuffix = array('ville', 'ston');
 
     /**
      * City formats
+     *
      * @var array
      */
     protected static $cityFormats = array('{{firstName}}{{citySuffix}}');
 
     /**
      * An array of en_NZ (New Zealand) regions
+     *
      * @see http://en.wikipedia.org/wiki/Regions_of_New_Zealand
      * @var array
      */
@@ -42,24 +47,28 @@
 
     /**
      * An array of en_NZ (New Zealand) poscode formats
+     *
      * @var array
      */
     protected static $postcode = array('####');
 
     /**
      * An array of en_NZ (New Zealand) address formats
+     *
      * @var array
      */
     protected static $addressFormats = array('{{buildingNumber}} {{streetName}}, {{city}}, {{region}}, {{postcode}}');
 
     /**
      * An array of en_NZ (New Zealand) street address formats
+     *
      * @var array
      */
     protected static $streetAddressFormats = array('{{buildingNumber}} {{streetName}}');
 
     /**
      * Return a en_NZ (New Zealand) postcode
+     *
      * @return string
      */
     public static function postcode()
@@ -69,6 +78,7 @@
 
     /**
      * Return a en_NZ (New Zealand) region
+     *
      * @return string
      */
     public static function region()

--- vendor/fzaninotto/faker/src/Faker/Provider/en_NZ/Internet.php
+++ PHP_CodeSniffer
@@ -6,6 +6,7 @@
 {
     /**
      * An array of common en_NZ (New Zeland) TLD's
+     *
      * @var array
      */
     protected static $tld = array(

--- vendor/fzaninotto/faker/src/Faker/Provider/en_NZ/PhoneNumber.php
+++ PHP_CodeSniffer
@@ -6,6 +6,7 @@
 {
     /**
      * An array of en_NZ landline phone number formats
+     *
      * @var array
      */
     protected static $formats = array(
@@ -16,6 +17,7 @@
 
     /**
      * An array of en_NZ mobile (cell) phone number formats
+     *
      * @var array
      */
     protected static $mobileFormats = array(
@@ -28,6 +30,7 @@
 
     /**
      * An array of toll free phone number formats
+     *
      * @var array
      */
     protected static $tollFreeFormats = array(
@@ -41,6 +44,7 @@
 
     /**
      * An array of en_NZ landline area codes
+     *
      * @var array
      */
     protected static $areaCodes = array(
@@ -49,6 +53,7 @@
 
     /**
      * An array of en_NZ landline beginning numbers
+     *
      * @var array
      */
     protected static $beginningNumbers = array(
@@ -57,6 +62,7 @@
 
     /**
      * Return a en_NZ mobile phone number
+     *
      * @return string
      */
     public static function mobileNumber()
@@ -66,6 +72,7 @@
 
     /**
      * Return a en_NZ toll free phone number
+     *
      * @return string
      */
     public static function tollFreeNumber()
@@ -75,6 +82,7 @@
 
     /**
      * Return a en_NZ landline area code
+     *
      * @return string
      */
     public static function areaCode()
@@ -84,6 +92,7 @@
 
     /**
      * Return a en_NZ landline beginning number
+     *
      * @return string
      */
     public static function beginningNumber()

--- vendor/fzaninotto/faker/src/Faker/Provider/en_PH/PhoneNumber.php
+++ PHP_CodeSniffer
@@ -42,6 +42,7 @@
 
     /**
      * Return a en_PH mobile phone number
+     *
      * @return string
      */
     public static function mobileNumber()

--- vendor/fzaninotto/faker/src/Faker/Provider/en_ZA/PhoneNumber.php
+++ PHP_CodeSniffer
@@ -37,24 +37,24 @@
     {
         $digits[] = self::numberBetween(1, 5);
         switch ($digits[0]) {
-            case 1:
-                $digits[] = self::numberBetween(1, 8);
-                break;
-            case 2:
-                $number = self::numberBetween(1, 8);
-                $digits[] = in_array($number, array(5, 6)) ? $number + 2 : $number;
-                break;
-            case 3:
-                $number = self::numberBetween(1, 8);
-                $digits[] = in_array($number, array(7, 8)) ? $number - 2 : $number;
-                break;
-            case 4:
-                $digits[] = self::numberBetween(1, 9);
-                break;
-            case 5:
-                $number = self::numberBetween(1, 8);
-                $digits[] = in_array($number, array(2, 5)) ? $number + 2 : $number;
-                break;
+        case 1:
+            $digits[] = self::numberBetween(1, 8);
+            break;
+        case 2:
+            $number = self::numberBetween(1, 8);
+            $digits[] = in_array($number, array(5, 6)) ? $number + 2 : $number;
+            break;
+        case 3:
+            $number = self::numberBetween(1, 8);
+            $digits[] = in_array($number, array(7, 8)) ? $number - 2 : $number;
+            break;
+        case 4:
+            $digits[] = self::numberBetween(1, 9);
+            break;
+        case 5:
+            $number = self::numberBetween(1, 8);
+            $digits[] = in_array($number, array(2, 5)) ? $number + 2 : $number;
+            break;
         }
 
         return implode('', $digits);
@@ -64,16 +64,16 @@
     {
         $digits[] = self::numberBetween(6, 8);
         switch ($digits[0]) {
-            case 6:
-                $digits[] = self::numberBetween(0, 2);
-                break;
-            case 7:
-                $number = self::numberBetween(1, 9);
-                $digits[] = in_array($number, array(5, 7)) ? $number + 1 : $number;
-                break;
-            case 8:
-                $digits[] = self::numberBetween(1, 9);
-                break;
+        case 6:
+            $digits[] = self::numberBetween(0, 2);
+            break;
+        case 7:
+            $number = self::numberBetween(1, 9);
+            $digits[] = in_array($number, array(5, 7)) ? $number + 1 : $number;
+            break;
+        case 8:
+            $digits[] = self::numberBetween(1, 9);
+            break;
         }
 
         return implode('', $digits);

--- vendor/fzaninotto/faker/src/Faker/Provider/es_ES/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/es_VE/Person.php
+++ PHP_CodeSniffer
@@ -6,6 +6,7 @@
 {
     /**
      * CNE is the official national election registry org.
+     *
      * @link http://www.cne.gob.ve/web/registro_electoral/ciudadanos_111_129_2011.php
      */
     protected static $maleNameFormats = array(
@@ -19,6 +20,7 @@
 
     /**
      * CNE is the official national election registry org.
+     *
      * @link http://www.cne.gob.ve/web/registro_electoral/ciudadanos_111_129_2011.php
      */
     protected static $femaleNameFormats = array(
@@ -32,6 +34,7 @@
 
     /**
      * CNE is the official national election registry org.
+     *
      * @link http://www.cne.gob.ve/web/registro_electoral/ciudadanos_111_129_2011.php
      */
     protected static $firstNameMale = array(
@@ -47,6 +50,7 @@
 
     /**
      * CNE is the official national election registry org.
+     *
      * @link http://www.cne.gob.ve/web/registro_electoral/ciudadanos_111_129_2011.php
      */
     protected static $firstNameFemale = array(
@@ -63,6 +67,7 @@
 
     /**
      * CNE is the official national election registry org.
+     *
      * @link http://www.cne.gob.ve/web/registro_electoral/ciudadanos_111_129_2011.php
      */
     protected static $lastName = array(
@@ -148,6 +153,7 @@
 
     /**
      * Generate random national identification number. Ex V-8756432
+     *
      * @return string
      */
     public function nationalId()

--- vendor/fzaninotto/faker/src/Faker/Provider/fa_IR/Text.php
+++ PHP_CodeSniffer
@@ -8,10 +8,10 @@
      * generates text string in arabic
      *
      * @example 'از تاریخ‌الشعرا را بکوبند روی نبش دیوار کوچه‌شان. تابلوی مدرسه.'
-     * @param  integer                   $maxNbChars
-     * @param  integer                   $indexSize
-     * @return string
-     * @throws \InvalidArgumentException
+     * @param   integer $maxNbChars
+     * @param   integer $indexSize
+     * @return  string
+     * @throws  \InvalidArgumentException
      */
     public function realText($maxNbChars = 200, $indexSize = 2)
     {

--- vendor/fzaninotto/faker/src/Faker/Provider/File.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * MIME types from the apache.org file. Some types are truncated.
      *
-     * @var array Map of MIME types => file extension(s)
+     * @var  array Map of MIME types => file extension(s)
      * @link http://svn.apache.org/repos/asf/httpd/httpd/trunk/docs/conf/mime.types
      */
     protected static $mimeTypes = array(
@@ -540,7 +540,7 @@
     /**
      * Get a random MIME type
      *
-     * @return string
+     * @return  string
      * @example 'video/avi'
      */
     public static function mimeType()
@@ -552,7 +552,7 @@
      * Get a random file extension (without a dot)
      *
      * @example avi
-     * @return string
+     * @return  string
      */
     public static function fileExtension()
     {
@@ -584,9 +584,11 @@
         }
 
         // Drop . and .. and reset array keys
-        $files = array_filter(array_values(array_diff(scandir($sourceDirectory), array('.', '..'))), function ($file) use ($sourceDirectory) {
-            return is_file($sourceDirectory . DIRECTORY_SEPARATOR . $file) && is_readable($sourceDirectory . DIRECTORY_SEPARATOR . $file);
-        });
+        $files = array_filter(
+            array_values(array_diff(scandir($sourceDirectory), array('.', '..'))), function ($file) use ($sourceDirectory) {
+                return is_file($sourceDirectory . DIRECTORY_SEPARATOR . $file) && is_readable($sourceDirectory . DIRECTORY_SEPARATOR . $file);
+            }
+        );
 
         if (empty($files)) {
             throw new \InvalidArgumentException(sprintf('Source directory %s is empty.', $sourceDirectory));

--- vendor/fzaninotto/faker/src/Faker/Provider/fr_BE/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/fr_CH/Address.php
+++ PHP_CodeSniffer
@@ -90,8 +90,9 @@
 
     /**
      * Returns a random street prefix
+     *
      * @example Rue
-     * @return string
+     * @return  string
      */
     public static function streetPrefix()
     {
@@ -100,8 +101,9 @@
 
     /**
      * Returns a random city name.
+     *
      * @example Luzern
-     * @return string
+     * @return  string
      */
     public function cityName()
     {
@@ -110,8 +112,9 @@
 
     /**
      * Returns a canton
+     *
      * @example array('BE' => 'Bern')
-     * @return array
+     * @return  array
      */
     public static function canton()
     {
@@ -120,6 +123,7 @@
 
     /**
      * Returns the abbreviation of a canton.
+     *
      * @return string
      */
     public static function cantonShort()
@@ -130,6 +134,7 @@
 
     /**
      * Returns the name of canton.
+     *
      * @return string
      */
     public static function cantonName()

--- vendor/fzaninotto/faker/src/Faker/Provider/fr_CH/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/fr_FR/Company.php
+++ PHP_CodeSniffer
@@ -107,7 +107,7 @@
     /**
      * Generates a siret number (14 digits) that passes the Luhn check.
      *
-     * @see http://fr.wikipedia.org/wiki/Syst%C3%A8me_d'identification_du_r%C3%A9pertoire_des_%C3%A9tablissements
+     * @see    http://fr.wikipedia.org/wiki/Syst%C3%A8me_d'identification_du_r%C3%A9pertoire_des_%C3%A9tablissements
      * @return string
      */
     public function siret($formatted = true)
@@ -126,7 +126,7 @@
     /**
      * Generates a siren number (9 digits) that passes the Luhn check.
      *
-     * @see http://fr.wikipedia.org/wiki/Syst%C3%A8me_d%27identification_du_r%C3%A9pertoire_des_entreprises
+     * @see    http://fr.wikipedia.org/wiki/Syst%C3%A8me_d%27identification_du_r%C3%A9pertoire_des_entreprises
      * @return string
      */
     public function siren($formatted = true)

--- vendor/fzaninotto/faker/src/Faker/Provider/fr_FR/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/hu_HU/Address.php
+++ PHP_CodeSniffer
@@ -71,7 +71,7 @@
      * Coordinates inside the border of Hungary
      *
      * @example array('47.049242', '18.355119')
-     * @return array | latitude, longitude
+     * @return  array | latitude, longitude
      */
     public static function localCoordinates()
     {

--- vendor/fzaninotto/faker/src/Faker/Provider/hu_HU/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/hu_HU/Text.php
+++ PHP_CodeSniffer
@@ -5,7 +5,6 @@
 class Text extends \Faker\Provider\Text
 {
     /**
-     *
      * Author: Rejtő Jenő
      * Title: Piszkos Fred, a kapitány
      *

--- vendor/fzaninotto/faker/src/Faker/Provider/id_ID/Address.php
+++ PHP_CodeSniffer
@@ -86,6 +86,7 @@
     /**
      * Abbreviated State Names.
      * Currently this is all just a guesswork, but should be highly accurate
+     *
      * @var array
      */
     protected static $stateAbbr = array(

--- vendor/fzaninotto/faker/src/Faker/Provider/id_ID/Person.php
+++ PHP_CodeSniffer
@@ -195,6 +195,7 @@
 
     /**
      * For academic title
+     *
      * @link http://id.wikipedia.org/wiki/Gelar_akademik
      */
     private static $suffix = array('S.Ked', 'S.Gz', 'S.Pt', 'S.IP', 'S.E.I',

--- vendor/fzaninotto/faker/src/Faker/Provider/is_IS/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/it_CH/Address.php
+++ PHP_CodeSniffer
@@ -89,8 +89,9 @@
 
     /**
      * Returns a random street prefix
+     *
      * @example Via
-     * @return string
+     * @return  string
      */
     public static function streetPrefix()
     {
@@ -99,8 +100,9 @@
 
     /**
      * Returns a random city name.
+     *
      * @example Luzern
-     * @return string
+     * @return  string
      */
     public function cityName()
     {
@@ -109,8 +111,9 @@
 
     /**
      * Returns a canton
+     *
      * @example array('BE' => 'Bern')
-     * @return array
+     * @return  array
      */
     public static function canton()
     {
@@ -119,6 +122,7 @@
 
     /**
      * Returns the abbreviation of a canton.
+     *
      * @return string
      */
     public static function cantonShort()
@@ -129,6 +133,7 @@
 
     /**
      * Returns the name of canton.
+     *
      * @return string
      */
     public static function cantonName()

--- vendor/fzaninotto/faker/src/Faker/Provider/it_CH/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/it_IT/Company.php
+++ PHP_CodeSniffer
@@ -64,7 +64,8 @@
 
     /**
      * Italian VAT number (Partita iva)
-     * @link https://it.wikipedia.org/wiki/Partita_IVA
+     *
+     * @link   https://it.wikipedia.org/wiki/Partita_IVA
      * @return string
      */
     public static function vatId()

--- vendor/fzaninotto/faker/src/Faker/Provider/it_IT/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/it_IT/Person.php
+++ PHP_CodeSniffer
@@ -88,7 +88,8 @@
 
     /**
      * TaxCode (CodiceFiscale)
-     * @link https://it.wikipedia.org/wiki/Codice_fiscale
+     *
+     * @link   https://it.wikipedia.org/wiki/Codice_fiscale
      * @return string
      */
     public static function taxId()

--- vendor/fzaninotto/faker/src/Faker/Provider/ka_GE/Payment.php
+++ PHP_CodeSniffer
@@ -40,7 +40,8 @@
 
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/kk_KZ/Payment.php
+++ PHP_CodeSniffer
@@ -20,7 +20,8 @@
 
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/kk_KZ/Text.php
+++ PHP_CodeSniffer
@@ -21,7 +21,7 @@
      * @licence Creative Commons Attribution-ShareAlike http://creativecommons.org/licenses/by-sa/3.0/deed.ru
      * @see     https://wikimediafoundation.org/wiki/Terms_of_Use/
      * @link    http://ru.wikipedia.org/wiki/%D0%92%D0%B8%D0%BA%D0%B8%D0%BF%D0%B5%D0%B4%D0%B8%D1%8F:%D0%A2%D0%B5%D0%BA%D1%81%D1%82_%D0%BB%D0%B8%D1%86%D0%B5%D0%BD%D0%B7%D0%B8%D0%B8_Creative_Commons_Attribution-ShareAlike_3.0_Unported
-     * @var string
+     * @var     string
      */
     protected static $baseText = <<<'EOT'
 Арыстан баб кесенесі - көне Отырар жеріндегі сәулет өнері ескерткіші.

--- vendor/fzaninotto/faker/src/Faker/Provider/ko_KR/Text.php
+++ PHP_CodeSniffer
@@ -16,7 +16,7 @@
      * @licence https://creativecommons.org/licenses/by-sa/3.0/deed.ko
      * @see     https://wikimediafoundation.org/wiki/Terms_of_Use/
      * @link    https://ko.wikisource.org/wiki/유정
-     * @var string
+     * @var     string
      */
     protected static $baseText = <<<'EOT'
 최석(崔晳)으로부터 최후의 편지가 온 지가 벌써 일 년이 지났다. 그는 바이칼 호수에 몸을 던져 버렸는가. 또는 시베리아 어느 으슥한 곳에 숨어서 세상을 잊고 있는가. 또 최석의 뒤를 따라간다고 북으로 한정 없이 가 버린 남정임(南貞妊)도 어찌 되었는지, 이 글을 쓰기 시작할 이 때까지에는 아직 소식이 없다. 나는 이 두 사람의 일을 알아보려고 하얼빈, 치치하얼, 치타, 이르쿠츠크에 있는 친구들한테 편지를 부쳐 탐문도 해 보았으나 그 회답은 다 `모른다'는 것뿐이었다. 모스크바에도 두어 번 편지를 띄워 보았으나 역시 마찬가지로 모른다는 회답뿐이었다.

--- vendor/fzaninotto/faker/src/Faker/Provider/Lorem.php
+++ PHP_CodeSniffer
@@ -57,9 +57,9 @@
      * Generate an array of random words
      *
      * @example array('Lorem', 'ipsum', 'dolor')
-     * @param  integer      $nb     how many words to return
-     * @param  bool         $asText if true the sentences are returned as one string
-     * @return array|string
+     * @param   integer $nb     how many words to return
+     * @param   bool    $asText if true the sentences are returned as one string
+     * @return  array|string
      */
     public static function words($nb = 3, $asText = false)
     {
@@ -75,10 +75,10 @@
      * Generate a random sentence
      *
      * @example 'Lorem ipsum dolor sit amet.'
-     * @param integer $nbWords         around how many words the sentence should contain
-     * @param boolean $variableNbWords set to false if you want exactly $nbWords returned,
+     * @param   integer $nbWords         around how many words the sentence should contain
+     * @param   boolean $variableNbWords set to false if you want exactly $nbWords returned,
      *                                  otherwise $nbWords may vary by +/-40% with a minimum of 1
-     * @return string
+     * @return  string
      */
     public static function sentence($nbWords = 6, $variableNbWords = true)
     {
@@ -99,9 +99,9 @@
      * Generate an array of sentences
      *
      * @example array('Lorem ipsum dolor sit amet.', 'Consectetur adipisicing eli.')
-     * @param  integer      $nb     how many sentences to return
-     * @param  bool         $asText if true the sentences are returned as one string
-     * @return array|string
+     * @param   integer $nb     how many sentences to return
+     * @param   bool    $asText if true the sentences are returned as one string
+     * @return  array|string
      */
     public static function sentences($nb = 3, $asText = false)
     {
@@ -117,10 +117,10 @@
      * Generate a single paragraph
      *
       * @example 'Sapiente sunt omnis. Ut pariatur ad autem ducimus et. Voluptas rem voluptas sint modi dolorem amet.'
-     * @param integer $nbSentences         around how many sentences the paragraph should contain
-     * @param boolean $variableNbSentences set to false if you want exactly $nbSentences returned,
+     * @param   integer $nbSentences         around how many sentences the paragraph should contain
+     * @param   boolean $variableNbSentences set to false if you want exactly $nbSentences returned,
      *                                      otherwise $nbSentences may vary by +/-40% with a minimum of 1
-     * @return string
+     * @return  string
      */
     public static function paragraph($nbSentences = 3, $variableNbSentences = true)
     {
@@ -138,9 +138,9 @@
      * Generate an array of paragraphs
      *
      * @example array($paragraph1, $paragraph2, $paragraph3)
-     * @param  integer      $nb     how many paragraphs to return
-     * @param  bool         $asText if true the paragraphs are returned as one string, separated by two newlines
-     * @return array|string
+     * @param   integer $nb     how many paragraphs to return
+     * @param   bool    $asText if true the paragraphs are returned as one string, separated by two newlines
+     * @return  array|string
      */
     public static function paragraphs($nb = 3, $asText = false)
     {
@@ -157,8 +157,8 @@
      * Depending on the $maxNbChars, returns a string made of words, sentences, or paragraphs.
      *
       * @example 'Sapiente sunt omnis. Ut pariatur ad autem ducimus et. Voluptas rem voluptas sint modi dolorem amet.'
-     * @param  integer $maxNbChars Maximum number of characters the text should contain (minimum 5)
-     * @return string
+     * @param   integer $maxNbChars Maximum number of characters the text should contain (minimum 5)
+     * @return  string
      */
     public static function text($maxNbChars = 200)
     {

--- vendor/fzaninotto/faker/src/Faker/Provider/lt_LT/Person.php
+++ PHP_CodeSniffer
@@ -249,7 +249,8 @@
 
     /**
      * Return male last name
-     * @return string
+     *
+     * @return  string
      * @example 'Vasiliauskas'
      */
     public function lastNameMale()
@@ -259,7 +260,8 @@
 
     /**
      * Return female last name
-     * @return string
+     *
+     * @return  string
      * @example 'Žukauskaitė'
      */
     public function lastNameFemale()
@@ -269,7 +271,8 @@
 
     /**
      * Return driver license number
-     * @return string
+     *
+     * @return  string
      * @example 12345678
      */
     public function driverLicence()
@@ -279,7 +282,8 @@
 
     /**
      * Return passport number
-     * @return string
+     *
+     * @return  string
      * @example 12345678
      */
     public function passportNumber()
@@ -289,11 +293,12 @@
 
     /**
      * National Personal Identity number (asmens kodas)
-     * @link https://en.wikipedia.org/wiki/National_identification_number#Lithuania
-     * @link https://lt.wikipedia.org/wiki/Asmens_kodas
-     * @param string [male|female]
-     * @param \DateTime $birthdate
-     * @param string $randomNumber three integers
+     *
+     * @link   https://en.wikipedia.org/wiki/National_identification_number#Lithuania
+     * @link   https://lt.wikipedia.org/wiki/Asmens_kodas
+     * @param  string [male|female]
+     * @param  \DateTime            $birthdate
+     * @param  string               $randomNumber three integers
      * @return string on format XXXXXXXXXXX
      */
     public function personalIdentityNumber($gender = 'male', \DateTime $birthdate = null, $randomNumber = '')
@@ -326,10 +331,11 @@
 
     /**
      * Calculate the sum of personal code
-     * @link https://en.wikipedia.org/wiki/National_identification_number#Lithuania
-     * @link https://lt.wikipedia.org/wiki/Asmens_kodas
-     * @param string $numbers
-     * @param int $time [1|2]
+     *
+     * @link   https://en.wikipedia.org/wiki/National_identification_number#Lithuania
+     * @link   https://lt.wikipedia.org/wiki/Asmens_kodas
+     * @param  string $numbers
+     * @param  int    $time    [1|2]
      * @return int
      */
     private static function calculateSum($numbers, $time = 1)

--- vendor/fzaninotto/faker/src/Faker/Provider/lv_LV/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/lv_LV/Person.php
+++ PHP_CodeSniffer
@@ -108,8 +108,9 @@
 
     /**
      * National Personal Identity number (personas kods)
-     * @link https://en.wikipedia.org/wiki/National_identification_number#Latvia
-     * @param \DateTime $birthdate
+     *
+     * @link   https://en.wikipedia.org/wiki/National_identification_number#Latvia
+     * @param  \DateTime $birthdate
      * @return string on format XXXXXX-XXXXX
      */
     public function personalIdentityNumber(\DateTime $birthdate = null)

--- vendor/fzaninotto/faker/src/Faker/Provider/me_ME/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/Miscellaneous.php
+++ PHP_CodeSniffer
@@ -204,8 +204,8 @@
     /**
      * Return a boolean, true or false
      *
-     * @param integer $chanceOfGettingTrue Between 0 (always get false) and 100 (always get true).
-     * @return bool
+     * @param   integer $chanceOfGettingTrue Between 0 (always get false) and 100 (always get true).
+     * @return  bool
      * @example true
      */
     public static function boolean($chanceOfGettingTrue = 50)

--- vendor/fzaninotto/faker/src/Faker/Provider/nb_NO/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/nb_NO/Person.php
+++ PHP_CodeSniffer
@@ -282,9 +282,10 @@
 
     /**
     * National Personal Identity number (personnummer)
-    * @link https://no.wikipedia.org/wiki/Personnummer
-    * @param \DateTime $birthdate
-    * @param string $gender Person::GENDER_MALE || Person::GENDER_FEMALE
+     *
+    * @link   https://no.wikipedia.org/wiki/Personnummer
+    * @param  \DateTime $birthdate
+    * @param  string    $gender    Person::GENDER_MALE || Person::GENDER_FEMALE
     * @return string on format DDMMYY#####
     */
     public function personalIdentityNumber(\DateTime $birthdate = null, $gender = null)
@@ -301,14 +302,14 @@
         $randomDigits = (string)static::numerify('##');
 
         switch($gender) {
-            case static::GENDER_MALE:
-                $genderDigit = static::randomElement(array(1,3,5,7,9));
-                break;
-            case static::GENDER_FEMALE:
-                $genderDigit = static::randomElement(array(0,2,4,6,8));
-                break;
-            default:
-                $genderDigit = (string)static::numerify('#');
+        case static::GENDER_MALE:
+            $genderDigit = static::randomElement(array(1,3,5,7,9));
+            break;
+        case static::GENDER_FEMALE:
+            $genderDigit = static::randomElement(array(0,2,4,6,8));
+            break;
+        default:
+            $genderDigit = (string)static::numerify('#');
         }
 
 

--- vendor/fzaninotto/faker/src/Faker/Provider/nl_BE/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/nl_NL/Company.php
+++ PHP_CodeSniffer
@@ -20,7 +20,6 @@
      *
      * @see (dutch) http://www.belastingdienst.nl/wps/wcm/connect/bldcontentnl/belastingdienst/zakelijk/btw/administratie_bijhouden/btw_nummers_controleren/uw_btw_nummer
      *
-     *
      * @return string VAT Number
      */
     public static function vat()

--- vendor/fzaninotto/faker/src/Faker/Provider/nl_NL/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/Payment.php
+++ PHP_CodeSniffer
@@ -133,9 +133,9 @@
     /**
      * Returns the String of a credit card number.
      *
-     * @param string  $type      Supporting any of 'Visa', 'MasterCard', 'American Express', and 'Discover'
-     * @param boolean $formatted Set to true if the output string should contain one separator every 4 digits
-     * @param string  $separator Separator string for formatting card number. Defaults to dash (-).
+     * @param  string  $type      Supporting any of 'Visa', 'MasterCard', 'American Express', and 'Discover'
+     * @param  boolean $formatted Set to true if the output string should contain one separator every 4 digits
+     * @param  string  $separator Separator string for formatting card number. Defaults to dash (-).
      * @return string
      *
      * @example '4485480221084675'
@@ -205,7 +205,7 @@
     /**
      * International Bank Account Number (IBAN)
      *
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  integer $length      total length without country code and 2 check digits
@@ -241,16 +241,16 @@
         $expandedFormat = substr($expandedFormat, strlen($result));
         foreach (str_split($expandedFormat) as $class) {
             switch ($class) {
-                default:
-                case 'c':
-                    $result .= mt_rand(0, 100) <= 50 ? static::randomDigit() : strtoupper(static::randomLetter());
-                    break;
-                case 'a':
-                    $result .= strtoupper(static::randomLetter());
-                    break;
-                case 'n':
-                    $result .= static::randomDigit();
-                    break;
+            default:
+            case 'c':
+                $result .= mt_rand(0, 100) <= 50 ? static::randomDigit() : strtoupper(static::randomLetter());
+                break;
+            case 'a':
+                $result .= strtoupper(static::randomLetter());
+                break;
+            case 'n':
+                $result .= static::randomDigit();
+                break;
             }
         }
 

--- vendor/fzaninotto/faker/src/Faker/Provider/PhoneNumber.php
+++ PHP_CodeSniffer
@@ -29,10 +29,10 @@
     /**
      * International Mobile Equipment Identity (IMEI)
      *
-     * @link http://en.wikipedia.org/wiki/International_Mobile_Station_Equipment_Identity
-     * @link http://imei-number.com/imei-validation-check/
+     * @link    http://en.wikipedia.org/wiki/International_Mobile_Station_Equipment_Identity
+     * @link    http://imei-number.com/imei-validation-check/
      * @example '720084494799532'
-     * @return int $imei
+     * @return  int $imei
      */
     public function imei()
     {

--- vendor/fzaninotto/faker/src/Faker/Provider/pl_PL/Company.php
+++ PHP_CodeSniffer
@@ -55,7 +55,8 @@
 
     /**
      * Register of the National Economy, local entity number
-     * @link http://pl.wikipedia.org/wiki/REGON
+     *
+     * @link   http://pl.wikipedia.org/wiki/REGON
      * @return 14 digit number
      */
     public static function regonLocal()

--- vendor/fzaninotto/faker/src/Faker/Provider/pl_PL/Payment.php
+++ PHP_CodeSniffer
@@ -92,7 +92,8 @@
 
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/pl_PL/Person.php
+++ PHP_CodeSniffer
@@ -4,6 +4,7 @@
 
 /**
  * Most popular first and last names published by Ministry of the Interior:
+ *
  * @link https://msw.gov.pl/pl/sprawy-obywatelskie/ewidencja-ludnosci-dowo/statystyki-imion-i-nazw
  */
 class Person extends \Faker\Provider\Person
@@ -80,7 +81,6 @@
     );
 
     /**
-     *
      * Unisex academic degree
      *
      * @var string
@@ -135,7 +135,8 @@
 
     /**
      * PESEL - Universal Electronic System for Registration of the Population
-     * @link http://en.wikipedia.org/wiki/PESEL
+     *
+     * @link   http://en.wikipedia.org/wiki/PESEL
      * @param  DateTime $birthdate
      * @param  string   $sex       M for male or F for female
      * @return string   11 digit number, like 44051401358
@@ -176,7 +177,8 @@
 
     /**
      * National Identity Card number
-     * @link http://en.wikipedia.org/wiki/Polish_National_Identity_Card
+     *
+     * @link   http://en.wikipedia.org/wiki/Polish_National_Identity_Card
      * @return string 3 letters and 6 digits, like ABA300000
      */
     public static function personalIdentityNumber()
@@ -199,8 +201,9 @@
 
     /**
      * Taxpayer Identification Number (NIP in Polish)
-     * @link http://en.wikipedia.org/wiki/PESEL#Other_identifiers
-     * @link http://pl.wikipedia.org/wiki/NIP
+     *
+     * @link   http://en.wikipedia.org/wiki/PESEL#Other_identifiers
+     * @link   http://pl.wikipedia.org/wiki/NIP
      * @return string 10 digit number
      */
     public static function taxpayerIdentificationNumber()

--- vendor/fzaninotto/faker/src/Faker/Provider/pt_BR/check_digit.php
+++ PHP_CodeSniffer
@@ -4,11 +4,12 @@
 
 /**
  * Calculates one MOD 11 check digit based on customary Brazilian algorithms.
+ *
  * @link http://en.wikipedia.org/wiki/Check_digit
  * @link http://pt.wikipedia.org/wiki/CNPJ#Algoritmo_de_Valida.C3.A7.C3.A3o
  * @link http://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas#Validation
  *
- * @param string|integer $numbers Numbers on which generate the check digit
+ * @param  string|integer $numbers Numbers on which generate the check digit
  * @return integer
  */
 function check_digit($numbers)

--- vendor/fzaninotto/faker/src/Faker/Provider/pt_BR/Company.php
+++ PHP_CodeSniffer
@@ -18,8 +18,9 @@
 
     /**
      * A random CNPJ number.
-     * @link http://en.wikipedia.org/wiki/CNPJ
-     * @param bool $formatted If the number should have dots/slashes/dashes or not.
+     *
+     * @link   http://en.wikipedia.org/wiki/CNPJ
+     * @param  bool $formatted If the number should have dots/slashes/dashes or not.
      * @return string
      */
     public function cnpj($formatted = true)

--- vendor/fzaninotto/faker/src/Faker/Provider/pt_BR/Payment.php
+++ PHP_CodeSniffer
@@ -59,7 +59,8 @@
 
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/pt_BR/Person.php
+++ PHP_CodeSniffer
@@ -104,8 +104,9 @@
 
     /**
      * A random CPF number.
-     * @link http://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas
-     * @param bool $formatted If the number should have dots/dashes or not.
+     *
+     * @link   http://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas
+     * @param  bool $formatted If the number should have dots/dashes or not.
      * @return string
      */
     public function cpf($formatted = true)
@@ -119,8 +120,9 @@
 
     /**
      * A random RG number, following Sao Paulo state's rules.
-     * @link http://pt.wikipedia.org/wiki/C%C3%A9dula_de_identidade
-     * @param bool $formatted If the number should have dots/dashes or not.
+     *
+     * @link   http://pt.wikipedia.org/wiki/C%C3%A9dula_de_identidade
+     * @param  bool $formatted If the number should have dots/dashes or not.
      * @return string
      */
     public function rg($formatted = true)

--- vendor/fzaninotto/faker/src/Faker/Provider/pt_BR/PhoneNumber.php
+++ PHP_CodeSniffer
@@ -23,6 +23,7 @@
 
     /**
      * Generates a 2-digit area code not composed by zeroes.
+     *
      * @return string
      */
     public static function areaCode()
@@ -32,8 +33,9 @@
 
     /**
      * Generates a 8/9-digit cellphone number without formatting characters.
-     * @param bool $formatted [def: true] If it should return a formatted number or not.
-     * @param int|bool $area  [def: false] A specific area code to which the number will belong.
+     *
+     * @param  bool     $formatted [def: true] If it should return a formatted number or not.
+     * @param  int|bool $area      [def: false] A specific area code to which the number will belong. If a boolean is used, will add (or not) the ninth digit.
      *                        If a boolean is used, will add (or not) the ninth digit.
      * @return string
      */
@@ -54,7 +56,8 @@
 
     /**
      * Generates an 8-digit landline number without formatting characters.
-     * @param bool $formatted [def: true] If it should return a formatted number or not.
+     *
+     * @param  bool $formatted [def: true] If it should return a formatted number or not.
      * @return string
      */
     public static function landline($formatted = true)
@@ -70,24 +73,28 @@
 
     /**
      * Randomizes between cellphone and landline numbers.
-     * @param bool $formatted [def: true] If it should return a formatted number or not.
+     *
+     * @param  bool $formatted [def: true] If it should return a formatted number or not.
      * @return mixed
      */
     public static function phone($formatted = true)
     {
-        $options = static::randomElement(array(
+        $options = static::randomElement(
+            array(
             array('cellphone', false),
             array('cellphone', true),
             array('landline', null),
-        ));
+            )
+        );
 
         return call_user_func("static::{$options[0]}", $formatted, $options[1]);
     }
 
     /**
      * Generates a complete phone number.
-     * @param string $type      [def: landline] One of "landline" or "cellphone". Defaults to "landline" on invalid values.
-     * @param bool   $formatted [def: true] If the number should be formatted or not.
+     *
+     * @param  string $type      [def: landline] One of "landline" or "cellphone". Defaults to "landline" on invalid values.
+     * @param  bool   $formatted [def: true] If the number should be formatted or not.
      * @return string
      */
     protected static function anyPhoneNumber($type, $formatted = true)
@@ -103,7 +110,8 @@
     /**
      * Concatenates {@link areaCode} and {@link cellphone} into a national cellphone number. The ninth digit is
      * derived from the area code.
-     * @param bool $formatted [def: true] If it should return a formatted number or not.
+     *
+     * @param  bool $formatted [def: true] If it should return a formatted number or not.
      * @return string
      */
     public static function cellphoneNumber($formatted = true)
@@ -113,7 +121,8 @@
 
     /**
      * Concatenates {@link areaCode} and {@link landline} into a national landline number.
-     * @param bool $formatted [def: true] If it should return a formatted number or not.
+     *
+     * @param  bool $formatted [def: true] If it should return a formatted number or not.
      * @return string
      */
     public static function landlineNumber($formatted = true)
@@ -123,6 +132,7 @@
 
     /**
      * Randomizes between complete cellphone and landline numbers.
+     *
      * @return mixed
      */
     public function phoneNumber()
@@ -133,6 +143,7 @@
 
     /**
      * Randomizes between complete cellphone and landline numbers, cleared from formatting symbols.
+     *
      * @return mixed
      */
     public static function phoneNumberCleared()

--- vendor/fzaninotto/faker/src/Faker/Provider/pt_PT/Address.php
+++ PHP_CodeSniffer
@@ -20,12 +20,16 @@
         '{{streetName}}, {{buildingNumber}}, {{secondaryAddress}}',
     );
 
-    /** @link http://www.univ-ab.pt/PINTAC/carta_normas.htm address example in letters **/
+    /**
+ * @link http://www.univ-ab.pt/PINTAC/carta_normas.htm address example in letters 
+**/
     protected static $addressFormats = array(
         "{{streetAddress}}\n{{postcode}} {{city}}",
     );
 
-    /** @link http://www.mapadeportugal.net/indicecidades.asp **/
+    /**
+ * @link http://www.mapadeportugal.net/indicecidades.asp 
+**/
     private static $cities = array(
         'Abrantes', 'Agualva-Cacém', 'Águeda', 'Albufeira', 'Alcácer do Sal', 'Alcobaça', 'Almada', 'Almeirim', 'Alverca do Ribatejo', 'Amadora', 'Amarante', 'Amora', 'Anadia', 'Angra do Heroísmo', 'Aveiro', 'Barcelos', 'Barreiro',
         'Beja', 'Braga', 'Bragança', 'Caldas da Rainha', 'Camara de Lobos', 'Cantanhede', 'Cartaxo', 'Castelo Branco', 'Chaves', 'Coimbra', 'Covilhã', 'Elvas', 'Entroncamento', 'Ermesinde', 'Esmoriz', 'Espinho', 'Esposende', 'Estarreja',
@@ -62,7 +66,9 @@
         return static::numerify(static::randomElement(static::$secondaryAddressFormats));
     }
 
-    /** @link http://www.indexmundi.com/pt/ **/
+    /**
+ * @link http://www.indexmundi.com/pt/ 
+**/
     protected static $country = array(
         'Afeganistão', 'África do Sul', 'Albânia', 'Alemanha', 'Andorra',
         'Angola', 'Antigua e Barbuda', 'Arabia Saudita', 'Argélia',

--- vendor/fzaninotto/faker/src/Faker/Provider/pt_PT/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/pt_PT/Person.php
+++ PHP_CodeSniffer
@@ -26,7 +26,9 @@
         '{{firstNameFemale}} {{firstNameFemale}} {{lastName}} {{lastName}} {{lastName}}',
     );
 
-    /** @link http://goo.gl/v6bScG document with all pt abreviations **/
+    /**
+ * @link http://goo.gl/v6bScG document with all pt abreviations 
+**/
     protected static $titleMale = array('Sr.', 'Dr.', 'Exmo.', 'Eng.', 'Eng.º', 'Ex.', 'Exº');
     protected static $titleFemale = array('Sra.', 'Dra.', 'Exma', 'Eng.ª', 'Exª');
 

--- vendor/fzaninotto/faker/src/Faker/Provider/ro_MD/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/ro_RO/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/ro_RO/Person.php
+++ PHP_CodeSniffer
@@ -103,14 +103,13 @@
     /**
      * Personal Numerical Code (CNP)
      *
-     * @link http://ro.wikipedia.org/wiki/Cod_numeric_personal
+     * @link    http://ro.wikipedia.org/wiki/Cod_numeric_personal
      * @example 1111111111118
      *
      * @param  string  $gender  Valid values: m, f, 1, 2
      * @param  integer $century Valid values: 1800, 1900, 2000, 1, 2, 3, 4, 5, 6
      * @param  string  $county  Valid values: 2 letter ISO 3166-2:RO county codes and B1-B6 for Bucharest's 6 sectors
      * @return string
-     *
      */
     public function cnp($gender = null, $century = null, $county = null)
     {
@@ -125,8 +124,7 @@
              . sprintf('%02d', $this->generator->month())
              . sprintf('%02d', $this->generator->dayOfMonth())
              . $countyCode
-             . static::numerify('##%')
-        ;
+             . static::numerify('##%');
 
         $cnp = static::cnpAddChecksum($cnp);
 
@@ -144,36 +142,36 @@
     protected static function cnpFirstDigit($gender = null, $century = null)
     {
         switch ($century) {
-            case 1800:
-            case 3:
-            case 4:
-                $centuryCode = 2;
-                break;
-            case 1900:
-            case 1:
-            case 2:
-                $centuryCode = 0;
-                break;
-            case 2000:
-            case 5:
-            case 6:
-                $centuryCode = 4;
-                break;
-            default:
-                $centuryCode = static::randomElement(array(0, 2, 4, 6, 9));
+        case 1800:
+        case 3:
+        case 4:
+            $centuryCode = 2;
+            break;
+        case 1900:
+        case 1:
+        case 2:
+            $centuryCode = 0;
+            break;
+        case 2000:
+        case 5:
+        case 6:
+            $centuryCode = 4;
+            break;
+        default:
+            $centuryCode = static::randomElement(array(0, 2, 4, 6, 9));
         }
 
         switch (strtolower($gender)) {
-            case 'm':
-            case 1:
-                $genderCode = 1;
-                break;
-            case 'f':
-            case 2:
-                $genderCode = 2;
-                break;
-            default:
-                $genderCode = static::randomElement(array(1, 2));
+        case 'm':
+        case 1:
+            $genderCode = 1;
+            break;
+        case 'f':
+        case 2:
+            $genderCode = 2;
+            break;
+        default:
+            $genderCode = static::randomElement(array(1, 2));
         }
 
         $firstDigit = $centuryCode + $genderCode;

--- vendor/fzaninotto/faker/src/Faker/Provider/ru_RU/Text.php
+++ PHP_CodeSniffer
@@ -21,9 +21,9 @@
      *
      * Language: Russian
      *
-     * @see     https://wikimediafoundation.org/wiki/Terms_of_Use/
-     * @link    http://ru.wikisource.org/wiki/%D0%9C%D1%91%D1%80%D1%82%D0%B2%D1%8B%D0%B5_%D0%B4%D1%83%D1%88%D0%B8_(%D0%93%D0%BE%D0%B3%D0%BE%D0%BB%D1%8C)/%D0%A2%D0%BE%D0%BC_I/%D0%93%D0%BB%D0%B0%D0%B2%D0%B0_I
-     * @var string
+     * @see  https://wikimediafoundation.org/wiki/Terms_of_Use/
+     * @link http://ru.wikisource.org/wiki/%D0%9C%D1%91%D1%80%D1%82%D0%B2%D1%8B%D0%B5_%D0%B4%D1%83%D1%88%D0%B8_(%D0%93%D0%BE%D0%B3%D0%BE%D0%BB%D1%8C)/%D0%A2%D0%BE%D0%BC_I/%D0%93%D0%BB%D0%B0%D0%B2%D0%B0_I
+     * @var  string
      */
     protected static $baseText = <<<'EOT'
 

--- vendor/fzaninotto/faker/src/Faker/Provider/sk_SK/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/sl_SI/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/sr_Cyrl_RS/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/sr_Latn_RS/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/sr_RS/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/sv_SE/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/sv_SE/Person.php
+++ PHP_CodeSniffer
@@ -115,9 +115,10 @@
 
     /**
      * National Personal Identity number (personnummer)
-     * @link http://en.wikipedia.org/wiki/Personal_identity_number_(Sweden)
-     * @param \DateTime $birthdate
-     * @param string $gender Person::GENDER_MALE || Person::GENDER_FEMALE
+     *
+     * @link   http://en.wikipedia.org/wiki/Personal_identity_number_(Sweden)
+     * @param  \DateTime $birthdate
+     * @param  string    $gender    Person::GENDER_MALE || Person::GENDER_FEMALE
      * @return string on format XXXXXX-XXXX
      */
     public function personalIdentityNumber(\DateTime $birthdate = null, $gender = null)

--- vendor/fzaninotto/faker/src/Faker/Provider/Text.php
+++ PHP_CodeSniffer
@@ -19,12 +19,12 @@
      * possible following words as the value.
      *
      * @example 'Alice, swallowing down her flamingo, and began by taking the little golden key'
-     * @param integer $maxNbChars Maximum number of characters the text should contain (minimum: 10)
-     * @param integer $indexSize  Determines how many words are considered for the generation of the next word.
+     * @param   integer $maxNbChars Maximum number of characters the text should contain (minimum: 10)
+     * @param   integer $indexSize  Determines how many words are considered for the generation of the next word.
      *                             The minimum is 1, and it produces the higher level of randomness, although the
      *                             generated text usually doesn't make sense. Higher index sizes (up to 5)
      *                             produce more correct text, at the price of less randomness.
-     * @return string
+     * @return  string
      */
     public function realText($maxNbChars = 200, $indexSize = 2)
     {

--- vendor/fzaninotto/faker/src/Faker/Provider/tr_TR/Payment.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 {
     /**
      * International Bank Account Number (IBAN)
-     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
+     *
+     * @link   http://en.wikipedia.org/wiki/International_Bank_Account_Number
      * @param  string  $prefix      for generating bank account number of a specific bank
      * @param  string  $countryCode ISO 3166-1 alpha-2 country code
      * @param  integer $length      total length without country code and 2 check digits

--- vendor/fzaninotto/faker/src/Faker/Provider/uk_UA/Address.php
+++ PHP_CodeSniffer
@@ -325,8 +325,9 @@
     /**
      * Get city and region together
      * We need it because city and region must comply each other in Ukraine
+     *
      * @example 'Закарпатська область, місто Ужгород'
-     * @return string
+     * @return  string
      */
     public function cityAndRegion()
     {

--- vendor/fzaninotto/faker/src/Faker/Provider/uk_UA/Person.php
+++ PHP_CodeSniffer
@@ -46,9 +46,10 @@
 
     /**
      * Return middle name
+     *
      * @example 'Іванович'
-     * @access public
-     * @return string Middle name
+     * @access  public
+     * @return  string Middle name
      */
     public function middleName()
     {

--- vendor/fzaninotto/faker/src/Faker/Provider/uk_UA/Text.php
+++ PHP_CodeSniffer
@@ -21,9 +21,9 @@
      *
      * Language: Ukrainian
      *
-     * @see     https://wikimediafoundation.org/wiki/Terms_of_Use/
-     * @link    http://uk.wikisource.org/wiki/%D0%97%D0%B0%D1%85%D0%B0%D1%80_%D0%91%D0%B5%D1%80%D0%BA%D1%83%D1%82
-     * @var string
+     * @see  https://wikimediafoundation.org/wiki/Terms_of_Use/
+     * @link http://uk.wikisource.org/wiki/%D0%97%D0%B0%D1%85%D0%B0%D1%80_%D0%91%D0%B5%D1%80%D0%BA%D1%83%D1%82
+     * @var  string
      */
     protected static $baseText = <<<'EOT'
 

--- vendor/fzaninotto/faker/src/Faker/Provider/Uuid.php
+++ PHP_CodeSniffer
@@ -6,6 +6,7 @@
 {
     /**
      * Generate name based md5 UUID (version 3).
+     *
      * @example '7e57d004-2b97-0e7a-b45f-5387367791cd'
      */
     public static function uuid()

--- vendor/fzaninotto/faker/src/Faker/Provider/zh_TW/Text.php
+++ PHP_CodeSniffer
@@ -154,7 +154,7 @@
     /**
      * Convert original string to utf-8 encoding.
      *
-     * @param string $text
+     * @param  string $text
      * @return array
      */
     protected static function utf8Encoding($text)
@@ -171,21 +171,21 @@
             $ord = ord($chars[$i]);
 
             switch (true) {
-                case $ord > 251:
-                    $temp .= $chars[++$i];
-                    // no break
-                case $ord > 247:
-                    $temp .= $chars[++$i];
-                    // no break
-                case $ord > 239:
-                    $temp .= $chars[++$i];
-                    // no break
-                case $ord > 223:
-                    $temp .= $chars[++$i];
-                    // no break
-                case $ord > 191:
-                    $temp .= $chars[++$i];
-                    // no break
+            case $ord > 251:
+                $temp .= $chars[++$i];
+                // no break
+            case $ord > 247:
+                $temp .= $chars[++$i];
+                // no break
+            case $ord > 239:
+                $temp .= $chars[++$i];
+                // no break
+            case $ord > 223:
+                $temp .= $chars[++$i];
+                // no break
+            case $ord > 191:
+                $temp .= $chars[++$i];
+                // no break
             }
 
             $encoding[] = $temp;

--- vendor/fzaninotto/faker/src/Faker/UniqueGenerator.php
+++ PHP_CodeSniffer
@@ -13,7 +13,7 @@
     protected $uniques = array();
 
     /**
-     * @param Generator $generator
+     * @param Generator  $generator
      * @param $maxRetries
      */
     public function __construct(Generator $generator, $maxRetries)
@@ -24,7 +24,8 @@
 
     /**
      * Catch and proxy all generator calls but return only unique values
-     * @param string $attribute
+     *
+     * @param  string $attribute
      * @return mixed
      */
     public function __get($attribute)
@@ -34,8 +35,9 @@
 
     /**
      * Catch and proxy all generator calls with arguments but return only unique values
-     * @param string $name
-     * @param array $arguments
+     *
+     * @param  string $name
+     * @param  array  $arguments
      * @return mixed
      */
     public function __call($name, $arguments)

--- vendor/fzaninotto/faker/src/Faker/ValidGenerator.php
+++ PHP_CodeSniffer
@@ -31,6 +31,7 @@
 
     /**
      * Catch and proxy all generator calls but return only valid values
+     *
      * @param string $attribute
      */
     public function __get($attribute)
@@ -40,8 +41,9 @@
 
     /**
      * Catch and proxy all generator calls with arguments but return only valid values
+     *
      * @param string $name
-     * @param array $arguments
+     * @param array  $arguments
      */
     public function __call($name, $arguments)
     {

--- vendor/fzaninotto/faker/test/documentor.php
+++ PHP_CodeSniffer
@@ -10,7 +10,8 @@
 ### `<?php echo $provider ?>`
 
 <?php foreach ($formatters as $formatter => $example): ?>
-    <?php echo str_pad($formatter, 23) ?><?php if ($example): ?> // <?php echo $example ?> <?php endif; ?>
+    <?php echo str_pad($formatter, 23) ?><?php if ($example) : ?> // <?php echo $example ?> <?php 
+    endif; ?>
 
 <?php endforeach; ?>
 <?php endforeach;

--- vendor/fzaninotto/faker/test/Faker/Provider/BaseTest.php
+++ PHP_CodeSniffer
@@ -490,7 +490,7 @@
         $faker = new \Faker\Generator();
         $faker->addProvider(new \Faker\Provider\Base($faker));
         $values = array();
-        $evenValidator = function($digit) {
+        $evenValidator = function ($digit) {
             return $digit % 2 === 0;
         };
         for ($i=0; $i < 50; $i++) {
@@ -508,7 +508,7 @@
     {
         $faker = new \Faker\Generator();
         $faker->addProvider(new \Faker\Provider\Base($faker));
-        $evenValidator = function($digit) {
+        $evenValidator = function ($digit) {
             return $digit % 2 === 0;
         };
         for ($i=0; $i < 11; $i++) {

--- vendor/fzaninotto/faker/test/Faker/Provider/cs_CZ/PersonTest.php
+++ PHP_CodeSniffer
@@ -27,8 +27,10 @@
             $year += $year < 54 ? 2000 : 1900;
 
             // adjust special cases for month
-            if ($month > 50) $month -= 50;
-            if ($year >= 2004 && $month > 20) $month -= 20;
+            if ($month > 50) { $month -= 50; 
+            }
+            if ($year >= 2004 && $month > 20) { $month -= 20; 
+            }
 
             $this->assertTrue(checkdate($month, $day, $year), "Birth number $birthNumber: date $year/$month/$day is invalid.");
 

--- vendor/fzaninotto/faker/test/Faker/Provider/de_CH/AddressTest.php
+++ PHP_CodeSniffer
@@ -25,7 +25,7 @@
     /**
      * @test
      */
-    public function canton ()
+    public function canton()
     {
         $canton = $this->faker->canton();
         $this->assertInternalType('array', $canton);
@@ -42,7 +42,7 @@
     /**
      * @test
      */
-    public function cantonName ()
+    public function cantonName()
     {
         $cantonName = $this->faker->cantonName();
         $this->assertInternalType('string', $cantonName);
@@ -52,7 +52,7 @@
     /**
      * @test
      */
-    public function cantonShort ()
+    public function cantonShort()
     {
         $cantonShort = $this->faker->cantonShort();
         $this->assertInternalType('string', $cantonShort);
@@ -62,7 +62,8 @@
     /**
      * @test
      */
-    public function address (){
+    public function address()
+    {
         $address = $this->faker->address();
         $this->assertInternalType('string', $address);
     }

--- vendor/fzaninotto/faker/test/Faker/Provider/en_AU/AddressTest.php
+++ PHP_CodeSniffer
@@ -8,41 +8,41 @@
 class AddressTest extends \PHPUnit_Framework_TestCase
 {
 
-  /**
+    /**
    * @var Faker\Generator
    */
-  private $faker;
+    private $faker;
 
-  public function setUp()
-  {
-    $faker = new Generator();
-    $faker->addProvider(new Address($faker));
-    $this->faker = $faker;
-  }
-
-  public function testCityPrefix()
-  {
-    $cityPrefix = $this->faker->cityPrefix();
-    $this->assertNotEmpty($cityPrefix);
-    $this->assertInternalType('string', $cityPrefix);
-    $this->assertRegExp('/[A-Z][a-z]+/', $cityPrefix);
-  }
-
-  public function testStreetSuffix()
-  {
-    $streetSuffix = $this->faker->streetSuffix();
-    $this->assertNotEmpty($streetSuffix);
-    $this->assertInternalType('string', $streetSuffix);
-    $this->assertRegExp('/[A-Z][a-z]+/', $streetSuffix);
-  }
-
-  public function testState()
-  {
-    $state = $this->faker->state();
-    $this->assertNotEmpty($state);
-    $this->assertInternalType('string', $state);
-    $this->assertRegExp('/[A-Z][a-z]+/', $state);
-  }
+    public function setUp()
+    {
+        $faker = new Generator();
+        $faker->addProvider(new Address($faker));
+        $this->faker = $faker;
+    }
+
+    public function testCityPrefix()
+    {
+        $cityPrefix = $this->faker->cityPrefix();
+        $this->assertNotEmpty($cityPrefix);
+        $this->assertInternalType('string', $cityPrefix);
+        $this->assertRegExp('/[A-Z][a-z]+/', $cityPrefix);
+    }
+
+    public function testStreetSuffix()
+    {
+        $streetSuffix = $this->faker->streetSuffix();
+        $this->assertNotEmpty($streetSuffix);
+        $this->assertInternalType('string', $streetSuffix);
+        $this->assertRegExp('/[A-Z][a-z]+/', $streetSuffix);
+    }
+
+    public function testState()
+    {
+        $state = $this->faker->state();
+        $this->assertNotEmpty($state);
+        $this->assertInternalType('string', $state);
+        $this->assertRegExp('/[A-Z][a-z]+/', $state);
+    }
 }
 
 ?>

--- vendor/fzaninotto/faker/test/Faker/Provider/en_CA/AddressTest.php
+++ PHP_CodeSniffer
@@ -8,61 +8,61 @@
 class AddressTest extends \PHPUnit_Framework_TestCase
 {
 
-  /**
+    /**
    * @var Faker\Generator
    */
-  private $faker;
+    private $faker;
 
-  public function setUp()
-  {
-    $faker = new Generator();
-    $faker->addProvider(new Address($faker));
-    $this->faker = $faker;
-  }
+    public function setUp()
+    {
+        $faker = new Generator();
+        $faker->addProvider(new Address($faker));
+        $this->faker = $faker;
+    }
 
-  /**
+    /**
    * Test the validity of province
    */
-  public function testProvince()
-  {
-    $province = $this->faker->province();
-    $this->assertNotEmpty($province);
-    $this->assertInternalType('string', $province);
-    $this->assertRegExp('/[A-Z][a-z]+/', $province);
-  }
+    public function testProvince()
+    {
+        $province = $this->faker->province();
+        $this->assertNotEmpty($province);
+        $this->assertInternalType('string', $province);
+        $this->assertRegExp('/[A-Z][a-z]+/', $province);
+    }
 
-  /**
+    /**
    * Test the validity of province abbreviation
    */
-  public function testProvinceAbbr()
-  {
-    $provinceAbbr = $this->faker->provinceAbbr();
-    $this->assertNotEmpty($provinceAbbr);
-    $this->assertInternalType('string', $provinceAbbr);
-    $this->assertRegExp('/^[A-Z]{2}$/', $provinceAbbr);
-  }
+    public function testProvinceAbbr()
+    {
+        $provinceAbbr = $this->faker->provinceAbbr();
+        $this->assertNotEmpty($provinceAbbr);
+        $this->assertInternalType('string', $provinceAbbr);
+        $this->assertRegExp('/^[A-Z]{2}$/', $provinceAbbr);
+    }
 
-  /**
+    /**
    * Test the validity of postcode letter
    */
-  public function testPostcodeLetter()
-  {
-    $postcodeLetter = $this->faker->randomPostcodeLetter();
-    $this->assertNotEmpty($postcodeLetter);
-    $this->assertInternalType('string', $postcodeLetter);
-    $this->assertRegExp('/^[A-Z]{1}$/', $postcodeLetter);
-  }
+    public function testPostcodeLetter()
+    {
+        $postcodeLetter = $this->faker->randomPostcodeLetter();
+        $this->assertNotEmpty($postcodeLetter);
+        $this->assertInternalType('string', $postcodeLetter);
+        $this->assertRegExp('/^[A-Z]{1}$/', $postcodeLetter);
+    }
 
-  /**
+    /**
    * Test the validity of Canadian postcode
    */
-  public function testPostcode()
-  {
-    $postcode = $this->faker->postcode();
-    $this->assertNotEmpty($postcode);
-    $this->assertInternalType('string', $postcode);
-    $this->assertRegExp('/^[A-Za-z]\d[A-Za-z][ -]?\d[A-Za-z]\d$/', $postcode);
-  }
+    public function testPostcode()
+    {
+        $postcode = $this->faker->postcode();
+        $this->assertNotEmpty($postcode);
+        $this->assertInternalType('string', $postcode);
+        $this->assertRegExp('/^[A-Za-z]\d[A-Za-z][ -]?\d[A-Za-z]\d$/', $postcode);
+    }
 }
 
 ?>

--- vendor/fzaninotto/faker/test/Faker/Provider/en_IN/AddressTest.php
+++ PHP_CodeSniffer
@@ -8,49 +8,49 @@
 class AddressTest extends \PHPUnit_Framework_TestCase
 {
 
-  /**
+    /**
    * @var Faker\Generator
    */
-  private $faker;
+    private $faker;
 
-  public function setUp()
-  {
-    $faker = new Generator();
-    $faker->addProvider(new Address($faker));
-    $this->faker = $faker;
-  }
-
-  public function testCity()
-  {
-    $city = $this->faker->city();
-    $this->assertNotEmpty($city);
-    $this->assertInternalType('string', $city);
-    $this->assertRegExp('/[A-Z][a-z]+/', $city);
-  }
-
-  public function testCountry()
-  {
-    $country = $this->faker->country();
-    $this->assertNotEmpty($country);
-    $this->assertInternalType('string', $country);
-    $this->assertRegExp('/[A-Z][a-z]+/', $country);
-  }
-
-  public function testLocalityName()
-  {
-    $localityName = $this->faker->localityName();
-    $this->assertNotEmpty($localityName);
-    $this->assertInternalType('string', $localityName);
-    $this->assertRegExp('/[A-Z][a-z]+/', $localityName);
-  }
-
-  public function testAreaSuffix()
-  {
-    $areaSuffix = $this->faker->areaSuffix();
-    $this->assertNotEmpty($areaSuffix);
-    $this->assertInternalType('string', $areaSuffix);
-    $this->assertRegExp('/[A-Z][a-z]+/', $areaSuffix);
-  }
+    public function setUp()
+    {
+        $faker = new Generator();
+        $faker->addProvider(new Address($faker));
+        $this->faker = $faker;
+    }
+
+    public function testCity()
+    {
+        $city = $this->faker->city();
+        $this->assertNotEmpty($city);
+        $this->assertInternalType('string', $city);
+        $this->assertRegExp('/[A-Z][a-z]+/', $city);
+    }
+
+    public function testCountry()
+    {
+        $country = $this->faker->country();
+        $this->assertNotEmpty($country);
+        $this->assertInternalType('string', $country);
+        $this->assertRegExp('/[A-Z][a-z]+/', $country);
+    }
+
+    public function testLocalityName()
+    {
+        $localityName = $this->faker->localityName();
+        $this->assertNotEmpty($localityName);
+        $this->assertInternalType('string', $localityName);
+        $this->assertRegExp('/[A-Z][a-z]+/', $localityName);
+    }
+
+    public function testAreaSuffix()
+    {
+        $areaSuffix = $this->faker->areaSuffix();
+        $this->assertNotEmpty($areaSuffix);
+        $this->assertInternalType('string', $areaSuffix);
+        $this->assertRegExp('/[A-Z][a-z]+/', $areaSuffix);
+    }
 }
 
 ?>

--- vendor/fzaninotto/faker/test/Faker/Provider/en_NZ/PhoneNumberTest.php
+++ PHP_CodeSniffer
@@ -22,14 +22,14 @@
 
     public function testIfPhoneNumberCanReturnData()
     {
-      $number = $this->faker->phoneNumber;
-      $this->assertNotEmpty($number);
+        $number = $this->faker->phoneNumber;
+        $this->assertNotEmpty($number);
     }
 
     public function phoneNumberFormat()
     {
-      $number = $this->faker->phoneNumber;
-      $this->assertRegExp('/(^\([0]\d{1}\))(\d{7}$)|(^\([0][2]\d{1}\))(\d{6,8}$)|([0][8][0][0])([\s])(\d{5,8}$)/', $number);
+        $number = $this->faker->phoneNumber;
+        $this->assertRegExp('/(^\([0]\d{1}\))(\d{7}$)|(^\([0][2]\d{1}\))(\d{6,8}$)|([0][8][0][0])([\s])(\d{5,8}$)/', $number);
     }
 }
 ?>

--- vendor/fzaninotto/faker/test/Faker/Provider/en_PH/AddressTest.php
+++ PHP_CodeSniffer
@@ -15,35 +15,35 @@
 
     public function setUp()
     {
-      $faker = new Generator();
-      $faker->addProvider(new Address($faker));
-      $this->faker = $faker;
+        $faker = new Generator();
+        $faker->addProvider(new Address($faker));
+        $this->faker = $faker;
     }
 
     public function testProvince()
     {
-      $province = $this->faker->province();
-      $this->assertNotEmpty($province);
-      $this->assertInternalType('string', $province);
+        $province = $this->faker->province();
+        $this->assertNotEmpty($province);
+        $this->assertInternalType('string', $province);
     }
 
     public function testCity()
     {
-      $city = $this->faker->city();
-      $this->assertNotEmpty($city);
-      $this->assertInternalType('string', $city);
+        $city = $this->faker->city();
+        $this->assertNotEmpty($city);
+        $this->assertInternalType('string', $city);
     }
 
     public function testMunicipality()
     {
-      $municipality = $this->faker->municipality();
-      $this->assertNotEmpty($municipality);
-      $this->assertInternalType('string', $municipality);
+        $municipality = $this->faker->municipality();
+        $this->assertNotEmpty($municipality);
+        $this->assertInternalType('string', $municipality);
     }
 
     public function testBarangay()
     {
-      $barangay = $this->faker->barangay();
-      $this->assertInternalType('string', $barangay);
+        $barangay = $this->faker->barangay();
+        $this->assertInternalType('string', $barangay);
     }
 }

--- vendor/fzaninotto/faker/test/Faker/Provider/en_UG/AddressTest.php
+++ PHP_CodeSniffer
@@ -8,45 +8,45 @@
 class AddressTest extends \PHPUnit_Framework_TestCase
 {
 
-/**
+    /**
  * @var Faker\Generator
  */
-  private $faker;
+    private $faker;
 
-  public function setUp()
-  {
-      $faker = new Generator();
-      $faker->addProvider(new Address($faker));
-      $this->faker = $faker;
-  }
+    public function setUp()
+    {
+        $faker = new Generator();
+        $faker->addProvider(new Address($faker));
+        $this->faker = $faker;
+    }
 
-  /**
+    /**
    * @test
    */
-  public function testCityName()
-  {
-    $city = $this->faker->cityName();
-    $this->assertNotEmpty($city);
-    $this->assertInternalType('string', $city);
-  }
+    public function testCityName()
+    {
+        $city = $this->faker->cityName();
+        $this->assertNotEmpty($city);
+        $this->assertInternalType('string', $city);
+    }
 
-  /**
+    /**
    * @test
    */
-  public function testDistrict()
-  {
-    $district = $this->faker->district();
-    $this->assertNotEmpty($district);
-    $this->assertInternalType('string', $district);
-  }
+    public function testDistrict()
+    {
+        $district = $this->faker->district();
+        $this->assertNotEmpty($district);
+        $this->assertInternalType('string', $district);
+    }
 
-  /**
+    /**
    * @test
    */
-  public function testRegion()
-  {
-    $region = $this->faker->region();
-    $this->assertNotEmpty($region);
-    $this->assertInternaltype('string', $region);
-  }
+    public function testRegion()
+    {
+        $region = $this->faker->region();
+        $this->assertNotEmpty($region);
+        $this->assertInternaltype('string', $region);
+    }
 }

--- vendor/fzaninotto/faker/test/Faker/Provider/es_ES/PersonTest.php
+++ PHP_CodeSniffer
@@ -24,8 +24,9 @@
     // validation taken from http://kiwwito.com/php-function-for-spanish-dni-nie-validation/
     public function isValidDNI($string)
     {
-        if (strlen($string) != 9 ||
-            preg_match('/^[XYZ]?([0-9]{7,8})([A-Z])$/i', $string, $matches) !== 1) {
+        if (strlen($string) != 9 
+            || preg_match('/^[XYZ]?([0-9]{7,8})([A-Z])$/i', $string, $matches) !== 1
+        ) {
             return false;
         }
 

--- vendor/fzaninotto/faker/test/Faker/Provider/fr_CH/AddressTest.php
+++ PHP_CodeSniffer
@@ -25,7 +25,7 @@
     /**
      * @test
      */
-    public function canton ()
+    public function canton()
     {
         $canton = $this->faker->canton();
         $this->assertInternalType('array', $canton);
@@ -42,7 +42,7 @@
     /**
      * @test
      */
-    public function cantonName ()
+    public function cantonName()
     {
         $cantonName = $this->faker->cantonName();
         $this->assertInternalType('string', $cantonName);
@@ -52,7 +52,7 @@
     /**
      * @test
      */
-    public function cantonShort ()
+    public function cantonShort()
     {
         $cantonShort = $this->faker->cantonShort();
         $this->assertInternalType('string', $cantonShort);
@@ -62,7 +62,8 @@
     /**
      * @test
      */
-    public function address (){
+    public function address()
+    {
         $address = $this->faker->address();
         $this->assertInternalType('string', $address);
     }

--- vendor/fzaninotto/faker/test/Faker/Provider/it_CH/AddressTest.php
+++ PHP_CodeSniffer
@@ -25,7 +25,7 @@
     /**
      * @test
      */
-    public function canton ()
+    public function canton()
     {
         $canton = $this->faker->canton();
         $this->assertInternalType('array', $canton);
@@ -42,7 +42,7 @@
     /**
      * @test
      */
-    public function cantonName ()
+    public function cantonName()
     {
         $cantonName = $this->faker->cantonName();
         $this->assertInternalType('string', $cantonName);
@@ -52,7 +52,7 @@
     /**
      * @test
      */
-    public function cantonShort ()
+    public function cantonShort()
     {
         $cantonShort = $this->faker->cantonShort();
         $this->assertInternalType('string', $cantonShort);
@@ -62,7 +62,8 @@
     /**
      * @test
      */
-    public function address (){
+    public function address()
+    {
         $address = $this->faker->address();
         $this->assertInternalType('string', $address);
     }

--- vendor/fzaninotto/faker/test/Faker/Provider/ProviderOverrideTest.php
+++ PHP_CodeSniffer
@@ -168,7 +168,7 @@
     {
         static $locales = array();
 
-        if ( ! empty($locales)) {
+        if (! empty($locales)) {
             return $locales;
         }
 

--- vendor/fzaninotto/faker/test/Faker/Provider/ro_RO/PersonTest.php
+++ PHP_CodeSniffer
@@ -69,11 +69,10 @@
 
     protected function isValidCnp($cnp)
     {
-        if (
-            is_string($cnp)
+        if (is_string($cnp)
             && (bool) preg_match(static::TEST_CNP_REGEX, $cnp)
             && checkdate(substr($cnp, 3, 2), substr($cnp, 5, 2), substr($cnp, 1, 2))
-        ){
+        ) {
             $checkNumber = 279146358279;
 
             $checksum = 0;
@@ -82,10 +81,9 @@
             }
             $checksum = $checksum % 11;
 
-            if (
-                ($checksum < 10 && $checksum == substr($cnp, -1))
+            if (($checksum < 10 && $checksum == substr($cnp, -1))
                 || ($checksum == 10 && substr($cnp, -1) == 1)
-            ){
+            ) {
                 return true;
             }
         }

--- vendor/fzaninotto/faker/test/Faker/Provider/sv_SE/PersonTest.php
+++ PHP_CodeSniffer
@@ -8,7 +8,9 @@
 
 class PersonTest extends \PHPUnit_Framework_TestCase
 {
-    /** @var Generator */
+    /**
+ * @var Generator 
+*/
     protected $faker;
 
     public function setUp()

--- vendor/fzaninotto/faker/test/Faker/Provider/TextTest.php
+++ PHP_CodeSniffer
@@ -24,10 +24,10 @@
      */
     public function testTextMaxIndex()
     {
-    $generator = new Generator();
+        $generator = new Generator();
         $generator->addProvider(new Text($generator));
         $generator->seed(0);
-    $generator->realText(200, 11);
+        $generator->realText(200, 11);
     }
 
     /**
@@ -35,7 +35,7 @@
      */
     public function testTextMinIndex()
     {
-    $generator = new Generator();
+        $generator = new Generator();
         $generator->addProvider(new Text($generator));
         $generator->seed(0);
         $generator->realText(200, 0);
@@ -46,7 +46,7 @@
      */
     public function testTextMinLength()
     {
-    $generator = new Generator();
+        $generator = new Generator();
         $generator->addProvider(new Text($generator));
         $generator->seed(0);
         $generator->realText(9);

--- vendor/fzaninotto/faker/test/Faker/Provider/zh_TW/TextTest.php
+++ PHP_CodeSniffer
@@ -11,7 +11,8 @@
         $this->textClass = new \ReflectionClass('Faker\Provider\zh_TW\Text');
     }
 
-    protected function getMethod($name) {
+    protected function getMethod($name) 
+    {
         $method = $this->textClass->getMethod($name);
 
         $method->setAccessible(true);
@@ -19,7 +20,9 @@
         return $method;
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     function it_should_explode_the_string_to_array()
     {
         $this->assertSame(
@@ -33,7 +36,9 @@
         );
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     function it_should_return_the_string_length()
     {
         $this->assertContains(
@@ -42,7 +47,9 @@
         );
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     function it_should_return_the_character_is_valid_start_or_not()
     {
         $this->assertTrue($this->getMethod('validStart')->invokeArgs(null, array('中')));
@@ -56,7 +63,9 @@
         $this->assertFalse($this->getMethod('validStart')->invokeArgs(null, array('！')));
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     function it_should_append_end_punct_to_the_end_of_string()
     {
         $this->assertSame(

--- vendor/fzaninotto/faker/test/test.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
 <?php for ($i=0; $i < 10; $i++): ?>
   <contact firstName="<?php echo $faker->firstName ?>" lastName="<?php echo $faker->lastName ?>" email="<?php echo $faker->email ?>" >
     <phone number="<?php echo $faker->phoneNumber ?>"/>
-<?php if ($faker->boolean(25)): ?>
+<?php if ($faker->boolean(25)) : ?>
     <birth date="<?php echo $faker->dateTimeThisCentury->format('Y-m-d') ?>" place="<?php echo $faker->city ?>"/>
 <?php endif; ?>
     <address>
@@ -19,14 +19,14 @@
       <state><?php echo $faker->state ?></state>
     </address>
     <company name="<?php echo $faker->company ?>" catchPhrase="<?php echo $faker->catchPhrase ?>">
-<?php if ($faker->boolean(33)): ?>
+<?php if ($faker->boolean(33)) : ?>
       <offer><?php echo $faker->bs ?></offer>
 <?php endif; ?>
-<?php if ($faker->boolean(33)): ?>
+<?php if ($faker->boolean(33)) : ?>
       <director name="<?php echo $faker->name ?>" />
 <?php endif; ?>
     </company>
-<?php if ($faker->boolean(15)): ?>
+<?php if ($faker->boolean(15)) : ?>
     <details>
 <![CDATA[
 <?php echo $faker->text(400) ?>

--- vendor/hamcrest/hamcrest-php/generator/FactoryClass.php
+++ PHP_CodeSniffer
@@ -33,7 +33,7 @@
         $this->methods = array();
         foreach ($this->getPublicStaticMethods() as $method) {
             if ($method->isFactory()) {
-//                echo $this->getName() . '::' . $method->getName() . ' : ' . count($method->getCalls()) . PHP_EOL;
+                //                echo $this->getName() . '::' . $method->getName() . ' : ' . count($method->getCalls()) . PHP_EOL;
                 $this->methods[] = $method;
             }
         }

--- vendor/hamcrest/hamcrest-php/generator/FactoryGenerator.php
+++ PHP_CodeSniffer
@@ -87,7 +87,7 @@
     {
         $name = $this->getFactoryClassName($file);
         if ($name !== null) {
-            require_once $file;
+            include_once $file;
 
             if (class_exists($name)) {
                 $class = new FactoryClass(substr($file, strpos($file, 'Hamcrest/')), new ReflectionClass($name));

--- vendor/hamcrest/hamcrest-php/generator/FactoryMethod.php
+++ PHP_CodeSniffer
@@ -149,7 +149,9 @@
             return '';
         }
         $params = array();
-        foreach ($this->parameters as /** @var $parameter FactoryParameter */
+        foreach ($this->parameters as /**
+ * @var $parameter FactoryParameter 
+*/
                  $parameter) {
             $params[] = $parameter->getDeclaration();
         }

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Arrays/IsArray.php
+++ PHP_CodeSniffer
@@ -37,7 +37,9 @@
             return false;
         }
 
-        /** @var $matcher \Hamcrest\Matcher */
+        /**
+ * @var $matcher \Hamcrest\Matcher 
+*/
         foreach ($this->_elementMatchers as $k => $matcher) {
             if (!$matcher->matches($array[$k])) {
                 return false;
@@ -55,18 +57,19 @@
             return;
         } elseif (array_keys($actual) != array_keys($this->_elementMatchers)) {
             $mismatchDescription->appendText('array keys were ')
-                                                    ->appendValueList(
-                                                        $this->descriptionStart(),
-                                                        $this->descriptionSeparator(),
-                                                        $this->descriptionEnd(),
-                                                        array_keys($actual)
-                                                    )
-                                                    ;
+                ->appendValueList(
+                    $this->descriptionStart(),
+                    $this->descriptionSeparator(),
+                    $this->descriptionEnd(),
+                    array_keys($actual)
+                );
 
             return;
         }
 
-        /** @var $matcher \Hamcrest\Matcher */
+        /**
+ * @var $matcher \Hamcrest\Matcher 
+*/
         foreach ($this->_elementMatchers as $k => $matcher) {
             if (!$matcher->matches($actual[$k])) {
                 $mismatchDescription->appendText('element ')->appendValue($k)

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Arrays/IsArrayContaining.php
+++ PHP_CodeSniffer
@@ -43,9 +43,8 @@
     public function describeTo(Description $description)
     {
         $description
-                 ->appendText('an array containing ')
-                 ->appendDescriptionOf($this->_elementMatcher)
-        ;
+            ->appendText('an array containing ')
+            ->appendDescriptionOf($this->_elementMatcher);
     }
 
     /**
@@ -53,7 +52,7 @@
      *
      * @param mixed $item as a {@link Hamcrest\Matcher} or a value.
      *
-     * @return \Hamcrest\Arrays\IsArrayContaining
+     * @return  \Hamcrest\Arrays\IsArrayContaining
      * @factory hasValue
      */
     public static function hasItemInArray($item)

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Arrays/IsArrayContainingInAnyOrder.php
+++ PHP_CodeSniffer
@@ -41,8 +41,7 @@
     public function describeTo(Description $description)
     {
         $description->appendList('[', ', ', ']', $this->_elementMatchers)
-                                ->appendText(' in any order')
-                                ;
+            ->appendText(' in any order');
     }
 
     /**

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Arrays/IsArrayContainingKey.php
+++ PHP_CodeSniffer
@@ -39,8 +39,7 @@
     {
         //Not using appendValueList() so that keys can be shown
         $mismatchDescription->appendText('array was ')
-                                                ->appendText('[')
-                                                ;
+            ->appendText('[');
         $loop = false;
         foreach ($array as $key => $value) {
             if ($loop) {
@@ -55,9 +54,8 @@
     public function describeTo(Description $description)
     {
         $description
-                 ->appendText('array with key ')
-                 ->appendDescriptionOf($this->_keyMatcher)
-                 ;
+            ->appendText('array with key ')
+            ->appendDescriptionOf($this->_keyMatcher);
     }
 
     /**
@@ -65,7 +63,7 @@
      *
      * @param mixed $key as a {@link Hamcrest\Matcher} or a value.
      *
-     * @return \Hamcrest\Arrays\IsArrayContainingKey
+     * @return  \Hamcrest\Arrays\IsArrayContainingKey
      * @factory hasKey
      */
     public static function hasKeyInArray($key)

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Arrays/IsArrayContainingKeyValuePair.php
+++ PHP_CodeSniffer
@@ -42,8 +42,7 @@
     {
         //Not using appendValueList() so that keys can be shown
         $mismatchDescription->appendText('array was ')
-                                                ->appendText('[')
-                                                ;
+            ->appendText('[');
         $loop = false;
         foreach ($array as $key => $value) {
             if ($loop) {
@@ -58,11 +57,10 @@
     public function describeTo(Description $description)
     {
         $description->appendText('array containing [')
-                                ->appendDescriptionOf($this->_keyMatcher)
-                                ->appendText(' => ')
-                                ->appendDescriptionOf($this->_valueMatcher)
-                                ->appendText(']')
-                                ;
+            ->appendDescriptionOf($this->_keyMatcher)
+            ->appendText(' => ')
+            ->appendDescriptionOf($this->_valueMatcher)
+            ->appendText(']');
     }
 
     /**

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Arrays/IsArrayWithSize.php
+++ PHP_CodeSniffer
@@ -37,7 +37,7 @@
      *
      * @param \Hamcrest\Matcher|int $size as a {@link Hamcrest\Matcher} or a value.
      *
-     * @return \Hamcrest\Arrays\IsArrayWithSize
+     * @return  \Hamcrest\Arrays\IsArrayWithSize
      * @factory
      */
     public static function arrayWithSize($size)

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Arrays/MatchingOnce.php
+++ PHP_CodeSniffer
@@ -31,9 +31,8 @@
         }
 
         $this->_mismatchDescription
-                 ->appendText('No item matches: ')->appendList('', ', ', '', $this->_elementMatchers)
-                 ->appendText(' in ')->appendValueList('[', ', ', ']', $items)
-                 ;
+            ->appendText('No item matches: ')->appendList('', ', ', '', $this->_elementMatchers)
+            ->appendText(' in ')->appendValueList('[', ', ', ']', $items);
 
         return false;
     }
@@ -53,7 +52,9 @@
 
     private function _isMatched($item)
     {
-            /** @var $matcher \Hamcrest\Matcher */
+            /**
+ * @var $matcher \Hamcrest\Matcher 
+*/
         foreach ($this->_elementMatchers as $i => $matcher) {
             if ($matcher->matches($item)) {
                 unset($this->_elementMatchers[$i]);

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/BaseDescription.php
+++ PHP_CodeSniffer
@@ -106,24 +106,24 @@
         $str = '"';
         for ($i = 0, $len = strlen($value); $i < $len; ++$i) {
             switch ($value[$i]) {
-                case '"':
-                    $str .= '\\"';
-                    break;
+            case '"':
+                $str .= '\\"';
+                break;
 
-                case "\t":
-                    $str .= '\\t';
-                    break;
+            case "\t":
+                $str .= '\\t';
+                break;
 
-                case "\r":
-                    $str .= '\\r';
-                    break;
+            case "\r":
+                $str .= '\\r';
+                break;
 
-                case "\n":
-                    $str .= '\\n';
-                    break;
+            case "\n":
+                $str .= '\\n';
+                break;
 
-                default:
-                    $str .= $value[$i];
+            default:
+                $str .= $value[$i];
             }
         }
         $str .= '"';

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Core/AllOf.php
+++ PHP_CodeSniffer
@@ -27,7 +27,9 @@
 
     public function matchesWithDiagnosticDescription($item, Description $mismatchDescription)
     {
-        /** @var $matcher \Hamcrest\Matcher */
+        /**
+ * @var $matcher \Hamcrest\Matcher 
+*/
         foreach ($this->_matchers as $matcher) {
             if (!$matcher->matches($item)) {
                 $mismatchDescription->appendDescriptionOf($matcher)->appendText(' ');

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Core/CombinableMatcher.php
+++ PHP_CodeSniffer
@@ -29,13 +29,17 @@
         $description->appendDescriptionOf($this->_matcher);
     }
 
-    /** Diversion from Hamcrest-Java... Logical "and" not permitted */
+    /**
+ * Diversion from Hamcrest-Java... Logical "and" not permitted 
+*/
     public function andAlso(Matcher $other)
     {
         return new self(new AllOf($this->_templatedListWith($other)));
     }
 
-    /** Diversion from Hamcrest-Java... Logical "or" not permitted */
+    /**
+ * Diversion from Hamcrest-Java... Logical "or" not permitted 
+*/
     public function orElse(Matcher $other)
     {
         return new self(new AnyOf($this->_templatedListWith($other)));

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Core/IsAnything.php
+++ PHP_CodeSniffer
@@ -35,7 +35,7 @@
      *
      * @param string $description A meaningful string used when describing itself.
      *
-     * @return \Hamcrest\Core\IsAnything
+     * @return  \Hamcrest\Core\IsAnything
      * @factory
      */
     public static function anything($description = 'ANYTHING')

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Core/IsCollectionContaining.php
+++ PHP_CodeSniffer
@@ -43,9 +43,8 @@
     public function describeTo(Description $description)
     {
         $description
-                ->appendText('a collection containing ')
-                ->appendDescriptionOf($this->_elementMatcher)
-                ;
+            ->appendText('a collection containing ')
+            ->appendDescriptionOf($this->_elementMatcher);
     }
 
     /**

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Core/IsInstanceOf.php
+++ PHP_CodeSniffer
@@ -37,7 +37,7 @@
 
         if (!($item instanceof $this->_theClass)) {
             $mismatchDescription->appendText('[' . get_class($item) . '] ')
-                                                    ->appendValue($item);
+                ->appendValue($item);
 
             return false;
         }
@@ -48,8 +48,7 @@
     public function describeTo(Description $description)
     {
         $description->appendText('an instance of ')
-                                ->appendText($this->_theClass)
-                                ;
+            ->appendText($this->_theClass);
     }
 
     /**

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Core/IsSame.php
+++ PHP_CodeSniffer
@@ -29,9 +29,8 @@
     public function describeTo(Description $description)
     {
         $description->appendText('sameInstance(')
-                                ->appendValue($this->_object)
-                                ->appendText(')')
-                                ;
+            ->appendValue($this->_object)
+            ->appendText(')');
     }
 
     /**
@@ -41,7 +40,7 @@
      *   The predicate evaluates to true only when the argument is
      *   this object.
      *
-     * @return \Hamcrest\Core\IsSame
+     * @return  \Hamcrest\Core\IsSame
      * @factory
      */
     public static function sameInstance($object)

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Core/IsTypeOf.php
+++ PHP_CodeSniffer
@@ -42,10 +42,9 @@
             $description->appendText('was null');
         } else {
             $description->appendText('was ')
-                                    ->appendText(self::getTypeDescription(strtolower(gettype($item))))
-                                    ->appendText(' ')
-                                    ->appendValue($item)
-                                    ;
+                ->appendText(self::getTypeDescription(strtolower(gettype($item))))
+                ->appendText(' ')
+                ->appendValue($item);
         }
     }
 

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Core/ShortcutCombination.php
+++ PHP_CodeSniffer
@@ -26,7 +26,9 @@
 
     protected function matchesWithShortcut($item, $shortcut)
     {
-        /** @var $matcher \Hamcrest\Matcher */
+        /**
+ * @var $matcher \Hamcrest\Matcher 
+*/
         foreach ($this->_matchers as $matcher) {
             if ($matcher->matches($item) == $shortcut) {
                 return $shortcut;

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Description.php
+++ PHP_CodeSniffer
@@ -45,9 +45,9 @@
     /**
      * Appends a list of values to the description.
      *
-     * @param string $start
-     * @param string $separator
-     * @param string $end
+     * @param string                             $start
+     * @param string                             $separator
+     * @param string                             $end
      * @param array|\IteratorAggregate|\Iterator $values
      *
      * @return \Hamcrest\Description
@@ -58,9 +58,9 @@
      * Appends a list of {@link Hamcrest\SelfDescribing} objects to the
      * description.
      *
-     * @param string $start
-     * @param string $separator
-     * @param string $end
+     * @param string                               $start
+     * @param string                               $separator
+     * @param string                               $end
      * @param array|\\IteratorAggregate|\\Iterator $values
      *   must be instances of {@link Hamcrest\SelfDescribing}
      *

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/FeatureMatcher.php
+++ PHP_CodeSniffer
@@ -20,11 +20,11 @@
     /**
      * Constructor.
      *
-     * @param string $type
-     * @param string $subtype
-     * @param \Hamcrest\Matcher $subMatcher The matcher to apply to the feature
-     * @param string $featureDescription Descriptive text to use in describeTo
-     * @param string $featureName Identifying text for mismatch message
+     * @param string            $type
+     * @param string            $subtype
+     * @param \Hamcrest\Matcher $subMatcher         The matcher to apply to the feature
+     * @param string            $featureDescription Descriptive text to use in describeTo
+     * @param string            $featureName        Identifying text for mismatch message
      */
     public function __construct($type, $subtype, Matcher $subMatcher, $featureDescription, $featureName)
     {
@@ -50,7 +50,7 @@
 
         if (!$this->_subMatcher->matches($featureValue)) {
             $mismatchDescription->appendText($this->_featureName)
-                                                    ->appendText(' was ')->appendValue($featureValue);
+                ->appendText(' was ')->appendValue($featureValue);
 
             return false;
         }
@@ -61,7 +61,6 @@
     final public function describeTo(Description $description)
     {
         $description->appendText($this->_featureDescription)->appendText(' ')
-                                ->appendDescriptionOf($this->_subMatcher)
-                             ;
+            ->appendDescriptionOf($this->_subMatcher);
     }
 }

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Matcher.php
+++ PHP_CodeSniffer
@@ -42,8 +42,8 @@
          * This method assumes that <code>matches($item)</code> is false, but
          * will not check this.
          *
-         * @param mixed $item The item that the Matcher has rejected.
-         * @param Description $description
+         * @param  mixed       $item        The item that the Matcher has rejected.
+         * @param  Description $description
          * @return
          */
     public function describeMismatch($item, Description $description);

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/MatcherAssert.php
+++ PHP_CodeSniffer
@@ -39,33 +39,33 @@
     {
         $args = func_get_args();
         switch (count($args)) {
-            case 1:
-                self::$_count++;
-                if (!$args[0]) {
-                    throw new AssertionError();
-                }
-                break;
-
-            case 2:
-                self::$_count++;
-                if ($args[1] instanceof Matcher) {
-                    self::doAssert('', $args[0], $args[1]);
-                } elseif (!$args[1]) {
-                    throw new AssertionError($args[0]);
-                }
-                break;
-
-            case 3:
-                self::$_count++;
-                self::doAssert(
-                    $args[0],
-                    $args[1],
-                    Util::wrapValueWithIsEqual($args[2])
-                );
-                break;
+        case 1:
+            self::$_count++;
+            if (!$args[0]) {
+                throw new AssertionError();
+            }
+            break;
+
+        case 2:
+            self::$_count++;
+            if ($args[1] instanceof Matcher) {
+                self::doAssert('', $args[0], $args[1]);
+            } elseif (!$args[1]) {
+                throw new AssertionError($args[0]);
+            }
+            break;
+
+        case 3:
+            self::$_count++;
+            self::doAssert(
+                $args[0],
+                $args[1],
+                Util::wrapValueWithIsEqual($args[2])
+            );
+            break;
 
-            default:
-                throw new \InvalidArgumentException('assertThat() requires one to three arguments');
+        default:
+            throw new \InvalidArgumentException('assertThat() requires one to three arguments');
         }
     }
 
@@ -94,9 +94,9 @@
      * throws a {@link Hamcrest\AssertionError} with a description
      * of the failure along with the optional <code>$identifier</code>.
      *
-     * @param string $identifier added to the message upon failure
-     * @param mixed $actual value to compare against <code>$matcher</code>
-     * @param \Hamcrest\Matcher $matcher applied to <code>$actual</code>
+     * @param  string            $identifier added to the message upon failure
+     * @param  mixed             $actual     value to compare against <code>$matcher</code>
+     * @param  \Hamcrest\Matcher $matcher    applied to <code>$actual</code>
      * @throws AssertionError
      */
     private static function doAssert($identifier, $actual, Matcher $matcher)
@@ -107,8 +107,8 @@
                 $description->appendText($identifier . PHP_EOL);
             }
             $description->appendText('Expected: ')
-                                    ->appendDescriptionOf($matcher)
-                                    ->appendText(PHP_EOL . '     but: ');
+                ->appendDescriptionOf($matcher)
+                ->appendText(PHP_EOL . '     but: ');
 
             $matcher->describeMismatch($actual, $description);
 

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Number/IsCloseTo.php
+++ PHP_CodeSniffer
@@ -33,18 +33,16 @@
     protected function describeMismatchSafely($item, Description $mismatchDescription)
     {
         $mismatchDescription->appendValue($item)
-                                                ->appendText(' differed by ')
-                                                ->appendValue($this->_actualDelta($item))
-                                                ;
+            ->appendText(' differed by ')
+            ->appendValue($this->_actualDelta($item));
     }
 
     public function describeTo(Description $description)
     {
         $description->appendText('a numeric value within ')
-                                ->appendValue($this->_delta)
-                                ->appendText(' of ')
-                                ->appendValue($this->_value)
-                                ;
+            ->appendValue($this->_delta)
+            ->appendText(' of ')
+            ->appendValue($this->_value);
     }
 
     /**

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Number/OrderingComparison.php
+++ PHP_CodeSniffer
@@ -36,19 +36,16 @@
         $mismatchDescription
             ->appendValue($item)->appendText(' was ')
             ->appendText($this->_comparison($this->_compare($this->_value, $item)))
-            ->appendText(' ')->appendValue($this->_value)
-            ;
+            ->appendText(' ')->appendValue($this->_value);
     }
 
     public function describeTo(Description $description)
     {
         $description->appendText('a value ')
-            ->appendText($this->_comparison($this->_minCompare))
-            ;
+            ->appendText($this->_comparison($this->_minCompare));
         if ($this->_minCompare != $this->_maxCompare) {
             $description->appendText(' or ')
-                ->appendText($this->_comparison($this->_maxCompare))
-                ;
+                ->appendText($this->_comparison($this->_maxCompare));
         }
         $description->appendText(' ')->appendValue($this->_value);
     }

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Text/IsEqualIgnoringCase.php
+++ PHP_CodeSniffer
@@ -35,9 +35,8 @@
     public function describeTo(Description $description)
     {
         $description->appendText('equalToIgnoringCase(')
-                                ->appendValue($this->_string)
-                                ->appendText(')')
-                                ;
+            ->appendValue($this->_string)
+            ->appendText(')');
     }
 
     /**

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Text/IsEqualIgnoringWhiteSpace.php
+++ PHP_CodeSniffer
@@ -37,9 +37,8 @@
     public function describeTo(Description $description)
     {
         $description->appendText('equalToIgnoringWhiteSpace(')
-                                ->appendValue($this->_string)
-                                ->appendText(')')
-                                ;
+            ->appendValue($this->_string)
+            ->appendText(')');
     }
 
     /**

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Text/StringContainsInOrder.php
+++ PHP_CodeSniffer
@@ -43,9 +43,8 @@
     public function describeTo(Description $description)
     {
         $description->appendText('a string containing ')
-                                ->appendValueList('', ', ', '', $this->_substrings)
-                                ->appendText(' in order')
-                                ;
+            ->appendValueList('', ', ', '', $this->_substrings)
+            ->appendText(' in order');
     }
 
     /**

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Text/SubstringMatcher.php
+++ PHP_CodeSniffer
@@ -33,10 +33,9 @@
     public function describeTo(Description $description)
     {
         $description->appendText('a string ')
-                                ->appendText($this->relationship())
-                                ->appendText(' ')
-                                ->appendValue($this->_substring)
-                                ;
+            ->appendText($this->relationship())
+            ->appendText(' ')
+            ->appendValue($this->_substring);
     }
 
     abstract protected function evalSubstringOf($string);

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/TypeSafeMatcher.php
+++ PHP_CodeSniffer
@@ -74,33 +74,33 @@
     {
         switch ($this->_expectedType) {
 
-            case self::TYPE_ANY:
-                return true;
+        case self::TYPE_ANY:
+            return true;
 
-            case self::TYPE_STRING:
-                return is_string($value) || is_numeric($value);
+        case self::TYPE_STRING:
+            return is_string($value) || is_numeric($value);
 
-            case self::TYPE_NUMERIC:
-                return is_numeric($value) || is_string($value);
+        case self::TYPE_NUMERIC:
+            return is_numeric($value) || is_string($value);
 
-            case self::TYPE_ARRAY:
-                return is_array($value);
+        case self::TYPE_ARRAY:
+            return is_array($value);
 
-            case self::TYPE_OBJECT:
-                return is_object($value)
+        case self::TYPE_OBJECT:
+            return is_object($value)
                         && ($this->_expectedSubtype === null
                                 || $value instanceof $this->_expectedSubtype);
 
-            case self::TYPE_RESOURCE:
-                return is_resource($value)
+        case self::TYPE_RESOURCE:
+            return is_resource($value)
                         && ($this->_expectedSubtype === null
                                 || get_resource_type($value) == $this->_expectedSubtype);
 
-            case self::TYPE_BOOLEAN:
-                return true;
+        case self::TYPE_BOOLEAN:
+            return true;
 
-            default:
-                return true;
+        default:
+            return true;
 
         }
     }

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Util.php
+++ PHP_CodeSniffer
@@ -16,21 +16,20 @@
     /**
      * Wraps the item with an IsEqual matcher if it isn't a matcher already.
      *
-     * @param mixed $item matcher or any value
+     * @param  mixed $item matcher or any value
      * @return \Hamcrest\Matcher
      */
     public static function wrapValueWithIsEqual($item)
     {
         return ($item instanceof Matcher)
             ? $item
-            : Core\IsEqual::equalTo($item)
-            ;
+            : Core\IsEqual::equalTo($item);
     }
 
     /**
      * Throws an exception if any item in $matchers is not a Hamcrest\Matcher.
      *
-     * @param array $matchers expected to contain only matchers
+     * @param  array $matchers expected to contain only matchers
      * @throws \InvalidArgumentException if any item is not a matcher
      */
     public static function checkAllAreMatchers(array $matchers)
@@ -50,7 +49,7 @@
      * is an array, it is used as the $items array to support the old style
      * of passing an array as the sole argument to a matcher.
      *
-     * @param array $items contains items and matchers
+     * @param  array $items contains items and matchers
      * @return array<Matchers> all items are
      */
     public static function createMatcherArray(array $items)

--- vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest/Xml/HasXPath.php
+++ PHP_CodeSniffer
@@ -41,8 +41,8 @@
     /**
      * Matches if the XPath matches against the DOM node and the matcher.
      *
-     * @param string|\DOMNode $actual
-     * @param Description $mismatchDescription
+     * @param  string|\DOMNode $actual
+     * @param  Description     $mismatchDescription
      * @return bool
      */
     protected function matchesWithDiagnosticDescription($actual, Description $mismatchDescription)
@@ -66,7 +66,7 @@
      * Creates and returns a <code>DOMDocument</code> from the given
      * XML or HTML string.
      *
-     * @param string $text
+     * @param  string $text
      * @return \DOMDocument built from <code>$text</code>
      * @throws \InvalidArgumentException if the document is not valid
      */
@@ -90,7 +90,7 @@
      * Applies the configured XPath to the DOM node and returns either
      * the result if it's an expression or the node list if it's a query.
      *
-     * @param \DOMNode $node context from which to issue query
+     * @param  \DOMNode $node context from which to issue query
      * @return mixed result of expression or DOMNodeList from query
      */
     protected function evaluate(\DOMNode $node)
@@ -110,8 +110,8 @@
      * Matches if the list of nodes is not empty and the content of at least
      * one node matches the configured matcher, if supplied.
      *
-     * @param \DOMNodeList $nodes selected by the XPath query
-     * @param Description $mismatchDescription
+     * @param  \DOMNodeList $nodes               selected by the XPath query
+     * @param  Description  $mismatchDescription
      * @return bool
      */
     protected function matchesContent(\DOMNodeList $nodes, Description $mismatchDescription)
@@ -131,7 +131,7 @@
                 $content[] = $node->textContent;
             }
             $mismatchDescription->appendText('XPath returned ')
-                                                    ->appendValue($content);
+                ->appendValue($content);
         }
 
         return false;
@@ -141,8 +141,8 @@
      * Matches if the result of the XPath expression matches the configured
      * matcher or evaluates to <code>true</code> if there is none.
      *
-     * @param mixed $result result of the XPath expression
-     * @param Description $mismatchDescription
+     * @param  mixed       $result              result of the XPath expression
+     * @param  Description $mismatchDescription
      * @return bool
      */
     protected function matchesExpression($result, Description $mismatchDescription)
@@ -152,7 +152,7 @@
                 return true;
             }
             $mismatchDescription->appendText('XPath expression result was ')
-                                                    ->appendValue($result);
+                ->appendValue($result);
         } else {
             if ($this->_matcher->matches($result)) {
                 return true;
@@ -167,8 +167,8 @@
     public function describeTo(Description $description)
     {
         $description->appendText('XML or HTML document with XPath "')
-                                ->appendText($this->_xpath)
-                                ->appendText('"');
+            ->appendText($this->_xpath)
+            ->appendText('"');
         if ($this->_matcher !== null) {
             $description->appendText(' ');
             $this->_matcher->describeTo($description);

--- vendor/hamcrest/hamcrest-php/tests/bootstrap.php
+++ PHP_CodeSniffer
@@ -9,10 +9,14 @@
 define('HAMCREST_TEST_BASE', realpath(dirname(__FILE__)));
 define('HAMCREST_BASE', realpath(dirname(dirname(__FILE__))));
 
-set_include_path(implode(PATH_SEPARATOR, array(
-    HAMCREST_TEST_BASE,
-    HAMCREST_BASE . '/hamcrest',
-    get_include_path()
-)));
+set_include_path(
+    implode(
+        PATH_SEPARATOR, array(
+        HAMCREST_TEST_BASE,
+        HAMCREST_BASE . '/hamcrest',
+        get_include_path()
+        )
+    )
+);
 
 require_once 'Hamcrest.php';

--- vendor/hamcrest/hamcrest-php/tests/Hamcrest/AbstractMatcherTest.php
+++ PHP_CodeSniffer
@@ -1,7 +1,8 @@
 <?php
 namespace Hamcrest;
 
-class UnknownType {
+class UnknownType
+{
 }
 
 abstract class AbstractMatcherTest extends \PHPUnit_Framework_TestCase

--- vendor/hamcrest/hamcrest-php/tests/Hamcrest/StringDescriptionTest.php
+++ PHP_CodeSniffer
@@ -124,36 +124,41 @@
     {
         $this->_description
             ->appendDescriptionOf(new \Hamcrest\SampleSelfDescriber('foo'))
-            ->appendDescriptionOf(new \Hamcrest\SampleSelfDescriber('bar'))
-            ;
+            ->appendDescriptionOf(new \Hamcrest\SampleSelfDescriber('bar'));
         $this->assertEquals('foobar', (string) $this->_description);
     }
 
     public function testSelfDescribingObjectsCanBeAppendedAsLists()
     {
-        $this->_description->appendList('@start@', '@sep@ ', '@end@', array(
+        $this->_description->appendList(
+            '@start@', '@sep@ ', '@end@', array(
             new \Hamcrest\SampleSelfDescriber('foo'),
             new \Hamcrest\SampleSelfDescriber('bar')
-        ));
+            )
+        );
         $this->assertEquals('@start@foo@sep@ bar@end@', (string) $this->_description);
     }
 
     public function testSelfDescribingObjectsCanBeAppendedAsIteratedLists()
     {
-        $items = new \ArrayObject(array(
+        $items = new \ArrayObject(
+            array(
             new \Hamcrest\SampleSelfDescriber('foo'),
             new \Hamcrest\SampleSelfDescriber('bar')
-        ));
+            )
+        );
         $this->_description->appendList('@start@', '@sep@ ', '@end@', $items);
         $this->assertEquals('@start@foo@sep@ bar@end@', (string) $this->_description);
     }
 
     public function testSelfDescribingObjectsCanBeAppendedAsIterators()
     {
-        $items = new \ArrayObject(array(
+        $items = new \ArrayObject(
+            array(
             new \Hamcrest\SampleSelfDescriber('foo'),
             new \Hamcrest\SampleSelfDescriber('bar')
-        ));
+            )
+        );
         $this->_description->appendList('@start@', '@sep@ ', '@end@', $items->getIterator());
         $this->assertEquals('@start@foo@sep@ bar@end@', (string) $this->_description);
     }

--- vendor/hamcrest/hamcrest-php/tests/Hamcrest/UtilTest.php
+++ PHP_CodeSniffer
@@ -20,10 +20,12 @@
 
     public function testCheckAllAreMatchersAcceptsMatchers()
     {
-        \Hamcrest\Util::checkAllAreMatchers(array(
+        \Hamcrest\Util::checkAllAreMatchers(
+            array(
             new \Hamcrest\Text\MatchesPattern('/fo+/'),
             new \Hamcrest\Core\IsEqual('foo'),
-        ));
+            )
+        );
     }
 
     /**
@@ -31,10 +33,12 @@
      */
     public function testCheckAllAreMatchersFailsForPrimitive()
     {
-        \Hamcrest\Util::checkAllAreMatchers(array(
+        \Hamcrest\Util::checkAllAreMatchers(
+            array(
             new \Hamcrest\Text\MatchesPattern('/fo+/'),
             'foo',
-        ));
+            )
+        );
     }
 
     private function callAndAssertCreateMatcherArray($items)

--- vendor/jakub-onderka/php-console-color/example.php
+++ PHP_CodeSniffer
@@ -1,5 +1,5 @@
 <?php
-$loader = require_once __DIR__ . '/vendor/autoload.php';
+$loader = include_once __DIR__ . '/vendor/autoload.php';
 
 $consoleColor = new JakubOnderka\PhpConsoleColor\ConsoleColor();
 

--- vendor/jakub-onderka/php-console-color/src/JakubOnderka/PhpConsoleColor/ConsoleColor.php
+++ PHP_CodeSniffer
@@ -10,13 +10,19 @@
 
     const RESET_STYLE = 0;
 
-    /** @var bool */
+    /**
+ * @var bool 
+*/
     private $isSupported;
 
-    /** @var bool */
+    /**
+ * @var bool 
+*/
     private $forceStyle = false;
 
-    /** @var array */
+    /**
+ * @var array 
+*/
     private $styles = array(
         'none' => null,
         'bold' => '1',
@@ -66,7 +72,9 @@
         'bg_white' => '107',
     );
 
-    /** @var array */
+    /**
+ * @var array 
+*/
     private $themes = array();
 
     public function __construct()
@@ -76,7 +84,7 @@
 
     /**
      * @param string|array $style
-     * @param string $text
+     * @param string       $text
      * @return string
      * @throws InvalidStyleException
      * @throws \InvalidArgumentException
@@ -106,9 +114,11 @@
             }
         }
 
-        $sequences = array_filter($sequences, function ($val) {
-            return $val !== null;
-        });
+        $sequences = array_filter(
+            $sequences, function ($val) {
+                return $val !== null;
+            }
+        );
 
         if (empty($sequences)) {
             return $text;
@@ -147,7 +157,7 @@
     }
 
     /**
-     * @param string $name
+     * @param string       $name
      * @param array|string $styles
      * @throws \InvalidArgumentException
      * @throws InvalidStyleException

--- vendor/jakub-onderka/php-console-color/tests/bootstrap.php
+++ PHP_CodeSniffer
@@ -1,2 +1,2 @@
 <?php
-$loader = require_once __DIR__ . '/../vendor/autoload.php';
\ No newline at end of file
+$loader = include_once __DIR__ . '/../vendor/autoload.php';
\ No newline at end of file

--- vendor/jakub-onderka/php-console-color/tests/JakubOnderka/PhpConsoleColor/ConsoleColorTest.php
+++ PHP_CodeSniffer
@@ -30,7 +30,9 @@
 
 class ConsoleColorTest extends \PHPUnit_Framework_TestCase
 {
-    /** @var ConsoleColorWithForceSupport */
+    /**
+ * @var ConsoleColorWithForceSupport 
+*/
     private $uut;
 
     protected function setUp()

--- vendor/jakub-onderka/php-console-highlighter/src/JakubOnderka/PhpConsoleHighlighter/Highlighter.php
+++ PHP_CodeSniffer
@@ -14,10 +14,14 @@
     const ACTUAL_LINE_MARK = 'actual_line_mark',
         LINE_NUMBER = 'line_number';
 
-    /** @var ConsoleColor */
+    /**
+ * @var ConsoleColor 
+*/
     private $color;
 
-    /** @var array */
+    /**
+ * @var array 
+*/
     private $defaultTheme = array(
         self::TOKEN_STRING => 'red',
         self::TOKEN_COMMENT => 'yellow',
@@ -45,9 +49,9 @@
 
     /**
      * @param string $source
-     * @param int $lineNumber
-     * @param int $linesBefore
-     * @param int $linesAfter
+     * @param int    $lineNumber
+     * @param int    $linesBefore
+     * @param int    $linesAfter
      * @return string
      * @throws \JakubOnderka\PhpConsoleColor\InvalidStyleException
      * @throws \InvalidArgumentException
@@ -118,50 +122,50 @@
         foreach ($tokens as $token) {
             if (is_array($token)) {
                 switch ($token[0]) {
-                    case T_INLINE_HTML:
-                        $newType = self::TOKEN_HTML;
-                        break;
-
-                    case T_COMMENT:
-                    case T_DOC_COMMENT:
-                        $newType = self::TOKEN_COMMENT;
-                        break;
-
-                    case T_ENCAPSED_AND_WHITESPACE:
-                    case T_CONSTANT_ENCAPSED_STRING:
-                        $newType = self::TOKEN_STRING;
-                        break;
-
-                    case T_WHITESPACE:
-                        break;
-
-                    case T_OPEN_TAG:
-                    case T_OPEN_TAG_WITH_ECHO:
-                    case T_CLOSE_TAG:
-                    case T_STRING:
-                    case T_VARIABLE:
+                case T_INLINE_HTML:
+                    $newType = self::TOKEN_HTML;
+                    break;
+
+                case T_COMMENT:
+                case T_DOC_COMMENT:
+                    $newType = self::TOKEN_COMMENT;
+                    break;
+
+                case T_ENCAPSED_AND_WHITESPACE:
+                case T_CONSTANT_ENCAPSED_STRING:
+                    $newType = self::TOKEN_STRING;
+                    break;
+
+                case T_WHITESPACE:
+                    break;
+
+                case T_OPEN_TAG:
+                case T_OPEN_TAG_WITH_ECHO:
+                case T_CLOSE_TAG:
+                case T_STRING:
+                case T_VARIABLE:
 
                     // Constants
-                    case T_DIR:
-                    case T_FILE:
-                    case T_METHOD_C:
-                    case T_DNUMBER:
-                    case T_LNUMBER:
-                    case T_NS_C:
-                    case T_LINE:
-                    case T_CLASS_C:
-                    case T_FUNC_C:
+                case T_DIR:
+                case T_FILE:
+                case T_METHOD_C:
+                case T_DNUMBER:
+                case T_LNUMBER:
+                case T_NS_C:
+                case T_LINE:
+                case T_CLASS_C:
+                case T_FUNC_C:
                     //case T_TRAIT_C:
-                        $newType = self::TOKEN_DEFAULT;
-                        break;
+                    $newType = self::TOKEN_DEFAULT;
+                    break;
 
-                    default:
-                        // Compatibility with PHP 5.3
-                        if (defined('T_TRAIT_C') && $token[0] === T_TRAIT_C) {
-                            $newType = self::TOKEN_DEFAULT;
-                        } else {
-                            $newType = self::TOKEN_KEYWORD;
-                        }
+                default:
+                    // Compatibility with PHP 5.3
+                    if (defined('T_TRAIT_C') && $token[0] === T_TRAIT_C) {
+                        $newType = self::TOKEN_DEFAULT;
+                    } else {
+                        $newType = self::TOKEN_KEYWORD;
+                    }
                 }
             } else {
                 $newType = $token === '"' ? self::TOKEN_STRING : self::TOKEN_KEYWORD;
@@ -242,7 +246,7 @@
     }
 
     /**
-     * @param array $lines
+     * @param array    $lines
      * @param null|int $markLine
      * @return string
      * @throws \JakubOnderka\PhpConsoleColor\InvalidStyleException

--- vendor/jakub-onderka/php-console-highlighter/tests/bootstrap.php
+++ PHP_CodeSniffer
@@ -1,2 +1,2 @@
 <?php
-$loader = require_once __DIR__ . '/../vendor/autoload.php';
\ No newline at end of file
+$loader = include_once __DIR__ . '/../vendor/autoload.php';
\ No newline at end of file

--- vendor/jakub-onderka/php-console-highlighter/tests/JakubOnderka/PhpConsoleHighligter/HigligterTest.php
+++ PHP_CodeSniffer
@@ -3,7 +3,9 @@
 
 class HighlighterTest extends \PHPUnit_Framework_TestCase
 {
-    /** @var Highlighter */
+    /**
+ * @var Highlighter 
+*/
     private $uut;
 
     protected function getConsoleColorMock()
@@ -12,9 +14,13 @@
 
         $mock->expects($this->any())
             ->method('apply')
-            ->will($this->returnCallback(function ($style, $text) {
-                return "<$style>$text</$style>";
-            }));
+            ->will(
+                $this->returnCallback(
+                    function ($style, $text) {
+                        return "<$style>$text</$style>";
+                    }
+                )
+            );
 
         $mock->expects($this->any())
             ->method('hasTheme')
@@ -56,7 +62,7 @@
 <?php
 echo 43;
 EOL
-            ,
+,
             <<<EOL
 <token_default><?php</token_default>
 <token_keyword>echo </token_keyword><token_default>43</token_default><token_keyword>;</token_keyword>
@@ -71,7 +77,7 @@
 <?php
 echo 43.3;
 EOL
-            ,
+,
             <<<EOL
 <token_default><?php</token_default>
 <token_keyword>echo </token_keyword><token_default>43.3</token_default><token_keyword>;</token_keyword>
@@ -86,7 +92,7 @@
 <?php
 echo 0x43;
 EOL
-            ,
+,
             <<<EOL
 <token_default><?php</token_default>
 <token_keyword>echo </token_keyword><token_default>0x43</token_default><token_keyword>;</token_keyword>
@@ -103,7 +109,7 @@
     return \$a + \$b;
 }
 EOL
-            ,
+,
             <<<EOL
 <token_default><?php</token_default>
 <token_keyword>function </token_keyword><token_default>plus</token_default><token_keyword>(</token_keyword><token_default>\$a</token_default><token_keyword>, </token_keyword><token_default>\$b</token_default><token_keyword>) {</token_keyword>
@@ -120,7 +126,7 @@
 <?php
 echo 'Ahoj světe';
 EOL
-            ,
+,
             <<<EOL
 <token_default><?php</token_default>
 <token_keyword>echo </token_keyword><token_string>'Ahoj světe'</token_string><token_keyword>;</token_keyword>
@@ -135,7 +141,7 @@
 <?php
 echo "Ahoj světe";
 EOL
-            ,
+,
             <<<EOL
 <token_default><?php</token_default>
 <token_keyword>echo </token_keyword><token_string>"Ahoj světe"</token_string><token_keyword>;</token_keyword>
@@ -180,7 +186,7 @@
 <?php
 $constant;
 EOL
-                ,
+,
                 <<<EOL
 <token_default><?php</token_default>
 <token_default>$constant</token_default><token_keyword>;</token_keyword>
@@ -199,7 +205,7 @@
 <?php
 /* Ahoj */
 EOL
-            ,
+,
             <<<EOL
 <token_default><?php</token_default>
 <token_comment>/* Ahoj */</token_comment>
@@ -214,7 +220,7 @@
 <?php
 /** Ahoj */
 EOL
-            ,
+,
             <<<EOL
 <token_default><?php</token_default>
 <token_comment>/** Ahoj */</token_comment>
@@ -229,7 +235,7 @@
 <?php
 // Ahoj
 EOL
-            ,
+,
             <<<EOL
 <token_default><?php</token_default>
 <token_comment>// Ahoj</token_comment>
@@ -244,7 +250,7 @@
 <?php
 # Ahoj
 EOL
-            ,
+,
             <<<EOL
 <token_default><?php</token_default>
 <token_comment># Ahoj</token_comment>
@@ -255,8 +261,7 @@
     public function testEmpty()
     {
         $this->compare(
-            ''
-            ,
+            '',
             ''
         );
     }

--- vendor/jeremeamia/SuperClosure/src/Analyzer/AstAnalyzer.php
+++ PHP_CodeSniffer
@@ -88,12 +88,14 @@
     {
         // Get the variable names defined in the AST
         $refs = 0;
-        $vars = array_map(function ($node) use (&$refs) {
-            if ($node->byRef) {
-                $refs++;
-            }
-            return $node->var;
-        }, $data['ast']->uses);
+        $vars = array_map(
+            function ($node) use (&$refs) {
+                if ($node->byRef) {
+                    $refs++;
+                }
+                return $node->var;
+            }, $data['ast']->uses
+        );
         $data['hasRefs'] = ($refs > 0);
 
         // Get the variable names and values using reflection

--- vendor/jeremeamia/SuperClosure/src/Analyzer/TokenAnalyzer.php
+++ PHP_CodeSniffer
@@ -28,51 +28,52 @@
             $token = new Token($token);
             switch ($step) {
                 // Handle tokens before the function declaration.
-                case 0:
-                    if ($token->is(T_FUNCTION)) {
-                        $data['tokens'][] = $token;
-                        $step++;
-                    }
-                    break;
-                // Handle tokens inside the function signature.
-                case 1:
+            case 0:
+                if ($token->is(T_FUNCTION)) {
                     $data['tokens'][] = $token;
-                    if ($insideUse) {
-                        if ($token->is(T_VARIABLE)) {
-                            $varName = trim($token, '$ ');
-                            $data['context'][$varName] = null;
-                        } elseif ($token->is('&')) {
-                            $data['hasRefs'] = true;
-                        }
-                    } elseif ($token->is(T_USE)) {
-                        $insideUse++;
-                    }
-                    if ($token->is('{')) {
-                        $step++;
-                        $braceLevel++;
+                    $step++;
+                }
+                break;
+                // Handle tokens inside the function signature.
+            case 1:
+                $data['tokens'][] = $token;
+                if ($insideUse) {
+                    if ($token->is(T_VARIABLE)) {
+                        $varName = trim($token, '$ ');
+                        $data['context'][$varName] = null;
+                    } elseif ($token->is('&')) {
+                        $data['hasRefs'] = true;
                     }
-                    break;
+                } elseif ($token->is(T_USE)) {
+                    $insideUse++;
+                }
+                if ($token->is('{')) {
+                    $step++;
+                    $braceLevel++;
+                }
+                break;
                 // Handle tokens inside the function body.
-                case 2:
-                    $data['tokens'][] = $token;
-                    if ($token->is('{')) {
-                        $braceLevel++;
-                    } elseif ($token->is('}')) {
-                        $braceLevel--;
-                        if ($braceLevel === 0) {
-                            $step++;
-                        }
+            case 2:
+                $data['tokens'][] = $token;
+                if ($token->is('{')) {
+                    $braceLevel++;
+                } elseif ($token->is('}')) {
+                    $braceLevel--;
+                    if ($braceLevel === 0) {
+                        $step++;
                     }
-                    break;
+                }
+                break;
                 // Handle tokens after the function declaration.
-                case 3:
-                    if ($token->is(T_FUNCTION)) {
-                        throw new ClosureAnalysisException('Multiple closures '
-                            . 'were declared on the same line of code. Could not '
-                            . 'determine which closure was the intended target.'
-                        );
-                    }
-                    break;
+            case 3:
+                if ($token->is(T_FUNCTION)) {
+                    throw new ClosureAnalysisException(
+                        'Multiple closures '
+                        . 'were declared on the same line of code. Could not '
+                        . 'determine which closure was the intended target.'
+                    );
+                }
+                break;
             }
         }
     }

--- vendor/jeremeamia/SuperClosure/src/Analyzer/Visitor/ClosureLocatorVisitor.php
+++ PHP_CodeSniffer
@@ -73,9 +73,11 @@
             if ($node->getAttribute('startLine') == $this->location['line']) {
                 if ($this->closureNode) {
                     $line = $this->location['file'] . ':' . $node->getAttribute('startLine');
-                    throw new ClosureAnalysisException("Two closures were "
+                    throw new ClosureAnalysisException(
+                        "Two closures were "
                         . "declared on the same line ({$line}) of code. Cannot "
-                        . "determine which closure was the intended target.");
+                        . "determine which closure was the intended target."
+                    );
                 } else {
                     $this->closureNode = $node;
                 }

--- vendor/jeremeamia/SuperClosure/src/Analyzer/Visitor/MagicConstantVisitor.php
+++ PHP_CodeSniffer
@@ -29,22 +29,22 @@
     public function leaveNode(AstNode $node)
     {
         switch ($node->getType()) {
-            case 'Scalar_MagicConst_Class' :
-                return new StringNode($this->location['class']);
-            case 'Scalar_MagicConst_Dir' :
-                return new StringNode($this->location['directory']);
-            case 'Scalar_MagicConst_File' :
-                return new StringNode($this->location['file']);
-            case 'Scalar_MagicConst_Function' :
-                return new StringNode($this->location['function']);
-            case 'Scalar_MagicConst_Line' :
-                return new NumberNode($node->getAttribute('startLine'));
-            case 'Scalar_MagicConst_Method' :
-                return new StringNode($this->location['method']);
-            case 'Scalar_MagicConst_Namespace' :
-                return new StringNode($this->location['namespace']);
-            case 'Scalar_MagicConst_Trait' :
-                return new StringNode($this->location['trait']);
+        case 'Scalar_MagicConst_Class' :
+            return new StringNode($this->location['class']);
+        case 'Scalar_MagicConst_Dir' :
+            return new StringNode($this->location['directory']);
+        case 'Scalar_MagicConst_File' :
+            return new StringNode($this->location['file']);
+        case 'Scalar_MagicConst_Function' :
+            return new StringNode($this->location['function']);
+        case 'Scalar_MagicConst_Line' :
+            return new NumberNode($node->getAttribute('startLine'));
+        case 'Scalar_MagicConst_Method' :
+            return new StringNode($this->location['method']);
+        case 'Scalar_MagicConst_Namespace' :
+            return new StringNode($this->location['namespace']);
+        case 'Scalar_MagicConst_Trait' :
+            return new StringNode($this->location['trait']);
         }
     }
 }

--- vendor/jeremeamia/SuperClosure/src/SerializableClosure.php
+++ PHP_CodeSniffer
@@ -89,7 +89,7 @@
      *                        protected and private methods of the bound object.
      *
      * @return SerializableClosure
-     * @link http://www.php.net/manual/en/closure.bindto.php
+     * @link   http://www.php.net/manual/en/closure.bindto.php
      */
     public function bindTo($newthis, $newscope = 'static')
     {
@@ -103,7 +103,7 @@
      * Serializes the code, context, and binding of the closure.
      *
      * @return string|null
-     * @link http://php.net/manual/en/serializable.serialize.php
+     * @link   http://php.net/manual/en/serializable.serialize.php
      */
     public function serialize()
     {
@@ -132,7 +132,7 @@
      * @param string $serialized
      *
      * @throws ClosureUnserializationException
-     * @link http://php.net/manual/en/serializable.unserialize.php
+     * @link   http://php.net/manual/en/serializable.unserialize.php
      */
     public function unserialize($serialized)
     {
@@ -181,7 +181,7 @@
  *
  * @param array $__data Unserialized closure data.
  *
- * @return Closure|null
+ * @return   Closure|null
  * @internal
  */
 function __reconstruct_closure(array $__data)

--- vendor/jeremeamia/SuperClosure/src/Serializer.php
+++ PHP_CodeSniffer
@@ -92,7 +92,10 @@
             $this->verifySignature($signature, $serialized);
         }
 
-        set_error_handler(function () {});
+        set_error_handler(
+            function () {
+            }
+        );
         $unserialized = unserialize($serialized);
         restore_error_handler();
         if ($unserialized === false) {
@@ -145,7 +148,7 @@
      *
      * NOTE: THIS MAY NOT WORK IN ALL USE CASES, SO USE AT YOUR OWN RISK.
      *
-     * @param mixed $data Any variable that contains closures.
+     * @param mixed               $data       Any variable that contains closures.
      * @param SerializerInterface $serializer The serializer to use.
      */
     public static function wrapClosures(&$data, SerializerInterface $serializer)
@@ -205,7 +208,8 @@
     {
         // Verify that the provided signature matches the calculated signature.
         if (!hash_equals($signature, $this->calculateSignature($data))) {
-            throw new ClosureUnserializationException('The signature of the'
+            throw new ClosureUnserializationException(
+                'The signature of the'
                 . ' closure\'s data is invalid, which means the serialized '
                 . 'closure has been modified and is unsafe to unserialize.'
             );

--- vendor/laravel/framework/src/Illuminate/Auth/Access/Gate.php
+++ PHP_CodeSniffer
@@ -56,12 +56,12 @@
     /**
      * Create a new gate instance.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
-     * @param  callable  $userResolver
-     * @param  array  $abilities
-     * @param  array  $policies
-     * @param  array  $beforeCallbacks
-     * @param  array  $afterCallbacks
+     * @param  \Illuminate\Contracts\Container\Container $container
+     * @param  callable                                  $userResolver
+     * @param  array                                     $abilities
+     * @param  array                                     $policies
+     * @param  array                                     $beforeCallbacks
+     * @param  array                                     $afterCallbacks
      * @return void
      */
     public function __construct(Container $container, callable $userResolver, array $abilities = [], array $policies = [], array $beforeCallbacks = [], array $afterCallbacks = [])
@@ -77,7 +77,7 @@
     /**
      * Determine if a given ability has been defined.
      *
-     * @param  string  $ability
+     * @param  string $ability
      * @return bool
      */
     public function has($ability)
@@ -88,8 +88,8 @@
     /**
      * Define a new ability.
      *
-     * @param  string  $ability
-     * @param  callable|string  $callback
+     * @param  string          $ability
+     * @param  callable|string $callback
      * @return $this
      *
      * @throws \InvalidArgumentException
@@ -110,7 +110,7 @@
     /**
      * Create the ability callback for a callback string.
      *
-     * @param  string  $callback
+     * @param  string $callback
      * @return \Closure
      */
     protected function buildAbilityCallback($callback)
@@ -125,8 +125,8 @@
     /**
      * Define a policy class for a given class type.
      *
-     * @param  string  $class
-     * @param  string  $policy
+     * @param  string $class
+     * @param  string $policy
      * @return $this
      */
     public function policy($class, $policy)
@@ -139,7 +139,7 @@
     /**
      * Register a callback to run before all Gate checks.
      *
-     * @param  callable  $callback
+     * @param  callable $callback
      * @return $this
      */
     public function before(callable $callback)
@@ -152,7 +152,7 @@
     /**
      * Register a callback to run after all Gate checks.
      *
-     * @param  callable  $callback
+     * @param  callable $callback
      * @return $this
      */
     public function after(callable $callback)
@@ -165,8 +165,8 @@
     /**
      * Determine if the given ability should be granted for the current user.
      *
-     * @param  string  $ability
-     * @param  array|mixed  $arguments
+     * @param  string      $ability
+     * @param  array|mixed $arguments
      * @return bool
      */
     public function allows($ability, $arguments = [])
@@ -177,8 +177,8 @@
     /**
      * Determine if the given ability should be denied for the current user.
      *
-     * @param  string  $ability
-     * @param  array|mixed  $arguments
+     * @param  string      $ability
+     * @param  array|mixed $arguments
      * @return bool
      */
     public function denies($ability, $arguments = [])
@@ -189,8 +189,8 @@
     /**
      * Determine if the given ability should be granted for the current user.
      *
-     * @param  string  $ability
-     * @param  array|mixed  $arguments
+     * @param  string      $ability
+     * @param  array|mixed $arguments
      * @return bool
      */
     public function check($ability, $arguments = [])
@@ -207,8 +207,8 @@
     /**
      * Determine if the given ability should be granted for the current user.
      *
-     * @param  string  $ability
-     * @param  array|mixed  $arguments
+     * @param  string      $ability
+     * @param  array|mixed $arguments
      * @return \Illuminate\Auth\Access\Response
      *
      * @throws \Illuminate\Auth\Access\AuthorizationException
@@ -227,8 +227,8 @@
     /**
      * Get the raw result for the given ability for the current user.
      *
-     * @param  string  $ability
-     * @param  array|mixed  $arguments
+     * @param  string      $ability
+     * @param  array|mixed $arguments
      * @return mixed
      */
     protected function raw($ability, $arguments = [])
@@ -253,9 +253,9 @@
     /**
      * Resolve and call the appropriate authorization callback.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  string  $ability
-     * @param  array  $arguments
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  string                                     $ability
+     * @param  array                                      $arguments
      * @return bool
      */
     protected function callAuthCallback($user, $ability, array $arguments)
@@ -272,9 +272,9 @@
     /**
      * Call all of the before callbacks and return if a result is given.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  string  $ability
-     * @param  array  $arguments
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  string                                     $ability
+     * @param  array                                      $arguments
      * @return bool|null
      */
     protected function callBeforeCallbacks($user, $ability, array $arguments)
@@ -291,10 +291,10 @@
     /**
      * Call all of the after callbacks with check result.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  string  $ability
-     * @param  array  $arguments
-     * @param  bool  $result
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  string                                     $ability
+     * @param  array                                      $arguments
+     * @param  bool                                       $result
      * @return void
      */
     protected function callAfterCallbacks($user, $ability, array $arguments, $result)
@@ -309,9 +309,9 @@
     /**
      * Resolve the callable for the given ability and arguments.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  string  $ability
-     * @param  array  $arguments
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  string                                     $ability
+     * @param  array                                      $arguments
      * @return callable
      */
     protected function resolveAuthCallback($user, $ability, array $arguments)
@@ -330,7 +330,7 @@
     /**
      * Determine if the first argument in the array corresponds to a policy.
      *
-     * @param  array  $arguments
+     * @param  array $arguments
      * @return bool
      */
     protected function firstArgumentCorrespondsToPolicy(array $arguments)
@@ -349,9 +349,9 @@
     /**
      * Resolve the callback for a policy check.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  string  $ability
-     * @param  array  $arguments
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  string                                     $ability
+     * @param  array                                      $arguments
      * @return callable
      */
     protected function resolvePolicyCallback($user, $ability, array $arguments)
@@ -394,7 +394,7 @@
     /**
      * Get a policy instance for a given class.
      *
-     * @param  object|string  $class
+     * @param  object|string $class
      * @return mixed
      *
      * @throws \InvalidArgumentException
@@ -415,7 +415,7 @@
     /**
      * Build a policy class instance of the given type.
      *
-     * @param  object|string  $class
+     * @param  object|string $class
      * @return mixed
      */
     public function resolvePolicy($class)
@@ -426,7 +426,7 @@
     /**
      * Get a guard instance for the given user.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable|mixed  $user
+     * @param  \Illuminate\Contracts\Auth\Authenticatable|mixed $user
      * @return static
      */
     public function forUser($user)

--- vendor/laravel/framework/src/Illuminate/Auth/Access/HandlesAuthorization.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Create a new access response.
      *
-     * @param  string|null  $message
+     * @param  string|null $message
      * @return \Illuminate\Auth\Access\Response
      */
     protected function allow($message = null)
@@ -18,7 +18,7 @@
     /**
      * Throws an unauthorized exception.
      *
-     * @param  string  $message
+     * @param  string $message
      * @return void
      *
      * @throws \Illuminate\Auth\Access\AuthorizationException

--- vendor/laravel/framework/src/Illuminate/Auth/Access/Response.php
+++ PHP_CodeSniffer
@@ -14,7 +14,7 @@
     /**
      * Create a new response.
      *
-     * @param  string|null  $message
+     * @param string|null $message
      */
     public function __construct($message = null)
     {

--- vendor/laravel/framework/src/Illuminate/Auth/Authenticatable.php
+++ PHP_CodeSniffer
@@ -47,7 +47,7 @@
     /**
      * Set the token value for the "remember me" session.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return void
      */
     public function setRememberToken($value)

--- vendor/laravel/framework/src/Illuminate/Auth/AuthenticationException.php
+++ PHP_CodeSniffer
@@ -16,7 +16,7 @@
     /**
      * Create a new authentication exception.
      *
-     * @param \Illuminate\Contracts\Auth\Guard|null  $guard
+     * @param \Illuminate\Contracts\Auth\Guard|null $guard
      */
     public function __construct($guard = null)
     {

--- vendor/laravel/framework/src/Illuminate/Auth/AuthManager.php
+++ PHP_CodeSniffer
@@ -43,7 +43,7 @@
     /**
      * Create a new Auth manager instance.
      *
-     * @param  \Illuminate\Foundation\Application  $app
+     * @param  \Illuminate\Foundation\Application $app
      * @return void
      */
     public function __construct($app)
@@ -58,7 +58,7 @@
     /**
      * Attempt to get the guard from the local cache.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Auth\Guard|\Illuminate\Contracts\Auth\StatefulGuard
      */
     public function guard($name = null)
@@ -73,7 +73,7 @@
     /**
      * Resolve the given guard.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Auth\Guard|\Illuminate\Contracts\Auth\StatefulGuard
      *
      * @throws \InvalidArgumentException
@@ -102,7 +102,7 @@
     /**
      * Call a custom driver creator.
      *
-     * @param  string  $name
+     * @param  string $name
      * @param  array  $config
      * @return mixed
      */
@@ -114,7 +114,7 @@
     /**
      * Create a session based authentication guard.
      *
-     * @param  string  $name
+     * @param  string $name
      * @param  array  $config
      * @return \Illuminate\Auth\SessionGuard
      */
@@ -145,7 +145,7 @@
     /**
      * Create a token based authentication guard.
      *
-     * @param  string  $name
+     * @param  string $name
      * @param  array  $config
      * @return \Illuminate\Auth\TokenGuard
      */
@@ -167,7 +167,7 @@
     /**
      * Get the guard configuration.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return array
      */
     protected function getConfig($name)
@@ -188,7 +188,7 @@
     /**
      * Set the default guard driver the factory should serve.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function shouldUse($name)
@@ -203,7 +203,7 @@
     /**
      * Set the default authentication driver name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function setDefaultDriver($name)
@@ -214,19 +214,21 @@
     /**
      * Register a new callback based request guard.
      *
-     * @param  string  $driver
-     * @param  callable  $callback
+     * @param  string   $driver
+     * @param  callable $callback
      * @return $this
      */
     public function viaRequest($driver, callable $callback)
     {
-        return $this->extend($driver, function () use ($callback) {
-            $guard = new RequestGuard($callback, $this->app['request']);
+        return $this->extend(
+            $driver, function () use ($callback) {
+                $guard = new RequestGuard($callback, $this->app['request']);
 
-            $this->app->refresh('request', $guard, 'setRequest');
+                $this->app->refresh('request', $guard, 'setRequest');
 
-            return $guard;
-        });
+                return $guard;
+            }
+        );
     }
 
     /**
@@ -242,7 +244,7 @@
     /**
      * Set the callback to be used to resolve users.
      *
-     * @param  \Closure  $userResolver
+     * @param  \Closure $userResolver
      * @return $this
      */
     public function resolveUsersUsing(Closure $userResolver)
@@ -255,8 +257,8 @@
     /**
      * Register a custom driver creator Closure.
      *
-     * @param  string  $driver
-     * @param  \Closure  $callback
+     * @param  string   $driver
+     * @param  \Closure $callback
      * @return $this
      */
     public function extend($driver, Closure $callback)
@@ -269,8 +271,8 @@
     /**
      * Register a custom provider creator Closure.
      *
-     * @param  string  $name
-     * @param  \Closure  $callback
+     * @param  string   $name
+     * @param  \Closure $callback
      * @return $this
      */
     public function provider($name, Closure $callback)
@@ -283,7 +285,7 @@
     /**
      * Dynamically call the default driver instance.
      *
-     * @param  string  $method
+     * @param  string $method
      * @param  array  $parameters
      * @return mixed
      */

--- vendor/laravel/framework/src/Illuminate/Auth/AuthServiceProvider.php
+++ PHP_CodeSniffer
@@ -32,18 +32,22 @@
      */
     protected function registerAuthenticator()
     {
-        $this->app->singleton('auth', function ($app) {
-            // Once the authentication service has actually been requested by the developer
-            // we will set a variable in the application indicating such. This helps us
-            // know that we need to set any queued cookies in the after event later.
-            $app['auth.loaded'] = true;
+        $this->app->singleton(
+            'auth', function ($app) {
+                // Once the authentication service has actually been requested by the developer
+                // we will set a variable in the application indicating such. This helps us
+                // know that we need to set any queued cookies in the after event later.
+                $app['auth.loaded'] = true;
 
-            return new AuthManager($app);
-        });
+                return new AuthManager($app);
+            }
+        );
 
-        $this->app->singleton('auth.driver', function ($app) {
-            return $app['auth']->guard();
-        });
+        $this->app->singleton(
+            'auth.driver', function ($app) {
+                return $app['auth']->guard();
+            }
+        );
     }
 
     /**
@@ -67,11 +71,15 @@
      */
     protected function registerAccessGate()
     {
-        $this->app->singleton(GateContract::class, function ($app) {
-            return new Gate($app, function () use ($app) {
-                return call_user_func($app['auth']->userResolver());
-            });
-        });
+        $this->app->singleton(
+            GateContract::class, function ($app) {
+                return new Gate(
+                    $app, function () use ($app) {
+                        return call_user_func($app['auth']->userResolver());
+                    }
+                );
+            }
+        );
     }
 
     /**
@@ -81,10 +89,14 @@
      */
     protected function registerRequestRebindHandler()
     {
-        $this->app->rebinding('request', function ($app, $request) {
-            $request->setUserResolver(function ($guard = null) use ($app) {
-                return call_user_func($app['auth']->userResolver(), $guard);
-            });
-        });
+        $this->app->rebinding(
+            'request', function ($app, $request) {
+                $request->setUserResolver(
+                    function ($guard = null) use ($app) {
+                        return call_user_func($app['auth']->userResolver(), $guard);
+                    }
+                );
+            }
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Auth/CreatesUserProviders.php
+++ PHP_CodeSniffer
@@ -16,7 +16,7 @@
     /**
      * Create the user provider implementation for the driver.
      *
-     * @param  string  $provider
+     * @param  string $provider
      * @return \Illuminate\Contracts\Auth\UserProvider
      *
      * @throws \InvalidArgumentException
@@ -32,19 +32,19 @@
         }
 
         switch ($config['driver']) {
-            case 'database':
-                return $this->createDatabaseProvider($config);
-            case 'eloquent':
-                return $this->createEloquentProvider($config);
-            default:
-                throw new InvalidArgumentException("Authentication user provider [{$config['driver']}] is not defined.");
+        case 'database':
+            return $this->createDatabaseProvider($config);
+        case 'eloquent':
+            return $this->createEloquentProvider($config);
+        default:
+            throw new InvalidArgumentException("Authentication user provider [{$config['driver']}] is not defined.");
         }
     }
 
     /**
      * Create an instance of the database user provider.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Auth\DatabaseUserProvider
      */
     protected function createDatabaseProvider($config)
@@ -57,7 +57,7 @@
     /**
      * Create an instance of the Eloquent user provider.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Auth\EloquentUserProvider
      */
     protected function createEloquentProvider($config)

--- vendor/laravel/framework/src/Illuminate/Auth/DatabaseUserProvider.php
+++ PHP_CodeSniffer
@@ -34,9 +34,9 @@
     /**
      * Create a new database user provider.
      *
-     * @param  \Illuminate\Database\ConnectionInterface  $conn
-     * @param  \Illuminate\Contracts\Hashing\Hasher  $hasher
-     * @param  string  $table
+     * @param  \Illuminate\Database\ConnectionInterface $conn
+     * @param  \Illuminate\Contracts\Hashing\Hasher     $hasher
+     * @param  string                                   $table
      * @return void
      */
     public function __construct(ConnectionInterface $conn, HasherContract $hasher, $table)
@@ -49,7 +49,7 @@
     /**
      * Retrieve a user by their unique identifier.
      *
-     * @param  mixed  $identifier
+     * @param  mixed $identifier
      * @return \Illuminate\Contracts\Auth\Authenticatable|null
      */
     public function retrieveById($identifier)
@@ -63,7 +63,7 @@
      * Retrieve a user by their unique identifier and "remember me" token.
      *
      * @param  mixed  $identifier
-     * @param  string  $token
+     * @param  string $token
      * @return \Illuminate\Contracts\Auth\Authenticatable|null
      */
     public function retrieveByToken($identifier, $token)
@@ -79,21 +79,21 @@
     /**
      * Update the "remember me" token for the given user in storage.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  string  $token
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  string                                     $token
      * @return void
      */
     public function updateRememberToken(UserContract $user, $token)
     {
         $this->conn->table($this->table)
-                ->where('id', $user->getAuthIdentifier())
-                ->update(['remember_token' => $token]);
+            ->where('id', $user->getAuthIdentifier())
+            ->update(['remember_token' => $token]);
     }
 
     /**
      * Retrieve a user by the given credentials.
      *
-     * @param  array  $credentials
+     * @param  array $credentials
      * @return \Illuminate\Contracts\Auth\Authenticatable|null
      */
     public function retrieveByCredentials(array $credentials)
@@ -120,7 +120,7 @@
     /**
      * Get the generic user.
      *
-     * @param  mixed  $user
+     * @param  mixed $user
      * @return \Illuminate\Auth\GenericUser|null
      */
     protected function getGenericUser($user)
@@ -133,8 +133,8 @@
     /**
      * Validate a user against the given credentials.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  array  $credentials
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  array                                      $credentials
      * @return bool
      */
     public function validateCredentials(UserContract $user, array $credentials)

--- vendor/laravel/framework/src/Illuminate/Auth/EloquentUserProvider.php
+++ PHP_CodeSniffer
@@ -26,8 +26,8 @@
     /**
      * Create a new database user provider.
      *
-     * @param  \Illuminate\Contracts\Hashing\Hasher  $hasher
-     * @param  string  $model
+     * @param  \Illuminate\Contracts\Hashing\Hasher $hasher
+     * @param  string                               $model
      * @return void
      */
     public function __construct(HasherContract $hasher, $model)
@@ -39,7 +39,7 @@
     /**
      * Retrieve a user by their unique identifier.
      *
-     * @param  mixed  $identifier
+     * @param  mixed $identifier
      * @return \Illuminate\Contracts\Auth\Authenticatable|null
      */
     public function retrieveById($identifier)
@@ -51,7 +51,7 @@
      * Retrieve a user by their unique identifier and "remember me" token.
      *
      * @param  mixed  $identifier
-     * @param  string  $token
+     * @param  string $token
      * @return \Illuminate\Contracts\Auth\Authenticatable|null
      */
     public function retrieveByToken($identifier, $token)
@@ -67,8 +67,8 @@
     /**
      * Update the "remember me" token for the given user in storage.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  string  $token
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  string                                     $token
      * @return void
      */
     public function updateRememberToken(UserContract $user, $token)
@@ -81,7 +81,7 @@
     /**
      * Retrieve a user by the given credentials.
      *
-     * @param  array  $credentials
+     * @param  array $credentials
      * @return \Illuminate\Contracts\Auth\Authenticatable|null
      */
     public function retrieveByCredentials(array $credentials)
@@ -107,8 +107,8 @@
     /**
      * Validate a user against the given credentials.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  array  $credentials
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  array                                      $credentials
      * @return bool
      */
     public function validateCredentials(UserContract $user, array $credentials)
@@ -143,7 +143,7 @@
     /**
      * Sets the hasher implementation.
      *
-     * @param  \Illuminate\Contracts\Hashing\Hasher  $hasher
+     * @param  \Illuminate\Contracts\Hashing\Hasher $hasher
      * @return $this
      */
     public function setHasher(HasherContract $hasher)
@@ -166,7 +166,7 @@
     /**
      * Sets the name of the Eloquent user model.
      *
-     * @param  string  $model
+     * @param  string $model
      * @return $this
      */
     public function setModel($model)

--- vendor/laravel/framework/src/Illuminate/Auth/Events/Attempting.php
+++ PHP_CodeSniffer
@@ -28,9 +28,9 @@
     /**
      * Create a new event instance.
      *
-     * @param  array  $credentials
-     * @param  bool  $remember
-     * @param  bool  $login
+     * @param array $credentials
+     * @param bool  $remember
+     * @param bool  $login
      */
     public function __construct($credentials, $remember, $login)
     {

--- vendor/laravel/framework/src/Illuminate/Auth/Events/Failed.php
+++ PHP_CodeSniffer
@@ -21,8 +21,8 @@
     /**
      * Create a new event instance.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable|null  $user
-     * @param  array  $credentials
+     * @param \Illuminate\Contracts\Auth\Authenticatable|null $user
+     * @param array                                           $credentials
      */
     public function __construct($user, $credentials)
     {

--- vendor/laravel/framework/src/Illuminate/Auth/Events/Lockout.php
+++ PHP_CodeSniffer
@@ -16,7 +16,7 @@
     /**
      * Create a new event instance.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return void
      */
     public function __construct(Request $request)

--- vendor/laravel/framework/src/Illuminate/Auth/Events/Login.php
+++ PHP_CodeSniffer
@@ -25,8 +25,8 @@
     /**
      * Create a new event instance.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  bool  $remember
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  bool                                       $remember
      * @return void
      */
     public function __construct($user, $remember)

--- vendor/laravel/framework/src/Illuminate/Auth/Events/Logout.php
+++ PHP_CodeSniffer
@@ -18,7 +18,7 @@
     /**
      * Create a new event instance.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
      * @return void
      */
     public function __construct($user)

--- vendor/laravel/framework/src/Illuminate/Auth/GenericUser.php
+++ PHP_CodeSniffer
@@ -16,7 +16,7 @@
     /**
      * Create a new generic User object.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return void
      */
     public function __construct(array $attributes)
@@ -69,7 +69,7 @@
     /**
      * Set the "remember me" token value.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return void
      */
     public function setRememberToken($value)
@@ -90,7 +90,7 @@
     /**
      * Dynamically access the user's attributes.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function __get($key)
@@ -101,7 +101,7 @@
     /**
      * Dynamically set an attribute on the user.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
      * @return void
      */
@@ -113,7 +113,7 @@
     /**
      * Dynamically check if a value is set on the user.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function __isset($key)
@@ -124,7 +124,7 @@
     /**
      * Dynamically unset a value on the user.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return void
      */
     public function __unset($key)

--- vendor/laravel/framework/src/Illuminate/Auth/GuardHelpers.php
+++ PHP_CodeSniffer
@@ -74,7 +74,7 @@
     /**
      * Set the current user.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
      * @return $this
      */
     public function setUser(AuthenticatableContract $user)

--- vendor/laravel/framework/src/Illuminate/Auth/Middleware/AuthenticateWithBasicAuth.php
+++ PHP_CodeSniffer
@@ -17,7 +17,7 @@
     /**
      * Create a new middleware instance.
      *
-     * @param  \Illuminate\Contracts\Auth\Factory  $auth
+     * @param  \Illuminate\Contracts\Auth\Factory $auth
      * @return void
      */
     public function __construct(AuthFactory $auth)
@@ -28,9 +28,9 @@
     /**
      * Handle an incoming request.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Closure  $next
-     * @param  string|null  $guard
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Closure                 $next
+     * @param  string|null              $guard
      * @return mixed
      */
     public function handle($request, Closure $next, $guard = null)

--- vendor/laravel/framework/src/Illuminate/Auth/Passwords/DatabaseTokenRepository.php
+++ PHP_CodeSniffer
@@ -40,10 +40,10 @@
     /**
      * Create a new token repository instance.
      *
-     * @param  \Illuminate\Database\ConnectionInterface  $connection
-     * @param  string  $table
-     * @param  string  $hashKey
-     * @param  int  $expires
+     * @param  \Illuminate\Database\ConnectionInterface $connection
+     * @param  string                                   $table
+     * @param  string                                   $hashKey
+     * @param  int                                      $expires
      * @return void
      */
     public function __construct(ConnectionInterface $connection, $table, $hashKey, $expires = 60)
@@ -57,7 +57,7 @@
     /**
      * Create a new token record.
      *
-     * @param  \Illuminate\Contracts\Auth\CanResetPassword  $user
+     * @param  \Illuminate\Contracts\Auth\CanResetPassword $user
      * @return string
      */
     public function create(CanResetPasswordContract $user)
@@ -79,7 +79,7 @@
     /**
      * Delete all existing reset tokens from the database.
      *
-     * @param  \Illuminate\Contracts\Auth\CanResetPassword  $user
+     * @param  \Illuminate\Contracts\Auth\CanResetPassword $user
      * @return int
      */
     protected function deleteExisting(CanResetPasswordContract $user)
@@ -90,8 +90,8 @@
     /**
      * Build the record payload for the table.
      *
-     * @param  string  $email
-     * @param  string  $token
+     * @param  string $email
+     * @param  string $token
      * @return array
      */
     protected function getPayload($email, $token)
@@ -102,8 +102,8 @@
     /**
      * Determine if a token record exists and is valid.
      *
-     * @param  \Illuminate\Contracts\Auth\CanResetPassword  $user
-     * @param  string  $token
+     * @param  \Illuminate\Contracts\Auth\CanResetPassword $user
+     * @param  string                                      $token
      * @return bool
      */
     public function exists(CanResetPasswordContract $user, $token)
@@ -118,7 +118,7 @@
     /**
      * Determine if the token has expired.
      *
-     * @param  array  $token
+     * @param  array $token
      * @return bool
      */
     protected function tokenExpired($token)
@@ -131,7 +131,7 @@
     /**
      * Delete a token record by token.
      *
-     * @param  string  $token
+     * @param  string $token
      * @return void
      */
     public function delete($token)

--- vendor/laravel/framework/src/Illuminate/Auth/Passwords/PasswordBroker.php
+++ PHP_CodeSniffer
@@ -50,17 +50,18 @@
     /**
      * Create a new password broker instance.
      *
-     * @param  \Illuminate\Auth\Passwords\TokenRepositoryInterface  $tokens
-     * @param  \Illuminate\Contracts\Auth\UserProvider  $users
-     * @param  \Illuminate\Contracts\Mail\Mailer  $mailer
-     * @param  string  $emailView
+     * @param  \Illuminate\Auth\Passwords\TokenRepositoryInterface $tokens
+     * @param  \Illuminate\Contracts\Auth\UserProvider             $users
+     * @param  \Illuminate\Contracts\Mail\Mailer                   $mailer
+     * @param  string                                              $emailView
      * @return void
      */
     public function __construct(TokenRepositoryInterface $tokens,
-                                UserProvider $users,
-                                MailerContract $mailer,
-                                $emailView)
-    {
+        UserProvider $users,
+        MailerContract $mailer,
+        $emailView
+    ) {
+    
         $this->users = $users;
         $this->mailer = $mailer;
         $this->tokens = $tokens;
@@ -70,8 +71,8 @@
     /**
      * Send a password reset link to a user.
      *
-     * @param  array  $credentials
-     * @param  \Closure|null  $callback
+     * @param  array         $credentials
+     * @param  \Closure|null $callback
      * @return string
      */
     public function sendResetLink(array $credentials, Closure $callback = null)
@@ -98,9 +99,9 @@
     /**
      * Send the password reset link via e-mail.
      *
-     * @param  \Illuminate\Contracts\Auth\CanResetPassword  $user
-     * @param  string  $token
-     * @param  \Closure|null  $callback
+     * @param  \Illuminate\Contracts\Auth\CanResetPassword $user
+     * @param  string                                      $token
+     * @param  \Closure|null                               $callback
      * @return int
      */
     public function emailResetLink(CanResetPasswordContract $user, $token, Closure $callback = null)
@@ -110,20 +111,22 @@
         // so that it may be displayed for an user to click for password reset.
         $view = $this->emailView;
 
-        return $this->mailer->send($view, compact('token', 'user'), function ($m) use ($user, $token, $callback) {
-            $m->to($user->getEmailForPasswordReset());
-
-            if (! is_null($callback)) {
-                call_user_func($callback, $m, $user, $token);
+        return $this->mailer->send(
+            $view, compact('token', 'user'), function ($m) use ($user, $token, $callback) {
+                $m->to($user->getEmailForPasswordReset());
+
+                if (! is_null($callback)) {
+                    call_user_func($callback, $m, $user, $token);
+                }
             }
-        });
+        );
     }
 
     /**
      * Reset the password for the given token.
      *
-     * @param  array  $credentials
-     * @param  \Closure  $callback
+     * @param  array    $credentials
+     * @param  \Closure $callback
      * @return mixed
      */
     public function reset(array $credentials, Closure $callback)
@@ -152,7 +155,7 @@
     /**
      * Validate a password reset for the given credentials.
      *
-     * @param  array  $credentials
+     * @param  array $credentials
      * @return \Illuminate\Contracts\Auth\CanResetPassword
      */
     protected function validateReset(array $credentials)
@@ -175,7 +178,7 @@
     /**
      * Set a custom password validator.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return void
      */
     public function validator(Closure $callback)
@@ -186,7 +189,7 @@
     /**
      * Determine if the passwords match for the request.
      *
-     * @param  array  $credentials
+     * @param  array $credentials
      * @return bool
      */
     public function validateNewPassword(array $credentials)
@@ -198,7 +201,8 @@
 
         if (isset($this->passwordValidator)) {
             return call_user_func(
-                $this->passwordValidator, $credentials) && $password === $confirm;
+                $this->passwordValidator, $credentials
+            ) && $password === $confirm;
         }
 
         return $this->validatePasswordWithDefaults($credentials);
@@ -207,7 +211,7 @@
     /**
      * Determine if the passwords are valid for the request.
      *
-     * @param  array  $credentials
+     * @param  array $credentials
      * @return bool
      */
     protected function validatePasswordWithDefaults(array $credentials)
@@ -223,7 +227,7 @@
     /**
      * Get the user for the given credentials.
      *
-     * @param  array  $credentials
+     * @param  array $credentials
      * @return \Illuminate\Contracts\Auth\CanResetPassword
      *
      * @throws \UnexpectedValueException
@@ -255,7 +259,7 @@
     /**
      * Delete the given password reset token.
      *
-     * @param  string  $token
+     * @param  string $token
      * @return void
      */
     public function deleteToken($token)
@@ -267,7 +271,7 @@
      * Validate the given password reset token.
      *
      * @param  CanResetPasswordContract $user
-     * @param  string $token
+     * @param  string                   $token
      * @return bool
      */
     public function tokenExists(CanResetPasswordContract $user, $token)

--- vendor/laravel/framework/src/Illuminate/Auth/Passwords/PasswordBrokerManager.php
+++ PHP_CodeSniffer
@@ -25,7 +25,7 @@
     /**
      * Create a new PasswordBroker manager instance.
      *
-     * @param  \Illuminate\Foundation\Application  $app
+     * @param  \Illuminate\Foundation\Application $app
      * @return void
      */
     public function __construct($app)
@@ -36,7 +36,7 @@
     /**
      * Attempt to get the broker from the local cache.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Auth\PasswordBroker
      */
     public function broker($name = null)
@@ -51,7 +51,7 @@
     /**
      * Resolve the given broker.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Auth\PasswordBroker
      *
      * @throws \InvalidArgumentException
@@ -78,7 +78,7 @@
     /**
      * Create a token repository instance based on the given configuration.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Auth\Passwords\TokenRepositoryInterface
      */
     protected function createTokenRepository(array $config)
@@ -102,7 +102,7 @@
     /**
      * Get the password broker configuration.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return array
      */
     protected function getConfig($name)
@@ -123,7 +123,7 @@
     /**
      * Set the default password broker name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function setDefaultDriver($name)
@@ -134,8 +134,8 @@
     /**
      * Dynamically call the default driver instance.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      */
     public function __call($method, $parameters)

--- vendor/laravel/framework/src/Illuminate/Auth/Passwords/PasswordResetServiceProvider.php
+++ PHP_CodeSniffer
@@ -30,13 +30,17 @@
      */
     protected function registerPasswordBroker()
     {
-        $this->app->singleton('auth.password', function ($app) {
-            return new PasswordBrokerManager($app);
-        });
+        $this->app->singleton(
+            'auth.password', function ($app) {
+                return new PasswordBrokerManager($app);
+            }
+        );
 
-        $this->app->bind('auth.password.broker', function ($app) {
-            return $app->make('auth.password')->broker();
-        });
+        $this->app->bind(
+            'auth.password.broker', function ($app) {
+                return $app->make('auth.password')->broker();
+            }
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Auth/Passwords/TokenRepositoryInterface.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Create a new token.
      *
-     * @param  \Illuminate\Contracts\Auth\CanResetPassword  $user
+     * @param  \Illuminate\Contracts\Auth\CanResetPassword $user
      * @return string
      */
     public function create(CanResetPasswordContract $user);
@@ -17,8 +17,8 @@
     /**
      * Determine if a token record exists and is valid.
      *
-     * @param  \Illuminate\Contracts\Auth\CanResetPassword  $user
-     * @param  string  $token
+     * @param  \Illuminate\Contracts\Auth\CanResetPassword $user
+     * @param  string                                      $token
      * @return bool
      */
     public function exists(CanResetPasswordContract $user, $token);
@@ -26,7 +26,7 @@
     /**
      * Delete a token record.
      *
-     * @param  string  $token
+     * @param  string $token
      * @return void
      */
     public function delete($token);

--- vendor/laravel/framework/src/Illuminate/Auth/RequestGuard.php
+++ PHP_CodeSniffer
@@ -26,13 +26,14 @@
     /**
      * Create a new authentication guard.
      *
-     * @param  callable  $callback
-     * @param  \Symfony\Component\HttpFoundation\Request  $request
+     * @param  callable                                  $callback
+     * @param  \Symfony\Component\HttpFoundation\Request $request
      * @return void
      */
     public function __construct(callable $callback,
-                                Request $request)
-    {
+        Request $request
+    ) {
+    
         $this->request = $request;
         $this->callback = $callback;
     }
@@ -57,20 +58,22 @@
     /**
      * Validate a user's credentials.
      *
-     * @param  array  $credentials
+     * @param  array $credentials
      * @return bool
      */
     public function validate(array $credentials = [])
     {
-        return ! is_null((new static(
+        return ! is_null(
+            (new static(
             $this->callback, $credentials['request']
-        ))->user());
+            ))->user()
+        );
     }
 
     /**
      * Set the current request instance.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return $this
      */
     public function setRequest(Request $request)

--- vendor/laravel/framework/src/Illuminate/Auth/SessionGuard.php
+++ PHP_CodeSniffer
@@ -86,17 +86,18 @@
     /**
      * Create a new authentication guard.
      *
-     * @param  string  $name
-     * @param  \Illuminate\Contracts\Auth\UserProvider  $provider
-     * @param  \Symfony\Component\HttpFoundation\Session\SessionInterface  $session
-     * @param  \Symfony\Component\HttpFoundation\Request  $request
+     * @param  string                                                     $name
+     * @param  \Illuminate\Contracts\Auth\UserProvider                    $provider
+     * @param  \Symfony\Component\HttpFoundation\Session\SessionInterface $session
+     * @param  \Symfony\Component\HttpFoundation\Request                  $request
      * @return void
      */
     public function __construct($name,
-                                UserProvider $provider,
-                                SessionInterface $session,
-                                Request $request = null)
-    {
+        UserProvider $provider,
+        SessionInterface $session,
+        Request $request = null
+    ) {
+    
         $this->name = $name;
         $this->session = $session;
         $this->request = $request;
@@ -173,7 +174,7 @@
     /**
      * Pull a user from the repository by its recaller ID.
      *
-     * @param  string  $recaller
+     * @param  string $recaller
      * @return mixed
      */
     protected function getUserByRecaller($recaller)
@@ -214,7 +215,7 @@
     /**
      * Determine if the recaller cookie is in a valid format.
      *
-     * @param  mixed  $recaller
+     * @param  mixed $recaller
      * @return bool
      */
     protected function validRecaller($recaller)
@@ -231,7 +232,7 @@
     /**
      * Log a user into the application without sessions or cookies.
      *
-     * @param  array  $credentials
+     * @param  array $credentials
      * @return bool
      */
     public function once(array $credentials = [])
@@ -248,7 +249,7 @@
     /**
      * Validate a user's credentials.
      *
-     * @param  array  $credentials
+     * @param  array $credentials
      * @return bool
      */
     public function validate(array $credentials = [])
@@ -259,7 +260,7 @@
     /**
      * Attempt to authenticate using HTTP Basic Auth.
      *
-     * @param  string  $field
+     * @param  string $field
      * @param  array  $extraConditions
      * @return \Symfony\Component\HttpFoundation\Response|null
      */
@@ -282,7 +283,7 @@
     /**
      * Perform a stateless HTTP Basic login attempt.
      *
-     * @param  string  $field
+     * @param  string $field
      * @param  array  $extraConditions
      * @return \Symfony\Component\HttpFoundation\Response|null
      */
@@ -298,9 +299,9 @@
     /**
      * Attempt to authenticate using basic authentication.
      *
-     * @param  \Symfony\Component\HttpFoundation\Request  $request
-     * @param  string  $field
-     * @param  array  $extraConditions
+     * @param  \Symfony\Component\HttpFoundation\Request $request
+     * @param  string                                    $field
+     * @param  array                                     $extraConditions
      * @return bool
      */
     protected function attemptBasic(Request $request, $field, $extraConditions = [])
@@ -317,8 +318,8 @@
     /**
      * Get the credential array for a HTTP Basic request.
      *
-     * @param  \Symfony\Component\HttpFoundation\Request  $request
-     * @param  string  $field
+     * @param  \Symfony\Component\HttpFoundation\Request $request
+     * @param  string                                    $field
      * @return array
      */
     protected function getBasicCredentials(Request $request, $field)
@@ -341,9 +342,9 @@
     /**
      * Attempt to authenticate a user using the given credentials.
      *
-     * @param  array  $credentials
-     * @param  bool   $remember
-     * @param  bool   $login
+     * @param  array $credentials
+     * @param  bool  $remember
+     * @param  bool  $login
      * @return bool
      */
     public function attempt(array $credentials = [], $remember = false, $login = true)
@@ -376,8 +377,8 @@
     /**
      * Determine if the user matches the credentials.
      *
-     * @param  mixed  $user
-     * @param  array  $credentials
+     * @param  mixed $user
+     * @param  array $credentials
      * @return bool
      */
     protected function hasValidCredentials($user, $credentials)
@@ -388,7 +389,7 @@
     /**
      * Fire the attempt event with the arguments.
      *
-     * @param  array  $credentials
+     * @param  array $credentials
      * @param  bool  $remember
      * @param  bool  $login
      * @return void
@@ -396,17 +397,19 @@
     protected function fireAttemptEvent(array $credentials, $remember, $login)
     {
         if (isset($this->events)) {
-            $this->events->fire(new Events\Attempting(
-                $credentials, $remember, $login
-            ));
+            $this->events->fire(
+                new Events\Attempting(
+                    $credentials, $remember, $login
+                )
+            );
         }
     }
 
     /**
      * Fire the failed authentication attempt event with the given arguments.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable|null  $user
-     * @param  array  $credentials
+     * @param  \Illuminate\Contracts\Auth\Authenticatable|null $user
+     * @param  array                                           $credentials
      * @return void
      */
     protected function fireFailedEvent($user, array $credentials)
@@ -419,7 +422,7 @@
     /**
      * Register an authentication attempt event listener.
      *
-     * @param  mixed  $callback
+     * @param  mixed $callback
      * @return void
      */
     public function attempting($callback)
@@ -432,8 +435,8 @@
     /**
      * Log a user into the application.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  bool  $remember
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  bool                                       $remember
      * @return void
      */
     public function login(AuthenticatableContract $user, $remember = false)
@@ -460,8 +463,8 @@
     /**
      * Fire the login event if the dispatcher is set.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  bool  $remember
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  bool                                       $remember
      * @return void
      */
     protected function fireLoginEvent($user, $remember = false)
@@ -474,7 +477,7 @@
     /**
      * Update the session with the given ID.
      *
-     * @param  string  $id
+     * @param  string $id
      * @return void
      */
     protected function updateSession($id)
@@ -487,8 +490,8 @@
     /**
      * Log the given user ID into the application.
      *
-     * @param  mixed  $id
-     * @param  bool   $remember
+     * @param  mixed $id
+     * @param  bool  $remember
      * @return \Illuminate\Contracts\Auth\Authenticatable
      */
     public function loginUsingId($id, $remember = false)
@@ -507,7 +510,7 @@
     /**
      * Log the given user ID into the application without sessions or cookies.
      *
-     * @param  mixed  $id
+     * @param  mixed $id
      * @return bool
      */
     public function onceUsingId($id)
@@ -526,7 +529,7 @@
     /**
      * Queue the recaller cookie into the cookie jar.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
      * @return void
      */
     protected function queueRecallerCookie(AuthenticatableContract $user)
@@ -539,7 +542,7 @@
     /**
      * Create a "remember me" cookie for a given ID.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return \Symfony\Component\HttpFoundation\Cookie
      */
     protected function createRecaller($value)
@@ -596,7 +599,7 @@
     /**
      * Refresh the "remember me" token for the user.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
      * @return void
      */
     protected function refreshRememberToken(AuthenticatableContract $user)
@@ -609,7 +612,7 @@
     /**
      * Create a new "remember me" token for the user if one doesn't already exist.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
      * @return void
      */
     protected function createRememberTokenIfDoesntExist(AuthenticatableContract $user)
@@ -638,7 +641,7 @@
     /**
      * Set the cookie creator instance used by the guard.
      *
-     * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookie
+     * @param  \Illuminate\Contracts\Cookie\QueueingFactory $cookie
      * @return void
      */
     public function setCookieJar(CookieJar $cookie)
@@ -659,7 +662,7 @@
     /**
      * Set the event dispatcher instance.
      *
-     * @param  \Illuminate\Contracts\Events\Dispatcher  $events
+     * @param  \Illuminate\Contracts\Events\Dispatcher $events
      * @return void
      */
     public function setDispatcher(Dispatcher $events)
@@ -690,7 +693,7 @@
     /**
      * Set the user provider used by the guard.
      *
-     * @param  \Illuminate\Contracts\Auth\UserProvider  $provider
+     * @param  \Illuminate\Contracts\Auth\UserProvider $provider
      * @return void
      */
     public function setProvider(UserProvider $provider)
@@ -711,7 +714,7 @@
     /**
      * Set the current user.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
      * @return $this
      */
     public function setUser(AuthenticatableContract $user)
@@ -736,7 +739,7 @@
     /**
      * Set the current request instance.
      *
-     * @param  \Symfony\Component\HttpFoundation\Request  $request
+     * @param  \Symfony\Component\HttpFoundation\Request $request
      * @return $this
      */
     public function setRequest(Request $request)

--- vendor/laravel/framework/src/Illuminate/Auth/TokenGuard.php
+++ PHP_CodeSniffer
@@ -34,8 +34,8 @@
     /**
      * Create a new authentication guard.
      *
-     * @param  \Illuminate\Contracts\Auth\UserProvider  $provider
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Contracts\Auth\UserProvider $provider
+     * @param  \Illuminate\Http\Request                $request
      * @return void
      */
     public function __construct(UserProvider $provider, Request $request)
@@ -96,7 +96,7 @@
     /**
      * Validate a user's credentials.
      *
-     * @param  array  $credentials
+     * @param  array $credentials
      * @return bool
      */
     public function validate(array $credentials = [])
@@ -113,7 +113,7 @@
     /**
      * Set the current request instance.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return $this
      */
     public function setRequest(Request $request)

--- vendor/laravel/framework/src/Illuminate/Broadcasting/Broadcasters/LogBroadcaster.php
+++ PHP_CodeSniffer
@@ -17,7 +17,7 @@
     /**
      * Create a new broadcaster instance.
      *
-     * @param  \Psr\Log\LoggerInterface  $logger
+     * @param  \Psr\Log\LoggerInterface $logger
      * @return void
      */
     public function __construct(LoggerInterface $logger)

--- vendor/laravel/framework/src/Illuminate/Broadcasting/Broadcasters/PusherBroadcaster.php
+++ PHP_CodeSniffer
@@ -17,7 +17,7 @@
     /**
      * Create a new broadcaster instance.
      *
-     * @param  \Pusher  $pusher
+     * @param  \Pusher $pusher
      * @return void
      */
     public function __construct(Pusher $pusher)

--- vendor/laravel/framework/src/Illuminate/Broadcasting/Broadcasters/RedisBroadcaster.php
+++ PHP_CodeSniffer
@@ -24,8 +24,8 @@
     /**
      * Create a new broadcaster instance.
      *
-     * @param  \Illuminate\Contracts\Redis\Database  $redis
-     * @param  string  $connection
+     * @param  \Illuminate\Contracts\Redis\Database $redis
+     * @param  string                               $connection
      * @return void
      */
     public function __construct(RedisDatabase $redis, $connection = null)

--- vendor/laravel/framework/src/Illuminate/Broadcasting/BroadcastEvent.php
+++ PHP_CodeSniffer
@@ -20,7 +20,7 @@
     /**
      * Create a new job handler instance.
      *
-     * @param  \Illuminate\Contracts\Broadcasting\Broadcaster  $broadcaster
+     * @param  \Illuminate\Contracts\Broadcasting\Broadcaster $broadcaster
      * @return void
      */
     public function __construct(Broadcaster $broadcaster)
@@ -31,8 +31,8 @@
     /**
      * Handle the queued job.
      *
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  array  $data
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  array                           $data
      * @return void
      */
     public function fire(Job $job, array $data)
@@ -52,7 +52,7 @@
     /**
      * Get the payload for the given event.
      *
-     * @param  mixed  $event
+     * @param  mixed $event
      * @return array
      */
     protected function getPayloadFromEvent($event)
@@ -73,7 +73,7 @@
     /**
      * Format the given value for a property.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return mixed
      */
     protected function formatProperty($value)

--- vendor/laravel/framework/src/Illuminate/Broadcasting/BroadcastManager.php
+++ PHP_CodeSniffer
@@ -37,7 +37,7 @@
     /**
      * Create a new manager instance.
      *
-     * @param  \Illuminate\Foundation\Application  $app
+     * @param  \Illuminate\Foundation\Application $app
      * @return void
      */
     public function __construct($app)
@@ -48,7 +48,7 @@
     /**
      * Get a driver instance.
      *
-     * @param  string  $driver
+     * @param  string $driver
      * @return mixed
      */
     public function connection($driver = null)
@@ -59,7 +59,7 @@
     /**
      * Get a driver instance.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return mixed
      */
     public function driver($name = null)
@@ -72,7 +72,7 @@
     /**
      * Attempt to get the connection from the local cache.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Broadcasting\Broadcaster
      */
     protected function get($name)
@@ -83,7 +83,7 @@
     /**
      * Resolve the given store.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Broadcasting\Broadcaster
      *
      * @throws \InvalidArgumentException
@@ -112,7 +112,7 @@
     /**
      * Call a custom driver creator.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return mixed
      */
     protected function callCustomCreator(array $config)
@@ -123,7 +123,7 @@
     /**
      * Create an instance of the driver.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Contracts\Broadcasting\Broadcaster
      */
     protected function createPusherDriver(array $config)
@@ -136,7 +136,7 @@
     /**
      * Create an instance of the driver.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Contracts\Broadcasting\Broadcaster
      */
     protected function createRedisDriver(array $config)
@@ -149,7 +149,7 @@
     /**
      * Create an instance of the driver.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Contracts\Broadcasting\Broadcaster
      */
     protected function createLogDriver(array $config)
@@ -162,7 +162,7 @@
     /**
      * Get the connection configuration.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return array
      */
     protected function getConfig($name)
@@ -183,7 +183,7 @@
     /**
      * Set the default driver name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function setDefaultDriver($name)
@@ -194,8 +194,8 @@
     /**
      * Register a custom driver creator Closure.
      *
-     * @param  string    $driver
-     * @param  \Closure  $callback
+     * @param  string   $driver
+     * @param  \Closure $callback
      * @return $this
      */
     public function extend($driver, Closure $callback)
@@ -208,8 +208,8 @@
     /**
      * Dynamically call the default driver instance.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      */
     public function __call($method, $parameters)

--- vendor/laravel/framework/src/Illuminate/Broadcasting/BroadcastServiceProvider.php
+++ PHP_CodeSniffer
@@ -20,13 +20,17 @@
      */
     public function register()
     {
-        $this->app->singleton('Illuminate\Broadcasting\BroadcastManager', function ($app) {
-            return new BroadcastManager($app);
-        });
+        $this->app->singleton(
+            'Illuminate\Broadcasting\BroadcastManager', function ($app) {
+                return new BroadcastManager($app);
+            }
+        );
 
-        $this->app->singleton('Illuminate\Contracts\Broadcasting\Broadcaster', function ($app) {
-            return $app->make('Illuminate\Broadcasting\BroadcastManager')->connection();
-        });
+        $this->app->singleton(
+            'Illuminate\Contracts\Broadcasting\Broadcaster', function ($app) {
+                return $app->make('Illuminate\Broadcasting\BroadcastManager')->connection();
+            }
+        );
 
         $this->app->alias(
             'Illuminate\Broadcasting\BroadcastManager', 'Illuminate\Contracts\Broadcasting\Factory'

--- vendor/laravel/framework/src/Illuminate/Bus/BusServiceProvider.php
+++ PHP_CodeSniffer
@@ -20,11 +20,15 @@
      */
     public function register()
     {
-        $this->app->singleton('Illuminate\Bus\Dispatcher', function ($app) {
-            return new Dispatcher($app, function ($connection = null) use ($app) {
-                return $app['Illuminate\Contracts\Queue\Factory']->connection($connection);
-            });
-        });
+        $this->app->singleton(
+            'Illuminate\Bus\Dispatcher', function ($app) {
+                return new Dispatcher(
+                    $app, function ($connection = null) use ($app) {
+                        return $app['Illuminate\Contracts\Queue\Factory']->connection($connection);
+                    }
+                );
+            }
+        );
 
         $this->app->alias(
             'Illuminate\Bus\Dispatcher', 'Illuminate\Contracts\Bus\Dispatcher'

--- vendor/laravel/framework/src/Illuminate/Bus/Dispatcher.php
+++ PHP_CodeSniffer
@@ -44,8 +44,8 @@
     /**
      * Create a new command dispatcher instance.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
-     * @param  \Closure|null  $queueResolver
+     * @param  \Illuminate\Contracts\Container\Container $container
+     * @param  \Closure|null                             $queueResolver
      * @return void
      */
     public function __construct(Container $container, Closure $queueResolver = null)
@@ -58,7 +58,7 @@
     /**
      * Dispatch a command to its appropriate handler.
      *
-     * @param  mixed  $command
+     * @param  mixed $command
      * @return mixed
      */
     public function dispatch($command)
@@ -73,20 +73,22 @@
     /**
      * Dispatch a command to its appropriate handler in the current process.
      *
-     * @param  mixed  $command
+     * @param  mixed $command
      * @return mixed
      */
     public function dispatchNow($command)
     {
-        return $this->pipeline->send($command)->through($this->pipes)->then(function ($command) {
-            return $this->container->call([$command, 'handle']);
-        });
+        return $this->pipeline->send($command)->through($this->pipes)->then(
+            function ($command) {
+                return $this->container->call([$command, 'handle']);
+            }
+        );
     }
 
     /**
      * Determine if the given command should be queued.
      *
-     * @param  mixed  $command
+     * @param  mixed $command
      * @return bool
      */
     protected function commandShouldBeQueued($command)
@@ -97,7 +99,7 @@
     /**
      * Dispatch a command to its appropriate handler behind a queue.
      *
-     * @param  mixed  $command
+     * @param  mixed $command
      * @return mixed
      *
      * @throws \RuntimeException
@@ -122,8 +124,8 @@
     /**
      * Push the command onto the given queue instance.
      *
-     * @param  \Illuminate\Contracts\Queue\Queue  $queue
-     * @param  mixed  $command
+     * @param  \Illuminate\Contracts\Queue\Queue $queue
+     * @param  mixed                             $command
      * @return mixed
      */
     protected function pushCommandToQueue($queue, $command)
@@ -146,7 +148,7 @@
     /**
      * Set the pipes through which commands should be piped before dispatching.
      *
-     * @param  array  $pipes
+     * @param  array $pipes
      * @return $this
      */
     public function pipeThrough(array $pipes)

--- vendor/laravel/framework/src/Illuminate/Bus/Queueable.php
+++ PHP_CodeSniffer
@@ -28,7 +28,7 @@
     /**
      * Set the desired connection for the job.
      *
-     * @param  string|null  $connection
+     * @param  string|null $connection
      * @return $this
      */
     public function onConnection($connection)
@@ -41,7 +41,7 @@
     /**
      * Set the desired queue for the job.
      *
-     * @param  string|null  $queue
+     * @param  string|null $queue
      * @return $this
      */
     public function onQueue($queue)
@@ -54,7 +54,7 @@
     /**
      * Set the desired delay for the job.
      *
-     * @param  int|null  $delay
+     * @param  int|null $delay
      * @return $this
      */
     public function delay($delay)

--- vendor/laravel/framework/src/Illuminate/Cache/ApcStore.php
+++ PHP_CodeSniffer
@@ -25,8 +25,8 @@
     /**
      * Create a new APC store.
      *
-     * @param  \Illuminate\Cache\ApcWrapper  $apc
-     * @param  string  $prefix
+     * @param  \Illuminate\Cache\ApcWrapper $apc
+     * @param  string                       $prefix
      * @return void
      */
     public function __construct(ApcWrapper $apc, $prefix = '')
@@ -38,7 +38,7 @@
     /**
      * Retrieve an item from the cache by key.
      *
-     * @param  string|array  $key
+     * @param  string|array $key
      * @return mixed
      */
     public function get($key)
@@ -53,9 +53,9 @@
     /**
      * Store an item in the cache for a given number of minutes.
      *
-     * @param  string  $key
-     * @param  mixed   $value
-     * @param  int     $minutes
+     * @param  string $key
+     * @param  mixed  $value
+     * @param  int    $minutes
      * @return void
      */
     public function put($key, $value, $minutes)
@@ -66,8 +66,8 @@
     /**
      * Increment the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int|bool
      */
     public function increment($key, $value = 1)
@@ -78,8 +78,8 @@
     /**
      * Decrement the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int|bool
      */
     public function decrement($key, $value = 1)
@@ -90,8 +90,8 @@
     /**
      * Store an item in the cache indefinitely.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function forever($key, $value)
@@ -102,7 +102,7 @@
     /**
      * Remove an item from the cache.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function forget($key)

--- vendor/laravel/framework/src/Illuminate/Cache/ApcWrapper.php
+++ PHP_CodeSniffer
@@ -24,7 +24,7 @@
     /**
      * Get an item from the cache.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function get($key)
@@ -35,9 +35,9 @@
     /**
      * Store an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
-     * @param  int     $seconds
+     * @param  string $key
+     * @param  mixed  $value
+     * @param  int    $seconds
      * @return array|bool
      */
     public function put($key, $value, $seconds)
@@ -48,8 +48,8 @@
     /**
      * Increment the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int|bool
      */
     public function increment($key, $value)
@@ -60,8 +60,8 @@
     /**
      * Decrement the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int|bool
      */
     public function decrement($key, $value)
@@ -72,7 +72,7 @@
     /**
      * Remove an item from the cache.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function delete($key)

--- vendor/laravel/framework/src/Illuminate/Cache/ArrayStore.php
+++ PHP_CodeSniffer
@@ -18,7 +18,7 @@
     /**
      * Retrieve an item from the cache by key.
      *
-     * @param  string|array  $key
+     * @param  string|array $key
      * @return mixed
      */
     public function get($key)
@@ -31,9 +31,9 @@
     /**
      * Store an item in the cache for a given number of minutes.
      *
-     * @param  string  $key
-     * @param  mixed   $value
-     * @param  int     $minutes
+     * @param  string $key
+     * @param  mixed  $value
+     * @param  int    $minutes
      * @return void
      */
     public function put($key, $value, $minutes)
@@ -44,8 +44,8 @@
     /**
      * Increment the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int
      */
     public function increment($key, $value = 1)
@@ -58,8 +58,8 @@
     /**
      * Decrement the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int
      */
     public function decrement($key, $value = 1)
@@ -70,8 +70,8 @@
     /**
      * Store an item in the cache indefinitely.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function forever($key, $value)
@@ -82,7 +82,7 @@
     /**
      * Remove an item from the cache.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function forget($key)

--- vendor/laravel/framework/src/Illuminate/Cache/CacheManager.php
+++ PHP_CodeSniffer
@@ -34,7 +34,7 @@
     /**
      * Create a new Cache manager instance.
      *
-     * @param  \Illuminate\Foundation\Application  $app
+     * @param  \Illuminate\Foundation\Application $app
      * @return void
      */
     public function __construct($app)
@@ -45,7 +45,7 @@
     /**
      * Get a cache store instance by name.
      *
-     * @param  string|null  $name
+     * @param  string|null $name
      * @return mixed
      */
     public function store($name = null)
@@ -58,7 +58,7 @@
     /**
      * Get a cache driver instance.
      *
-     * @param  string  $driver
+     * @param  string $driver
      * @return mixed
      */
     public function driver($driver = null)
@@ -69,7 +69,7 @@
     /**
      * Attempt to get the store from the local cache.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Cache\Repository
      */
     protected function get($name)
@@ -80,7 +80,7 @@
     /**
      * Resolve the given store.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Cache\Repository
      *
      * @throws \InvalidArgumentException
@@ -109,7 +109,7 @@
     /**
      * Call a custom driver creator.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return mixed
      */
     protected function callCustomCreator(array $config)
@@ -120,7 +120,7 @@
     /**
      * Create an instance of the APC cache driver.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Cache\ApcStore
      */
     protected function createApcDriver(array $config)
@@ -143,7 +143,7 @@
     /**
      * Create an instance of the file cache driver.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Cache\FileStore
      */
     protected function createFileDriver(array $config)
@@ -154,7 +154,7 @@
     /**
      * Create an instance of the Memcached cache driver.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Cache\MemcachedStore
      */
     protected function createMemcachedDriver(array $config)
@@ -179,7 +179,7 @@
     /**
      * Create an instance of the Redis cache driver.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Cache\RedisStore
      */
     protected function createRedisDriver(array $config)
@@ -194,7 +194,7 @@
     /**
      * Create an instance of the database cache driver.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Cache\DatabaseStore
      */
     protected function createDatabaseDriver(array $config)
@@ -211,7 +211,7 @@
     /**
      * Create a new cache repository with the given implementation.
      *
-     * @param  \Illuminate\Contracts\Cache\Store  $store
+     * @param  \Illuminate\Contracts\Cache\Store $store
      * @return \Illuminate\Cache\Repository
      */
     public function repository(Store $store)
@@ -230,7 +230,7 @@
     /**
      * Get the cache prefix.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return string
      */
     protected function getPrefix(array $config)
@@ -241,7 +241,7 @@
     /**
      * Get the cache connection configuration.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return array
      */
     protected function getConfig($name)
@@ -262,7 +262,7 @@
     /**
      * Set the default cache driver name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function setDefaultDriver($name)
@@ -273,8 +273,8 @@
     /**
      * Register a custom driver creator Closure.
      *
-     * @param  string    $driver
-     * @param  \Closure  $callback
+     * @param  string   $driver
+     * @param  \Closure $callback
      * @return $this
      */
     public function extend($driver, Closure $callback)
@@ -287,8 +287,8 @@
     /**
      * Dynamically call the default driver instance.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      */
     public function __call($method, $parameters)

--- vendor/laravel/framework/src/Illuminate/Cache/CacheServiceProvider.php
+++ PHP_CodeSniffer
@@ -21,17 +21,23 @@
      */
     public function register()
     {
-        $this->app->singleton('cache', function ($app) {
-            return new CacheManager($app);
-        });
-
-        $this->app->singleton('cache.store', function ($app) {
-            return $app['cache']->driver();
-        });
-
-        $this->app->singleton('memcached.connector', function () {
-            return new MemcachedConnector;
-        });
+        $this->app->singleton(
+            'cache', function ($app) {
+                return new CacheManager($app);
+            }
+        );
+
+        $this->app->singleton(
+            'cache.store', function ($app) {
+                return $app['cache']->driver();
+            }
+        );
+
+        $this->app->singleton(
+            'memcached.connector', function () {
+                return new MemcachedConnector;
+            }
+        );
 
         $this->registerCommands();
     }
@@ -43,9 +49,11 @@
      */
     public function registerCommands()
     {
-        $this->app->singleton('command.cache.clear', function ($app) {
-            return new ClearCommand($app['cache']);
-        });
+        $this->app->singleton(
+            'command.cache.clear', function ($app) {
+                return new ClearCommand($app['cache']);
+            }
+        );
 
         $this->commands('command.cache.clear');
     }

--- vendor/laravel/framework/src/Illuminate/Cache/Console/CacheTableCommand.php
+++ PHP_CodeSniffer
@@ -37,8 +37,8 @@
     /**
      * Create a new session table command instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
-     * @param  \Illuminate\Support\Composer  $composer
+     * @param  \Illuminate\Filesystem\Filesystem $files
+     * @param  \Illuminate\Support\Composer      $composer
      * @return void
      */
     public function __construct(Filesystem $files, Composer $composer)

--- vendor/laravel/framework/src/Illuminate/Cache/Console/ClearCommand.php
+++ PHP_CodeSniffer
@@ -33,7 +33,7 @@
     /**
      * Create a new cache clear command instance.
      *
-     * @param  \Illuminate\Cache\CacheManager  $cache
+     * @param  \Illuminate\Cache\CacheManager $cache
      * @return void
      */
     public function __construct(CacheManager $cache)

--- vendor/laravel/framework/src/Illuminate/Cache/DatabaseStore.php
+++ PHP_CodeSniffer
@@ -43,10 +43,10 @@
     /**
      * Create a new database store.
      *
-     * @param  \Illuminate\Database\ConnectionInterface  $connection
-     * @param  \Illuminate\Contracts\Encryption\Encrypter  $encrypter
-     * @param  string  $table
-     * @param  string  $prefix
+     * @param  \Illuminate\Database\ConnectionInterface   $connection
+     * @param  \Illuminate\Contracts\Encryption\Encrypter $encrypter
+     * @param  string                                     $table
+     * @param  string                                     $prefix
      * @return void
      */
     public function __construct(ConnectionInterface $connection, EncrypterContract $encrypter, $table, $prefix = '')
@@ -60,7 +60,7 @@
     /**
      * Retrieve an item from the cache by key.
      *
-     * @param  string|array  $key
+     * @param  string|array $key
      * @return mixed
      */
     public function get($key)
@@ -90,9 +90,9 @@
     /**
      * Store an item in the cache for a given number of minutes.
      *
-     * @param  string  $key
-     * @param  mixed   $value
-     * @param  int     $minutes
+     * @param  string $key
+     * @param  mixed  $value
+     * @param  int    $minutes
      * @return void
      */
     public function put($key, $value, $minutes)
@@ -116,67 +116,75 @@
     /**
      * Increment the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int|bool
      */
     public function increment($key, $value = 1)
     {
-        return $this->incrementOrDecrement($key, $value, function ($current, $value) {
-            return $current + $value;
-        });
+        return $this->incrementOrDecrement(
+            $key, $value, function ($current, $value) {
+                return $current + $value;
+            }
+        );
     }
 
     /**
      * Decrement the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int|bool
      */
     public function decrement($key, $value = 1)
     {
-        return $this->incrementOrDecrement($key, $value, function ($current, $value) {
-            return $current - $value;
-        });
+        return $this->incrementOrDecrement(
+            $key, $value, function ($current, $value) {
+                return $current - $value;
+            }
+        );
     }
 
     /**
      * Increment or decrement an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed  $value
-     * @param  \Closure  $callback
+     * @param  string   $key
+     * @param  mixed    $value
+     * @param  \Closure $callback
      * @return int|bool
      */
     protected function incrementOrDecrement($key, $value, Closure $callback)
     {
-        return $this->connection->transaction(function () use ($key, $value, $callback) {
-            $prefixed = $this->prefix.$key;
-
-            $cache = $this->table()->where('key', $prefixed)->lockForUpdate()->first();
+        return $this->connection->transaction(
+            function () use ($key, $value, $callback) {
+                $prefixed = $this->prefix.$key;
+
+                $cache = $this->table()->where('key', $prefixed)->lockForUpdate()->first();
+
+                if (is_null($cache)) {
+                    return false;
+                }
+
+                if (is_array($cache)) {
+                    $cache = (object) $cache;
+                }
+
+                $current = $this->encrypter->decrypt($cache->value);
+                $new = $callback($current, $value);
+
+                if (! is_numeric($current)) {
+                    return false;
+                }
+
+                $this->table()->where('key', $prefixed)->update(
+                    [
+                    'value' => $this->encrypter->encrypt($new),
+                    ]
+                );
 
-            if (is_null($cache)) {
-                return false;
+                return $new;
             }
-
-            if (is_array($cache)) {
-                $cache = (object) $cache;
-            }
-
-            $current = $this->encrypter->decrypt($cache->value);
-            $new = $callback($current, $value);
-
-            if (! is_numeric($current)) {
-                return false;
-            }
-
-            $this->table()->where('key', $prefixed)->update([
-                'value' => $this->encrypter->encrypt($new),
-            ]);
-
-            return $new;
-        });
+        );
     }
 
     /**
@@ -192,8 +200,8 @@
     /**
      * Store an item in the cache indefinitely.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function forever($key, $value)
@@ -204,7 +212,7 @@
     /**
      * Remove an item from the cache.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function forget($key)

--- vendor/laravel/framework/src/Illuminate/Cache/Events/CacheHit.php
+++ PHP_CodeSniffer
@@ -28,7 +28,7 @@
     /**
      * Create a new event instance.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
      * @param  array  $tags
      * @return void

--- vendor/laravel/framework/src/Illuminate/Cache/Events/CacheMissed.php
+++ PHP_CodeSniffer
@@ -21,7 +21,7 @@
     /**
      * Create a new event instance.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  array  $tags
      * @return void
      */

--- vendor/laravel/framework/src/Illuminate/Cache/Events/KeyForgotten.php
+++ PHP_CodeSniffer
@@ -21,7 +21,7 @@
     /**
      * Create a new event instance.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  array  $tags
      * @return void
      */

--- vendor/laravel/framework/src/Illuminate/Cache/Events/KeyWritten.php
+++ PHP_CodeSniffer
@@ -35,9 +35,9 @@
     /**
      * Create a new event instance.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
-     * @param  int  $minutes
+     * @param  int    $minutes
      * @param  array  $tags
      * @return void
      */

--- vendor/laravel/framework/src/Illuminate/Cache/FileStore.php
+++ PHP_CodeSniffer
@@ -28,8 +28,8 @@
     /**
      * Create a new file cache store instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
-     * @param  string  $directory
+     * @param  \Illuminate\Filesystem\Filesystem $files
+     * @param  string                            $directory
      * @return void
      */
     public function __construct(Filesystem $files, $directory)
@@ -41,7 +41,7 @@
     /**
      * Retrieve an item from the cache by key.
      *
-     * @param  string|array  $key
+     * @param  string|array $key
      * @return mixed
      */
     public function get($key)
@@ -52,7 +52,7 @@
     /**
      * Retrieve an item and expiry time from the cache by key.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return array
      */
     protected function getPayload($key)
@@ -92,9 +92,9 @@
     /**
      * Store an item in the cache for a given number of minutes.
      *
-     * @param  string  $key
-     * @param  mixed   $value
-     * @param  int     $minutes
+     * @param  string $key
+     * @param  mixed  $value
+     * @param  int    $minutes
      * @return void
      */
     public function put($key, $value, $minutes)
@@ -109,7 +109,7 @@
     /**
      * Create the file cache directory if necessary.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return void
      */
     protected function createCacheDirectory($path)
@@ -122,8 +122,8 @@
     /**
      * Increment the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int
      */
     public function increment($key, $value = 1)
@@ -140,8 +140,8 @@
     /**
      * Decrement the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int
      */
     public function decrement($key, $value = 1)
@@ -152,8 +152,8 @@
     /**
      * Store an item in the cache indefinitely.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function forever($key, $value)
@@ -164,7 +164,7 @@
     /**
      * Remove an item from the cache.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function forget($key)
@@ -195,7 +195,7 @@
     /**
      * Get the full path for the given cache key.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return string
      */
     protected function path($key)
@@ -208,7 +208,7 @@
     /**
      * Get the expiration time based on the given minutes.
      *
-     * @param  int  $minutes
+     * @param  int $minutes
      * @return int
      */
     protected function expiration($minutes)

--- vendor/laravel/framework/src/Illuminate/Cache/MemcachedConnector.php
+++ PHP_CodeSniffer
@@ -10,7 +10,7 @@
     /**
      * Create a new Memcached connection.
      *
-     * @param  array  $servers
+     * @param  array $servers
      * @return \Memcached
      *
      * @throws \RuntimeException

--- vendor/laravel/framework/src/Illuminate/Cache/MemcachedStore.php
+++ PHP_CodeSniffer
@@ -24,8 +24,8 @@
     /**
      * Create a new Memcached store.
      *
-     * @param  \Memcached  $memcached
-     * @param  string      $prefix
+     * @param  \Memcached $memcached
+     * @param  string     $prefix
      * @return void
      */
     public function __construct($memcached, $prefix = '')
@@ -37,7 +37,7 @@
     /**
      * Retrieve an item from the cache by key.
      *
-     * @param  string|array  $key
+     * @param  string|array $key
      * @return mixed
      */
     public function get($key)
@@ -54,14 +54,16 @@
      *
      * Items not found in the cache will have a null value.
      *
-     * @param  array  $keys
+     * @param  array $keys
      * @return array
      */
     public function many(array $keys)
     {
-        $prefixedKeys = array_map(function ($key) {
-            return $this->prefix.$key;
-        }, $keys);
+        $prefixedKeys = array_map(
+            function ($key) {
+                return $this->prefix.$key;
+            }, $keys
+        );
 
         $values = $this->memcached->getMulti($prefixedKeys, null, Memcached::GET_PRESERVE_ORDER);
 
@@ -75,9 +77,9 @@
     /**
      * Store an item in the cache for a given number of minutes.
      *
-     * @param  string  $key
-     * @param  mixed   $value
-     * @param  int     $minutes
+     * @param  string $key
+     * @param  mixed  $value
+     * @param  int    $minutes
      * @return void
      */
     public function put($key, $value, $minutes)
@@ -88,8 +90,8 @@
     /**
      * Store multiple items in the cache for a given number of minutes.
      *
-     * @param  array  $values
-     * @param  int  $minutes
+     * @param  array $values
+     * @param  int   $minutes
      * @return void
      */
     public function putMany(array $values, $minutes)
@@ -106,9 +108,9 @@
     /**
      * Store an item in the cache if the key doesn't exist.
      *
-     * @param  string  $key
-     * @param  mixed   $value
-     * @param  int     $minutes
+     * @param  string $key
+     * @param  mixed  $value
+     * @param  int    $minutes
      * @return bool
      */
     public function add($key, $value, $minutes)
@@ -119,8 +121,8 @@
     /**
      * Increment the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int|bool
      */
     public function increment($key, $value = 1)
@@ -131,8 +133,8 @@
     /**
      * Decrement the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int|bool
      */
     public function decrement($key, $value = 1)
@@ -143,8 +145,8 @@
     /**
      * Store an item in the cache indefinitely.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function forever($key, $value)
@@ -155,7 +157,7 @@
     /**
      * Remove an item from the cache.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function forget($key)
@@ -196,7 +198,7 @@
     /**
      * Set the cache key prefix.
      *
-     * @param  string  $prefix
+     * @param  string $prefix
      * @return void
      */
     public function setPrefix($prefix)

--- vendor/laravel/framework/src/Illuminate/Cache/NullStore.php
+++ PHP_CodeSniffer
@@ -18,7 +18,7 @@
     /**
      * Retrieve an item from the cache by key.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function get($key)
@@ -29,9 +29,9 @@
     /**
      * Store an item in the cache for a given number of minutes.
      *
-     * @param  string  $key
-     * @param  mixed   $value
-     * @param  int     $minutes
+     * @param  string $key
+     * @param  mixed  $value
+     * @param  int    $minutes
      * @return void
      */
     public function put($key, $value, $minutes)
@@ -42,8 +42,8 @@
     /**
      * Increment the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int
      */
     public function increment($key, $value = 1)
@@ -54,8 +54,8 @@
     /**
      * Decrement the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int
      */
     public function decrement($key, $value = 1)
@@ -66,8 +66,8 @@
     /**
      * Store an item in the cache indefinitely.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function forever($key, $value)
@@ -78,7 +78,7 @@
     /**
      * Remove an item from the cache.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return void
      */
     public function forget($key)

--- vendor/laravel/framework/src/Illuminate/Cache/RateLimiter.php
+++ PHP_CodeSniffer
@@ -16,7 +16,7 @@
     /**
      * Create a new rate limiter instance.
      *
-     * @param  \Illuminate\Contracts\Cache\Repository  $cache
+     * @param  \Illuminate\Contracts\Cache\Repository $cache
      * @return void
      */
     public function __construct(Cache $cache)
@@ -27,9 +27,9 @@
     /**
      * Determine if the given key has been "accessed" too many times.
      *
-     * @param  string  $key
-     * @param  int  $maxAttempts
-     * @param  int  $decayMinutes
+     * @param  string $key
+     * @param  int    $maxAttempts
+     * @param  int    $decayMinutes
      * @return bool
      */
     public function tooManyAttempts($key, $maxAttempts, $decayMinutes = 1)
@@ -52,8 +52,8 @@
     /**
      * Increment the counter for a given key for a given decay time.
      *
-     * @param  string  $key
-     * @param  int  $decayMinutes
+     * @param  string $key
+     * @param  int    $decayMinutes
      * @return int
      */
     public function hit($key, $decayMinutes = 1)
@@ -66,7 +66,7 @@
     /**
      * Get the number of attempts for the given key.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function attempts($key)
@@ -77,7 +77,7 @@
     /**
      * Reset the number of attempts for the given key.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function resetAttempts($key)
@@ -88,8 +88,8 @@
     /**
      * Get the number of retries left for the given key.
      *
-     * @param  string  $key
-     * @param  int  $maxAttempts
+     * @param  string $key
+     * @param  int    $maxAttempts
      * @return int
      */
     public function retriesLeft($key, $maxAttempts)
@@ -102,7 +102,7 @@
     /**
      * Clear the hits and lockout for the given key.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return void
      */
     public function clear($key)
@@ -115,7 +115,7 @@
     /**
      * Get the number of seconds until the "key" is accessible again.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return int
      */
     public function availableIn($key)

--- vendor/laravel/framework/src/Illuminate/Cache/RedisStore.php
+++ PHP_CodeSniffer
@@ -31,9 +31,9 @@
     /**
      * Create a new Redis store.
      *
-     * @param  \Illuminate\Redis\Database  $redis
-     * @param  string  $prefix
-     * @param  string  $connection
+     * @param  \Illuminate\Redis\Database $redis
+     * @param  string                     $prefix
+     * @param  string                     $connection
      * @return void
      */
     public function __construct(Redis $redis, $prefix = '', $connection = 'default')
@@ -46,7 +46,7 @@
     /**
      * Retrieve an item from the cache by key.
      *
-     * @param  string|array  $key
+     * @param  string|array $key
      * @return mixed
      */
     public function get($key)
@@ -61,16 +61,18 @@
      *
      * Items not found in the cache will have a null value.
      *
-     * @param  array  $keys
+     * @param  array $keys
      * @return array
      */
     public function many(array $keys)
     {
         $return = [];
 
-        $prefixedKeys = array_map(function ($key) {
-            return $this->prefix.$key;
-        }, $keys);
+        $prefixedKeys = array_map(
+            function ($key) {
+                return $this->prefix.$key;
+            }, $keys
+        );
 
         $values = $this->connection()->mget($prefixedKeys);
 
@@ -84,9 +86,9 @@
     /**
      * Store an item in the cache for a given number of minutes.
      *
-     * @param  string  $key
-     * @param  mixed   $value
-     * @param  int     $minutes
+     * @param  string $key
+     * @param  mixed  $value
+     * @param  int    $minutes
      * @return void
      */
     public function put($key, $value, $minutes)
@@ -99,8 +101,8 @@
     /**
      * Store multiple items in the cache for a given number of minutes.
      *
-     * @param  array  $values
-     * @param  int  $minutes
+     * @param  array $values
+     * @param  int   $minutes
      * @return void
      */
     public function putMany(array $values, $minutes)
@@ -117,8 +119,8 @@
     /**
      * Increment the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int
      */
     public function increment($key, $value = 1)
@@ -129,8 +131,8 @@
     /**
      * Decrement the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int
      */
     public function decrement($key, $value = 1)
@@ -141,8 +143,8 @@
     /**
      * Store an item in the cache indefinitely.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function forever($key, $value)
@@ -155,7 +157,7 @@
     /**
      * Remove an item from the cache.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function forget($key)
@@ -176,7 +178,7 @@
     /**
      * Begin executing a new tags operation.
      *
-     * @param  array|mixed  $names
+     * @param  array|mixed $names
      * @return \Illuminate\Cache\RedisTaggedCache
      */
     public function tags($names)
@@ -197,7 +199,7 @@
     /**
      * Set the connection name to be used.
      *
-     * @param  string  $connection
+     * @param  string $connection
      * @return void
      */
     public function setConnection($connection)
@@ -228,7 +230,7 @@
     /**
      * Set the cache key prefix.
      *
-     * @param  string  $prefix
+     * @param  string $prefix
      * @return void
      */
     public function setPrefix($prefix)

--- vendor/laravel/framework/src/Illuminate/Cache/RedisTaggedCache.php
+++ PHP_CodeSniffer
@@ -20,9 +20,9 @@
     /**
      * Store an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
-     * @param  \DateTime|int  $minutes
+     * @param  string        $key
+     * @param  mixed         $value
+     * @param  \DateTime|int $minutes
      * @return void
      */
     public function put($key, $value, $minutes = null)
@@ -35,8 +35,8 @@
     /**
      * Store an item in the cache indefinitely.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function forever($key, $value)
@@ -62,8 +62,8 @@
     /**
      * Store standard key references into store.
      *
-     * @param  string  $namespace
-     * @param  string  $key
+     * @param  string $namespace
+     * @param  string $key
      * @return void
      */
     protected function pushStandardKeys($namespace, $key)
@@ -74,8 +74,8 @@
     /**
      * Store forever key references into store.
      *
-     * @param  string  $namespace
-     * @param  string  $key
+     * @param  string $namespace
+     * @param  string $key
      * @return void
      */
     protected function pushForeverKeys($namespace, $key)
@@ -86,9 +86,9 @@
     /**
      * Store a reference to the cache key against the reference key.
      *
-     * @param  string  $namespace
-     * @param  string  $key
-     * @param  string  $reference
+     * @param  string $namespace
+     * @param  string $key
+     * @param  string $reference
      * @return void
      */
     protected function pushKeys($namespace, $key, $reference)
@@ -123,7 +123,7 @@
     /**
      * Find and delete all of the items that were stored against a reference.
      *
-     * @param  string  $reference
+     * @param  string $reference
      * @return void
      */
     protected function deleteKeysByReference($reference)
@@ -138,7 +138,7 @@
     /**
      * Delete item keys that have been stored against a reference.
      *
-     * @param  string  $referenceKey
+     * @param  string $referenceKey
      * @return void
      */
     protected function deleteValues($referenceKey)
@@ -153,8 +153,8 @@
     /**
      * Get the reference key for the segment.
      *
-     * @param  string  $segment
-     * @param  string  $suffix
+     * @param  string $segment
+     * @param  string $suffix
      * @return string
      */
     protected function referenceKey($segment, $suffix)

--- vendor/laravel/framework/src/Illuminate/Cache/Repository.php
+++ PHP_CodeSniffer
@@ -42,7 +42,7 @@
     /**
      * Create a new cache repository instance.
      *
-     * @param  \Illuminate\Contracts\Cache\Store  $store
+     * @param  \Illuminate\Contracts\Cache\Store $store
      * @return void
      */
     public function __construct(Store $store)
@@ -53,7 +53,7 @@
     /**
      * Set the event dispatcher instance.
      *
-     * @param  \Illuminate\Contracts\Events\Dispatcher  $events
+     * @param  \Illuminate\Contracts\Events\Dispatcher $events
      * @return void
      */
     public function setEventDispatcher(Dispatcher $events)
@@ -64,7 +64,7 @@
     /**
      * Fire an event for this cache instance.
      *
-     * @param  string  $event
+     * @param  string $event
      * @param  array  $payload
      * @return void
      */
@@ -75,37 +75,37 @@
         }
 
         switch ($event) {
-            case 'hit':
-                if (count($payload) == 2) {
-                    $payload[] = [];
-                }
-
-                return $this->events->fire(new Events\CacheHit($payload[0], $payload[1], $payload[2]));
-            case 'missed':
-                if (count($payload) == 1) {
-                    $payload[] = [];
-                }
-
-                return $this->events->fire(new Events\CacheMissed($payload[0], $payload[1]));
-            case 'delete':
-                if (count($payload) == 1) {
-                    $payload[] = [];
-                }
-
-                return $this->events->fire(new Events\KeyForgotten($payload[0], $payload[1]));
-            case 'write':
-                if (count($payload) == 3) {
-                    $payload[] = [];
-                }
+        case 'hit':
+            if (count($payload) == 2) {
+                $payload[] = [];
+            }
+
+            return $this->events->fire(new Events\CacheHit($payload[0], $payload[1], $payload[2]));
+        case 'missed':
+            if (count($payload) == 1) {
+                $payload[] = [];
+            }
+
+            return $this->events->fire(new Events\CacheMissed($payload[0], $payload[1]));
+        case 'delete':
+            if (count($payload) == 1) {
+                $payload[] = [];
+            }
 
-                return $this->events->fire(new Events\KeyWritten($payload[0], $payload[1], $payload[2], $payload[3]));
+            return $this->events->fire(new Events\KeyForgotten($payload[0], $payload[1]));
+        case 'write':
+            if (count($payload) == 3) {
+                $payload[] = [];
+            }
+
+            return $this->events->fire(new Events\KeyWritten($payload[0], $payload[1], $payload[2], $payload[3]));
         }
     }
 
     /**
      * Determine if an item exists in the cache.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function has($key)
@@ -116,8 +116,8 @@
     /**
      * Retrieve an item from the cache by key.
      *
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  string $key
+     * @param  mixed  $default
      * @return mixed
      */
     public function get($key, $default = null)
@@ -144,7 +144,7 @@
      *
      * Items not found in the cache will have a null value.
      *
-     * @param  array  $keys
+     * @param  array $keys
      * @return array
      */
     public function many(array $keys)
@@ -173,8 +173,8 @@
     /**
      * Retrieve an item from the cache and delete it.
      *
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  string $key
+     * @param  mixed  $default
      * @return mixed
      */
     public function pull($key, $default = null)
@@ -189,9 +189,9 @@
     /**
      * Store an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
-     * @param  \DateTime|int  $minutes
+     * @param  string        $key
+     * @param  mixed         $value
+     * @param  \DateTime|int $minutes
      * @return void
      */
     public function put($key, $value, $minutes = null)
@@ -212,8 +212,8 @@
     /**
      * Store multiple items in the cache for a given number of minutes.
      *
-     * @param  array  $values
-     * @param  int  $minutes
+     * @param  array $values
+     * @param  int   $minutes
      * @return void
      */
     public function putMany(array $values, $minutes)
@@ -232,9 +232,9 @@
     /**
      * Store an item in the cache if the key does not exist.
      *
-     * @param  string  $key
-     * @param  mixed   $value
-     * @param  \DateTime|int  $minutes
+     * @param  string        $key
+     * @param  mixed         $value
+     * @param  \DateTime|int $minutes
      * @return bool
      */
     public function add($key, $value, $minutes)
@@ -261,8 +261,8 @@
     /**
      * Store an item in the cache indefinitely.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function forever($key, $value)
@@ -275,9 +275,9 @@
     /**
      * Get an item from the cache, or store the default value.
      *
-     * @param  string  $key
-     * @param  \DateTime|int  $minutes
-     * @param  \Closure  $callback
+     * @param  string        $key
+     * @param  \DateTime|int $minutes
+     * @param  \Closure      $callback
      * @return mixed
      */
     public function remember($key, $minutes, Closure $callback)
@@ -298,7 +298,7 @@
      * Get an item from the cache, or store the default value forever.
      *
      * @param  string   $key
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return mixed
      */
     public function sear($key, Closure $callback)
@@ -310,7 +310,7 @@
      * Get an item from the cache, or store the default value forever.
      *
      * @param  string   $key
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return mixed
      */
     public function rememberForever($key, Closure $callback)
@@ -345,7 +345,7 @@
     /**
      * Begin executing a new tags operation if the store supports it.
      *
-     * @param  array|mixed  $names
+     * @param  array|mixed $names
      * @return \Illuminate\Cache\TaggedCache
      *
      * @throws \BadMethodCallException
@@ -370,7 +370,7 @@
     /**
      * Format the key for a cache item.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return string
      */
     protected function itemKey($key)
@@ -391,7 +391,7 @@
     /**
      * Set the default cache time in minutes.
      *
-     * @param  int   $minutes
+     * @param  int $minutes
      * @return void
      */
     public function setDefaultCacheTime($minutes)
@@ -412,7 +412,7 @@
     /**
      * Determine if a cached value exists.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function offsetExists($key)
@@ -423,7 +423,7 @@
     /**
      * Retrieve an item from the cache by key.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function offsetGet($key)
@@ -434,8 +434,8 @@
     /**
      * Store an item in the cache for the default time.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function offsetSet($key, $value)
@@ -446,7 +446,7 @@
     /**
      * Remove an item from the cache.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return void
      */
     public function offsetUnset($key)
@@ -457,7 +457,7 @@
     /**
      * Calculate the number of minutes with the given duration.
      *
-     * @param  \DateTime|int  $duration
+     * @param  \DateTime|int $duration
      * @return int|null
      */
     protected function getMinutes($duration)
@@ -474,8 +474,8 @@
     /**
      * Handle dynamic calls into macros or pass missing methods to the store.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      */
     public function __call($method, $parameters)

--- vendor/laravel/framework/src/Illuminate/Cache/RetrievesMultipleKeys.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
      *
      * Items not found in the cache will have a null value.
      *
-     * @param  array  $keys
+     * @param  array $keys
      * @return array
      */
     public function many(array $keys)
@@ -26,8 +26,8 @@
     /**
      * Store multiple items in the cache for a given number of minutes.
      *
-     * @param  array  $values
-     * @param  int  $minutes
+     * @param  array $values
+     * @param  int   $minutes
      * @return void
      */
     public function putMany(array $values, $minutes)

--- vendor/laravel/framework/src/Illuminate/Cache/TaggableStore.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Begin executing a new tags operation.
      *
-     * @param  array|mixed  $names
+     * @param  array|mixed $names
      * @return \Illuminate\Cache\TaggedCache
      */
     public function tags($names)

--- vendor/laravel/framework/src/Illuminate/Cache/TaggedCache.php
+++ PHP_CodeSniffer
@@ -18,8 +18,8 @@
     /**
      * Create a new tagged cache instance.
      *
-     * @param  \Illuminate\Contracts\Cache\Store  $store
-     * @param  \Illuminate\Cache\TagSet  $tags
+     * @param  \Illuminate\Contracts\Cache\Store $store
+     * @param  \Illuminate\Cache\TagSet          $tags
      * @return void
      */
     public function __construct(Store $store, TagSet $tags)
@@ -42,8 +42,8 @@
     /**
      * Increment the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function increment($key, $value = 1)
@@ -54,8 +54,8 @@
     /**
      * Increment the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function decrement($key, $value = 1)
@@ -84,7 +84,7 @@
     /**
      * Get a fully qualified key for a tagged item.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return string
      */
     public function taggedItemKey($key)

--- vendor/laravel/framework/src/Illuminate/Cache/TagSet.php
+++ PHP_CodeSniffer
@@ -23,8 +23,8 @@
     /**
      * Create a new TagSet instance.
      *
-     * @param  \Illuminate\Contracts\Cache\Store  $store
-     * @param  array  $names
+     * @param  \Illuminate\Contracts\Cache\Store $store
+     * @param  array                             $names
      * @return void
      */
     public function __construct(Store $store, array $names = [])
@@ -46,7 +46,7 @@
     /**
      * Get the unique tag identifier for a given tag.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     public function tagId($name)
@@ -77,7 +77,7 @@
     /**
      * Reset the tag and return the new tag identifier.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     public function resetTag($name)
@@ -90,7 +90,7 @@
     /**
      * Get the tag identifier key for a given tag.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     public function tagKey($name)

--- vendor/laravel/framework/src/Illuminate/Config/Repository.php
+++ PHP_CodeSniffer
@@ -18,7 +18,7 @@
     /**
      * Create a new configuration repository.
      *
-     * @param  array  $items
+     * @param  array $items
      * @return void
      */
     public function __construct(array $items = [])
@@ -29,7 +29,7 @@
     /**
      * Determine if the given configuration value exists.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function has($key)
@@ -40,8 +40,8 @@
     /**
      * Get the specified configuration value.
      *
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  string $key
+     * @param  mixed  $default
      * @return mixed
      */
     public function get($key, $default = null)
@@ -52,8 +52,8 @@
     /**
      * Set a given configuration value.
      *
-     * @param  array|string  $key
-     * @param  mixed   $value
+     * @param  array|string $key
+     * @param  mixed        $value
      * @return void
      */
     public function set($key, $value = null)
@@ -70,7 +70,7 @@
     /**
      * Prepend a value onto an array configuration value.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
      * @return void
      */
@@ -86,7 +86,7 @@
     /**
      * Push a value onto an array configuration value.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
      * @return void
      */
@@ -112,7 +112,7 @@
     /**
      * Determine if the given configuration option exists.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function offsetExists($key)
@@ -123,7 +123,7 @@
     /**
      * Get a configuration option.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function offsetGet($key)
@@ -134,7 +134,7 @@
     /**
      * Set a configuration option.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
      * @return void
      */
@@ -146,7 +146,7 @@
     /**
      * Unset a configuration option.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return void
      */
     public function offsetUnset($key)

--- vendor/laravel/framework/src/Illuminate/Console/Application.php
+++ PHP_CodeSniffer
@@ -30,9 +30,9 @@
     /**
      * Create a new Artisan console application.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $laravel
-     * @param  \Illuminate\Contracts\Events\Dispatcher  $events
-     * @param  string  $version
+     * @param  \Illuminate\Contracts\Container\Container $laravel
+     * @param  \Illuminate\Contracts\Events\Dispatcher   $events
+     * @param  string                                    $version
      * @return void
      */
     public function __construct(Container $laravel, Dispatcher $events, $version)
@@ -49,7 +49,7 @@
     /**
      * Run an Artisan console command by name.
      *
-     * @param  string  $command
+     * @param  string $command
      * @param  array  $parameters
      * @return int
      */
@@ -81,7 +81,7 @@
     /**
      * Add a command to the console.
      *
-     * @param  \Symfony\Component\Console\Command\Command  $command
+     * @param  \Symfony\Component\Console\Command\Command $command
      * @return \Symfony\Component\Console\Command\Command
      */
     public function add(SymfonyCommand $command)
@@ -96,7 +96,7 @@
     /**
      * Add the command to the parent instance.
      *
-     * @param  \Symfony\Component\Console\Command\Command  $command
+     * @param  \Symfony\Component\Console\Command\Command $command
      * @return \Symfony\Component\Console\Command\Command
      */
     protected function addToParent(SymfonyCommand $command)
@@ -107,7 +107,7 @@
     /**
      * Add a command, resolving through the application.
      *
-     * @param  string  $command
+     * @param  string $command
      * @return \Symfony\Component\Console\Command\Command
      */
     public function resolve($command)
@@ -118,7 +118,7 @@
     /**
      * Resolve an array of commands through the application.
      *
-     * @param  array|mixed  $commands
+     * @param  array|mixed $commands
      * @return $this
      */
     public function resolveCommands($commands)

--- vendor/laravel/framework/src/Illuminate/Console/Command.php
+++ PHP_CodeSniffer
@@ -142,8 +142,8 @@
     /**
      * Run the console command.
      *
-     * @param  \Symfony\Component\Console\Input\InputInterface  $input
-     * @param  \Symfony\Component\Console\Output\OutputInterface  $output
+     * @param  \Symfony\Component\Console\Input\InputInterface   $input
+     * @param  \Symfony\Component\Console\Output\OutputInterface $output
      * @return int
      */
     public function run(InputInterface $input, OutputInterface $output)
@@ -158,8 +158,8 @@
     /**
      * Execute the console command.
      *
-     * @param  \Symfony\Component\Console\Input\InputInterface  $input
-     * @param  \Symfony\Component\Console\Output\OutputInterface  $output
+     * @param  \Symfony\Component\Console\Input\InputInterface   $input
+     * @param  \Symfony\Component\Console\Output\OutputInterface $output
      * @return mixed
      */
     protected function execute(InputInterface $input, OutputInterface $output)
@@ -172,8 +172,8 @@
     /**
      * Call another console command.
      *
-     * @param  string  $command
-     * @param  array   $arguments
+     * @param  string $command
+     * @param  array  $arguments
      * @return int
      */
     public function call($command, array $arguments = [])
@@ -188,8 +188,8 @@
     /**
      * Call another console command silently.
      *
-     * @param  string  $command
-     * @param  array   $arguments
+     * @param  string $command
+     * @param  array  $arguments
      * @return int
      */
     public function callSilent($command, array $arguments = [])
@@ -204,7 +204,7 @@
     /**
      * Determine if the given argument is present.
      *
-     * @param  string|int  $name
+     * @param  string|int $name
      * @return bool
      */
     public function hasArgument($name)
@@ -215,7 +215,7 @@
     /**
      * Get the value of a command argument.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return string|array
      */
     public function argument($key = null)
@@ -230,7 +230,7 @@
     /**
      * Determine if the given option is present.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return bool
      */
     public function hasOption($name)
@@ -241,7 +241,7 @@
     /**
      * Get the value of a command option.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return string|array
      */
     public function option($key = null)
@@ -256,8 +256,8 @@
     /**
      * Confirm a question with the user.
      *
-     * @param  string  $question
-     * @param  bool    $default
+     * @param  string $question
+     * @param  bool   $default
      * @return bool
      */
     public function confirm($question, $default = false)
@@ -268,8 +268,8 @@
     /**
      * Prompt the user for input.
      *
-     * @param  string  $question
-     * @param  string  $default
+     * @param  string $question
+     * @param  string $default
      * @return string
      */
     public function ask($question, $default = null)
@@ -280,9 +280,9 @@
     /**
      * Prompt the user for input with auto completion.
      *
-     * @param  string  $question
-     * @param  array   $choices
-     * @param  string  $default
+     * @param  string $question
+     * @param  array  $choices
+     * @param  string $default
      * @return string
      */
     public function anticipate($question, array $choices, $default = null)
@@ -293,9 +293,9 @@
     /**
      * Prompt the user for input with auto completion.
      *
-     * @param  string  $question
-     * @param  array   $choices
-     * @param  string  $default
+     * @param  string $question
+     * @param  array  $choices
+     * @param  string $default
      * @return string
      */
     public function askWithCompletion($question, array $choices, $default = null)
@@ -310,8 +310,8 @@
     /**
      * Prompt the user for input but hide the answer from the console.
      *
-     * @param  string  $question
-     * @param  bool    $fallback
+     * @param  string $question
+     * @param  bool   $fallback
      * @return string
      */
     public function secret($question, $fallback = true)
@@ -326,11 +326,11 @@
     /**
      * Give the user a single choice from an array of answers.
      *
-     * @param  string  $question
-     * @param  array   $choices
-     * @param  string  $default
-     * @param  mixed   $attempts
-     * @param  bool    $multiple
+     * @param  string $question
+     * @param  array  $choices
+     * @param  string $default
+     * @param  mixed  $attempts
+     * @param  bool   $multiple
      * @return string
      */
     public function choice($question, array $choices, $default = null, $attempts = null, $multiple = null)
@@ -345,9 +345,9 @@
     /**
      * Format input to textual table.
      *
-     * @param  array   $headers
-     * @param  \Illuminate\Contracts\Support\Arrayable|array  $rows
-     * @param  string  $style
+     * @param  array                                         $headers
+     * @param  \Illuminate\Contracts\Support\Arrayable|array $rows
+     * @param  string                                        $style
      * @return void
      */
     public function table(array $headers, $rows, $style = 'default')
@@ -364,8 +364,8 @@
     /**
      * Write a string as information output.
      *
-     * @param  string  $string
-     * @param  null|int|string  $verbosity
+     * @param  string          $string
+     * @param  null|int|string $verbosity
      * @return void
      */
     public function info($string, $verbosity = null)
@@ -376,9 +376,9 @@
     /**
      * Write a string as standard output.
      *
-     * @param  string  $string
-     * @param  string  $style
-     * @param  null|int|string  $verbosity
+     * @param  string          $string
+     * @param  string          $style
+     * @param  null|int|string $verbosity
      * @return void
      */
     public function line($string, $style = null, $verbosity = null)
@@ -391,8 +391,8 @@
     /**
      * Write a string as comment output.
      *
-     * @param  string  $string
-     * @param  null|int|string  $verbosity
+     * @param  string          $string
+     * @param  null|int|string $verbosity
      * @return void
      */
     public function comment($string, $verbosity = null)
@@ -403,8 +403,8 @@
     /**
      * Write a string as question output.
      *
-     * @param  string  $string
-     * @param  null|int|string  $verbosity
+     * @param  string          $string
+     * @param  null|int|string $verbosity
      * @return void
      */
     public function question($string, $verbosity = null)
@@ -415,8 +415,8 @@
     /**
      * Write a string as error output.
      *
-     * @param  string  $string
-     * @param  null|int|string  $verbosity
+     * @param  string          $string
+     * @param  null|int|string $verbosity
      * @return void
      */
     public function error($string, $verbosity = null)
@@ -427,8 +427,8 @@
     /**
      * Write a string as warning output.
      *
-     * @param  string  $string
-     * @param  null|int|string  $verbosity
+     * @param  string          $string
+     * @param  null|int|string $verbosity
      * @return void
      */
     public function warn($string, $verbosity = null)
@@ -445,7 +445,7 @@
     /**
      * Get the verbosity level in terms of Symfony's OutputInterface level.
      *
-     * @param  string|int  $level
+     * @param  string|int $level
      * @return int
      */
     protected function parseVerbosity($level = null)
@@ -462,7 +462,7 @@
     /**
      * Set the verbosity level.
      *
-     * @param string|int $level
+     * @param  string|int $level
      * @return void
      */
     protected function setVerbosity($level)
@@ -513,7 +513,7 @@
     /**
      * Set the Laravel application instance.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $laravel
+     * @param  \Illuminate\Contracts\Container\Container $laravel
      * @return void
      */
     public function setLaravel($laravel)

--- vendor/laravel/framework/src/Illuminate/Console/ConfirmableTrait.php
+++ PHP_CodeSniffer
@@ -9,8 +9,8 @@
     /**
      * Confirm before proceeding with the action.
      *
-     * @param  string    $warning
-     * @param  \Closure|bool|null  $callback
+     * @param  string             $warning
+     * @param  \Closure|bool|null $callback
      * @return bool
      */
     public function confirmToProceed($warning = 'Application In Production!', $callback = null)

--- vendor/laravel/framework/src/Illuminate/Console/Events/ArtisanStarting.php
+++ PHP_CodeSniffer
@@ -14,7 +14,7 @@
     /**
      * Create a new event instance.
      *
-     * @param  \Illuminate\Console\Application  $artisan
+     * @param  \Illuminate\Console\Application $artisan
      * @return void
      */
     public function __construct($artisan)

--- vendor/laravel/framework/src/Illuminate/Console/GeneratorCommand.php
+++ PHP_CodeSniffer
@@ -25,7 +25,7 @@
     /**
      * Create a new controller creator command instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
+     * @param  \Illuminate\Filesystem\Filesystem $files
      * @return void
      */
     public function __construct(Filesystem $files)
@@ -69,7 +69,7 @@
     /**
      * Determine if the class already exists.
      *
-     * @param  string  $rawName
+     * @param  string $rawName
      * @return bool
      */
     protected function alreadyExists($rawName)
@@ -82,7 +82,7 @@
     /**
      * Get the destination class path.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     protected function getPath($name)
@@ -95,7 +95,7 @@
     /**
      * Parse the name and format according to the root namespace.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     protected function parseName($name)
@@ -116,7 +116,7 @@
     /**
      * Get the default namespace for the class.
      *
-     * @param  string  $rootNamespace
+     * @param  string $rootNamespace
      * @return string
      */
     protected function getDefaultNamespace($rootNamespace)
@@ -127,7 +127,7 @@
     /**
      * Build the directory for the class if necessary.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     protected function makeDirectory($path)
@@ -140,7 +140,7 @@
     /**
      * Build the class with the given name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     protected function buildClass($name)
@@ -153,8 +153,8 @@
     /**
      * Replace the namespace for the given stub.
      *
-     * @param  string  $stub
-     * @param  string  $name
+     * @param  string $stub
+     * @param  string $name
      * @return $this
      */
     protected function replaceNamespace(&$stub, $name)
@@ -173,7 +173,7 @@
     /**
      * Get the full namespace name for a given class.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     protected function getNamespace($name)
@@ -184,8 +184,8 @@
     /**
      * Replace the class name for the given stub.
      *
-     * @param  string  $stub
-     * @param  string  $name
+     * @param  string $stub
+     * @param  string $name
      * @return string
      */
     protected function replaceClass($stub, $name)

--- vendor/laravel/framework/src/Illuminate/Console/OutputStyle.php
+++ PHP_CodeSniffer
@@ -18,8 +18,8 @@
     /**
      * Create a new Console OutputStyle instance.
      *
-     * @param  \Symfony\Component\Console\Input\InputInterface  $input
-     * @param  \Symfony\Component\Console\Output\OutputInterface  $output
+     * @param  \Symfony\Component\Console\Input\InputInterface   $input
+     * @param  \Symfony\Component\Console\Output\OutputInterface $output
      * @return void
      */
     public function __construct(InputInterface $input, OutputInterface $output)

--- vendor/laravel/framework/src/Illuminate/Console/Parser.php
+++ PHP_CodeSniffer
@@ -12,7 +12,7 @@
     /**
      * Parse the given console command definition into an array.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return array
      *
      * @throws \InvalidArgumentException
@@ -45,7 +45,7 @@
     /**
      * Extract all of the parameters from the tokens.
      *
-     * @param  array  $tokens
+     * @param  array $tokens
      * @return array
      */
     protected static function parameters(array $tokens)
@@ -68,7 +68,7 @@
     /**
      * Parse an argument expression.
      *
-     * @param  string  $token
+     * @param  string $token
      * @return \Symfony\Component\Console\Input\InputArgument
      */
     protected static function parseArgument($token)
@@ -84,23 +84,23 @@
         }
 
         switch (true) {
-            case Str::endsWith($token, '?*'):
-                return new InputArgument(trim($token, '?*'), InputArgument::IS_ARRAY, $description);
-            case Str::endsWith($token, '*'):
-                return new InputArgument(trim($token, '*'), InputArgument::IS_ARRAY | InputArgument::REQUIRED, $description);
-            case Str::endsWith($token, '?'):
-                return new InputArgument(trim($token, '?'), InputArgument::OPTIONAL, $description);
-            case preg_match('/(.+)\=(.+)/', $token, $matches):
-                return new InputArgument($matches[1], InputArgument::OPTIONAL, $description, $matches[2]);
-            default:
-                return new InputArgument($token, InputArgument::REQUIRED, $description);
+        case Str::endsWith($token, '?*'):
+            return new InputArgument(trim($token, '?*'), InputArgument::IS_ARRAY, $description);
+        case Str::endsWith($token, '*'):
+            return new InputArgument(trim($token, '*'), InputArgument::IS_ARRAY | InputArgument::REQUIRED, $description);
+        case Str::endsWith($token, '?'):
+            return new InputArgument(trim($token, '?'), InputArgument::OPTIONAL, $description);
+        case preg_match('/(.+)\=(.+)/', $token, $matches):
+            return new InputArgument($matches[1], InputArgument::OPTIONAL, $description, $matches[2]);
+        default:
+            return new InputArgument($token, InputArgument::REQUIRED, $description);
         }
     }
 
     /**
      * Parse an option expression.
      *
-     * @param  string  $token
+     * @param  string $token
      * @return \Symfony\Component\Console\Input\InputOption
      */
     protected static function parseOption($token)
@@ -123,14 +123,14 @@
         }
 
         switch (true) {
-            case Str::endsWith($token, '='):
-                return new InputOption(trim($token, '='), $shortcut, InputOption::VALUE_OPTIONAL, $description);
-            case Str::endsWith($token, '=*'):
-                return new InputOption(trim($token, '=*'), $shortcut, InputOption::VALUE_OPTIONAL | InputOption::VALUE_IS_ARRAY, $description);
-            case preg_match('/(.+)\=(.+)/', $token, $matches):
-                return new InputOption($matches[1], $shortcut, InputOption::VALUE_OPTIONAL, $description, $matches[2]);
-            default:
-                return new InputOption($token, $shortcut, InputOption::VALUE_NONE, $description);
+        case Str::endsWith($token, '='):
+            return new InputOption(trim($token, '='), $shortcut, InputOption::VALUE_OPTIONAL, $description);
+        case Str::endsWith($token, '=*'):
+            return new InputOption(trim($token, '=*'), $shortcut, InputOption::VALUE_OPTIONAL | InputOption::VALUE_IS_ARRAY, $description);
+        case preg_match('/(.+)\=(.+)/', $token, $matches):
+            return new InputOption($matches[1], $shortcut, InputOption::VALUE_OPTIONAL, $description, $matches[2]);
+        default:
+            return new InputOption($token, $shortcut, InputOption::VALUE_NONE, $description);
         }
     }
 }

--- vendor/laravel/framework/src/Illuminate/Console/Scheduling/CallbackEvent.php
+++ PHP_CodeSniffer
@@ -25,7 +25,7 @@
     /**
      * Create a new event instance.
      *
-     * @param  string  $callback
+     * @param  string $callback
      * @param  array  $parameters
      * @return void
      *
@@ -46,7 +46,7 @@
     /**
      * Run the given event.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
+     * @param  \Illuminate\Contracts\Container\Container $container
      * @return mixed
      *
      * @throws \Exception
@@ -95,9 +95,11 @@
             );
         }
 
-        return $this->skip(function () {
-            return file_exists($this->mutexPath());
-        });
+        return $this->skip(
+            function () {
+                return file_exists($this->mutexPath());
+            }
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Console/Scheduling/Event.php
+++ PHP_CodeSniffer
@@ -122,7 +122,7 @@
     /**
      * Create a new event instance.
      *
-     * @param  string  $command
+     * @param  string $command
      * @return void
      */
     public function __construct($command)
@@ -144,7 +144,7 @@
     /**
      * Run the given event.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
+     * @param  \Illuminate\Contracts\Container\Container $container
      * @return void
      */
     public function run(Container $container)
@@ -159,7 +159,7 @@
     /**
      * Run the command in the foreground.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
+     * @param  \Illuminate\Contracts\Container\Container $container
      * @return void
      */
     protected function runCommandInForeground(Container $container)
@@ -188,7 +188,7 @@
     /**
      * Call all of the "before" callbacks for the event.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
+     * @param  \Illuminate\Contracts\Container\Container $container
      * @return void
      */
     protected function callBeforeCallbacks(Container $container)
@@ -201,7 +201,7 @@
     /**
      * Call all of the "after" callbacks for the event.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
+     * @param  \Illuminate\Contracts\Container\Container $container
      * @return void
      */
     protected function callAfterCallbacks(Container $container)
@@ -248,7 +248,7 @@
     /**
      * Determine if the given event should run based on the Cron expression.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return bool
      */
     public function isDue($app)
@@ -280,7 +280,7 @@
     /**
      * Determine if the filters pass for the event.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return bool
      */
     public function filtersPass($app)
@@ -303,7 +303,7 @@
     /**
      * Determine if the event runs in the given environment.
      *
-     * @param  string  $environment
+     * @param  string $environment
      * @return bool
      */
     public function runsInEnvironment($environment)
@@ -324,7 +324,7 @@
     /**
      * The Cron expression representing the event's frequency.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return $this
      */
     public function cron($expression)
@@ -357,7 +357,7 @@
     /**
      * Schedule the command at a given time.
      *
-     * @param  string  $time
+     * @param  string $time
      * @return $this
      */
     public function at($time)
@@ -368,7 +368,7 @@
     /**
      * Schedule the event to run daily at a given time (10:00, 19:30, etc).
      *
-     * @param  string  $time
+     * @param  string $time
      * @return $this
      */
     public function dailyAt($time)
@@ -376,14 +376,14 @@
         $segments = explode(':', $time);
 
         return $this->spliceIntoPosition(2, (int) $segments[0])
-                    ->spliceIntoPosition(1, count($segments) == 2 ? (int) $segments[1] : '0');
+            ->spliceIntoPosition(1, count($segments) == 2 ? (int) $segments[1] : '0');
     }
 
     /**
      * Schedule the event to run twice daily.
      *
-     * @param  int  $first
-     * @param  int  $second
+     * @param  int $first
+     * @param  int $second
      * @return $this
      */
     public function twiceDaily($first = 1, $second = 13)
@@ -391,7 +391,7 @@
         $hours = $first.','.$second;
 
         return $this->spliceIntoPosition(1, 0)
-                    ->spliceIntoPosition(2, $hours);
+            ->spliceIntoPosition(2, $hours);
     }
 
     /**
@@ -487,8 +487,8 @@
     /**
      * Schedule the event to run weekly on a given day and time.
      *
-     * @param  int  $day
-     * @param  string  $time
+     * @param  int    $day
+     * @param  string $time
      * @return $this
      */
     public function weeklyOn($day, $time = '0:0')
@@ -511,8 +511,8 @@
     /**
      * Schedule the event to run monthly on a given day and time.
      *
-     * @param int  $day
-     * @param string  $time
+     * @param  int    $day
+     * @param  string $time
      * @return $this
      */
     public function monthlyOn($day = 1, $time = '0:0')
@@ -585,7 +585,7 @@
     /**
      * Set the days of the week the command should run on.
      *
-     * @param  array|mixed  $days
+     * @param  array|mixed $days
      * @return $this
      */
     public function days($days)
@@ -610,7 +610,7 @@
     /**
      * Set the timezone the date should be evaluated on.
      *
-     * @param  \DateTimeZone|string  $timezone
+     * @param  \DateTimeZone|string $timezone
      * @return $this
      */
     public function timezone($timezone)
@@ -623,7 +623,7 @@
     /**
      * Set which user the command should run as.
      *
-     * @param  string  $user
+     * @param  string $user
      * @return $this
      */
     public function user($user)
@@ -636,7 +636,7 @@
     /**
      * Limit the environments the command should run in.
      *
-     * @param  array|mixed  $environments
+     * @param  array|mixed $environments
      * @return $this
      */
     public function environments($environments)
@@ -667,15 +667,17 @@
     {
         $this->withoutOverlapping = true;
 
-        return $this->skip(function () {
-            return file_exists($this->mutexPath());
-        });
+        return $this->skip(
+            function () {
+                return file_exists($this->mutexPath());
+            }
+        );
     }
 
     /**
      * Register a callback to further filter the schedule.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return $this
      */
     public function when(Closure $callback)
@@ -688,7 +690,7 @@
     /**
      * Register a callback to further filter the schedule.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return $this
      */
     public function skip(Closure $callback)
@@ -701,8 +703,8 @@
     /**
      * Send the output of the command to a given location.
      *
-     * @param  string  $location
-     * @param  bool  $append
+     * @param  string $location
+     * @param  bool   $append
      * @return $this
      */
     public function sendOutputTo($location, $append = false)
@@ -717,7 +719,7 @@
     /**
      * Append the output of the command to a given location.
      *
-     * @param  string  $location
+     * @param  string $location
      * @return $this
      */
     public function appendOutputTo($location)
@@ -728,8 +730,8 @@
     /**
      * E-mail the results of the scheduled operation.
      *
-     * @param  array|mixed  $addresses
-     * @param  bool  $onlyIfOutputExists
+     * @param  array|mixed $addresses
+     * @param  bool        $onlyIfOutputExists
      * @return $this
      *
      * @throws \LogicException
@@ -742,15 +744,17 @@
 
         $addresses = is_array($addresses) ? $addresses : func_get_args();
 
-        return $this->then(function (Mailer $mailer) use ($addresses, $onlyIfOutputExists) {
-            $this->emailOutput($mailer, $addresses, $onlyIfOutputExists);
-        });
+        return $this->then(
+            function (Mailer $mailer) use ($addresses, $onlyIfOutputExists) {
+                $this->emailOutput($mailer, $addresses, $onlyIfOutputExists);
+            }
+        );
     }
 
     /**
      * E-mail the results of the scheduled operation if it produces output.
      *
-     * @param  array|mixed  $addresses
+     * @param  array|mixed $addresses
      * @return $this
      *
      * @throws \LogicException
@@ -763,9 +767,9 @@
     /**
      * E-mail the output of the event to the recipients.
      *
-     * @param  \Illuminate\Contracts\Mail\Mailer  $mailer
-     * @param  array  $addresses
-     * @param  bool  $onlyIfOutputExists
+     * @param  \Illuminate\Contracts\Mail\Mailer $mailer
+     * @param  array                             $addresses
+     * @param  bool                              $onlyIfOutputExists
      * @return void
      */
     protected function emailOutput(Mailer $mailer, $addresses, $onlyIfOutputExists = false)
@@ -776,13 +780,15 @@
             return;
         }
 
-        $mailer->raw($text, function ($m) use ($addresses) {
-            $m->subject($this->getEmailSubject());
-
-            foreach ($addresses as $address) {
-                $m->to($address);
+        $mailer->raw(
+            $text, function ($m) use ($addresses) {
+                $m->subject($this->getEmailSubject());
+
+                foreach ($addresses as $address) {
+                    $m->to($address);
+                }
             }
-        });
+        );
     }
 
     /**
@@ -802,20 +808,22 @@
     /**
      * Register a callback to ping a given URL before the job runs.
      *
-     * @param  string  $url
+     * @param  string $url
      * @return $this
      */
     public function pingBefore($url)
     {
-        return $this->before(function () use ($url) {
-            (new HttpClient)->get($url);
-        });
+        return $this->before(
+            function () use ($url) {
+                (new HttpClient)->get($url);
+            }
+        );
     }
 
     /**
      * Register a callback to be called before the operation.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return $this
      */
     public function before(Closure $callback)
@@ -828,20 +836,22 @@
     /**
      * Register a callback to ping a given URL after the job runs.
      *
-     * @param  string  $url
+     * @param  string $url
      * @return $this
      */
     public function thenPing($url)
     {
-        return $this->then(function () use ($url) {
-            (new HttpClient)->get($url);
-        });
+        return $this->then(
+            function () use ($url) {
+                (new HttpClient)->get($url);
+            }
+        );
     }
 
     /**
      * Register a callback to be called after the operation.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return $this
      */
     public function after(Closure $callback)
@@ -852,7 +862,7 @@
     /**
      * Register a callback to be called after the operation.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return $this
      */
     public function then(Closure $callback)
@@ -865,7 +875,7 @@
     /**
      * Set the human-friendly description of the event.
      *
-     * @param  string  $description
+     * @param  string $description
      * @return $this
      */
     public function name($description)
@@ -876,7 +886,7 @@
     /**
      * Set the human-friendly description of the event.
      *
-     * @param  string  $description
+     * @param  string $description
      * @return $this
      */
     public function description($description)
@@ -889,8 +899,8 @@
     /**
      * Splice the given value into the given position of the expression.
      *
-     * @param  int  $position
-     * @param  string  $value
+     * @param  int    $position
+     * @param  string $value
      * @return $this
      */
     protected function spliceIntoPosition($position, $value)

--- vendor/laravel/framework/src/Illuminate/Console/Scheduling/Schedule.php
+++ PHP_CodeSniffer
@@ -17,8 +17,8 @@
     /**
      * Add a new callback event to the schedule.
      *
-     * @param  string  $callback
-     * @param  array   $parameters
+     * @param  string $callback
+     * @param  array  $parameters
      * @return \Illuminate\Console\Scheduling\Event
      */
     public function call($callback, array $parameters = [])
@@ -31,7 +31,7 @@
     /**
      * Add a new Artisan command event to the schedule.
      *
-     * @param  string  $command
+     * @param  string $command
      * @param  array  $parameters
      * @return \Illuminate\Console\Scheduling\Event
      */
@@ -55,7 +55,7 @@
     /**
      * Add a new command event to the schedule.
      *
-     * @param  string  $command
+     * @param  string $command
      * @param  array  $parameters
      * @return \Illuminate\Console\Scheduling\Event
      */
@@ -73,14 +73,16 @@
     /**
      * Compile parameters for a command.
      *
-     * @param  array  $parameters
+     * @param  array $parameters
      * @return string
      */
     protected function compileParameters(array $parameters)
     {
-        return collect($parameters)->map(function ($value, $key) {
-            return is_numeric($key) ? $value : $key.'='.(is_numeric($value) ? $value : ProcessUtils::escapeArgument($value));
-        })->implode(' ');
+        return collect($parameters)->map(
+            function ($value, $key) {
+                return is_numeric($key) ? $value : $key.'='.(is_numeric($value) ? $value : ProcessUtils::escapeArgument($value));
+            }
+        )->implode(' ');
     }
 
     /**
@@ -96,13 +98,15 @@
     /**
      * Get all of the events on the schedule that are due.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return array
      */
     public function dueEvents($app)
     {
-        return array_filter($this->events, function ($event) use ($app) {
-            return $event->isDue($app);
-        });
+        return array_filter(
+            $this->events, function ($event) use ($app) {
+                return $event->isDue($app);
+            }
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Console/Scheduling/ScheduleRunCommand.php
+++ PHP_CodeSniffer
@@ -30,7 +30,7 @@
     /**
      * Create a new command instance.
      *
-     * @param  \Illuminate\Console\Scheduling\Schedule  $schedule
+     * @param  \Illuminate\Console\Scheduling\Schedule $schedule
      * @return void
      */
     public function __construct(Schedule $schedule)

--- vendor/laravel/framework/src/Illuminate/Container/Container.php
+++ PHP_CodeSniffer
@@ -115,7 +115,7 @@
     /**
      * Define a contextual binding.
      *
-     * @param  string  $concrete
+     * @param  string $concrete
      * @return \Illuminate\Contracts\Container\ContextualBindingBuilder
      */
     public function when($concrete)
@@ -128,7 +128,7 @@
     /**
      * Determine if the given abstract type has been bound.
      *
-     * @param  string  $abstract
+     * @param  string $abstract
      * @return bool
      */
     public function bound($abstract)
@@ -141,7 +141,7 @@
     /**
      * Determine if the given abstract type has been resolved.
      *
-     * @param  string  $abstract
+     * @param  string $abstract
      * @return bool
      */
     public function resolved($abstract)
@@ -158,7 +158,7 @@
     /**
      * Determine if a given string is an alias.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return bool
      */
     public function isAlias($name)
@@ -169,9 +169,9 @@
     /**
      * Register a binding with the container.
      *
-     * @param  string|array  $abstract
-     * @param  \Closure|string|null  $concrete
-     * @param  bool  $shared
+     * @param  string|array         $abstract
+     * @param  \Closure|string|null $concrete
+     * @param  bool                 $shared
      * @return void
      */
     public function bind($abstract, $concrete = null, $shared = false)
@@ -218,8 +218,8 @@
     /**
      * Get the Closure to be used when building a type.
      *
-     * @param  string  $abstract
-     * @param  string  $concrete
+     * @param  string $abstract
+     * @param  string $concrete
      * @return \Closure
      */
     protected function getClosure($abstract, $concrete)
@@ -234,9 +234,9 @@
     /**
      * Add a contextual binding to the container.
      *
-     * @param  string  $concrete
-     * @param  string  $abstract
-     * @param  \Closure|string  $implementation
+     * @param  string          $concrete
+     * @param  string          $abstract
+     * @param  \Closure|string $implementation
      * @return void
      */
     public function addContextualBinding($concrete, $abstract, $implementation)
@@ -247,9 +247,9 @@
     /**
      * Register a binding if it hasn't already been registered.
      *
-     * @param  string  $abstract
-     * @param  \Closure|string|null  $concrete
-     * @param  bool  $shared
+     * @param  string               $abstract
+     * @param  \Closure|string|null $concrete
+     * @param  bool                 $shared
      * @return void
      */
     public function bindIf($abstract, $concrete = null, $shared = false)
@@ -262,8 +262,8 @@
     /**
      * Register a shared binding in the container.
      *
-     * @param  string|array  $abstract
-     * @param  \Closure|string|null  $concrete
+     * @param  string|array         $abstract
+     * @param  \Closure|string|null $concrete
      * @return void
      */
     public function singleton($abstract, $concrete = null)
@@ -274,7 +274,7 @@
     /**
      * Wrap a Closure such that it is shared.
      *
-     * @param  \Closure  $closure
+     * @param  \Closure $closure
      * @return \Closure
      */
     public function share(Closure $closure)
@@ -296,8 +296,8 @@
     /**
      * "Extend" an abstract type in the container.
      *
-     * @param  string    $abstract
-     * @param  \Closure  $closure
+     * @param  string   $abstract
+     * @param  \Closure $closure
      * @return void
      *
      * @throws \InvalidArgumentException
@@ -318,8 +318,8 @@
     /**
      * Register an existing instance as shared in the container.
      *
-     * @param  string  $abstract
-     * @param  mixed   $instance
+     * @param  string $abstract
+     * @param  mixed  $instance
      * @return void
      */
     public function instance($abstract, $instance)
@@ -352,8 +352,8 @@
     /**
      * Assign a set of tags to a given binding.
      *
-     * @param  array|string  $abstracts
-     * @param  array|mixed   ...$tags
+     * @param  array|string $abstracts
+     * @param  array|mixed  ...$tags
      * @return void
      */
     public function tag($abstracts, $tags)
@@ -374,7 +374,7 @@
     /**
      * Resolve all of the bindings for a given tag.
      *
-     * @param  string  $tag
+     * @param  string $tag
      * @return array
      */
     public function tagged($tag)
@@ -393,8 +393,8 @@
     /**
      * Alias a type to a different name.
      *
-     * @param  string  $abstract
-     * @param  string  $alias
+     * @param  string $abstract
+     * @param  string $alias
      * @return void
      */
     public function alias($abstract, $alias)
@@ -405,7 +405,7 @@
     /**
      * Extract the type and alias from a given definition.
      *
-     * @param  array  $definition
+     * @param  array $definition
      * @return array
      */
     protected function extractAlias(array $definition)
@@ -416,8 +416,8 @@
     /**
      * Bind a new callback to an abstract's rebind event.
      *
-     * @param  string    $abstract
-     * @param  \Closure  $callback
+     * @param  string   $abstract
+     * @param  \Closure $callback
      * @return mixed
      */
     public function rebinding($abstract, Closure $callback)
@@ -432,22 +432,24 @@
     /**
      * Refresh an instance on the given target and method.
      *
-     * @param  string  $abstract
-     * @param  mixed   $target
-     * @param  string  $method
+     * @param  string $abstract
+     * @param  mixed  $target
+     * @param  string $method
      * @return mixed
      */
     public function refresh($abstract, $target, $method)
     {
-        return $this->rebinding($this->normalize($abstract), function ($app, $instance) use ($target, $method) {
-            $target->{$method}($instance);
-        });
+        return $this->rebinding(
+            $this->normalize($abstract), function ($app, $instance) use ($target, $method) {
+                $target->{$method}($instance);
+            }
+        );
     }
 
     /**
      * Fire the "rebound" callbacks for the given abstract type.
      *
-     * @param  string  $abstract
+     * @param  string $abstract
      * @return void
      */
     protected function rebound($abstract)
@@ -462,7 +464,7 @@
     /**
      * Get the rebound callbacks for a given type.
      *
-     * @param  string  $abstract
+     * @param  string $abstract
      * @return array
      */
     protected function getReboundCallbacks($abstract)
@@ -477,8 +479,8 @@
     /**
      * Wrap the given closure such that its dependencies will be injected when executed.
      *
-     * @param  \Closure  $callback
-     * @param  array  $parameters
+     * @param  \Closure $callback
+     * @param  array    $parameters
      * @return \Closure
      */
     public function wrap(Closure $callback, array $parameters = [])
@@ -491,9 +493,9 @@
     /**
      * Call the given Closure / class@method and inject its dependencies.
      *
-     * @param  callable|string  $callback
-     * @param  array  $parameters
-     * @param  string|null  $defaultMethod
+     * @param  callable|string $callback
+     * @param  array           $parameters
+     * @param  string|null     $defaultMethod
      * @return mixed
      */
     public function call($callback, array $parameters = [], $defaultMethod = null)
@@ -510,7 +512,7 @@
     /**
      * Determine if the given string is in Class@method syntax.
      *
-     * @param  mixed  $callback
+     * @param  mixed $callback
      * @return bool
      */
     protected function isCallableWithAtSign($callback)
@@ -521,8 +523,8 @@
     /**
      * Get all dependencies for a given method.
      *
-     * @param  callable|string  $callback
-     * @param  array  $parameters
+     * @param  callable|string $callback
+     * @param  array           $parameters
      * @return array
      */
     protected function getMethodDependencies($callback, array $parameters = [])
@@ -539,7 +541,7 @@
     /**
      * Get the proper reflection instance for the given callback.
      *
-     * @param  callable|string  $callback
+     * @param  callable|string $callback
      * @return \ReflectionFunctionAbstract
      */
     protected function getCallReflector($callback)
@@ -558,9 +560,9 @@
     /**
      * Get the dependency for the given call parameter.
      *
-     * @param  \ReflectionParameter  $parameter
-     * @param  array  $parameters
-     * @param  array  $dependencies
+     * @param  \ReflectionParameter $parameter
+     * @param  array                $parameters
+     * @param  array                $dependencies
      * @return mixed
      */
     protected function addDependencyForCallParameter(ReflectionParameter $parameter, array &$parameters, &$dependencies)
@@ -579,9 +581,9 @@
     /**
      * Call a string reference to a class using Class@method syntax.
      *
-     * @param  string  $target
-     * @param  array  $parameters
-     * @param  string|null  $defaultMethod
+     * @param  string      $target
+     * @param  array       $parameters
+     * @param  string|null $defaultMethod
      * @return mixed
      *
      * @throws \InvalidArgumentException
@@ -605,8 +607,8 @@
     /**
      * Resolve the given type from the container.
      *
-     * @param  string  $abstract
-     * @param  array   $parameters
+     * @param  string $abstract
+     * @param  array  $parameters
      * @return mixed
      */
     public function make($abstract, array $parameters = [])
@@ -655,7 +657,7 @@
     /**
      * Get the concrete type for a given abstract.
      *
-     * @param  string  $abstract
+     * @param  string $abstract
      * @return mixed   $concrete
      */
     protected function getConcrete($abstract)
@@ -677,7 +679,7 @@
     /**
      * Get the contextual concrete binding for the given abstract.
      *
-     * @param  string  $abstract
+     * @param  string $abstract
      * @return string|null
      */
     protected function getContextualConcrete($abstract)
@@ -690,7 +692,7 @@
     /**
      * Normalize the given class name by removing leading slashes.
      *
-     * @param  mixed  $service
+     * @param  mixed $service
      * @return mixed
      */
     protected function normalize($service)
@@ -701,7 +703,7 @@
     /**
      * Get the extender callbacks for a given type.
      *
-     * @param  string  $abstract
+     * @param  string $abstract
      * @return array
      */
     protected function getExtenders($abstract)
@@ -716,8 +718,8 @@
     /**
      * Instantiate a concrete instance of the given type.
      *
-     * @param  string  $concrete
-     * @param  array   $parameters
+     * @param  string $concrete
+     * @param  array  $parameters
      * @return mixed
      *
      * @throws \Illuminate\Contracts\Container\BindingResolutionException
@@ -782,8 +784,8 @@
     /**
      * Resolve all of the dependencies from the ReflectionParameters.
      *
-     * @param  array  $parameters
-     * @param  array  $primitives
+     * @param  array $parameters
+     * @param  array $primitives
      * @return array
      */
     protected function getDependencies(array $parameters, array $primitives = [])
@@ -811,7 +813,7 @@
     /**
      * Resolve a non-class hinted dependency.
      *
-     * @param  \ReflectionParameter  $parameter
+     * @param  \ReflectionParameter $parameter
      * @return mixed
      *
      * @throws \Illuminate\Contracts\Container\BindingResolutionException
@@ -838,7 +840,7 @@
     /**
      * Resolve a class based dependency from the container.
      *
-     * @param  \ReflectionParameter  $parameter
+     * @param  \ReflectionParameter $parameter
      * @return mixed
      *
      * @throws \Illuminate\Contracts\Container\BindingResolutionException
@@ -864,8 +866,8 @@
     /**
      * If extra parameters are passed by numeric ID, rekey them by argument name.
      *
-     * @param  array  $dependencies
-     * @param  array  $parameters
+     * @param  array $dependencies
+     * @param  array $parameters
      * @return array
      */
     protected function keyParametersByArgument(array $dependencies, array $parameters)
@@ -884,8 +886,8 @@
     /**
      * Register a new resolving callback.
      *
-     * @param  string    $abstract
-     * @param  \Closure|null  $callback
+     * @param  string        $abstract
+     * @param  \Closure|null $callback
      * @return void
      */
     public function resolving($abstract, Closure $callback = null)
@@ -900,7 +902,7 @@
     /**
      * Register a new after resolving callback for all types.
      *
-     * @param  string   $abstract
+     * @param  string        $abstract
      * @param  \Closure|null $callback
      * @return void
      */
@@ -916,7 +918,7 @@
     /**
      * Register a new resolving callback by type of its first argument.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return void
      */
     protected function resolvingCallback(Closure $callback)
@@ -933,7 +935,7 @@
     /**
      * Register a new after resolving callback by type of its first argument.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return void
      */
     protected function afterResolvingCallback(Closure $callback)
@@ -950,7 +952,7 @@
     /**
      * Get the type hint for this closure's first argument.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return mixed
      */
     protected function getFunctionHint(Closure $callback)
@@ -973,8 +975,8 @@
     /**
      * Fire all of the resolving callbacks.
      *
-     * @param  string  $abstract
-     * @param  mixed   $object
+     * @param  string $abstract
+     * @param  mixed  $object
      * @return void
      */
     protected function fireResolvingCallbacks($abstract, $object)
@@ -999,9 +1001,9 @@
     /**
      * Get all callbacks for a given type.
      *
-     * @param  string  $abstract
-     * @param  object  $object
-     * @param  array   $callbacksPerType
+     * @param string $abstract
+     * @param object $object
+     * @param array  $callbacksPerType
      *
      * @return array
      */
@@ -1021,8 +1023,8 @@
     /**
      * Fire an array of callbacks with an object.
      *
-     * @param  mixed  $object
-     * @param  array  $callbacks
+     * @param  mixed $object
+     * @param  array $callbacks
      * @return void
      */
     protected function fireCallbackArray($object, array $callbacks)
@@ -1035,7 +1037,7 @@
     /**
      * Determine if a given type is shared.
      *
-     * @param  string  $abstract
+     * @param  string $abstract
      * @return bool
      */
     public function isShared($abstract)
@@ -1056,8 +1058,8 @@
     /**
      * Determine if the given concrete is buildable.
      *
-     * @param  mixed   $concrete
-     * @param  string  $abstract
+     * @param  mixed  $concrete
+     * @param  string $abstract
      * @return bool
      */
     protected function isBuildable($concrete, $abstract)
@@ -1068,7 +1070,7 @@
     /**
      * Get the alias for an abstract if available.
      *
-     * @param  string  $abstract
+     * @param  string $abstract
      * @return string
      */
     protected function getAlias($abstract)
@@ -1093,7 +1095,7 @@
     /**
      * Drop all of the stale instances and aliases.
      *
-     * @param  string  $abstract
+     * @param  string $abstract
      * @return void
      */
     protected function dropStaleInstances($abstract)
@@ -1104,7 +1106,7 @@
     /**
      * Remove a resolved instance from the instance cache.
      *
-     * @param  string  $abstract
+     * @param  string $abstract
      * @return void
      */
     public function forgetInstance($abstract)
@@ -1148,7 +1150,7 @@
     /**
      * Set the shared instance of the container.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
+     * @param  \Illuminate\Contracts\Container\Container $container
      * @return void
      */
     public static function setInstance(ContainerContract $container)
@@ -1159,7 +1161,7 @@
     /**
      * Determine if a given offset exists.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function offsetExists($key)
@@ -1170,7 +1172,7 @@
     /**
      * Get the value at a given offset.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function offsetGet($key)
@@ -1181,8 +1183,8 @@
     /**
      * Set the value at a given offset.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function offsetSet($key, $value)
@@ -1202,7 +1204,7 @@
     /**
      * Unset the value at a given offset.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return void
      */
     public function offsetUnset($key)
@@ -1215,7 +1217,7 @@
     /**
      * Dynamically access container services.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function __get($key)
@@ -1226,8 +1228,8 @@
     /**
      * Dynamically set container services.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function __set($key, $value)

--- vendor/laravel/framework/src/Illuminate/Container/ContextualBindingBuilder.php
+++ PHP_CodeSniffer
@@ -30,8 +30,8 @@
     /**
      * Create a new contextual binding builder.
      *
-     * @param  \Illuminate\Container\Container  $container
-     * @param  string  $concrete
+     * @param  \Illuminate\Container\Container $container
+     * @param  string                          $concrete
      * @return void
      */
     public function __construct(Container $container, $concrete)
@@ -43,7 +43,7 @@
     /**
      * Define the abstract target that depends on the context.
      *
-     * @param  string  $abstract
+     * @param  string $abstract
      * @return $this
      */
     public function needs($abstract)
@@ -56,7 +56,7 @@
     /**
      * Define the implementation for the contextual binding.
      *
-     * @param  \Closure|string  $implementation
+     * @param  \Closure|string $implementation
      * @return void
      */
     public function give($implementation)

--- vendor/laravel/framework/src/Illuminate/Contracts/Auth/Access/Authorizable.php
+++ PHP_CodeSniffer
@@ -7,8 +7,8 @@
     /**
      * Determine if the entity has a given ability.
      *
-     * @param  string  $ability
-     * @param  array|mixed  $arguments
+     * @param  string      $ability
+     * @param  array|mixed $arguments
      * @return bool
      */
     public function can($ability, $arguments = []);

--- vendor/laravel/framework/src/Illuminate/Contracts/Auth/Access/Gate.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Determine if a given ability has been defined.
      *
-     * @param  string  $ability
+     * @param  string $ability
      * @return bool
      */
     public function has($ability);
@@ -15,8 +15,8 @@
     /**
      * Define a new ability.
      *
-     * @param  string  $ability
-     * @param  callable|string  $callback
+     * @param  string          $ability
+     * @param  callable|string $callback
      * @return $this
      */
     public function define($ability, $callback);
@@ -24,8 +24,8 @@
     /**
      * Define a policy class for a given class type.
      *
-     * @param  string  $class
-     * @param  string  $policy
+     * @param  string $class
+     * @param  string $policy
      * @return $this
      */
     public function policy($class, $policy);
@@ -33,7 +33,7 @@
     /**
      * Register a callback to run before all Gate checks.
      *
-     * @param  callable  $callback
+     * @param  callable $callback
      * @return $this
      */
     public function before(callable $callback);
@@ -41,8 +41,8 @@
     /**
      * Determine if the given ability should be granted for the current user.
      *
-     * @param  string  $ability
-     * @param  array|mixed  $arguments
+     * @param  string      $ability
+     * @param  array|mixed $arguments
      * @return bool
      */
     public function allows($ability, $arguments = []);
@@ -50,8 +50,8 @@
     /**
      * Determine if the given ability should be denied for the current user.
      *
-     * @param  string  $ability
-     * @param  array|mixed  $arguments
+     * @param  string      $ability
+     * @param  array|mixed $arguments
      * @return bool
      */
     public function denies($ability, $arguments = []);
@@ -59,8 +59,8 @@
     /**
      * Determine if the given ability should be granted.
      *
-     * @param  string  $ability
-     * @param  array|mixed  $arguments
+     * @param  string      $ability
+     * @param  array|mixed $arguments
      * @return bool
      */
     public function check($ability, $arguments = []);
@@ -68,7 +68,7 @@
     /**
      * Get a guard instance for the given user.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable|mixed  $user
+     * @param  \Illuminate\Contracts\Auth\Authenticatable|mixed $user
      * @return static
      */
     public function forUser($user);

--- vendor/laravel/framework/src/Illuminate/Contracts/Auth/Authenticatable.php
+++ PHP_CodeSniffer
@@ -35,7 +35,7 @@
     /**
      * Set the token value for the "remember me" session.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return void
      */
     public function setRememberToken($value);

--- vendor/laravel/framework/src/Illuminate/Contracts/Auth/Factory.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Get a guard instance by name.
      *
-     * @param  string|null  $name
+     * @param  string|null $name
      * @return mixed
      */
     public function guard($name = null);
@@ -15,7 +15,7 @@
     /**
      * Set the default guard the factory should serve.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function shouldUse($name);

--- vendor/laravel/framework/src/Illuminate/Contracts/Auth/Guard.php
+++ PHP_CodeSniffer
@@ -35,7 +35,7 @@
     /**
      * Validate a user's credentials.
      *
-     * @param  array  $credentials
+     * @param  array $credentials
      * @return bool
      */
     public function validate(array $credentials = []);
@@ -43,7 +43,7 @@
     /**
      * Set the current user.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
      * @return void
      */
     public function setUser(Authenticatable $user);

--- vendor/laravel/framework/src/Illuminate/Contracts/Auth/PasswordBroker.php
+++ PHP_CodeSniffer
@@ -44,8 +44,8 @@
     /**
      * Send a password reset link to a user.
      *
-     * @param  array  $credentials
-     * @param  \Closure|null  $callback
+     * @param  array         $credentials
+     * @param  \Closure|null $callback
      * @return string
      */
     public function sendResetLink(array $credentials, Closure $callback = null);
@@ -53,8 +53,8 @@
     /**
      * Reset the password for the given token.
      *
-     * @param  array     $credentials
-     * @param  \Closure  $callback
+     * @param  array    $credentials
+     * @param  \Closure $callback
      * @return mixed
      */
     public function reset(array $credentials, Closure $callback);
@@ -62,7 +62,7 @@
     /**
      * Set a custom password validator.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return void
      */
     public function validator(Closure $callback);
@@ -70,7 +70,7 @@
     /**
      * Determine if the passwords match for the request.
      *
-     * @param  array  $credentials
+     * @param  array $credentials
      * @return bool
      */
     public function validateNewPassword(array $credentials);

--- vendor/laravel/framework/src/Illuminate/Contracts/Auth/PasswordBrokerFactory.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Get a password broker instance by name.
      *
-     * @param  string|null  $name
+     * @param  string|null $name
      * @return mixed
      */
     public function broker($name = null);

--- vendor/laravel/framework/src/Illuminate/Contracts/Auth/Registrar.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Get a validator for an incoming registration request.
      *
-     * @param  array  $data
+     * @param  array $data
      * @return \Illuminate\Contracts\Validation\Validator
      */
     public function validator(array $data);
@@ -15,7 +15,7 @@
     /**
      * Create a new user instance after a valid registration.
      *
-     * @param  array  $data
+     * @param  array $data
      * @return \Illuminate\Contracts\Auth\Authenticatable
      */
     public function create(array $data);

--- vendor/laravel/framework/src/Illuminate/Contracts/Auth/StatefulGuard.php
+++ PHP_CodeSniffer
@@ -7,9 +7,9 @@
     /**
      * Attempt to authenticate a user using the given credentials.
      *
-     * @param  array  $credentials
-     * @param  bool   $remember
-     * @param  bool   $login
+     * @param  array $credentials
+     * @param  bool  $remember
+     * @param  bool  $login
      * @return bool
      */
     public function attempt(array $credentials = [], $remember = false, $login = true);
@@ -17,7 +17,7 @@
     /**
      * Log a user into the application without sessions or cookies.
      *
-     * @param  array  $credentials
+     * @param  array $credentials
      * @return bool
      */
     public function once(array $credentials = []);
@@ -25,8 +25,8 @@
     /**
      * Log a user into the application.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  bool  $remember
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  bool                                       $remember
      * @return void
      */
     public function login(Authenticatable $user, $remember = false);
@@ -34,8 +34,8 @@
     /**
      * Log the given user ID into the application.
      *
-     * @param  mixed  $id
-     * @param  bool   $remember
+     * @param  mixed $id
+     * @param  bool  $remember
      * @return \Illuminate\Contracts\Auth\Authenticatable
      */
     public function loginUsingId($id, $remember = false);
@@ -43,7 +43,7 @@
     /**
      * Log the given user ID into the application without sessions or cookies.
      *
-     * @param  mixed  $id
+     * @param  mixed $id
      * @return bool
      */
     public function onceUsingId($id);

--- vendor/laravel/framework/src/Illuminate/Contracts/Auth/SupportsBasicAuth.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Attempt to authenticate using HTTP Basic Auth.
      *
-     * @param  string  $field
+     * @param  string $field
      * @param  array  $extraConditions
      * @return \Symfony\Component\HttpFoundation\Response|null
      */
@@ -16,7 +16,7 @@
     /**
      * Perform a stateless HTTP Basic login attempt.
      *
-     * @param  string  $field
+     * @param  string $field
      * @param  array  $extraConditions
      * @return \Symfony\Component\HttpFoundation\Response|null
      */

--- vendor/laravel/framework/src/Illuminate/Contracts/Auth/UserProvider.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Retrieve a user by their unique identifier.
      *
-     * @param  mixed  $identifier
+     * @param  mixed $identifier
      * @return \Illuminate\Contracts\Auth\Authenticatable|null
      */
     public function retrieveById($identifier);
@@ -15,8 +15,8 @@
     /**
      * Retrieve a user by their unique identifier and "remember me" token.
      *
-     * @param  mixed   $identifier
-     * @param  string  $token
+     * @param  mixed  $identifier
+     * @param  string $token
      * @return \Illuminate\Contracts\Auth\Authenticatable|null
      */
     public function retrieveByToken($identifier, $token);
@@ -24,8 +24,8 @@
     /**
      * Update the "remember me" token for the given user in storage.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  string  $token
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  string                                     $token
      * @return void
      */
     public function updateRememberToken(Authenticatable $user, $token);
@@ -33,7 +33,7 @@
     /**
      * Retrieve a user by the given credentials.
      *
-     * @param  array  $credentials
+     * @param  array $credentials
      * @return \Illuminate\Contracts\Auth\Authenticatable|null
      */
     public function retrieveByCredentials(array $credentials);
@@ -41,8 +41,8 @@
     /**
      * Validate a user against the given credentials.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  array  $credentials
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  array                                      $credentials
      * @return bool
      */
     public function validateCredentials(Authenticatable $user, array $credentials);

--- vendor/laravel/framework/src/Illuminate/Contracts/Broadcasting/Broadcaster.php
+++ PHP_CodeSniffer
@@ -8,7 +8,7 @@
      * Broadcast the given event.
      *
      * @param  array  $channels
-     * @param  string  $event
+     * @param  string $event
      * @param  array  $payload
      * @return void
      */

--- vendor/laravel/framework/src/Illuminate/Contracts/Broadcasting/Factory.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Get a broadcaster implementation by name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function connection($name = null);

--- vendor/laravel/framework/src/Illuminate/Contracts/Bus/Dispatcher.php
+++ PHP_CodeSniffer
@@ -7,8 +7,8 @@
     /**
      * Dispatch a command to its appropriate handler.
      *
-     * @param  mixed  $command
-     * @param  \Closure|null  $afterResolving
+     * @param  mixed         $command
+     * @param  \Closure|null $afterResolving
      * @return mixed
      */
     public function dispatch($command);
@@ -16,8 +16,8 @@
     /**
      * Dispatch a command to its appropriate handler in the current process.
      *
-     * @param  mixed  $command
-     * @param  \Closure|null  $afterResolving
+     * @param  mixed         $command
+     * @param  \Closure|null $afterResolving
      * @return mixed
      */
     public function dispatchNow($command);
@@ -25,7 +25,7 @@
     /**
      * Set the pipes commands should be piped through before dispatching.
      *
-     * @param  array  $pipes
+     * @param  array $pipes
      * @return $this
      */
     public function pipeThrough(array $pipes);

--- vendor/laravel/framework/src/Illuminate/Contracts/Bus/QueueingDispatcher.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Dispatch a command to its appropriate handler behind a queue.
      *
-     * @param  mixed  $command
+     * @param  mixed $command
      * @return mixed
      */
     public function dispatchToQueue($command);

--- vendor/laravel/framework/src/Illuminate/Contracts/Cache/Factory.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Get a cache store instance by name.
      *
-     * @param  string|null  $name
+     * @param  string|null $name
      * @return mixed
      */
     public function store($name = null);

--- vendor/laravel/framework/src/Illuminate/Contracts/Cache/Repository.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Determine if an item exists in the cache.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function has($key);
@@ -17,8 +17,8 @@
     /**
      * Retrieve an item from the cache by key.
      *
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  string $key
+     * @param  mixed  $default
      * @return mixed
      */
     public function get($key, $default = null);
@@ -26,8 +26,8 @@
     /**
      * Retrieve an item from the cache and delete it.
      *
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  string $key
+     * @param  mixed  $default
      * @return mixed
      */
     public function pull($key, $default = null);
@@ -35,9 +35,9 @@
     /**
      * Store an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
-     * @param  \DateTime|int  $minutes
+     * @param  string        $key
+     * @param  mixed         $value
+     * @param  \DateTime|int $minutes
      * @return void
      */
     public function put($key, $value, $minutes);
@@ -45,9 +45,9 @@
     /**
      * Store an item in the cache if the key does not exist.
      *
-     * @param  string  $key
-     * @param  mixed   $value
-     * @param  \DateTime|int  $minutes
+     * @param  string        $key
+     * @param  mixed         $value
+     * @param  \DateTime|int $minutes
      * @return bool
      */
     public function add($key, $value, $minutes);
@@ -55,8 +55,8 @@
     /**
      * Store an item in the cache indefinitely.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function forever($key, $value);
@@ -64,9 +64,9 @@
     /**
      * Get an item from the cache, or store the default value.
      *
-     * @param  string  $key
-     * @param  \DateTime|int  $minutes
-     * @param  \Closure  $callback
+     * @param  string        $key
+     * @param  \DateTime|int $minutes
+     * @param  \Closure      $callback
      * @return mixed
      */
     public function remember($key, $minutes, Closure $callback);
@@ -75,7 +75,7 @@
      * Get an item from the cache, or store the default value forever.
      *
      * @param  string   $key
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return mixed
      */
     public function sear($key, Closure $callback);
@@ -84,7 +84,7 @@
      * Get an item from the cache, or store the default value forever.
      *
      * @param  string   $key
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return mixed
      */
     public function rememberForever($key, Closure $callback);

--- vendor/laravel/framework/src/Illuminate/Contracts/Cache/Store.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Retrieve an item from the cache by key.
      *
-     * @param  string|array  $key
+     * @param  string|array $key
      * @return mixed
      */
     public function get($key);
@@ -17,7 +17,7 @@
      *
      * Items not found in the cache will have a null value.
      *
-     * @param  array  $keys
+     * @param  array $keys
      * @return array
      */
     public function many(array $keys);
@@ -25,9 +25,9 @@
     /**
      * Store an item in the cache for a given number of minutes.
      *
-     * @param  string  $key
-     * @param  mixed   $value
-     * @param  int     $minutes
+     * @param  string $key
+     * @param  mixed  $value
+     * @param  int    $minutes
      * @return void
      */
     public function put($key, $value, $minutes);
@@ -35,8 +35,8 @@
     /**
      * Store multiple items in the cache for a given number of minutes.
      *
-     * @param  array  $values
-     * @param  int  $minutes
+     * @param  array $values
+     * @param  int   $minutes
      * @return void
      */
     public function putMany(array $values, $minutes);
@@ -44,8 +44,8 @@
     /**
      * Increment the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int|bool
      */
     public function increment($key, $value = 1);
@@ -53,8 +53,8 @@
     /**
      * Decrement the value of an item in the cache.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return int|bool
      */
     public function decrement($key, $value = 1);
@@ -62,8 +62,8 @@
     /**
      * Store an item in the cache indefinitely.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function forever($key, $value);
@@ -71,7 +71,7 @@
     /**
      * Remove an item from the cache.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function forget($key);

--- vendor/laravel/framework/src/Illuminate/Contracts/Config/Repository.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Determine if the given configuration value exists.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function has($key);
@@ -15,8 +15,8 @@
     /**
      * Get the specified configuration value.
      *
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  string $key
+     * @param  mixed  $default
      * @return mixed
      */
     public function get($key, $default = null);
@@ -31,8 +31,8 @@
     /**
      * Set a given configuration value.
      *
-     * @param  array|string  $key
-     * @param  mixed   $value
+     * @param  array|string $key
+     * @param  mixed        $value
      * @return void
      */
     public function set($key, $value = null);
@@ -40,7 +40,7 @@
     /**
      * Prepend a value onto an array configuration value.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
      * @return void
      */
@@ -49,7 +49,7 @@
     /**
      * Push a value onto an array configuration value.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
      * @return void
      */

--- vendor/laravel/framework/src/Illuminate/Contracts/Console/Application.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Call a console application command.
      *
-     * @param  string  $command
+     * @param  string $command
      * @param  array  $parameters
      * @return int
      */

--- vendor/laravel/framework/src/Illuminate/Contracts/Console/Kernel.php
+++ PHP_CodeSniffer
@@ -7,8 +7,8 @@
     /**
      * Handle an incoming console command.
      *
-     * @param  \Symfony\Component\Console\Input\InputInterface  $input
-     * @param  \Symfony\Component\Console\Output\OutputInterface  $output
+     * @param  \Symfony\Component\Console\Input\InputInterface   $input
+     * @param  \Symfony\Component\Console\Output\OutputInterface $output
      * @return int
      */
     public function handle($input, $output = null);
@@ -16,7 +16,7 @@
     /**
      * Run an Artisan console command by name.
      *
-     * @param  string  $command
+     * @param  string $command
      * @param  array  $parameters
      * @return int
      */
@@ -25,7 +25,7 @@
     /**
      * Queue an Artisan console command by name.
      *
-     * @param  string  $command
+     * @param  string $command
      * @param  array  $parameters
      * @return int
      */

--- vendor/laravel/framework/src/Illuminate/Contracts/Container/Container.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Determine if the given abstract type has been bound.
      *
-     * @param  string  $abstract
+     * @param  string $abstract
      * @return bool
      */
     public function bound($abstract);
@@ -17,8 +17,8 @@
     /**
      * Alias a type to a different name.
      *
-     * @param  string  $abstract
-     * @param  string  $alias
+     * @param  string $abstract
+     * @param  string $alias
      * @return void
      */
     public function alias($abstract, $alias);
@@ -26,8 +26,8 @@
     /**
      * Assign a set of tags to a given binding.
      *
-     * @param  array|string  $abstracts
-     * @param  array|mixed   ...$tags
+     * @param  array|string $abstracts
+     * @param  array|mixed  ...$tags
      * @return void
      */
     public function tag($abstracts, $tags);
@@ -35,7 +35,7 @@
     /**
      * Resolve all of the bindings for a given tag.
      *
-     * @param  array  $tag
+     * @param  array $tag
      * @return array
      */
     public function tagged($tag);
@@ -43,9 +43,9 @@
     /**
      * Register a binding with the container.
      *
-     * @param  string|array  $abstract
-     * @param  \Closure|string|null  $concrete
-     * @param  bool  $shared
+     * @param  string|array         $abstract
+     * @param  \Closure|string|null $concrete
+     * @param  bool                 $shared
      * @return void
      */
     public function bind($abstract, $concrete = null, $shared = false);
@@ -53,9 +53,9 @@
     /**
      * Register a binding if it hasn't already been registered.
      *
-     * @param  string  $abstract
-     * @param  \Closure|string|null  $concrete
-     * @param  bool  $shared
+     * @param  string               $abstract
+     * @param  \Closure|string|null $concrete
+     * @param  bool                 $shared
      * @return void
      */
     public function bindIf($abstract, $concrete = null, $shared = false);
@@ -63,8 +63,8 @@
     /**
      * Register a shared binding in the container.
      *
-     * @param  string|array  $abstract
-     * @param  \Closure|string|null  $concrete
+     * @param  string|array         $abstract
+     * @param  \Closure|string|null $concrete
      * @return void
      */
     public function singleton($abstract, $concrete = null);
@@ -72,8 +72,8 @@
     /**
      * "Extend" an abstract type in the container.
      *
-     * @param  string    $abstract
-     * @param  \Closure  $closure
+     * @param  string   $abstract
+     * @param  \Closure $closure
      * @return void
      *
      * @throws \InvalidArgumentException
@@ -83,8 +83,8 @@
     /**
      * Register an existing instance as shared in the container.
      *
-     * @param  string  $abstract
-     * @param  mixed   $instance
+     * @param  string $abstract
+     * @param  mixed  $instance
      * @return void
      */
     public function instance($abstract, $instance);
@@ -92,7 +92,7 @@
     /**
      * Define a contextual binding.
      *
-     * @param  string  $concrete
+     * @param  string $concrete
      * @return \Illuminate\Contracts\Container\ContextualBindingBuilder
      */
     public function when($concrete);
@@ -100,8 +100,8 @@
     /**
      * Resolve the given type from the container.
      *
-     * @param  string  $abstract
-     * @param  array   $parameters
+     * @param  string $abstract
+     * @param  array  $parameters
      * @return mixed
      */
     public function make($abstract, array $parameters = []);
@@ -109,9 +109,9 @@
     /**
      * Call the given Closure / class@method and inject its dependencies.
      *
-     * @param  callable|string  $callback
-     * @param  array  $parameters
-     * @param  string|null  $defaultMethod
+     * @param  callable|string $callback
+     * @param  array           $parameters
+     * @param  string|null     $defaultMethod
      * @return mixed
      */
     public function call($callback, array $parameters = [], $defaultMethod = null);
@@ -127,8 +127,8 @@
     /**
      * Register a new resolving callback.
      *
-     * @param  string    $abstract
-     * @param  \Closure|null  $callback
+     * @param  string        $abstract
+     * @param  \Closure|null $callback
      * @return void
      */
     public function resolving($abstract, Closure $callback = null);
@@ -136,8 +136,8 @@
     /**
      * Register a new after resolving callback.
      *
-     * @param  string    $abstract
-     * @param  \Closure|null  $callback
+     * @param  string        $abstract
+     * @param  \Closure|null $callback
      * @return void
      */
     public function afterResolving($abstract, Closure $callback = null);

--- vendor/laravel/framework/src/Illuminate/Contracts/Container/ContextualBindingBuilder.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Define the abstract target that depends on the context.
      *
-     * @param  string  $abstract
+     * @param  string $abstract
      * @return $this
      */
     public function needs($abstract);
@@ -15,7 +15,7 @@
     /**
      * Define the implementation for the contextual binding.
      *
-     * @param  \Closure|string  $implementation
+     * @param  \Closure|string $implementation
      * @return void
      */
     public function give($implementation);

--- vendor/laravel/framework/src/Illuminate/Contracts/Cookie/Factory.php
+++ PHP_CodeSniffer
@@ -7,13 +7,13 @@
     /**
      * Create a new cookie instance.
      *
-     * @param  string  $name
-     * @param  string  $value
-     * @param  int     $minutes
-     * @param  string  $path
-     * @param  string  $domain
-     * @param  bool    $secure
-     * @param  bool    $httpOnly
+     * @param  string $name
+     * @param  string $value
+     * @param  int    $minutes
+     * @param  string $path
+     * @param  string $domain
+     * @param  bool   $secure
+     * @param  bool   $httpOnly
      * @return \Symfony\Component\HttpFoundation\Cookie
      */
     public function make($name, $value, $minutes = 0, $path = null, $domain = null, $secure = false, $httpOnly = true);
@@ -21,12 +21,12 @@
     /**
      * Create a cookie that lasts "forever" (five years).
      *
-     * @param  string  $name
-     * @param  string  $value
-     * @param  string  $path
-     * @param  string  $domain
-     * @param  bool    $secure
-     * @param  bool    $httpOnly
+     * @param  string $name
+     * @param  string $value
+     * @param  string $path
+     * @param  string $domain
+     * @param  bool   $secure
+     * @param  bool   $httpOnly
      * @return \Symfony\Component\HttpFoundation\Cookie
      */
     public function forever($name, $value, $path = null, $domain = null, $secure = false, $httpOnly = true);
@@ -34,9 +34,9 @@
     /**
      * Expire the given cookie.
      *
-     * @param  string  $name
-     * @param  string  $path
-     * @param  string  $domain
+     * @param  string $name
+     * @param  string $path
+     * @param  string $domain
      * @return \Symfony\Component\HttpFoundation\Cookie
      */
     public function forget($name, $path = null, $domain = null);

--- vendor/laravel/framework/src/Illuminate/Contracts/Cookie/QueueingFactory.php
+++ PHP_CodeSniffer
@@ -15,7 +15,7 @@
     /**
      * Remove a cookie from the queue.
      *
-     * @param  string  $name
+     * @param string $name
      */
     public function unqueue($name);
 

--- vendor/laravel/framework/src/Illuminate/Contracts/Database/ModelIdentifier.php
+++ PHP_CodeSniffer
@@ -23,7 +23,7 @@
     /**
      * Create a new model identifier.
      *
-     * @param  string  $class
+     * @param  string $class
      * @param  mixed  $id
      * @return void
      */

--- vendor/laravel/framework/src/Illuminate/Contracts/Debug/ExceptionHandler.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Report or log an exception.
      *
-     * @param  \Exception  $e
+     * @param  \Exception $e
      * @return void
      */
     public function report(Exception $e);
@@ -17,8 +17,8 @@
     /**
      * Render an exception into an HTTP response.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Exception  $e
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Exception               $e
      * @return \Symfony\Component\HttpFoundation\Response
      */
     public function render($request, Exception $e);
@@ -26,8 +26,8 @@
     /**
      * Render an exception to the console.
      *
-     * @param  \Symfony\Component\Console\Output\OutputInterface  $output
-     * @param  \Exception  $e
+     * @param  \Symfony\Component\Console\Output\OutputInterface $output
+     * @param  \Exception                                        $e
      * @return void
      */
     public function renderForConsole($output, Exception $e);

--- vendor/laravel/framework/src/Illuminate/Contracts/Encryption/Encrypter.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Encrypt the given value.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     public function encrypt($value);
@@ -15,7 +15,7 @@
     /**
      * Decrypt the given value.
      *
-     * @param  string  $payload
+     * @param  string $payload
      * @return string
      */
     public function decrypt($payload);

--- vendor/laravel/framework/src/Illuminate/Contracts/Events/Dispatcher.php
+++ PHP_CodeSniffer
@@ -7,9 +7,9 @@
     /**
      * Register an event listener with the dispatcher.
      *
-     * @param  string|array  $events
-     * @param  mixed  $listener
-     * @param  int  $priority
+     * @param  string|array $events
+     * @param  mixed        $listener
+     * @param  int          $priority
      * @return void
      */
     public function listen($events, $listener, $priority = 0);
@@ -17,7 +17,7 @@
     /**
      * Determine if a given event has listeners.
      *
-     * @param  string  $eventName
+     * @param  string $eventName
      * @return bool
      */
     public function hasListeners($eventName);
@@ -25,7 +25,7 @@
     /**
      * Register an event and payload to be fired later.
      *
-     * @param  string  $event
+     * @param  string $event
      * @param  array  $payload
      * @return void
      */
@@ -34,7 +34,7 @@
     /**
      * Register an event subscriber with the dispatcher.
      *
-     * @param  object|string  $subscriber
+     * @param  object|string $subscriber
      * @return void
      */
     public function subscribe($subscriber);
@@ -42,7 +42,7 @@
     /**
      * Fire an event until the first non-null response is returned.
      *
-     * @param  string  $event
+     * @param  string $event
      * @param  array  $payload
      * @return mixed
      */
@@ -51,7 +51,7 @@
     /**
      * Flush a set of pushed events.
      *
-     * @param  string  $event
+     * @param  string $event
      * @return void
      */
     public function flush($event);
@@ -59,9 +59,9 @@
     /**
      * Fire an event and call the listeners.
      *
-     * @param  string|object  $event
-     * @param  mixed  $payload
-     * @param  bool  $halt
+     * @param  string|object $event
+     * @param  mixed         $payload
+     * @param  bool          $halt
      * @return array|null
      */
     public function fire($event, $payload = [], $halt = false);
@@ -76,7 +76,7 @@
     /**
      * Remove a set of listeners from the dispatcher.
      *
-     * @param  string  $event
+     * @param  string $event
      * @return void
      */
     public function forget($event);

--- vendor/laravel/framework/src/Illuminate/Contracts/Filesystem/Factory.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Get a filesystem implementation.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Filesystem\Filesystem
      */
     public function disk($name = null);

--- vendor/laravel/framework/src/Illuminate/Contracts/Filesystem/Filesystem.php
+++ PHP_CodeSniffer
@@ -21,7 +21,7 @@
     /**
      * Determine if a file exists.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return bool
      */
     public function exists($path);
@@ -29,7 +29,7 @@
     /**
      * Get the contents of a file.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      *
      * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
@@ -39,9 +39,9 @@
     /**
      * Write the contents of a file.
      *
-     * @param  string  $path
-     * @param  string|resource  $contents
-     * @param  string  $visibility
+     * @param  string          $path
+     * @param  string|resource $contents
+     * @param  string          $visibility
      * @return bool
      */
     public function put($path, $contents, $visibility = null);
@@ -49,7 +49,7 @@
     /**
      * Get the visibility for the given path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     public function getVisibility($path);
@@ -57,8 +57,8 @@
     /**
      * Set the visibility for the given path.
      *
-     * @param  string  $path
-     * @param  string  $visibility
+     * @param  string $path
+     * @param  string $visibility
      * @return void
      */
     public function setVisibility($path, $visibility);
@@ -66,8 +66,8 @@
     /**
      * Prepend to a file.
      *
-     * @param  string  $path
-     * @param  string  $data
+     * @param  string $path
+     * @param  string $data
      * @return int
      */
     public function prepend($path, $data);
@@ -75,8 +75,8 @@
     /**
      * Append to a file.
      *
-     * @param  string  $path
-     * @param  string  $data
+     * @param  string $path
+     * @param  string $data
      * @return int
      */
     public function append($path, $data);
@@ -84,7 +84,7 @@
     /**
      * Delete the file at a given path.
      *
-     * @param  string|array  $paths
+     * @param  string|array $paths
      * @return bool
      */
     public function delete($paths);
@@ -92,8 +92,8 @@
     /**
      * Copy a file to a new location.
      *
-     * @param  string  $from
-     * @param  string  $to
+     * @param  string $from
+     * @param  string $to
      * @return bool
      */
     public function copy($from, $to);
@@ -101,8 +101,8 @@
     /**
      * Move a file to a new location.
      *
-     * @param  string  $from
-     * @param  string  $to
+     * @param  string $from
+     * @param  string $to
      * @return bool
      */
     public function move($from, $to);
@@ -110,7 +110,7 @@
     /**
      * Get the file size of a given file.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return int
      */
     public function size($path);
@@ -118,7 +118,7 @@
     /**
      * Get the file's last modification time.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return int
      */
     public function lastModified($path);
@@ -126,8 +126,8 @@
     /**
      * Get an array of all files in a directory.
      *
-     * @param  string|null  $directory
-     * @param  bool  $recursive
+     * @param  string|null $directory
+     * @param  bool        $recursive
      * @return array
      */
     public function files($directory = null, $recursive = false);
@@ -135,7 +135,7 @@
     /**
      * Get all of the files from the given directory (recursive).
      *
-     * @param  string|null  $directory
+     * @param  string|null $directory
      * @return array
      */
     public function allFiles($directory = null);
@@ -143,8 +143,8 @@
     /**
      * Get all of the directories within a given directory.
      *
-     * @param  string|null  $directory
-     * @param  bool  $recursive
+     * @param  string|null $directory
+     * @param  bool        $recursive
      * @return array
      */
     public function directories($directory = null, $recursive = false);
@@ -152,7 +152,7 @@
     /**
      * Get all (recursive) of the directories within a given directory.
      *
-     * @param  string|null  $directory
+     * @param  string|null $directory
      * @return array
      */
     public function allDirectories($directory = null);
@@ -160,7 +160,7 @@
     /**
      * Create a directory.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return bool
      */
     public function makeDirectory($path);
@@ -168,7 +168,7 @@
     /**
      * Recursively delete a directory.
      *
-     * @param  string  $directory
+     * @param  string $directory
      * @return bool
      */
     public function deleteDirectory($directory);

--- vendor/laravel/framework/src/Illuminate/Contracts/Foundation/Application.php
+++ PHP_CodeSniffer
@@ -45,9 +45,9 @@
     /**
      * Register a service provider with the application.
      *
-     * @param  \Illuminate\Support\ServiceProvider|string  $provider
-     * @param  array  $options
-     * @param  bool   $force
+     * @param  \Illuminate\Support\ServiceProvider|string $provider
+     * @param  array                                      $options
+     * @param  bool                                       $force
      * @return \Illuminate\Support\ServiceProvider
      */
     public function register($provider, $options = [], $force = false);
@@ -55,8 +55,8 @@
     /**
      * Register a deferred provider and service.
      *
-     * @param  string  $provider
-     * @param  string  $service
+     * @param  string $provider
+     * @param  string $service
      * @return void
      */
     public function registerDeferredProvider($provider, $service = null);
@@ -71,7 +71,7 @@
     /**
      * Register a new boot listener.
      *
-     * @param  mixed  $callback
+     * @param  mixed $callback
      * @return void
      */
     public function booting($callback);
@@ -79,7 +79,7 @@
     /**
      * Register a new "booted" listener.
      *
-     * @param  mixed  $callback
+     * @param  mixed $callback
      * @return void
      */
     public function booted($callback);

--- vendor/laravel/framework/src/Illuminate/Contracts/Hashing/Hasher.php
+++ PHP_CodeSniffer
@@ -7,8 +7,8 @@
     /**
      * Hash the given value.
      *
-     * @param  string  $value
-     * @param  array   $options
+     * @param  string $value
+     * @param  array  $options
      * @return string
      */
     public function make($value, array $options = []);
@@ -16,9 +16,9 @@
     /**
      * Check the given plain value against a hash.
      *
-     * @param  string  $value
-     * @param  string  $hashedValue
-     * @param  array   $options
+     * @param  string $value
+     * @param  string $hashedValue
+     * @param  array  $options
      * @return bool
      */
     public function check($value, $hashedValue, array $options = []);
@@ -26,8 +26,8 @@
     /**
      * Check if the given hash has been hashed using the given options.
      *
-     * @param  string  $hashedValue
-     * @param  array   $options
+     * @param  string $hashedValue
+     * @param  array  $options
      * @return bool
      */
     public function needsRehash($hashedValue, array $options = []);

--- vendor/laravel/framework/src/Illuminate/Contracts/Http/Kernel.php
+++ PHP_CodeSniffer
@@ -14,7 +14,7 @@
     /**
      * Handle an incoming HTTP request.
      *
-     * @param  \Symfony\Component\HttpFoundation\Request  $request
+     * @param  \Symfony\Component\HttpFoundation\Request $request
      * @return \Symfony\Component\HttpFoundation\Response
      */
     public function handle($request);
@@ -23,7 +23,7 @@
      * Perform any final actions for the request lifecycle.
      *
      * @param  \Symfony\Component\HttpFoundation\Request  $request
-     * @param  \Symfony\Component\HttpFoundation\Response  $response
+     * @param  \Symfony\Component\HttpFoundation\Response $response
      * @return void
      */
     public function terminate($request, $response);

--- vendor/laravel/framework/src/Illuminate/Contracts/Logging/Log.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Log an alert message to the logs.
      *
-     * @param  string  $message
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -16,7 +16,7 @@
     /**
      * Log a critical message to the logs.
      *
-     * @param  string  $message
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -25,7 +25,7 @@
     /**
      * Log an error message to the logs.
      *
-     * @param  string  $message
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -34,7 +34,7 @@
     /**
      * Log a warning message to the logs.
      *
-     * @param  string  $message
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -43,7 +43,7 @@
     /**
      * Log a notice to the logs.
      *
-     * @param  string  $message
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -52,7 +52,7 @@
     /**
      * Log an informational message to the logs.
      *
-     * @param  string  $message
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -61,7 +61,7 @@
     /**
      * Log a debug message to the logs.
      *
-     * @param  string  $message
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -70,8 +70,8 @@
     /**
      * Log a message to the logs.
      *
-     * @param  string  $level
-     * @param  string  $message
+     * @param  string $level
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -80,8 +80,8 @@
     /**
      * Register a file log handler.
      *
-     * @param  string  $path
-     * @param  string  $level
+     * @param  string $path
+     * @param  string $level
      * @return void
      */
     public function useFiles($path, $level = 'debug');
@@ -89,9 +89,9 @@
     /**
      * Register a daily file log handler.
      *
-     * @param  string  $path
-     * @param  int     $days
-     * @param  string  $level
+     * @param  string $path
+     * @param  int    $days
+     * @param  string $level
      * @return void
      */
     public function useDailyFiles($path, $days = 0, $level = 'debug');

--- vendor/laravel/framework/src/Illuminate/Contracts/Mail/Mailer.php
+++ PHP_CodeSniffer
@@ -7,8 +7,8 @@
     /**
      * Send a new message when only a raw text part.
      *
-     * @param  string  $text
-     * @param  \Closure|string  $callback
+     * @param  string          $text
+     * @param  \Closure|string $callback
      * @return int
      */
     public function raw($text, $callback);
@@ -16,9 +16,9 @@
     /**
      * Send a new message using a view.
      *
-     * @param  string|array  $view
-     * @param  array  $data
-     * @param  \Closure|string  $callback
+     * @param  string|array    $view
+     * @param  array           $data
+     * @param  \Closure|string $callback
      * @return void
      */
     public function send($view, array $data, $callback);

--- vendor/laravel/framework/src/Illuminate/Contracts/Mail/MailQueue.php
+++ PHP_CodeSniffer
@@ -7,10 +7,10 @@
     /**
      * Queue a new e-mail message for sending.
      *
-     * @param  string|array  $view
-     * @param  array   $data
-     * @param  \Closure|string  $callback
-     * @param  string  $queue
+     * @param  string|array    $view
+     * @param  array           $data
+     * @param  \Closure|string $callback
+     * @param  string          $queue
      * @return mixed
      */
     public function queue($view, array $data, $callback, $queue = null);
@@ -18,11 +18,11 @@
     /**
      * Queue a new e-mail message for sending after (n) seconds.
      *
-     * @param  int  $delay
-     * @param  string|array  $view
-     * @param  array  $data
-     * @param  \Closure|string  $callback
-     * @param  string  $queue
+     * @param  int             $delay
+     * @param  string|array    $view
+     * @param  array           $data
+     * @param  \Closure|string $callback
+     * @param  string          $queue
      * @return mixed
      */
     public function later($delay, $view, array $data, $callback, $queue = null);

--- vendor/laravel/framework/src/Illuminate/Contracts/Pagination/Paginator.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Get the URL for a given page.
      *
-     * @param  int  $page
+     * @param  int $page
      * @return string
      */
     public function url($page);
@@ -15,7 +15,7 @@
     /**
      * Add a set of query string values to the paginator.
      *
-     * @param  array|string  $key
+     * @param  array|string $key
      * @param  string|null  $value
      * @return $this
      */
@@ -24,7 +24,7 @@
     /**
      * Get / set the URL fragment to be appended to URLs.
      *
-     * @param  string|null  $fragment
+     * @param  string|null $fragment
      * @return $this|string
      */
     public function fragment($fragment = null);
@@ -102,7 +102,7 @@
     /**
      * Render the paginator using a given Presenter.
      *
-     * @param  \Illuminate\Contracts\Pagination\Presenter|null  $presenter
+     * @param  \Illuminate\Contracts\Pagination\Presenter|null $presenter
      * @return string
      */
     public function render(Presenter $presenter = null);

--- vendor/laravel/framework/src/Illuminate/Contracts/Pipeline/Hub.php
+++ PHP_CodeSniffer
@@ -7,8 +7,8 @@
     /**
      * Send an object through one of the available pipelines.
      *
-     * @param  mixed  $object
-     * @param  string|null  $pipeline
+     * @param  mixed       $object
+     * @param  string|null $pipeline
      * @return mixed
      */
     public function pipe($object, $pipeline = null);

--- vendor/laravel/framework/src/Illuminate/Contracts/Pipeline/Pipeline.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Set the traveler object being sent on the pipeline.
      *
-     * @param  mixed  $traveler
+     * @param  mixed $traveler
      * @return $this
      */
     public function send($traveler);
@@ -17,7 +17,7 @@
     /**
      * Set the stops of the pipeline.
      *
-     * @param  dynamic|array  $stops
+     * @param  dynamic|array $stops
      * @return $this
      */
     public function through($stops);
@@ -25,7 +25,7 @@
     /**
      * Set the method to call on the stops.
      *
-     * @param  string  $method
+     * @param  string $method
      * @return $this
      */
     public function via($method);
@@ -33,7 +33,7 @@
     /**
      * Run the pipeline with a final destination callback.
      *
-     * @param  \Closure  $destination
+     * @param  \Closure $destination
      * @return mixed
      */
     public function then(Closure $destination);

--- vendor/laravel/framework/src/Illuminate/Contracts/Queue/EntityNotFoundException.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Create a new exception instance.
      *
-     * @param  string  $type
+     * @param  string $type
      * @param  mixed  $id
      * @return void
      */

--- vendor/laravel/framework/src/Illuminate/Contracts/Queue/EntityResolver.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Resolve the entity for the given ID.
      *
-     * @param  string  $type
+     * @param  string $type
      * @param  mixed  $id
      * @return mixed
      */

--- vendor/laravel/framework/src/Illuminate/Contracts/Queue/Factory.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Resolve a queue connection instance.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Queue\Queue
      */
     public function connection($name = null);

--- vendor/laravel/framework/src/Illuminate/Contracts/Queue/Job.php
+++ PHP_CodeSniffer
@@ -28,7 +28,7 @@
     /**
      * Release the job back into the queue.
      *
-     * @param  int   $delay
+     * @param  int $delay
      * @return void
      */
     public function release($delay = 0);
@@ -73,5 +73,5 @@
       *
       * @return string
       */
-     public function getRawBody();
+    public function getRawBody();
 }

--- vendor/laravel/framework/src/Illuminate/Contracts/Queue/Monitor.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Register a callback to be executed on every iteration through the queue loop.
      *
-     * @param  mixed  $callback
+     * @param  mixed $callback
      * @return void
      */
     public function looping($callback);
@@ -15,7 +15,7 @@
     /**
      * Register a callback to be executed when a job fails after the maximum amount of retries.
      *
-     * @param  mixed  $callback
+     * @param  mixed $callback
      * @return void
      */
     public function failing($callback);
@@ -23,7 +23,7 @@
     /**
      * Register a callback to be executed when a daemon queue is stopping.
      *
-     * @param  mixed  $callback
+     * @param  mixed $callback
      * @return void
      */
     public function stopping($callback);

--- vendor/laravel/framework/src/Illuminate/Contracts/Queue/Queue.php
+++ PHP_CodeSniffer
@@ -7,9 +7,9 @@
     /**
      * Push a new job onto the queue.
      *
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  string $job
+     * @param  mixed  $data
+     * @param  string $queue
      * @return mixed
      */
     public function push($job, $data = '', $queue = null);
@@ -17,9 +17,9 @@
     /**
      * Push a raw payload onto the queue.
      *
-     * @param  string  $payload
-     * @param  string  $queue
-     * @param  array   $options
+     * @param  string $payload
+     * @param  string $queue
+     * @param  array  $options
      * @return mixed
      */
     public function pushRaw($payload, $queue = null, array $options = []);
@@ -27,10 +27,10 @@
     /**
      * Push a new job onto the queue after a delay.
      *
-     * @param  \DateTime|int  $delay
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  \DateTime|int $delay
+     * @param  string        $job
+     * @param  mixed         $data
+     * @param  string        $queue
      * @return mixed
      */
     public function later($delay, $job, $data = '', $queue = null);
@@ -38,9 +38,9 @@
     /**
      * Push a new job onto the queue.
      *
-     * @param  string  $queue
-     * @param  string  $job
-     * @param  mixed   $data
+     * @param  string $queue
+     * @param  string $job
+     * @param  mixed  $data
      * @return mixed
      */
     public function pushOn($queue, $job, $data = '');
@@ -48,10 +48,10 @@
     /**
      * Push a new job onto the queue after a delay.
      *
-     * @param  string  $queue
-     * @param  \DateTime|int  $delay
-     * @param  string  $job
-     * @param  mixed   $data
+     * @param  string        $queue
+     * @param  \DateTime|int $delay
+     * @param  string        $job
+     * @param  mixed         $data
      * @return mixed
      */
     public function laterOn($queue, $delay, $job, $data = '');
@@ -59,7 +59,7 @@
     /**
      * Pop the next job off of the queue.
      *
-     * @param  string  $queue
+     * @param  string $queue
      * @return \Illuminate\Contracts\Queue\Job|null
      */
     public function pop($queue = null);

--- vendor/laravel/framework/src/Illuminate/Contracts/Redis/Database.php
+++ PHP_CodeSniffer
@@ -7,8 +7,8 @@
     /**
      * Run a command against the Redis database.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      */
     public function command($method, array $parameters = []);

--- vendor/laravel/framework/src/Illuminate/Contracts/Routing/Registrar.php
+++ PHP_CodeSniffer
@@ -9,8 +9,8 @@
     /**
      * Register a new GET route with the router.
      *
-     * @param  string  $uri
-     * @param  \Closure|array|string  $action
+     * @param  string                $uri
+     * @param  \Closure|array|string $action
      * @return void
      */
     public function get($uri, $action);
@@ -18,8 +18,8 @@
     /**
      * Register a new POST route with the router.
      *
-     * @param  string  $uri
-     * @param  \Closure|array|string  $action
+     * @param  string                $uri
+     * @param  \Closure|array|string $action
      * @return void
      */
     public function post($uri, $action);
@@ -27,8 +27,8 @@
     /**
      * Register a new PUT route with the router.
      *
-     * @param  string  $uri
-     * @param  \Closure|array|string  $action
+     * @param  string                $uri
+     * @param  \Closure|array|string $action
      * @return void
      */
     public function put($uri, $action);
@@ -36,8 +36,8 @@
     /**
      * Register a new DELETE route with the router.
      *
-     * @param  string  $uri
-     * @param  \Closure|array|string  $action
+     * @param  string                $uri
+     * @param  \Closure|array|string $action
      * @return void
      */
     public function delete($uri, $action);
@@ -45,8 +45,8 @@
     /**
      * Register a new PATCH route with the router.
      *
-     * @param  string  $uri
-     * @param  \Closure|array|string  $action
+     * @param  string                $uri
+     * @param  \Closure|array|string $action
      * @return void
      */
     public function patch($uri, $action);
@@ -54,8 +54,8 @@
     /**
      * Register a new OPTIONS route with the router.
      *
-     * @param  string  $uri
-     * @param  \Closure|array|string  $action
+     * @param  string                $uri
+     * @param  \Closure|array|string $action
      * @return void
      */
     public function options($uri, $action);
@@ -63,9 +63,9 @@
     /**
      * Register a new route with the given verbs.
      *
-     * @param  array|string  $methods
-     * @param  string  $uri
-     * @param  \Closure|array|string  $action
+     * @param  array|string          $methods
+     * @param  string                $uri
+     * @param  \Closure|array|string $action
      * @return void
      */
     public function match($methods, $uri, $action);
@@ -73,9 +73,9 @@
     /**
      * Route a resource to a controller.
      *
-     * @param  string  $name
-     * @param  string  $controller
-     * @param  array   $options
+     * @param  string $name
+     * @param  string $controller
+     * @param  array  $options
      * @return void
      */
     public function resource($name, $controller, array $options = []);
@@ -83,8 +83,8 @@
     /**
      * Create a route group with shared attributes.
      *
-     * @param  array     $attributes
-     * @param  \Closure  $callback
+     * @param  array    $attributes
+     * @param  \Closure $callback
      * @return void
      */
     public function group(array $attributes, Closure $callback);

--- vendor/laravel/framework/src/Illuminate/Contracts/Routing/ResponseFactory.php
+++ PHP_CodeSniffer
@@ -7,8 +7,8 @@
     /**
      * Return a new response from the application.
      *
-     * @param  string  $content
-     * @param  int  $status
+     * @param  string $content
+     * @param  int    $status
      * @param  array  $headers
      * @return \Illuminate\Http\Response
      */
@@ -17,9 +17,9 @@
     /**
      * Return a new view response from the application.
      *
-     * @param  string  $view
+     * @param  string $view
      * @param  array  $data
-     * @param  int  $status
+     * @param  int    $status
      * @param  array  $headers
      * @return \Illuminate\Http\Response
      */
@@ -28,10 +28,10 @@
     /**
      * Return a new JSON response from the application.
      *
-     * @param  string|array  $data
-     * @param  int  $status
-     * @param  array  $headers
-     * @param  int  $options
+     * @param  string|array $data
+     * @param  int          $status
+     * @param  array        $headers
+     * @param  int          $options
      * @return \Illuminate\Http\JsonResponse
      */
     public function json($data = [], $status = 200, array $headers = [], $options = 0);
@@ -39,11 +39,11 @@
     /**
      * Return a new JSONP response from the application.
      *
-     * @param  string  $callback
-     * @param  string|array  $data
-     * @param  int  $status
-     * @param  array  $headers
-     * @param  int  $options
+     * @param  string       $callback
+     * @param  string|array $data
+     * @param  int          $status
+     * @param  array        $headers
+     * @param  int          $options
      * @return \Illuminate\Http\JsonResponse
      */
     public function jsonp($callback, $data = [], $status = 200, array $headers = [], $options = 0);
@@ -51,9 +51,9 @@
     /**
      * Return a new streamed response from the application.
      *
-     * @param  \Closure  $callback
-     * @param  int  $status
-     * @param  array  $headers
+     * @param  \Closure $callback
+     * @param  int      $status
+     * @param  array    $headers
      * @return \Symfony\Component\HttpFoundation\StreamedResponse
      */
     public function stream($callback, $status = 200, array $headers = []);
@@ -61,10 +61,10 @@
     /**
      * Create a new file download response.
      *
-     * @param  \SplFileInfo|string  $file
-     * @param  string  $name
-     * @param  array  $headers
-     * @param  string|null  $disposition
+     * @param  \SplFileInfo|string $file
+     * @param  string              $name
+     * @param  array               $headers
+     * @param  string|null         $disposition
      * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
      */
     public function download($file, $name = null, array $headers = [], $disposition = 'attachment');
@@ -72,10 +72,10 @@
     /**
      * Create a new redirect response to the given path.
      *
-     * @param  string  $path
-     * @param  int  $status
-     * @param  array  $headers
-     * @param  bool|null  $secure
+     * @param  string    $path
+     * @param  int       $status
+     * @param  array     $headers
+     * @param  bool|null $secure
      * @return \Illuminate\Http\RedirectResponse
      */
     public function redirectTo($path, $status = 302, $headers = [], $secure = null);
@@ -83,9 +83,9 @@
     /**
      * Create a new redirect response to a named route.
      *
-     * @param  string  $route
+     * @param  string $route
      * @param  array  $parameters
-     * @param  int  $status
+     * @param  int    $status
      * @param  array  $headers
      * @return \Illuminate\Http\RedirectResponse
      */
@@ -94,9 +94,9 @@
     /**
      * Create a new redirect response to a controller action.
      *
-     * @param  string  $action
+     * @param  string $action
      * @param  array  $parameters
-     * @param  int  $status
+     * @param  int    $status
      * @param  array  $headers
      * @return \Illuminate\Http\RedirectResponse
      */
@@ -105,10 +105,10 @@
     /**
      * Create a new redirect response, while putting the current URL in the session.
      *
-     * @param  string  $path
-     * @param  int  $status
-     * @param  array  $headers
-     * @param  bool|null  $secure
+     * @param  string    $path
+     * @param  int       $status
+     * @param  array     $headers
+     * @param  bool|null $secure
      * @return \Illuminate\Http\RedirectResponse
      */
     public function redirectGuest($path, $status = 302, $headers = [], $secure = null);
@@ -116,10 +116,10 @@
     /**
      * Create a new redirect response to the previously intended location.
      *
-     * @param  string  $default
-     * @param  int  $status
-     * @param  array  $headers
-     * @param  bool|null  $secure
+     * @param  string    $default
+     * @param  int       $status
+     * @param  array     $headers
+     * @param  bool|null $secure
      * @return \Illuminate\Http\RedirectResponse
      */
     public function redirectToIntended($default = '/', $status = 302, $headers = [], $secure = null);

--- vendor/laravel/framework/src/Illuminate/Contracts/Routing/UrlGenerator.php
+++ PHP_CodeSniffer
@@ -14,9 +14,9 @@
     /**
      * Generate a absolute URL to the given path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @param  mixed  $extra
-     * @param  bool  $secure
+     * @param  bool   $secure
      * @return string
      */
     public function to($path, $extra = [], $secure = null);
@@ -24,8 +24,8 @@
     /**
      * Generate a secure, absolute URL to the given path.
      *
-     * @param  string  $path
-     * @param  array   $parameters
+     * @param  string $path
+     * @param  array  $parameters
      * @return string
      */
     public function secure($path, $parameters = []);
@@ -33,8 +33,8 @@
     /**
      * Generate a URL to an application asset.
      *
-     * @param  string  $path
-     * @param  bool    $secure
+     * @param  string $path
+     * @param  bool   $secure
      * @return string
      */
     public function asset($path, $secure = null);
@@ -42,9 +42,9 @@
     /**
      * Get the URL to a named route.
      *
-     * @param  string  $name
-     * @param  mixed   $parameters
-     * @param  bool  $absolute
+     * @param  string $name
+     * @param  mixed  $parameters
+     * @param  bool   $absolute
      * @return string
      *
      * @throws \InvalidArgumentException
@@ -54,9 +54,9 @@
     /**
      * Get the URL to a controller action.
      *
-     * @param  string  $action
-     * @param  mixed $parameters
-     * @param  bool $absolute
+     * @param  string $action
+     * @param  mixed  $parameters
+     * @param  bool   $absolute
      * @return string
      */
     public function action($action, $parameters = [], $absolute = true);
@@ -64,7 +64,7 @@
     /**
      * Set the root controller namespace.
      *
-     * @param  string  $rootNamespace
+     * @param  string $rootNamespace
      * @return $this
      */
     public function setRootControllerNamespace($rootNamespace);

--- vendor/laravel/framework/src/Illuminate/Contracts/Support/Jsonable.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Convert the object to its JSON representation.
      *
-     * @param  int  $options
+     * @param  int $options
      * @return string
      */
     public function toJson($options = 0);

--- vendor/laravel/framework/src/Illuminate/Contracts/Support/MessageBag.php
+++ PHP_CodeSniffer
@@ -14,8 +14,8 @@
     /**
      * Add a message to the bag.
      *
-     * @param  string  $key
-     * @param  string  $message
+     * @param  string $key
+     * @param  string $message
      * @return $this
      */
     public function add($key, $message);
@@ -23,7 +23,7 @@
     /**
      * Merge a new array of messages into the bag.
      *
-     * @param  \Illuminate\Contracts\Support\MessageProvider|array  $messages
+     * @param  \Illuminate\Contracts\Support\MessageProvider|array $messages
      * @return $this
      */
     public function merge($messages);
@@ -31,7 +31,7 @@
     /**
      * Determine if messages exist for a given key.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function has($key = null);
@@ -39,8 +39,8 @@
     /**
      * Get the first message from the bag for a given key.
      *
-     * @param  string  $key
-     * @param  string  $format
+     * @param  string $key
+     * @param  string $format
      * @return string
      */
     public function first($key = null, $format = null);
@@ -48,8 +48,8 @@
     /**
      * Get all of the messages from the bag for a given key.
      *
-     * @param  string  $key
-     * @param  string  $format
+     * @param  string $key
+     * @param  string $format
      * @return array
      */
     public function get($key, $format = null);
@@ -57,7 +57,7 @@
     /**
      * Get all of the messages for every key in the bag.
      *
-     * @param  string  $format
+     * @param  string $format
      * @return array
      */
     public function all($format = null);
@@ -72,7 +72,7 @@
     /**
      * Set the default message format.
      *
-     * @param  string  $format
+     * @param  string $format
      * @return $this
      */
     public function setFormat($format = ':message');

--- vendor/laravel/framework/src/Illuminate/Contracts/Validation/Factory.php
+++ PHP_CodeSniffer
@@ -7,10 +7,10 @@
     /**
      * Create a new Validator instance.
      *
-     * @param  array  $data
-     * @param  array  $rules
-     * @param  array  $messages
-     * @param  array  $customAttributes
+     * @param  array $data
+     * @param  array $rules
+     * @param  array $messages
+     * @param  array $customAttributes
      * @return \Illuminate\Contracts\Validation\Validator
      */
     public function make(array $data, array $rules, array $messages = [], array $customAttributes = []);
@@ -18,9 +18,9 @@
     /**
      * Register a custom validator extension.
      *
-     * @param  string  $rule
-     * @param  \Closure|string  $extension
-     * @param  string  $message
+     * @param  string          $rule
+     * @param  \Closure|string $extension
+     * @param  string          $message
      * @return void
      */
     public function extend($rule, $extension, $message = null);
@@ -28,9 +28,9 @@
     /**
      * Register a custom implicit validator extension.
      *
-     * @param  string   $rule
-     * @param  \Closure|string  $extension
-     * @param  string  $message
+     * @param  string          $rule
+     * @param  \Closure|string $extension
+     * @param  string          $message
      * @return void
      */
     public function extendImplicit($rule, $extension, $message = null);
@@ -38,8 +38,8 @@
     /**
      * Register a custom implicit validator message replacer.
      *
-     * @param  string   $rule
-     * @param  \Closure|string  $replacer
+     * @param  string          $rule
+     * @param  \Closure|string $replacer
      * @return void
      */
     public function replacer($rule, $replacer);

--- vendor/laravel/framework/src/Illuminate/Contracts/Validation/ValidationException.php
+++ PHP_CodeSniffer
@@ -17,7 +17,7 @@
     /**
      * Create a new validation exception instance.
      *
-     * @param  \Illuminate\Contracts\Support\MessageProvider  $provider
+     * @param  \Illuminate\Contracts\Support\MessageProvider $provider
      * @return void
      */
     public function __construct(MessageProvider $provider)

--- vendor/laravel/framework/src/Illuminate/Contracts/Validation/Validator.php
+++ PHP_CodeSniffer
@@ -23,9 +23,9 @@
     /**
      * Add conditions to a given field based on a Closure.
      *
-     * @param  string  $attribute
-     * @param  string|array  $rules
-     * @param  callable  $callback
+     * @param  string       $attribute
+     * @param  string|array $rules
+     * @param  callable     $callback
      * @return void
      */
     public function sometimes($attribute, $rules, callable $callback);
@@ -33,7 +33,7 @@
     /**
      * After an after validation callback.
      *
-     * @param  callable|string  $callback
+     * @param  callable|string $callback
      * @return $this
      */
     public function after($callback);

--- vendor/laravel/framework/src/Illuminate/Contracts/View/Factory.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Determine if a given view exists.
      *
-     * @param  string  $view
+     * @param  string $view
      * @return bool
      */
     public function exists($view);
@@ -15,7 +15,7 @@
     /**
      * Get the evaluated view contents for the given path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @param  array  $data
      * @param  array  $mergeData
      * @return \Illuminate\Contracts\View\View
@@ -25,7 +25,7 @@
     /**
      * Get the evaluated view contents for the given view.
      *
-     * @param  string  $view
+     * @param  string $view
      * @param  array  $data
      * @param  array  $mergeData
      * @return \Illuminate\Contracts\View\View
@@ -35,8 +35,8 @@
     /**
      * Add a piece of shared data to the environment.
      *
-     * @param  array|string  $key
-     * @param  mixed  $value
+     * @param  array|string $key
+     * @param  mixed        $value
      * @return mixed
      */
     public function share($key, $value = null);
@@ -44,9 +44,9 @@
     /**
      * Register a view composer event.
      *
-     * @param  array|string  $views
-     * @param  \Closure|string  $callback
-     * @param  int|null  $priority
+     * @param  array|string    $views
+     * @param  \Closure|string $callback
+     * @param  int|null        $priority
      * @return array
      */
     public function composer($views, $callback, $priority = null);
@@ -54,8 +54,8 @@
     /**
      * Register a view creator event.
      *
-     * @param  array|string  $views
-     * @param  \Closure|string  $callback
+     * @param  array|string    $views
+     * @param  \Closure|string $callback
      * @return array
      */
     public function creator($views, $callback);
@@ -63,8 +63,8 @@
     /**
      * Add a new namespace to the loader.
      *
-     * @param  string  $namespace
-     * @param  string|array  $hints
+     * @param  string       $namespace
+     * @param  string|array $hints
      * @return void
      */
     public function addNamespace($namespace, $hints);

--- vendor/laravel/framework/src/Illuminate/Contracts/View/View.php
+++ PHP_CodeSniffer
@@ -16,8 +16,8 @@
     /**
      * Add a piece of data to the view.
      *
-     * @param  string|array  $key
-     * @param  mixed   $value
+     * @param  string|array $key
+     * @param  mixed        $value
      * @return $this
      */
     public function with($key, $value = null);

--- vendor/laravel/framework/src/Illuminate/Cookie/CookieJar.php
+++ PHP_CodeSniffer
@@ -39,13 +39,13 @@
     /**
      * Create a new cookie instance.
      *
-     * @param  string  $name
-     * @param  string  $value
-     * @param  int     $minutes
-     * @param  string  $path
-     * @param  string  $domain
-     * @param  bool    $secure
-     * @param  bool    $httpOnly
+     * @param  string $name
+     * @param  string $value
+     * @param  int    $minutes
+     * @param  string $path
+     * @param  string $domain
+     * @param  bool   $secure
+     * @param  bool   $httpOnly
      * @return \Symfony\Component\HttpFoundation\Cookie
      */
     public function make($name, $value, $minutes = 0, $path = null, $domain = null, $secure = false, $httpOnly = true)
@@ -60,12 +60,12 @@
     /**
      * Create a cookie that lasts "forever" (five years).
      *
-     * @param  string  $name
-     * @param  string  $value
-     * @param  string  $path
-     * @param  string  $domain
-     * @param  bool    $secure
-     * @param  bool    $httpOnly
+     * @param  string $name
+     * @param  string $value
+     * @param  string $path
+     * @param  string $domain
+     * @param  bool   $secure
+     * @param  bool   $httpOnly
      * @return \Symfony\Component\HttpFoundation\Cookie
      */
     public function forever($name, $value, $path = null, $domain = null, $secure = false, $httpOnly = true)
@@ -76,9 +76,9 @@
     /**
      * Expire the given cookie.
      *
-     * @param  string  $name
-     * @param  string  $path
-     * @param  string  $domain
+     * @param  string $name
+     * @param  string $path
+     * @param  string $domain
      * @return \Symfony\Component\HttpFoundation\Cookie
      */
     public function forget($name, $path = null, $domain = null)
@@ -89,7 +89,7 @@
     /**
      * Determine if a cookie has been queued.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function hasQueued($key)
@@ -100,8 +100,8 @@
     /**
      * Get a queued cookie instance.
      *
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  string $key
+     * @param  mixed  $default
      * @return \Symfony\Component\HttpFoundation\Cookie
      */
     public function queued($key, $default = null)
@@ -129,7 +129,7 @@
     /**
      * Remove a cookie from the queue.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function unqueue($name)
@@ -140,9 +140,9 @@
     /**
      * Get the path and domain, or the default values.
      *
-     * @param  string  $path
-     * @param  string  $domain
-     * @param  bool    $secure
+     * @param  string $path
+     * @param  string $domain
+     * @param  bool   $secure
      * @return array
      */
     protected function getPathAndDomain($path, $domain, $secure = false)
@@ -153,9 +153,9 @@
     /**
      * Set the default path and domain for the jar.
      *
-     * @param  string  $path
-     * @param  string  $domain
-     * @param  bool    $secure
+     * @param  string $path
+     * @param  string $domain
+     * @param  bool   $secure
      * @return $this
      */
     public function setDefaultPathAndDomain($path, $domain, $secure = false)

--- vendor/laravel/framework/src/Illuminate/Cookie/CookieServiceProvider.php
+++ PHP_CodeSniffer
@@ -13,10 +13,12 @@
      */
     public function register()
     {
-        $this->app->singleton('cookie', function ($app) {
-            $config = $app['config']['session'];
+        $this->app->singleton(
+            'cookie', function ($app) {
+                $config = $app['config']['session'];
 
-            return (new CookieJar)->setDefaultPathAndDomain($config['path'], $config['domain'], $config['secure']);
-        });
+                return (new CookieJar)->setDefaultPathAndDomain($config['path'], $config['domain'], $config['secure']);
+            }
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Cookie/Middleware/AddQueuedCookiesToResponse.php
+++ PHP_CodeSniffer
@@ -17,7 +17,7 @@
     /**
      * Create a new CookieQueue instance.
      *
-     * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookies
+     * @param  \Illuminate\Contracts\Cookie\QueueingFactory $cookies
      * @return void
      */
     public function __construct(CookieJar $cookies)
@@ -28,8 +28,8 @@
     /**
      * Handle an incoming request.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Closure  $next
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Closure                 $next
      * @return mixed
      */
     public function handle($request, Closure $next)

--- vendor/laravel/framework/src/Illuminate/Cookie/Middleware/EncryptCookies.php
+++ PHP_CodeSniffer
@@ -28,7 +28,7 @@
     /**
      * Create a new CookieGuard instance.
      *
-     * @param  \Illuminate\Contracts\Encryption\Encrypter  $encrypter
+     * @param  \Illuminate\Contracts\Encryption\Encrypter $encrypter
      * @return void
      */
     public function __construct(EncrypterContract $encrypter)
@@ -39,7 +39,7 @@
     /**
      * Disable encryption for the given cookie name(s).
      *
-     * @param string|array $cookieName
+     * @param  string|array $cookieName
      * @return void
      */
     public function disableFor($cookieName)
@@ -50,8 +50,8 @@
     /**
      * Handle an incoming request.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Closure  $next
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Closure                 $next
      * @return mixed
      */
     public function handle($request, Closure $next)
@@ -62,7 +62,7 @@
     /**
      * Decrypt the cookies on the request.
      *
-     * @param  \Symfony\Component\HttpFoundation\Request  $request
+     * @param  \Symfony\Component\HttpFoundation\Request $request
      * @return \Symfony\Component\HttpFoundation\Request
      */
     protected function decrypt(Request $request)
@@ -85,7 +85,7 @@
     /**
      * Decrypt the given cookie and return the value.
      *
-     * @param  string|array  $cookie
+     * @param  string|array $cookie
      * @return string|array
      */
     protected function decryptCookie($cookie)
@@ -98,7 +98,7 @@
     /**
      * Decrypt an array based cookie.
      *
-     * @param  array  $cookie
+     * @param  array $cookie
      * @return array
      */
     protected function decryptArray(array $cookie)
@@ -117,7 +117,7 @@
     /**
      * Encrypt the cookies on an outgoing response.
      *
-     * @param  \Symfony\Component\HttpFoundation\Response  $response
+     * @param  \Symfony\Component\HttpFoundation\Response $response
      * @return \Symfony\Component\HttpFoundation\Response
      */
     protected function encrypt(Response $response)
@@ -127,9 +127,11 @@
                 continue;
             }
 
-            $response->headers->setCookie($this->duplicate(
-                $cookie, $this->encrypter->encrypt($cookie->getValue())
-            ));
+            $response->headers->setCookie(
+                $this->duplicate(
+                    $cookie, $this->encrypter->encrypt($cookie->getValue())
+                )
+            );
         }
 
         return $response;
@@ -138,8 +140,8 @@
     /**
      * Duplicate a cookie with a new value.
      *
-     * @param  \Symfony\Component\HttpFoundation\Cookie  $c
-     * @param  mixed  $value
+     * @param  \Symfony\Component\HttpFoundation\Cookie $c
+     * @param  mixed                                    $value
      * @return \Symfony\Component\HttpFoundation\Cookie
      */
     protected function duplicate(Cookie $c, $value)

--- vendor/laravel/framework/src/Illuminate/Database/Capsule/Manager.php
+++ PHP_CodeSniffer
@@ -24,7 +24,7 @@
     /**
      * Create a new database capsule manager.
      *
-     * @param  \Illuminate\Container\Container|null  $container
+     * @param  \Illuminate\Container\Container|null $container
      * @return void
      */
     public function __construct(Container $container = null)
@@ -66,7 +66,7 @@
     /**
      * Get a connection instance from the global manager.
      *
-     * @param  string  $connection
+     * @param  string $connection
      * @return \Illuminate\Database\Connection
      */
     public static function connection($connection = null)
@@ -77,8 +77,8 @@
     /**
      * Get a fluent query builder instance.
      *
-     * @param  string  $table
-     * @param  string  $connection
+     * @param  string $table
+     * @param  string $connection
      * @return \Illuminate\Database\Query\Builder
      */
     public static function table($table, $connection = null)
@@ -89,7 +89,7 @@
     /**
      * Get a schema builder instance.
      *
-     * @param  string  $connection
+     * @param  string $connection
      * @return \Illuminate\Database\Schema\Builder
      */
     public static function schema($connection = null)
@@ -100,7 +100,7 @@
     /**
      * Get a registered connection instance.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Database\Connection
      */
     public function getConnection($name = null)
@@ -111,8 +111,8 @@
     /**
      * Register a connection with the manager.
      *
-     * @param  array   $config
-     * @param  string  $name
+     * @param  array  $config
+     * @param  string $name
      * @return void
      */
     public function addConnection(array $config, $name = 'default')
@@ -144,7 +144,7 @@
     /**
      * Set the fetch mode for the database connections.
      *
-     * @param  int  $fetchMode
+     * @param  int $fetchMode
      * @return $this
      */
     public function setFetchMode($fetchMode)
@@ -179,7 +179,7 @@
     /**
      * Set the event dispatcher instance to be used by connections.
      *
-     * @param  \Illuminate\Contracts\Events\Dispatcher  $dispatcher
+     * @param  \Illuminate\Contracts\Events\Dispatcher $dispatcher
      * @return void
      */
     public function setEventDispatcher(Dispatcher $dispatcher)
@@ -190,8 +190,8 @@
     /**
      * Dynamically pass methods to the default connection.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      */
     public static function __callStatic($method, $parameters)

--- vendor/laravel/framework/src/Illuminate/Database/Connection.php
+++ PHP_CodeSniffer
@@ -151,10 +151,10 @@
     /**
      * Create a new database connection instance.
      *
-     * @param  \PDO|\Closure     $pdo
-     * @param  string   $database
-     * @param  string   $tablePrefix
-     * @param  array    $config
+     * @param  \PDO|\Closure $pdo
+     * @param  string        $database
+     * @param  string        $tablePrefix
+     * @param  array         $config
      * @return void
      */
     public function __construct($pdo, $database = '', $tablePrefix = '', array $config = [])
@@ -255,7 +255,7 @@
     /**
      * Begin a fluent query against a database table.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return \Illuminate\Database\Query\Builder
      */
     public function table($table)
@@ -278,7 +278,7 @@
     /**
      * Get a new raw query expression.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return \Illuminate\Database\Query\Expression
      */
     public function raw($value)
@@ -289,8 +289,8 @@
     /**
      * Run a select statement and return a single result.
      *
-     * @param  string  $query
-     * @param  array   $bindings
+     * @param  string $query
+     * @param  array  $bindings
      * @return mixed
      */
     public function selectOne($query, $bindings = [])
@@ -303,8 +303,8 @@
     /**
      * Run a select statement against the database.
      *
-     * @param  string  $query
-     * @param  array   $bindings
+     * @param  string $query
+     * @param  array  $bindings
      * @return array
      */
     public function selectFromWriteConnection($query, $bindings = [])
@@ -315,72 +315,76 @@
     /**
      * Run a select statement against the database.
      *
-     * @param  string  $query
+     * @param  string $query
      * @param  array  $bindings
-     * @param  bool  $useReadPdo
+     * @param  bool   $useReadPdo
      * @return array
      */
     public function select($query, $bindings = [], $useReadPdo = true)
     {
-        return $this->run($query, $bindings, function ($me, $query, $bindings) use ($useReadPdo) {
-            if ($me->pretending()) {
-                return [];
-            }
-
-            // For select statements, we'll simply execute the query and return an array
-            // of the database result set. Each element in the array will be a single
-            // row from the database table, and will either be an array or objects.
-            $statement = $this->getPdoForSelect($useReadPdo)->prepare($query);
-
-            $statement->execute($me->prepareBindings($bindings));
+        return $this->run(
+            $query, $bindings, function ($me, $query, $bindings) use ($useReadPdo) {
+                if ($me->pretending()) {
+                    return [];
+                }
+
+                // For select statements, we'll simply execute the query and return an array
+                // of the database result set. Each element in the array will be a single
+                // row from the database table, and will either be an array or objects.
+                $statement = $this->getPdoForSelect($useReadPdo)->prepare($query);
+
+                $statement->execute($me->prepareBindings($bindings));
+
+                $fetchMode = $me->getFetchMode();
+                $fetchArgument = $me->getFetchArgument();
+
+                if ($fetchMode === PDO::FETCH_CLASS && ! isset($fetchArgument)) {
+                    $fetchArgument = 'StdClass';
+                }
 
-            $fetchMode = $me->getFetchMode();
-            $fetchArgument = $me->getFetchArgument();
-
-            if ($fetchMode === PDO::FETCH_CLASS && ! isset($fetchArgument)) {
-                $fetchArgument = 'StdClass';
-            }
-
-            return isset($fetchArgument)
+                return isset($fetchArgument)
                 ? $statement->fetchAll($fetchMode, $fetchArgument, $me->getFetchConstructorArgument())
                 : $statement->fetchAll($fetchMode);
-        });
+            }
+        );
     }
 
     /**
      * Run a select statement against the database and returns a generator.
      *
-     * @param  string  $query
+     * @param  string $query
      * @param  array  $bindings
-     * @param  bool  $useReadPdo
+     * @param  bool   $useReadPdo
      * @return \Generator
      */
     public function cursor($query, $bindings = [], $useReadPdo = true)
     {
-        $statement = $this->run($query, $bindings, function ($me, $query, $bindings) use ($useReadPdo) {
-            if ($me->pretending()) {
-                return [];
-            }
-
-            $statement = $this->getPdoForSelect($useReadPdo)->prepare($query);
-
-            $fetchMode = $me->getFetchMode();
-            $fetchArgument = $me->getFetchArgument();
+        $statement = $this->run(
+            $query, $bindings, function ($me, $query, $bindings) use ($useReadPdo) {
+                if ($me->pretending()) {
+                    return [];
+                }
+
+                $statement = $this->getPdoForSelect($useReadPdo)->prepare($query);
+
+                $fetchMode = $me->getFetchMode();
+                $fetchArgument = $me->getFetchArgument();
+
+                if ($fetchMode === PDO::FETCH_CLASS && ! isset($fetchArgument)) {
+                    $fetchArgument = 'StdClass';
+                }
+
+                if (isset($fetchArgument)) {
+                    $statement->setFetchMode($fetchMode, $fetchArgument, $me->getFetchConstructorArgument());
+                } else {
+                    $statement->setFetchMode($fetchMode);
+                }
 
-            if ($fetchMode === PDO::FETCH_CLASS && ! isset($fetchArgument)) {
-                $fetchArgument = 'StdClass';
-            }
+                $statement->execute($me->prepareBindings($bindings));
 
-            if (isset($fetchArgument)) {
-                $statement->setFetchMode($fetchMode, $fetchArgument, $me->getFetchConstructorArgument());
-            } else {
-                $statement->setFetchMode($fetchMode);
+                return $statement;
             }
-
-            $statement->execute($me->prepareBindings($bindings));
-
-            return $statement;
-        });
+        );
 
         while ($record = $statement->fetch()) {
             yield $record;
@@ -390,7 +394,7 @@
     /**
      * Get the PDO connection to use for a select query.
      *
-     * @param  bool  $useReadPdo
+     * @param  bool $useReadPdo
      * @return \PDO
      */
     protected function getPdoForSelect($useReadPdo = true)
@@ -401,8 +405,8 @@
     /**
      * Run an insert statement against the database.
      *
-     * @param  string  $query
-     * @param  array   $bindings
+     * @param  string $query
+     * @param  array  $bindings
      * @return bool
      */
     public function insert($query, $bindings = [])
@@ -413,8 +417,8 @@
     /**
      * Run an update statement against the database.
      *
-     * @param  string  $query
-     * @param  array   $bindings
+     * @param  string $query
+     * @param  array  $bindings
      * @return int
      */
     public function update($query, $bindings = [])
@@ -425,8 +429,8 @@
     /**
      * Run a delete statement against the database.
      *
-     * @param  string  $query
-     * @param  array   $bindings
+     * @param  string $query
+     * @param  array  $bindings
      * @return int
      */
     public function delete($query, $bindings = [])
@@ -437,69 +441,75 @@
     /**
      * Execute an SQL statement and return the boolean result.
      *
-     * @param  string  $query
-     * @param  array   $bindings
+     * @param  string $query
+     * @param  array  $bindings
      * @return bool
      */
     public function statement($query, $bindings = [])
     {
-        return $this->run($query, $bindings, function ($me, $query, $bindings) {
-            if ($me->pretending()) {
-                return true;
-            }
+        return $this->run(
+            $query, $bindings, function ($me, $query, $bindings) {
+                if ($me->pretending()) {
+                    return true;
+                }
 
-            $bindings = $me->prepareBindings($bindings);
+                $bindings = $me->prepareBindings($bindings);
 
-            return $me->getPdo()->prepare($query)->execute($bindings);
-        });
+                return $me->getPdo()->prepare($query)->execute($bindings);
+            }
+        );
     }
 
     /**
      * Run an SQL statement and get the number of rows affected.
      *
-     * @param  string  $query
-     * @param  array   $bindings
+     * @param  string $query
+     * @param  array  $bindings
      * @return int
      */
     public function affectingStatement($query, $bindings = [])
     {
-        return $this->run($query, $bindings, function ($me, $query, $bindings) {
-            if ($me->pretending()) {
-                return 0;
-            }
+        return $this->run(
+            $query, $bindings, function ($me, $query, $bindings) {
+                if ($me->pretending()) {
+                    return 0;
+                }
+
+                // For update or delete statements, we want to get the number of rows affected
+                // by the statement and return that back to the developer. We'll first need
+                // to execute the statement and then we'll use PDO to fetch the affected.
+                $statement = $me->getPdo()->prepare($query);
 
-            // For update or delete statements, we want to get the number of rows affected
-            // by the statement and return that back to the developer. We'll first need
-            // to execute the statement and then we'll use PDO to fetch the affected.
-            $statement = $me->getPdo()->prepare($query);
+                $statement->execute($me->prepareBindings($bindings));
 
-            $statement->execute($me->prepareBindings($bindings));
-
-            return $statement->rowCount();
-        });
+                return $statement->rowCount();
+            }
+        );
     }
 
     /**
      * Run a raw, unprepared query against the PDO connection.
      *
-     * @param  string  $query
+     * @param  string $query
      * @return bool
      */
     public function unprepared($query)
     {
-        return $this->run($query, [], function ($me, $query) {
-            if ($me->pretending()) {
-                return true;
-            }
+        return $this->run(
+            $query, [], function ($me, $query) {
+                if ($me->pretending()) {
+                    return true;
+                }
 
-            return (bool) $me->getPdo()->exec($query);
-        });
+                return (bool) $me->getPdo()->exec($query);
+            }
+        );
     }
 
     /**
      * Prepare the query bindings for execution.
      *
-     * @param  array  $bindings
+     * @param  array $bindings
      * @return array
      */
     public function prepareBindings(array $bindings)
@@ -523,7 +533,7 @@
     /**
      * Execute a Closure within a transaction.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return mixed
      *
      * @throws \Exception|\Throwable
@@ -633,7 +643,7 @@
     /**
      * Execute the given callback in "dry run" mode.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return array
      */
     public function pretend(Closure $callback)
@@ -661,9 +671,9 @@
     /**
      * Run a SQL statement and log its execution context.
      *
-     * @param  string    $query
-     * @param  array     $bindings
-     * @param  \Closure  $callback
+     * @param  string   $query
+     * @param  array    $bindings
+     * @param  \Closure $callback
      * @return mixed
      *
      * @throws \Illuminate\Database\QueryException
@@ -702,9 +712,9 @@
     /**
      * Run a SQL statement.
      *
-     * @param  string    $query
-     * @param  array     $bindings
-     * @param  \Closure  $callback
+     * @param  string   $query
+     * @param  array    $bindings
+     * @param  \Closure $callback
      * @return mixed
      *
      * @throws \Illuminate\Database\QueryException
@@ -733,10 +743,10 @@
     /**
      * Handle a query exception that occurred during query execution.
      *
-     * @param  \Illuminate\Database\QueryException  $e
-     * @param  string    $query
-     * @param  array     $bindings
-     * @param  \Closure  $callback
+     * @param  \Illuminate\Database\QueryException $e
+     * @param  string                              $query
+     * @param  array                               $bindings
+     * @param  \Closure                            $callback
      * @return mixed
      *
      * @throws \Illuminate\Database\QueryException
@@ -793,17 +803,19 @@
     /**
      * Log a query in the connection's query log.
      *
-     * @param  string  $query
-     * @param  array   $bindings
-     * @param  float|null  $time
+     * @param  string     $query
+     * @param  array      $bindings
+     * @param  float|null $time
      * @return void
      */
     public function logQuery($query, $bindings, $time = null)
     {
         if (isset($this->events)) {
-            $this->events->fire(new Events\QueryExecuted(
-                $query, $bindings, $time, $this
-            ));
+            $this->events->fire(
+                new Events\QueryExecuted(
+                    $query, $bindings, $time, $this
+                )
+            );
         }
 
         if ($this->loggingQueries) {
@@ -814,7 +826,7 @@
     /**
      * Register a database query listener with the connection.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return void
      */
     public function listen(Closure $callback)
@@ -827,7 +839,7 @@
     /**
      * Fire an event for this connection.
      *
-     * @param  string  $event
+     * @param  string $event
      * @return void
      */
     protected function fireConnectionEvent($event)
@@ -837,19 +849,19 @@
         }
 
         switch ($event) {
-            case 'beganTransaction':
-                return $this->events->fire(new Events\TransactionBeginning($this));
-            case 'committed':
-                return $this->events->fire(new Events\TransactionCommitted($this));
-            case 'rollingBack':
-                return $this->events->fire(new Events\TransactionRolledBack($this));
+        case 'beganTransaction':
+            return $this->events->fire(new Events\TransactionBeginning($this));
+        case 'committed':
+            return $this->events->fire(new Events\TransactionCommitted($this));
+        case 'rollingBack':
+            return $this->events->fire(new Events\TransactionRolledBack($this));
         }
     }
 
     /**
      * Get the elapsed time since a given starting point.
      *
-     * @param  int    $start
+     * @param  int $start
      * @return float
      */
     protected function getElapsedTime($start)
@@ -870,8 +882,8 @@
     /**
      * Get a Doctrine Schema Column instance.
      *
-     * @param  string  $table
-     * @param  string  $column
+     * @param  string $table
+     * @param  string $column
      * @return \Doctrine\DBAL\Schema\Column
      */
     public function getDoctrineColumn($table, $column)
@@ -940,7 +952,7 @@
     /**
      * Set the PDO connection.
      *
-     * @param  \PDO|null  $pdo
+     * @param  \PDO|null $pdo
      * @return $this
      *
      * @throws \RuntimeException
@@ -959,7 +971,7 @@
     /**
      * Set the PDO connection used for reading.
      *
-     * @param  \PDO|null  $pdo
+     * @param  \PDO|null $pdo
      * @return $this
      */
     public function setReadPdo($pdo)
@@ -972,7 +984,7 @@
     /**
      * Set the reconnect instance on the connection.
      *
-     * @param  callable  $reconnector
+     * @param  callable $reconnector
      * @return $this
      */
     public function setReconnector(callable $reconnector)
@@ -995,7 +1007,7 @@
     /**
      * Get an option from the configuration options.
      *
-     * @param  string  $option
+     * @param  string $option
      * @return mixed
      */
     public function getConfig($option)
@@ -1026,7 +1038,7 @@
     /**
      * Set the query grammar used by the connection.
      *
-     * @param  \Illuminate\Database\Query\Grammars\Grammar  $grammar
+     * @param  \Illuminate\Database\Query\Grammars\Grammar $grammar
      * @return void
      */
     public function setQueryGrammar(Query\Grammars\Grammar $grammar)
@@ -1047,7 +1059,7 @@
     /**
      * Set the schema grammar used by the connection.
      *
-     * @param  \Illuminate\Database\Schema\Grammars\Grammar  $grammar
+     * @param  \Illuminate\Database\Schema\Grammars\Grammar $grammar
      * @return void
      */
     public function setSchemaGrammar(Schema\Grammars\Grammar $grammar)
@@ -1068,7 +1080,7 @@
     /**
      * Set the query post processor used by the connection.
      *
-     * @param  \Illuminate\Database\Query\Processors\Processor  $processor
+     * @param  \Illuminate\Database\Query\Processors\Processor $processor
      * @return void
      */
     public function setPostProcessor(Processor $processor)
@@ -1089,7 +1101,7 @@
     /**
      * Set the event dispatcher instance on the connection.
      *
-     * @param  \Illuminate\Contracts\Events\Dispatcher  $events
+     * @param  \Illuminate\Contracts\Events\Dispatcher $events
      * @return void
      */
     public function setEventDispatcher(Dispatcher $events)
@@ -1140,9 +1152,9 @@
     /**
      * Set the default fetch mode for the connection, and optional arguments for the given fetch mode.
      *
-     * @param  int  $fetchMode
-     * @param  mixed  $fetchArgument
-     * @param  array  $fetchConstructorArgument
+     * @param  int   $fetchMode
+     * @param  mixed $fetchArgument
+     * @param  array $fetchConstructorArgument
      * @return int
      */
     public function setFetchMode($fetchMode, $fetchArgument = null, array $fetchConstructorArgument = [])
@@ -1215,7 +1227,7 @@
     /**
      * Set the name of the connected database.
      *
-     * @param  string  $database
+     * @param  string $database
      * @return string
      */
     public function setDatabaseName($database)
@@ -1236,7 +1248,7 @@
     /**
      * Set the table prefix in use by the connection.
      *
-     * @param  string  $prefix
+     * @param  string $prefix
      * @return void
      */
     public function setTablePrefix($prefix)
@@ -1249,7 +1261,7 @@
     /**
      * Set the table prefix and return the grammar.
      *
-     * @param  \Illuminate\Database\Grammar  $grammar
+     * @param  \Illuminate\Database\Grammar $grammar
      * @return \Illuminate\Database\Grammar
      */
     public function withTablePrefix(Grammar $grammar)

--- vendor/laravel/framework/src/Illuminate/Database/ConnectionInterface.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Begin a fluent query against a database table.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return \Illuminate\Database\Query\Builder
      */
     public function table($table);
@@ -17,7 +17,7 @@
     /**
      * Get a new raw query expression.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return \Illuminate\Database\Query\Expression
      */
     public function raw($value);
@@ -25,8 +25,8 @@
     /**
      * Run a select statement and return a single result.
      *
-     * @param  string  $query
-     * @param  array   $bindings
+     * @param  string $query
+     * @param  array  $bindings
      * @return mixed
      */
     public function selectOne($query, $bindings = []);
@@ -34,8 +34,8 @@
     /**
      * Run a select statement against the database.
      *
-     * @param  string  $query
-     * @param  array   $bindings
+     * @param  string $query
+     * @param  array  $bindings
      * @return array
      */
     public function select($query, $bindings = []);
@@ -43,8 +43,8 @@
     /**
      * Run an insert statement against the database.
      *
-     * @param  string  $query
-     * @param  array   $bindings
+     * @param  string $query
+     * @param  array  $bindings
      * @return bool
      */
     public function insert($query, $bindings = []);
@@ -52,8 +52,8 @@
     /**
      * Run an update statement against the database.
      *
-     * @param  string  $query
-     * @param  array   $bindings
+     * @param  string $query
+     * @param  array  $bindings
      * @return int
      */
     public function update($query, $bindings = []);
@@ -61,8 +61,8 @@
     /**
      * Run a delete statement against the database.
      *
-     * @param  string  $query
-     * @param  array   $bindings
+     * @param  string $query
+     * @param  array  $bindings
      * @return int
      */
     public function delete($query, $bindings = []);
@@ -70,8 +70,8 @@
     /**
      * Execute an SQL statement and return the boolean result.
      *
-     * @param  string  $query
-     * @param  array   $bindings
+     * @param  string $query
+     * @param  array  $bindings
      * @return bool
      */
     public function statement($query, $bindings = []);
@@ -79,8 +79,8 @@
     /**
      * Run an SQL statement and get the number of rows affected.
      *
-     * @param  string  $query
-     * @param  array   $bindings
+     * @param  string $query
+     * @param  array  $bindings
      * @return int
      */
     public function affectingStatement($query, $bindings = []);
@@ -88,7 +88,7 @@
     /**
      * Run a raw, unprepared query against the PDO connection.
      *
-     * @param  string  $query
+     * @param  string $query
      * @return bool
      */
     public function unprepared($query);
@@ -96,7 +96,7 @@
     /**
      * Prepare the query bindings for execution.
      *
-     * @param  array  $bindings
+     * @param  array $bindings
      * @return array
      */
     public function prepareBindings(array $bindings);
@@ -104,7 +104,7 @@
     /**
      * Execute a Closure within a transaction.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return mixed
      *
      * @throws \Throwable
@@ -142,7 +142,7 @@
     /**
      * Execute the given callback in "dry run" mode.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return array
      */
     public function pretend(Closure $callback);

--- vendor/laravel/framework/src/Illuminate/Database/ConnectionResolver.php
+++ PHP_CodeSniffer
@@ -21,7 +21,7 @@
     /**
      * Create a new connection resolver instance.
      *
-     * @param  array  $connections
+     * @param  array $connections
      * @return void
      */
     public function __construct(array $connections = [])
@@ -34,7 +34,7 @@
     /**
      * Get a database connection instance.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Database\ConnectionInterface
      */
     public function connection($name = null)
@@ -49,8 +49,8 @@
     /**
      * Add a connection to the resolver.
      *
-     * @param  string  $name
-     * @param  \Illuminate\Database\ConnectionInterface  $connection
+     * @param  string                                   $name
+     * @param  \Illuminate\Database\ConnectionInterface $connection
      * @return void
      */
     public function addConnection($name, ConnectionInterface $connection)
@@ -61,7 +61,7 @@
     /**
      * Check if a connection has been registered.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return bool
      */
     public function hasConnection($name)
@@ -82,7 +82,7 @@
     /**
      * Set the default connection name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function setDefaultConnection($name)

--- vendor/laravel/framework/src/Illuminate/Database/ConnectionResolverInterface.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Get a database connection instance.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Database\ConnectionInterface
      */
     public function connection($name = null);
@@ -22,7 +22,7 @@
     /**
      * Set the default connection name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function setDefaultConnection($name);

--- vendor/laravel/framework/src/Illuminate/Database/Connectors/ConnectionFactory.php
+++ PHP_CodeSniffer
@@ -23,7 +23,7 @@
     /**
      * Create a new connection factory instance.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
+     * @param  \Illuminate\Contracts\Container\Container $container
      * @return void
      */
     public function __construct(Container $container)
@@ -34,8 +34,8 @@
     /**
      * Establish a PDO connection based on the configuration.
      *
-     * @param  array   $config
-     * @param  string  $name
+     * @param  array  $config
+     * @param  string $name
      * @return \Illuminate\Database\Connection
      */
     public function make(array $config, $name = null)
@@ -52,7 +52,7 @@
     /**
      * Create a single database connection instance.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Database\Connection
      */
     protected function createSingleConnection(array $config)
@@ -67,7 +67,7 @@
     /**
      * Create a single database connection instance.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Database\Connection
      */
     protected function createReadWriteConnection(array $config)
@@ -80,7 +80,7 @@
     /**
      * Create a new PDO instance for reading.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \PDO
      */
     protected function createReadPdo(array $config)
@@ -93,7 +93,7 @@
     /**
      * Get the read configuration for a read / write connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return array
      */
     protected function getReadConfig(array $config)
@@ -112,7 +112,7 @@
     /**
      * Get the read configuration for a read / write connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return array
      */
     protected function getWriteConfig(array $config)
@@ -125,8 +125,8 @@
     /**
      * Get a read / write level configuration.
      *
-     * @param  array   $config
-     * @param  string  $type
+     * @param  array  $config
+     * @param  string $type
      * @return array
      */
     protected function getReadWriteConfig(array $config, $type)
@@ -141,8 +141,8 @@
     /**
      * Merge a configuration for a read / write connection.
      *
-     * @param  array  $config
-     * @param  array  $merge
+     * @param  array $config
+     * @param  array $merge
      * @return array
      */
     protected function mergeReadWriteConfig(array $config, array $merge)
@@ -153,8 +153,8 @@
     /**
      * Parse and prepare the database configuration.
      *
-     * @param  array   $config
-     * @param  string  $name
+     * @param  array  $config
+     * @param  string $name
      * @return array
      */
     protected function parseConfig(array $config, $name)
@@ -165,7 +165,7 @@
     /**
      * Create a connector instance based on the configuration.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Database\Connectors\ConnectorInterface
      *
      * @throws \InvalidArgumentException
@@ -181,14 +181,14 @@
         }
 
         switch ($config['driver']) {
-            case 'mysql':
-                return new MySqlConnector;
-            case 'pgsql':
-                return new PostgresConnector;
-            case 'sqlite':
-                return new SQLiteConnector;
-            case 'sqlsrv':
-                return new SqlServerConnector;
+        case 'mysql':
+            return new MySqlConnector;
+        case 'pgsql':
+            return new PostgresConnector;
+        case 'sqlite':
+            return new SQLiteConnector;
+        case 'sqlsrv':
+            return new SqlServerConnector;
         }
 
         throw new InvalidArgumentException("Unsupported driver [{$config['driver']}]");
@@ -197,11 +197,11 @@
     /**
      * Create a new connection instance.
      *
-     * @param  string   $driver
-     * @param  \PDO|\Closure     $connection
-     * @param  string   $database
-     * @param  string   $prefix
-     * @param  array    $config
+     * @param  string        $driver
+     * @param  \PDO|\Closure $connection
+     * @param  string        $database
+     * @param  string        $prefix
+     * @param  array         $config
      * @return \Illuminate\Database\Connection
      *
      * @throws \InvalidArgumentException
@@ -213,14 +213,14 @@
         }
 
         switch ($driver) {
-            case 'mysql':
-                return new MySqlConnection($connection, $database, $prefix, $config);
-            case 'pgsql':
-                return new PostgresConnection($connection, $database, $prefix, $config);
-            case 'sqlite':
-                return new SQLiteConnection($connection, $database, $prefix, $config);
-            case 'sqlsrv':
-                return new SqlServerConnection($connection, $database, $prefix, $config);
+        case 'mysql':
+            return new MySqlConnection($connection, $database, $prefix, $config);
+        case 'pgsql':
+            return new PostgresConnection($connection, $database, $prefix, $config);
+        case 'sqlite':
+            return new SQLiteConnection($connection, $database, $prefix, $config);
+        case 'sqlsrv':
+            return new SqlServerConnection($connection, $database, $prefix, $config);
         }
 
         throw new InvalidArgumentException("Unsupported driver [$driver]");

--- vendor/laravel/framework/src/Illuminate/Database/Connectors/Connector.php
+++ PHP_CodeSniffer
@@ -27,7 +27,7 @@
     /**
      * Get the PDO options based on the configuration.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return array
      */
     public function getOptions(array $config)
@@ -40,9 +40,9 @@
     /**
      * Create a new PDO connection.
      *
-     * @param  string  $dsn
-     * @param  array   $config
-     * @param  array   $options
+     * @param  string $dsn
+     * @param  array  $config
+     * @param  array  $options
      * @return \PDO
      */
     public function createConnection($dsn, array $config, array $options)
@@ -75,7 +75,7 @@
     /**
      * Set the default PDO connection options.
      *
-     * @param  array  $options
+     * @param  array $options
      * @return void
      */
     public function setDefaultOptions(array $options)
@@ -86,11 +86,11 @@
     /**
      * Handle a exception that occurred during connect execution.
      *
-     * @param  \Exception  $e
-     * @param  string  $dsn
-     * @param  string  $username
-     * @param  string  $password
-     * @param  array   $options
+     * @param  \Exception $e
+     * @param  string     $dsn
+     * @param  string     $username
+     * @param  string     $password
+     * @param  array      $options
      * @return \PDO
      *
      * @throws \Exception

--- vendor/laravel/framework/src/Illuminate/Database/Connectors/ConnectorInterface.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Establish a database connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \PDO
      */
     public function connect(array $config);

--- vendor/laravel/framework/src/Illuminate/Database/Connectors/MySqlConnector.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Establish a database connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \PDO
      */
     public function connect(array $config)
@@ -59,7 +59,7 @@
      *
      * Chooses socket or host/port based on the 'unix_socket' config value.
      *
-     * @param  array   $config
+     * @param  array $config
      * @return string
      */
     protected function getDsn(array $config)
@@ -70,7 +70,7 @@
     /**
      * Determine if the given configuration array has a UNIX socket value.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return bool
      */
     protected function configHasSocket(array $config)
@@ -81,7 +81,7 @@
     /**
      * Get the DSN string for a socket configuration.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return string
      */
     protected function getSocketDsn(array $config)
@@ -92,7 +92,7 @@
     /**
      * Get the DSN string for a host / port configuration.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return string
      */
     protected function getHostDsn(array $config)
@@ -108,7 +108,7 @@
      * Set the modes for the connection.
      *
      * @param  \PDO  $connection
-     * @param  array  $config
+     * @param  array $config
      * @return void
      */
     protected function setModes(PDO $connection, array $config)

--- vendor/laravel/framework/src/Illuminate/Database/Connectors/PostgresConnector.php
+++ PHP_CodeSniffer
@@ -21,7 +21,7 @@
     /**
      * Establish a database connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \PDO
      */
     public function connect(array $config)
@@ -72,7 +72,7 @@
     /**
      * Create a DSN string from a configuration.
      *
-     * @param  array   $config
+     * @param  array $config
      * @return string
      */
     protected function getDsn(array $config)
@@ -103,7 +103,7 @@
     /**
      * Format the schema for the DSN.
      *
-     * @param  array|string  $schema
+     * @param  array|string $schema
      * @return string
      */
     protected function formatSchema($schema)

--- vendor/laravel/framework/src/Illuminate/Database/Connectors/SQLiteConnector.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Establish a database connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \PDO
      *
      * @throws \InvalidArgumentException

--- vendor/laravel/framework/src/Illuminate/Database/Connectors/SqlServerConnector.php
+++ PHP_CodeSniffer
@@ -22,7 +22,7 @@
     /**
      * Establish a database connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \PDO
      */
     public function connect(array $config)
@@ -35,7 +35,7 @@
     /**
      * Create a DSN string from a configuration.
      *
-     * @param  array   $config
+     * @param  array $config
      * @return string
      */
     protected function getDsn(array $config)
@@ -55,7 +55,7 @@
     /**
      * Get the DSN string for a DbLib connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return string
      */
     protected function getDblibDsn(array $config)
@@ -75,7 +75,7 @@
     /**
      * Determine if the database configuration prefers ODBC.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return bool
      */
     protected function prefersOdbc(array $config)
@@ -87,7 +87,7 @@
     /**
      * Get the DSN string for an ODBC connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return string
      */
     protected function getOdbcDsn(array $config)
@@ -102,7 +102,7 @@
     /**
      * Get the DSN string for a SqlSrv connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return string
      */
     protected function getSqlSrvDsn(array $config)
@@ -133,15 +133,17 @@
     /**
      * Build a connection string from the given arguments.
      *
-     * @param  string  $driver
+     * @param  string $driver
      * @param  array  $arguments
      * @return string
      */
     protected function buildConnectString($driver, array $arguments)
     {
-        $options = array_map(function ($key) use ($arguments) {
-            return sprintf('%s=%s', $key, $arguments[$key]);
-        }, array_keys($arguments));
+        $options = array_map(
+            function ($key) use ($arguments) {
+                return sprintf('%s=%s', $key, $arguments[$key]);
+            }, array_keys($arguments)
+        );
 
         return $driver.':'.implode(';', $options);
     }
@@ -150,7 +152,7 @@
      * Build a host string from the given configuration.
      *
      * @param  array  $config
-     * @param  string  $separator
+     * @param  string $separator
      * @return string
      */
     protected function buildHostString(array $config, $separator)

--- vendor/laravel/framework/src/Illuminate/Database/Console/Migrations/InstallCommand.php
+++ PHP_CodeSniffer
@@ -32,7 +32,7 @@
     /**
      * Create a new migration install command instance.
      *
-     * @param  \Illuminate\Database\Migrations\MigrationRepositoryInterface  $repository
+     * @param  \Illuminate\Database\Migrations\MigrationRepositoryInterface $repository
      * @return void
      */
     public function __construct(MigrationRepositoryInterface $repository)

--- vendor/laravel/framework/src/Illuminate/Database/Console/Migrations/MigrateCommand.php
+++ PHP_CodeSniffer
@@ -34,7 +34,7 @@
     /**
      * Create a new migration command instance.
      *
-     * @param  \Illuminate\Database\Migrations\Migrator  $migrator
+     * @param  \Illuminate\Database\Migrations\Migrator $migrator
      * @return void
      */
     public function __construct(Migrator $migrator)
@@ -71,10 +71,12 @@
             $path = $this->getMigrationPath();
         }
 
-        $this->migrator->run($path, [
+        $this->migrator->run(
+            $path, [
             'pretend' => $pretend,
             'step' => $this->input->getOption('step'),
-        ]);
+            ]
+        );
 
         // Once the migrator has run we will grab the note output and send it out to
         // the console screen, since the migrator itself functions without having

--- vendor/laravel/framework/src/Illuminate/Database/Console/Migrations/MigrateMakeCommand.php
+++ PHP_CodeSniffer
@@ -41,8 +41,8 @@
     /**
      * Create a new migration install command instance.
      *
-     * @param  \Illuminate\Database\Migrations\MigrationCreator  $creator
-     * @param  \Illuminate\Support\Composer  $composer
+     * @param  \Illuminate\Database\Migrations\MigrationCreator $creator
+     * @param  \Illuminate\Support\Composer                     $composer
      * @return void
      */
     public function __construct(MigrationCreator $creator, Composer $composer)
@@ -86,9 +86,9 @@
     /**
      * Write the migration file to disk.
      *
-     * @param  string  $name
-     * @param  string  $table
-     * @param  bool    $create
+     * @param  string $name
+     * @param  string $table
+     * @param  bool   $create
      * @return string
      */
     protected function writeMigration($name, $table, $create)

--- vendor/laravel/framework/src/Illuminate/Database/Console/Migrations/RefreshCommand.php
+++ PHP_CodeSniffer
@@ -41,18 +41,22 @@
 
         $path = $this->input->getOption('path');
 
-        $this->call('migrate:reset', [
+        $this->call(
+            'migrate:reset', [
             '--database' => $database, '--force' => $force,
-        ]);
+            ]
+        );
 
         // The refresh command is essentially just a brief aggregate of a few other of
         // the migration commands and just provides a convenient wrapper to execute
         // them in succession. We'll also see if we need to re-seed the database.
-        $this->call('migrate', [
+        $this->call(
+            'migrate', [
             '--database' => $database,
             '--force' => $force,
             '--path' => $path,
-        ]);
+            ]
+        );
 
         if ($this->needsSeeding()) {
             $this->runSeeder($database);
@@ -72,7 +76,7 @@
     /**
      * Run the database seeder command.
      *
-     * @param  string  $database
+     * @param  string $database
      * @return void
      */
     protected function runSeeder($database)
@@ -81,9 +85,11 @@
 
         $force = $this->input->getOption('force');
 
-        $this->call('db:seed', [
+        $this->call(
+            'db:seed', [
             '--database' => $database, '--class' => $class, '--force' => $force,
-        ]);
+            ]
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Database/Console/Migrations/ResetCommand.php
+++ PHP_CodeSniffer
@@ -35,7 +35,7 @@
     /**
      * Create a new migration rollback command instance.
      *
-     * @param  \Illuminate\Database\Migrations\Migrator  $migrator
+     * @param  \Illuminate\Database\Migrations\Migrator $migrator
      * @return void
      */
     public function __construct(Migrator $migrator)

--- vendor/laravel/framework/src/Illuminate/Database/Console/Migrations/RollbackCommand.php
+++ PHP_CodeSniffer
@@ -35,7 +35,7 @@
     /**
      * Create a new migration rollback command instance.
      *
-     * @param  \Illuminate\Database\Migrations\Migrator  $migrator
+     * @param  \Illuminate\Database\Migrations\Migrator $migrator
      * @return void
      */
     public function __construct(Migrator $migrator)

--- vendor/laravel/framework/src/Illuminate/Database/Console/Migrations/StatusCommand.php
+++ PHP_CodeSniffer
@@ -78,7 +78,7 @@
     /**
      * Get all of the migration files.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return array
      */
     protected function getAllMigrationFiles($path)

--- vendor/laravel/framework/src/Illuminate/Database/Console/Seeds/SeedCommand.php
+++ PHP_CodeSniffer
@@ -36,7 +36,7 @@
     /**
      * Create a new database seed command instance.
      *
-     * @param  \Illuminate\Database\ConnectionResolverInterface  $resolver
+     * @param  \Illuminate\Database\ConnectionResolverInterface $resolver
      * @return void
      */
     public function __construct(Resolver $resolver)
@@ -59,9 +59,11 @@
 
         $this->resolver->setDefaultConnection($this->getDatabase());
 
-        Model::unguarded(function () {
-            $this->getSeeder()->run();
-        });
+        Model::unguarded(
+            function () {
+                $this->getSeeder()->run();
+            }
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Database/Console/Seeds/SeederMakeCommand.php
+++ PHP_CodeSniffer
@@ -39,8 +39,8 @@
     /**
      * Create a new command instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
-     * @param  \Illuminate\Support\Composer  $composer
+     * @param  \Illuminate\Filesystem\Filesystem $files
+     * @param  \Illuminate\Support\Composer      $composer
      * @return void
      */
     public function __construct(Filesystem $files, Composer $composer)
@@ -75,7 +75,7 @@
     /**
      * Get the destination class path.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     protected function getPath($name)
@@ -86,7 +86,7 @@
     /**
      * Parse the name and format according to the root namespace.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     protected function parseName($name)

--- vendor/laravel/framework/src/Illuminate/Database/DatabaseManager.php
+++ PHP_CodeSniffer
@@ -41,8 +41,8 @@
     /**
      * Create a new database manager instance.
      *
-     * @param  \Illuminate\Foundation\Application  $app
-     * @param  \Illuminate\Database\Connectors\ConnectionFactory  $factory
+     * @param  \Illuminate\Foundation\Application                $app
+     * @param  \Illuminate\Database\Connectors\ConnectionFactory $factory
      * @return void
      */
     public function __construct($app, ConnectionFactory $factory)
@@ -54,7 +54,7 @@
     /**
      * Get a database connection instance.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Database\Connection
      */
     public function connection($name = null)
@@ -78,7 +78,7 @@
     /**
      * Parse the connection into an array of the name and read / write type.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return array
      */
     protected function parseConnectionName($name)
@@ -92,7 +92,7 @@
     /**
      * Disconnect from the given database and remove from local cache.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function purge($name = null)
@@ -105,7 +105,7 @@
     /**
      * Disconnect from the given database.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function disconnect($name = null)
@@ -118,7 +118,7 @@
     /**
      * Reconnect to the given database.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Database\Connection
      */
     public function reconnect($name = null)
@@ -135,7 +135,7 @@
     /**
      * Refresh the PDO connections on a given connection.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Database\Connection
      */
     protected function refreshPdoConnections($name)
@@ -143,14 +143,14 @@
         $fresh = $this->makeConnection($name);
 
         return $this->connections[$name]
-                                ->setPdo($fresh->getPdo())
-                                ->setReadPdo($fresh->getReadPdo());
+            ->setPdo($fresh->getPdo())
+            ->setReadPdo($fresh->getReadPdo());
     }
 
     /**
      * Make the database connection instance.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Database\Connection
      */
     protected function makeConnection($name)
@@ -179,7 +179,7 @@
     /**
      * Prepare the database connection instance.
      *
-     * @param  \Illuminate\Database\Connection  $connection
+     * @param  \Illuminate\Database\Connection $connection
      * @return \Illuminate\Database\Connection
      */
     protected function prepare(Connection $connection)
@@ -193,9 +193,11 @@
         // Here we'll set a reconnector callback. This reconnector can be any callable
         // so we will set a Closure to reconnect from this manager with the name of
         // the connection, which will allow us to reconnect from the connections.
-        $connection->setReconnector(function ($connection) {
-            $this->reconnect($connection->getName());
-        });
+        $connection->setReconnector(
+            function ($connection) {
+                $this->reconnect($connection->getName());
+            }
+        );
 
         return $connection;
     }
@@ -203,8 +205,8 @@
     /**
      * Prepare the read write mode for database connection instance.
      *
-     * @param  \Illuminate\Database\Connection  $connection
-     * @param  string  $type
+     * @param  \Illuminate\Database\Connection $connection
+     * @param  string                          $type
      * @return \Illuminate\Database\Connection
      */
     protected function setPdoForType(Connection $connection, $type = null)
@@ -221,7 +223,7 @@
     /**
      * Get the configuration for a connection.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return array
      *
      * @throws \InvalidArgumentException
@@ -255,7 +257,7 @@
     /**
      * Set the default connection name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function setDefaultConnection($name)
@@ -286,8 +288,8 @@
     /**
      * Register an extension connection resolver.
      *
-     * @param  string    $name
-     * @param  callable  $resolver
+     * @param  string   $name
+     * @param  callable $resolver
      * @return void
      */
     public function extend($name, callable $resolver)
@@ -308,8 +310,8 @@
     /**
      * Dynamically pass methods to the default connection.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      */
     public function __call($method, $parameters)

--- vendor/laravel/framework/src/Illuminate/Database/DatabaseServiceProvider.php
+++ PHP_CodeSniffer
@@ -40,20 +40,26 @@
         // The connection factory is used to create the actual connection instances on
         // the database. We will inject the factory into the manager so that it may
         // make the connections while they are actually needed and not of before.
-        $this->app->singleton('db.factory', function ($app) {
-            return new ConnectionFactory($app);
-        });
+        $this->app->singleton(
+            'db.factory', function ($app) {
+                return new ConnectionFactory($app);
+            }
+        );
 
         // The database manager is used to resolve various connections, since multiple
         // connections might be managed. It also implements the connection resolver
         // interface which may be used by other components requiring connections.
-        $this->app->singleton('db', function ($app) {
-            return new DatabaseManager($app, $app['db.factory']);
-        });
-
-        $this->app->bind('db.connection', function ($app) {
-            return $app['db']->connection();
-        });
+        $this->app->singleton(
+            'db', function ($app) {
+                return new DatabaseManager($app, $app['db.factory']);
+            }
+        );
+
+        $this->app->bind(
+            'db.connection', function ($app) {
+                return $app['db']->connection();
+            }
+        );
     }
 
     /**
@@ -63,15 +69,19 @@
      */
     protected function registerEloquentFactory()
     {
-        $this->app->singleton(FakerGenerator::class, function () {
-            return FakerFactory::create();
-        });
-
-        $this->app->singleton(EloquentFactory::class, function ($app) {
-            $faker = $app->make(FakerGenerator::class);
-
-            return EloquentFactory::construct($faker, database_path('factories'));
-        });
+        $this->app->singleton(
+            FakerGenerator::class, function () {
+                return FakerFactory::create();
+            }
+        );
+
+        $this->app->singleton(
+            EloquentFactory::class, function ($app) {
+                $faker = $app->make(FakerGenerator::class);
+
+                return EloquentFactory::construct($faker, database_path('factories'));
+            }
+        );
     }
 
     /**
@@ -81,8 +91,10 @@
      */
     protected function registerQueueableEntityResolver()
     {
-        $this->app->singleton('Illuminate\Contracts\Queue\EntityResolver', function () {
-            return new QueueEntityResolver;
-        });
+        $this->app->singleton(
+            'Illuminate\Contracts\Queue\EntityResolver', function () {
+                return new QueueEntityResolver;
+            }
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Database/DetectsLostConnections.php
+++ PHP_CodeSniffer
@@ -10,14 +10,15 @@
     /**
      * Determine if the given exception was caused by a lost connection.
      *
-     * @param  \Exception  $e
+     * @param  \Exception $e
      * @return bool
      */
     protected function causedByLostConnection(Exception $e)
     {
         $message = $e->getMessage();
 
-        return Str::contains($message, [
+        return Str::contains(
+            $message, [
             'server has gone away',
             'no connection to the server',
             'Lost connection',
@@ -29,6 +30,7 @@
             'Deadlock found when trying to get lock',
             'Error writing data to the connection',
             'Resource deadlock avoided',
-        ]);
+            ]
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Builder.php
+++ PHP_CodeSniffer
@@ -75,7 +75,7 @@
     /**
      * Create a new Eloquent query builder instance.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return void
      */
     public function __construct(QueryBuilder $query)
@@ -86,8 +86,8 @@
     /**
      * Register a new global scope.
      *
-     * @param  string  $identifier
-     * @param  \Illuminate\Database\Eloquent\Scope|\Closure  $scope
+     * @param  string                                       $identifier
+     * @param  \Illuminate\Database\Eloquent\Scope|\Closure $scope
      * @return $this
      */
     public function withGlobalScope($identifier, $scope)
@@ -104,7 +104,7 @@
     /**
      * Remove a registered global scope.
      *
-     * @param  \Illuminate\Database\Eloquent\Scope|string  $scope
+     * @param  \Illuminate\Database\Eloquent\Scope|string $scope
      * @return $this
      */
     public function withoutGlobalScope($scope)
@@ -123,7 +123,7 @@
     /**
      * Remove all or passed registered global scopes.
      *
-     * @param  array|null  $scopes
+     * @param  array|null $scopes
      * @return $this
      */
     public function withoutGlobalScopes(array $scopes = null)
@@ -152,8 +152,8 @@
     /**
      * Find a model by its primary key.
      *
-     * @param  mixed  $id
-     * @param  array  $columns
+     * @param  mixed $id
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|static[]|static|null
      */
     public function find($id, $columns = ['*'])
@@ -170,8 +170,8 @@
     /**
      * Find multiple models by their primary keys.
      *
-     * @param  array  $ids
-     * @param  array  $columns
+     * @param  array $ids
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Collection
      */
     public function findMany($ids, $columns = ['*'])
@@ -188,8 +188,8 @@
     /**
      * Find a model by its primary key or throw an exception.
      *
-     * @param  mixed  $id
-     * @param  array  $columns
+     * @param  mixed $id
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection
      *
      * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
@@ -212,8 +212,8 @@
     /**
      * Find a model by its primary key or return fresh model instance.
      *
-     * @param  mixed  $id
-     * @param  array  $columns
+     * @param  mixed $id
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function findOrNew($id, $columns = ['*'])
@@ -228,7 +228,7 @@
     /**
      * Get the first record matching the attributes or instantiate it.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function firstOrNew(array $attributes)
@@ -243,7 +243,7 @@
     /**
      * Get the first record matching the attributes or create it.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function firstOrCreate(array $attributes)
@@ -262,8 +262,8 @@
     /**
      * Create or update a record matching the attributes, and fill it with values.
      *
-     * @param  array  $attributes
-     * @param  array  $values
+     * @param  array $attributes
+     * @param  array $values
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function updateOrCreate(array $attributes, array $values = [])
@@ -278,7 +278,7 @@
     /**
      * Execute the query and get the first result.
      *
-     * @param  array  $columns
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Model|static|null
      */
     public function first($columns = ['*'])
@@ -289,7 +289,7 @@
     /**
      * Execute the query and get the first result or throw an exception.
      *
-     * @param  array  $columns
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Model|static
      *
      * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
@@ -306,7 +306,7 @@
     /**
      * Execute the query as a "select" statement.
      *
-     * @param  array  $columns
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Collection|static[]
      */
     public function get($columns = ['*'])
@@ -328,7 +328,7 @@
     /**
      * Get a single column's value from the first result of a query.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return mixed
      */
     public function value($column)
@@ -357,8 +357,8 @@
     /**
      * Chunk the results of the query.
      *
-     * @param  int  $count
-     * @param  callable  $callback
+     * @param  int      $count
+     * @param  callable $callback
      * @return bool
      */
     public function chunk($count, callable $callback)
@@ -384,9 +384,9 @@
     /**
      * Chunk the results of a query by comparing numeric IDs.
      *
-     * @param  int  $count
-     * @param  callable  $callback
-     * @param  string  $column
+     * @param  int      $count
+     * @param  callable $callback
+     * @param  string   $column
      * @return bool
      */
     public function chunkById($count, callable $callback, $column = 'id')
@@ -411,8 +411,8 @@
     /**
      * Execute a callback over each item while chunking.
      *
-     * @param  callable  $callback
-     * @param  int  $count
+     * @param  callable $callback
+     * @param  int      $count
      * @return bool
      */
     public function each(callable $callback, $count = 1000)
@@ -421,20 +421,22 @@
             $this->orderBy($this->model->getQualifiedKeyName(), 'asc');
         }
 
-        return $this->chunk($count, function ($results) use ($callback) {
-            foreach ($results as $key => $value) {
-                if ($callback($value, $key) === false) {
-                    return false;
+        return $this->chunk(
+            $count, function ($results) use ($callback) {
+                foreach ($results as $key => $value) {
+                    if ($callback($value, $key) === false) {
+                        return false;
+                    }
                 }
             }
-        });
+        );
     }
 
     /**
      * Get an array with the values of a given column.
      *
-     * @param  string  $column
-     * @param  string|null  $key
+     * @param  string      $column
+     * @param  string|null $key
      * @return \Illuminate\Support\Collection
      */
     public function pluck($column, $key = null)
@@ -458,8 +460,8 @@
     /**
      * Alias for the "pluck" method.
      *
-     * @param  string  $column
-     * @param  string  $key
+     * @param  string $column
+     * @param  string $key
      * @return \Illuminate\Support\Collection
      *
      * @deprecated since version 5.2. Use the "pluck" method directly.
@@ -472,10 +474,10 @@
     /**
      * Paginate the given query.
      *
-     * @param  int  $perPage
-     * @param  array  $columns
-     * @param  string  $pageName
-     * @param  int|null  $page
+     * @param  int      $perPage
+     * @param  array    $columns
+     * @param  string   $pageName
+     * @param  int|null $page
      * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator
      *
      * @throws \InvalidArgumentException
@@ -492,19 +494,21 @@
 
         $results = $total ? $this->forPage($page, $perPage)->get($columns) : [];
 
-        return new LengthAwarePaginator($results, $total, $perPage, $page, [
+        return new LengthAwarePaginator(
+            $results, $total, $perPage, $page, [
             'path' => Paginator::resolveCurrentPath(),
             'pageName' => $pageName,
-        ]);
+            ]
+        );
     }
 
     /**
      * Paginate the given query into a simple paginator.
      *
-     * @param  int  $perPage
-     * @param  array  $columns
-     * @param  string  $pageName
-     * @param  int|null  $page
+     * @param  int      $perPage
+     * @param  array    $columns
+     * @param  string   $pageName
+     * @param  int|null $page
      * @return \Illuminate\Contracts\Pagination\Paginator
      */
     public function simplePaginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)
@@ -515,16 +519,18 @@
 
         $this->skip(($page - 1) * $perPage)->take($perPage + 1);
 
-        return new Paginator($this->get($columns), $perPage, $page, [
+        return new Paginator(
+            $this->get($columns), $perPage, $page, [
             'path' => Paginator::resolveCurrentPath(),
             'pageName' => $pageName,
-        ]);
+            ]
+        );
     }
 
     /**
      * Update a record in the database.
      *
-     * @param  array  $values
+     * @param  array $values
      * @return int
      */
     public function update(array $values)
@@ -535,8 +541,8 @@
     /**
      * Increment a column's value by a given amount.
      *
-     * @param  string  $column
-     * @param  int  $amount
+     * @param  string $column
+     * @param  int    $amount
      * @param  array  $extra
      * @return int
      */
@@ -550,8 +556,8 @@
     /**
      * Decrement a column's value by a given amount.
      *
-     * @param  string  $column
-     * @param  int  $amount
+     * @param  string $column
+     * @param  int    $amount
      * @param  array  $extra
      * @return int
      */
@@ -565,7 +571,7 @@
     /**
      * Add the "updated at" column to an array of values.
      *
-     * @param  array  $values
+     * @param  array $values
      * @return array
      */
     protected function addUpdatedAtColumn(array $values)
@@ -606,7 +612,7 @@
     /**
      * Register a replacement for the default delete function.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return void
      */
     public function onDelete(Closure $callback)
@@ -617,7 +623,7 @@
     /**
      * Get the hydrated models without eager loading.
      *
-     * @param  array  $columns
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Model[]
      */
     public function getModels($columns = ['*'])
@@ -632,7 +638,7 @@
     /**
      * Eager load the relationships for the models.
      *
-     * @param  array  $models
+     * @param  array $models
      * @return array
      */
     public function eagerLoadRelations(array $models)
@@ -652,9 +658,9 @@
     /**
      * Eagerly load the relationship on a set of models.
      *
-     * @param  array  $models
-     * @param  string  $name
-     * @param  \Closure  $constraints
+     * @param  array    $models
+     * @param  string   $name
+     * @param  \Closure $constraints
      * @return array
      */
     protected function loadRelation(array $models, $name, Closure $constraints)
@@ -681,7 +687,7 @@
     /**
      * Get the relation instance for the given relation name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Database\Eloquent\Relations\Relation
      */
     public function getRelation($name)
@@ -689,9 +695,11 @@
         // We want to run a relationship query without any constrains so that we will
         // not have to remove these where clauses manually which gets really hacky
         // and is error prone while we remove the developer's own where clauses.
-        $relation = Relation::noConstraints(function () use ($name) {
-            return $this->getModel()->$name();
-        });
+        $relation = Relation::noConstraints(
+            function () use ($name) {
+                return $this->getModel()->$name();
+            }
+        );
 
         $nested = $this->nestedRelations($name);
 
@@ -708,7 +716,7 @@
     /**
      * Get the deeply nested relations for a given top-level relation.
      *
-     * @param  string  $relation
+     * @param  string $relation
      * @return array
      */
     protected function nestedRelations($relation)
@@ -730,8 +738,8 @@
     /**
      * Determine if the relationship is nested.
      *
-     * @param  string  $name
-     * @param  string  $relation
+     * @param  string $name
+     * @param  string $relation
      * @return bool
      */
     protected function isNested($name, $relation)
@@ -744,8 +752,8 @@
     /**
      * Apply the callback's query changes if the given "value" is true.
      *
-     * @param  bool  $value
-     * @param  \Closure  $callback
+     * @param  bool     $value
+     * @param  \Closure $callback
      * @return $this
      */
     public function when($value, $callback)
@@ -762,10 +770,10 @@
     /**
      * Add a basic where clause to the query.
      *
-     * @param  string  $column
-     * @param  string  $operator
-     * @param  mixed   $value
-     * @param  string  $boolean
+     * @param  string $column
+     * @param  string $operator
+     * @param  mixed  $value
+     * @param  string $boolean
      * @return $this
      */
     public function where($column, $operator = null, $value = null, $boolean = 'and')
@@ -786,9 +794,9 @@
     /**
      * Add an "or where" clause to the query.
      *
-     * @param  string  $column
-     * @param  string  $operator
-     * @param  mixed   $value
+     * @param  string $column
+     * @param  string $operator
+     * @param  mixed  $value
      * @return \Illuminate\Database\Eloquent\Builder|static
      */
     public function orWhere($column, $operator = null, $value = null)
@@ -799,11 +807,11 @@
     /**
      * Add a relationship count / exists condition to the query.
      *
-     * @param  string  $relation
-     * @param  string  $operator
-     * @param  int     $count
-     * @param  string  $boolean
-     * @param  \Closure|null  $callback
+     * @param  string        $relation
+     * @param  string        $operator
+     * @param  int           $count
+     * @param  string        $boolean
+     * @param  \Closure|null $callback
      * @return \Illuminate\Database\Eloquent\Builder|static
      */
     public function has($relation, $operator = '>=', $count = 1, $boolean = 'and', Closure $callback = null)
@@ -834,11 +842,11 @@
     /**
      * Add nested relationship count / exists conditions to the query.
      *
-     * @param  string  $relations
-     * @param  string  $operator
-     * @param  int     $count
-     * @param  string  $boolean
-     * @param  \Closure|null  $callback
+     * @param  string        $relations
+     * @param  string        $operator
+     * @param  int           $count
+     * @param  string        $boolean
+     * @param  \Closure|null $callback
      * @return \Illuminate\Database\Eloquent\Builder|static
      */
     protected function hasNested($relations, $operator = '>=', $count = 1, $boolean = 'and', $callback = null)
@@ -862,9 +870,9 @@
     /**
      * Add a relationship count / exists condition to the query.
      *
-     * @param  string  $relation
-     * @param  string  $boolean
-     * @param  \Closure|null  $callback
+     * @param  string        $relation
+     * @param  string        $boolean
+     * @param  \Closure|null $callback
      * @return \Illuminate\Database\Eloquent\Builder|static
      */
     public function doesntHave($relation, $boolean = 'and', Closure $callback = null)
@@ -875,10 +883,10 @@
     /**
      * Add a relationship count / exists condition to the query with where clauses.
      *
-     * @param  string    $relation
-     * @param  \Closure  $callback
-     * @param  string    $operator
-     * @param  int       $count
+     * @param  string   $relation
+     * @param  \Closure $callback
+     * @param  string   $operator
+     * @param  int      $count
      * @return \Illuminate\Database\Eloquent\Builder|static
      */
     public function whereHas($relation, Closure $callback, $operator = '>=', $count = 1)
@@ -889,8 +897,8 @@
     /**
      * Add a relationship count / exists condition to the query with where clauses.
      *
-     * @param  string  $relation
-     * @param  \Closure|null  $callback
+     * @param  string        $relation
+     * @param  \Closure|null $callback
      * @return \Illuminate\Database\Eloquent\Builder|static
      */
     public function whereDoesntHave($relation, Closure $callback = null)
@@ -901,9 +909,9 @@
     /**
      * Add a relationship count / exists condition to the query with an "or".
      *
-     * @param  string  $relation
-     * @param  string  $operator
-     * @param  int     $count
+     * @param  string $relation
+     * @param  string $operator
+     * @param  int    $count
      * @return \Illuminate\Database\Eloquent\Builder|static
      */
     public function orHas($relation, $operator = '>=', $count = 1)
@@ -914,10 +922,10 @@
     /**
      * Add a relationship count / exists condition to the query with where clauses and an "or".
      *
-     * @param  string    $relation
-     * @param  \Closure  $callback
-     * @param  string    $operator
-     * @param  int       $count
+     * @param  string   $relation
+     * @param  \Closure $callback
+     * @param  string   $operator
+     * @param  int      $count
      * @return \Illuminate\Database\Eloquent\Builder|static
      */
     public function orWhereHas($relation, Closure $callback, $operator = '>=', $count = 1)
@@ -928,11 +936,11 @@
     /**
      * Add the "has" condition where clause to the query.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $hasQuery
-     * @param  \Illuminate\Database\Eloquent\Relations\Relation  $relation
-     * @param  string  $operator
-     * @param  int  $count
-     * @param  string  $boolean
+     * @param  \Illuminate\Database\Eloquent\Builder            $hasQuery
+     * @param  \Illuminate\Database\Eloquent\Relations\Relation $relation
+     * @param  string                                           $operator
+     * @param  int                                              $count
+     * @param  string                                           $boolean
      * @return \Illuminate\Database\Eloquent\Builder|static
      */
     protected function addHasWhere(Builder $hasQuery, Relation $relation, $operator, $count, $boolean)
@@ -951,8 +959,8 @@
     /**
      * Check if we can run an "exists" query to optimize performance.
      *
-     * @param  string  $operator
-     * @param  int  $count
+     * @param  string $operator
+     * @param  int    $count
      * @return bool
      */
     protected function shouldRunExistsQuery($operator, $count)
@@ -964,9 +972,9 @@
      * Add a sub query count clause to the query.
      *
      * @param  \Illuminate\Database\Query\Builder $query
-     * @param  string  $operator
-     * @param  int  $count
-     * @param  string  $boolean
+     * @param  string                             $operator
+     * @param  int                                $count
+     * @param  string                             $boolean
      * @return $this
      */
     protected function whereCountQuery(QueryBuilder $query, $operator = '>=', $count = 1, $boolean = 'and')
@@ -983,7 +991,7 @@
     /**
      * Merge the constraints from a relation query to the current query.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $relation
+     * @param  \Illuminate\Database\Eloquent\Builder $relation
      * @return \Illuminate\Database\Eloquent\Builder|static
      */
     public function mergeModelDefinedRelationConstraints(Builder $relation)
@@ -1003,20 +1011,22 @@
     /**
      * Get the "has relation" base query instance.
      *
-     * @param  string  $relation
+     * @param  string $relation
      * @return \Illuminate\Database\Eloquent\Relations\Relation
      */
     protected function getHasRelationQuery($relation)
     {
-        return Relation::noConstraints(function () use ($relation) {
-            return $this->getModel()->$relation();
-        });
+        return Relation::noConstraints(
+            function () use ($relation) {
+                return $this->getModel()->$relation();
+            }
+        );
     }
 
     /**
      * Set the relationships that should be eager loaded.
      *
-     * @param  mixed  $relations
+     * @param  mixed $relations
      * @return $this
      */
     public function with($relations)
@@ -1035,7 +1045,7 @@
     /**
      * Prevent the specified relations from being eager loaded.
      *
-     * @param  mixed  $relations
+     * @param  mixed $relations
      * @return $this
      */
     public function without($relations)
@@ -1052,7 +1062,7 @@
     /**
      * Add subselect queries to count the relations.
      *
-     * @param  mixed  $relations
+     * @param  mixed $relations
      * @return $this
      */
     public function withCount($relations)
@@ -1086,7 +1096,7 @@
     /**
      * Parse a list of relations into individuals.
      *
-     * @param  array  $relations
+     * @param  array $relations
      * @return array
      */
     protected function parseWithRelations(array $relations)
@@ -1119,8 +1129,8 @@
     /**
      * Parse the nested relationships in a relation.
      *
-     * @param  string  $name
-     * @param  array   $results
+     * @param  string $name
+     * @param  array  $results
      * @return array
      */
     protected function parseNestedWith($name, $results)
@@ -1146,7 +1156,7 @@
     /**
      * Add the given scopes to the current builder instance.
      *
-     * @param  array  $scopes
+     * @param  array $scopes
      * @return mixed
      */
     public function scopes(array $scopes)
@@ -1170,7 +1180,7 @@
      * Apply the given scope on the current builder instance.
      *
      * @param  callable $scope
-     * @param  array $parameters
+     * @param  array    $parameters
      * @return mixed
      */
     protected function callScope(callable $scope, $parameters = [])
@@ -1207,13 +1217,15 @@
         $builder = clone $this;
 
         foreach ($this->scopes as $scope) {
-            $builder->callScope(function (Builder $builder) use ($scope) {
-                if ($scope instanceof Closure) {
-                    $scope($builder);
-                } elseif ($scope instanceof Scope) {
-                    $scope->apply($builder, $this->getModel());
+            $builder->callScope(
+                function (Builder $builder) use ($scope) {
+                    if ($scope instanceof Closure) {
+                        $scope($builder);
+                    } elseif ($scope instanceof Scope) {
+                        $scope->apply($builder, $this->getModel());
+                    }
                 }
-            });
+            );
         }
 
         return $builder;
@@ -1222,8 +1234,8 @@
     /**
      * Determine if the scope added after the given offset should be nested.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  int  $originalWhereCount
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  int                                $originalWhereCount
      * @return bool
      */
     protected function shouldNestWheresForScope(QueryBuilder $query, $originalWhereCount)
@@ -1234,8 +1246,8 @@
     /**
      * Nest where conditions by slicing them at the given where count.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  int  $originalWhereCount
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  int                                $originalWhereCount
      * @return void
      */
     protected function nestWheresForScope(QueryBuilder $query, $originalWhereCount)
@@ -1259,10 +1271,10 @@
     /**
      * Slice where conditions at the given offset and add them to the query as a nested condition.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $wheres
-     * @param  int  $offset
-     * @param  int  $length
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $wheres
+     * @param  int                                $offset
+     * @param  int                                $length
      * @return void
      */
     protected function addNestedWhereSlice(QueryBuilder $query, $wheres, $offset, $length = null)
@@ -1284,7 +1296,7 @@
     /**
      * Create a where array with nested where conditions.
      *
-     * @param  array  $whereSlice
+     * @param  array $whereSlice
      * @return array
      */
     protected function nestWhereSlice($whereSlice)
@@ -1319,7 +1331,7 @@
     /**
      * Set the underlying query builder instance.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return $this
      */
     public function setQuery($query)
@@ -1342,7 +1354,7 @@
     /**
      * Set the relationships being eagerly loaded.
      *
-     * @param  array  $eagerLoad
+     * @param  array $eagerLoad
      * @return $this
      */
     public function setEagerLoads(array $eagerLoad)
@@ -1365,7 +1377,7 @@
     /**
      * Set a model instance for the model being queried.
      *
-     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  \Illuminate\Database\Eloquent\Model $model
      * @return $this
      */
     public function setModel(Model $model)
@@ -1380,8 +1392,8 @@
     /**
      * Extend the builder with a given callback.
      *
-     * @param  string    $name
-     * @param  \Closure  $callback
+     * @param  string   $name
+     * @param  \Closure $callback
      * @return void
      */
     public function macro($name, Closure $callback)
@@ -1392,7 +1404,7 @@
     /**
      * Get the given macro by name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Closure
      */
     public function getMacro($name)
@@ -1403,8 +1415,8 @@
     /**
      * Dynamically handle calls into the query instance.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      */
     public function __call($method, $parameters)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Collection.php
+++ PHP_CodeSniffer
@@ -12,8 +12,8 @@
     /**
      * Find a model in the collection by key.
      *
-     * @param  mixed  $key
-     * @param  mixed  $default
+     * @param  mixed $key
+     * @param  mixed $default
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function find($key, $default = null)
@@ -22,15 +22,17 @@
             $key = $key->getKey();
         }
 
-        return Arr::first($this->items, function ($itemKey, $model) use ($key) {
-            return $model->getKey() == $key;
-        }, $default);
+        return Arr::first(
+            $this->items, function ($itemKey, $model) use ($key) {
+                return $model->getKey() == $key;
+            }, $default
+        );
     }
 
     /**
      * Load a set of relationships onto the collection.
      *
-     * @param  mixed  $relations
+     * @param  mixed $relations
      * @return $this
      */
     public function load($relations)
@@ -51,7 +53,7 @@
     /**
      * Add an item to the collection.
      *
-     * @param  mixed  $item
+     * @param  mixed $item
      * @return $this
      */
     public function add($item)
@@ -64,8 +66,8 @@
     /**
      * Determine if a key exists in the collection.
      *
-     * @param  mixed  $key
-     * @param  mixed  $value
+     * @param  mixed $key
+     * @param  mixed $value
      * @return bool
      */
     public function contains($key, $value = null)
@@ -80,9 +82,11 @@
 
         $key = $key instanceof Model ? $key->getKey() : $key;
 
-        return parent::contains(function ($k, $m) use ($key) {
-            return $m->getKey() == $key;
-        });
+        return parent::contains(
+            function ($k, $m) use ($key) {
+                return $m->getKey() == $key;
+            }
+        );
     }
 
     /**
@@ -92,15 +96,17 @@
      */
     public function modelKeys()
     {
-        return array_map(function ($m) {
-            return $m->getKey();
-        }, $this->items);
+        return array_map(
+            function ($m) {
+                return $m->getKey();
+            }, $this->items
+        );
     }
 
     /**
      * Merge the collection with the given items.
      *
-     * @param  \ArrayAccess|array  $items
+     * @param  \ArrayAccess|array $items
      * @return static
      */
     public function merge($items)
@@ -117,7 +123,7 @@
     /**
      * Diff the collection with the given items.
      *
-     * @param  \ArrayAccess|array  $items
+     * @param  \ArrayAccess|array $items
      * @return static
      */
     public function diff($items)
@@ -138,7 +144,7 @@
     /**
      * Intersect the collection with the given items.
      *
-     * @param  \ArrayAccess|array  $items
+     * @param  \ArrayAccess|array $items
      * @return static
      */
     public function intersect($items)
@@ -159,7 +165,7 @@
     /**
      * Return only unique items from the collection.
      *
-     * @param  string|callable|null  $key
+     * @param  string|callable|null $key
      * @return static
      */
     public function unique($key = null)
@@ -174,7 +180,7 @@
     /**
      * Returns only the models from the collection with the specified keys.
      *
-     * @param  mixed  $keys
+     * @param  mixed $keys
      * @return static
      */
     public function only($keys)
@@ -187,7 +193,7 @@
     /**
      * Returns all models in the collection except the models with specified keys.
      *
-     * @param  mixed  $keys
+     * @param  mixed $keys
      * @return static
      */
     public function except($keys)
@@ -200,33 +206,37 @@
     /**
      * Make the given, typically visible, attributes hidden across the entire collection.
      *
-     * @param  array|string  $attributes
+     * @param  array|string $attributes
      * @return $this
      */
     public function makeHidden($attributes)
     {
-        return $this->each(function ($model) use ($attributes) {
-            $model->addHidden($attributes);
-        });
+        return $this->each(
+            function ($model) use ($attributes) {
+                $model->addHidden($attributes);
+            }
+        );
     }
 
     /**
      * Make the given, typically hidden, attributes visible across the entire collection.
      *
-     * @param  array|string  $attributes
+     * @param  array|string $attributes
      * @return $this
      */
     public function makeVisible($attributes)
     {
-        return $this->each(function ($model) use ($attributes) {
-            $model->makeVisible($attributes);
-        });
+        return $this->each(
+            function ($model) use ($attributes) {
+                $model->makeVisible($attributes);
+            }
+        );
     }
 
     /**
      * Make the given, typically hidden, attributes visible across the entire collection.
      *
-     * @param  array|string  $attributes
+     * @param  array|string $attributes
      * @return $this
      *
      * @deprecated since version 5.2. Use the "makeVisible" method directly.
@@ -239,7 +249,7 @@
     /**
      * Get a dictionary keyed by primary keys.
      *
-     * @param  \ArrayAccess|array|null  $items
+     * @param  \ArrayAccess|array|null $items
      * @return array
      */
     public function getDictionary($items = null)
@@ -262,8 +272,8 @@
     /**
      * Get an array with the values of a given key.
      *
-     * @param  string  $value
-     * @param  string|null  $key
+     * @param  string      $value
+     * @param  string|null $key
      * @return \Illuminate\Support\Collection
      */
     public function pluck($value, $key = null)
@@ -305,7 +315,7 @@
     /**
      * Get a flattened array of the items in the collection.
      *
-     * @param  int  $depth
+     * @param  int $depth
      * @return \Illuminate\Support\Collection
      */
     public function flatten($depth = INF)
@@ -336,11 +346,13 @@
 
         $class = get_class($this->first());
 
-        $this->each(function ($model) use ($class) {
-            if (get_class($model) !== $class) {
-                throw new LogicException('Queueing collections with multiple model types is not supported.');
+        $this->each(
+            function ($model) use ($class) {
+                if (get_class($model) !== $class) {
+                    throw new LogicException('Queueing collections with multiple model types is not supported.');
+                }
             }
-        });
+        );
 
         return $class;
     }

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Factory.php
+++ PHP_CodeSniffer
@@ -18,7 +18,7 @@
     /**
      * Create a new factory instance.
      *
-     * @param  \Faker\Generator  $faker
+     * @param  \Faker\Generator $faker
      * @return void
      */
     public function __construct(Faker $faker)
@@ -36,8 +36,8 @@
     /**
      * Create a new factory container.
      *
-     * @param  \Faker\Generator  $faker
-     * @param  string|null  $pathToFactories
+     * @param  \Faker\Generator $faker
+     * @param  string|null      $pathToFactories
      * @return static
      */
     public static function construct(Faker $faker, $pathToFactories = null)
@@ -50,9 +50,9 @@
     /**
      * Define a class with a given short-name.
      *
-     * @param  string  $class
-     * @param  string  $name
-     * @param  callable  $attributes
+     * @param  string   $class
+     * @param  string   $name
+     * @param  callable $attributes
      * @return void
      */
     public function defineAs($class, $name, callable $attributes)
@@ -63,9 +63,9 @@
     /**
      * Define a class with a given set of attributes.
      *
-     * @param  string  $class
-     * @param  callable  $attributes
-     * @param  string  $name
+     * @param  string   $class
+     * @param  callable $attributes
+     * @param  string   $name
      * @return void
      */
     public function define($class, callable $attributes, $name = 'default')
@@ -76,7 +76,7 @@
     /**
      * Create an instance of the given model and persist it to the database.
      *
-     * @param  string  $class
+     * @param  string $class
      * @param  array  $attributes
      * @return mixed
      */
@@ -88,8 +88,8 @@
     /**
      * Create an instance of the given model and type and persist it to the database.
      *
-     * @param  string  $class
-     * @param  string  $name
+     * @param  string $class
+     * @param  string $name
      * @param  array  $attributes
      * @return mixed
      */
@@ -101,7 +101,7 @@
     /**
      * Load factories from path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return $this
      */
     public function load($path)
@@ -110,7 +110,7 @@
 
         if (is_dir($path)) {
             foreach (Finder::create()->files()->in($path) as $file) {
-                require $file->getRealPath();
+                include $file->getRealPath();
             }
         }
 
@@ -120,7 +120,7 @@
     /**
      * Create an instance of the given model.
      *
-     * @param  string  $class
+     * @param  string $class
      * @param  array  $attributes
      * @return mixed
      */
@@ -132,8 +132,8 @@
     /**
      * Create an instance of the given model and type.
      *
-     * @param  string  $class
-     * @param  string  $name
+     * @param  string $class
+     * @param  string $name
      * @param  array  $attributes
      * @return mixed
      */
@@ -145,8 +145,8 @@
     /**
      * Get the raw attribute array for a given named model.
      *
-     * @param  string  $class
-     * @param  string  $name
+     * @param  string $class
+     * @param  string $name
      * @param  array  $attributes
      * @return array
      */
@@ -158,9 +158,9 @@
     /**
      * Get the raw attribute array for a given model.
      *
-     * @param  string  $class
+     * @param  string $class
      * @param  array  $attributes
-     * @param  string  $name
+     * @param  string $name
      * @return array
      */
     public function raw($class, array $attributes = [], $name = 'default')
@@ -173,8 +173,8 @@
     /**
      * Create a builder for the given model.
      *
-     * @param  string  $class
-     * @param  string  $name
+     * @param  string $class
+     * @param  string $name
      * @return \Illuminate\Database\Eloquent\FactoryBuilder
      */
     public function of($class, $name = 'default')
@@ -185,7 +185,7 @@
     /**
      * Determine if the given offset exists.
      *
-     * @param  string  $offset
+     * @param  string $offset
      * @return bool
      */
     public function offsetExists($offset)
@@ -196,7 +196,7 @@
     /**
      * Get the value of the given offset.
      *
-     * @param  string  $offset
+     * @param  string $offset
      * @return mixed
      */
     public function offsetGet($offset)
@@ -207,8 +207,8 @@
     /**
      * Set the given offset to the given value.
      *
-     * @param  string  $offset
-     * @param  callable  $value
+     * @param  string   $offset
+     * @param  callable $value
      * @return void
      */
     public function offsetSet($offset, $value)
@@ -219,7 +219,7 @@
     /**
      * Unset the value at the given offset.
      *
-     * @param  string  $offset
+     * @param  string $offset
      * @return void
      */
     public function offsetUnset($offset)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/FactoryBuilder.php
+++ PHP_CodeSniffer
@@ -46,10 +46,10 @@
     /**
      * Create an new builder instance.
      *
-     * @param  string  $class
-     * @param  string  $name
-     * @param  array  $definitions
-     * @param  \Faker\Generator  $faker
+     * @param  string           $class
+     * @param  string           $name
+     * @param  array            $definitions
+     * @param  \Faker\Generator $faker
      * @return void
      */
     public function __construct($class, $name, array $definitions, Faker $faker)
@@ -63,7 +63,7 @@
     /**
      * Set the amount of models you wish to create / make.
      *
-     * @param  int  $amount
+     * @param  int $amount
      * @return $this
      */
     public function times($amount)
@@ -76,7 +76,7 @@
     /**
      * Create a collection of models and persist them to the database.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return mixed
      */
     public function create(array $attributes = [])
@@ -97,7 +97,7 @@
     /**
      * Create a collection of models.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return mixed
      */
     public function make(array $attributes = [])
@@ -118,35 +118,37 @@
     /**
      * Make an instance of the model with the given attributes.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return \Illuminate\Database\Eloquent\Model
      *
      * @throws \InvalidArgumentException
      */
     protected function makeInstance(array $attributes = [])
     {
-        return Model::unguarded(function () use ($attributes) {
-            if (! isset($this->definitions[$this->class][$this->name])) {
-                throw new InvalidArgumentException("Unable to locate factory with name [{$this->name}] [{$this->class}].");
-            }
-
-            $definition = call_user_func(
-                $this->definitions[$this->class][$this->name],
-                $this->faker, $attributes
-            );
-
-            $evaluated = $this->callClosureAttributes(
-                array_merge($definition, $attributes)
-            );
+        return Model::unguarded(
+            function () use ($attributes) {
+                if (! isset($this->definitions[$this->class][$this->name])) {
+                    throw new InvalidArgumentException("Unable to locate factory with name [{$this->name}] [{$this->class}].");
+                }
+
+                $definition = call_user_func(
+                    $this->definitions[$this->class][$this->name],
+                    $this->faker, $attributes
+                );
+
+                $evaluated = $this->callClosureAttributes(
+                    array_merge($definition, $attributes)
+                );
 
-            return new $this->class($evaluated);
-        });
+                return new $this->class($evaluated);
+            }
+        );
     }
 
     /**
      * Evaluate any Closure attributes on the attribute array.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return array
      */
     protected function callClosureAttributes(array $attributes)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Model.php
+++ PHP_CodeSniffer
@@ -276,7 +276,7 @@
     /**
      * Create a new Eloquent model instance.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return void
      */
     public function __construct(array $attributes = [])
@@ -346,8 +346,8 @@
     /**
      * Register a new global scope on the model.
      *
-     * @param  \Illuminate\Database\Eloquent\Scope|\Closure|string  $scope
-     * @param  \Closure|null  $implementation
+     * @param  \Illuminate\Database\Eloquent\Scope|\Closure|string $scope
+     * @param  \Closure|null                                       $implementation
      * @return mixed
      *
      * @throws \InvalidArgumentException
@@ -372,7 +372,7 @@
     /**
      * Determine if a model has a global scope.
      *
-     * @param  \Illuminate\Database\Eloquent\Scope|string  $scope
+     * @param  \Illuminate\Database\Eloquent\Scope|string $scope
      * @return bool
      */
     public static function hasGlobalScope($scope)
@@ -383,7 +383,7 @@
     /**
      * Get a global scope registered with the model.
      *
-     * @param  \Illuminate\Database\Eloquent\Scope|string  $scope
+     * @param  \Illuminate\Database\Eloquent\Scope|string $scope
      * @return \Illuminate\Database\Eloquent\Scope|\Closure|null
      */
     public static function getGlobalScope($scope)
@@ -408,8 +408,8 @@
     /**
      * Register an observer with the Model.
      *
-     * @param  object|string  $class
-     * @param  int  $priority
+     * @param  object|string $class
+     * @param  int           $priority
      * @return void
      */
     public static function observe($class, $priority = 0)
@@ -431,7 +431,7 @@
     /**
      * Fill the model with an array of attributes.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return $this
      *
      * @throws \Illuminate\Database\Eloquent\MassAssignmentException
@@ -459,7 +459,7 @@
     /**
      * Fill the model with an array of attributes. Force mass assignment.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return $this
      */
     public function forceFill(array $attributes)
@@ -469,15 +469,17 @@
         // the model in a variable, which we will then use in the closure.
         $model = $this;
 
-        return static::unguarded(function () use ($model, $attributes) {
-            return $model->fill($attributes);
-        });
+        return static::unguarded(
+            function () use ($model, $attributes) {
+                return $model->fill($attributes);
+            }
+        );
     }
 
     /**
      * Get the fillable attributes of a given array.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return array
      */
     protected function fillableFromArray(array $attributes)
@@ -492,7 +494,7 @@
     /**
      * Create a new instance of the given model.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @param  bool  $exists
      * @return static
      */
@@ -511,8 +513,8 @@
     /**
      * Create a new model instance that is existing.
      *
-     * @param  array  $attributes
-     * @param  string|null  $connection
+     * @param  array       $attributes
+     * @param  string|null $connection
      * @return static
      */
     public function newFromBuilder($attributes = [], $connection = null)
@@ -529,17 +531,19 @@
     /**
      * Create a collection of models from plain arrays.
      *
-     * @param  array  $items
-     * @param  string|null  $connection
+     * @param  array       $items
+     * @param  string|null $connection
      * @return \Illuminate\Database\Eloquent\Collection
      */
     public static function hydrate(array $items, $connection = null)
     {
         $instance = (new static)->setConnection($connection);
 
-        $items = array_map(function ($item) use ($instance) {
-            return $instance->newFromBuilder($item);
-        }, $items);
+        $items = array_map(
+            function ($item) use ($instance) {
+                return $instance->newFromBuilder($item);
+            }, $items
+        );
 
         return $instance->newCollection($items);
     }
@@ -547,9 +551,9 @@
     /**
      * Create a collection of models from a raw query.
      *
-     * @param  string  $query
-     * @param  array  $bindings
-     * @param  string|null  $connection
+     * @param  string      $query
+     * @param  array       $bindings
+     * @param  string|null $connection
      * @return \Illuminate\Database\Eloquent\Collection
      */
     public static function hydrateRaw($query, $bindings = [], $connection = null)
@@ -564,7 +568,7 @@
     /**
      * Save a new model and return the instance.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return static
      */
     public static function create(array $attributes = [])
@@ -579,7 +583,7 @@
     /**
      * Save a new model and return the instance. Allow mass-assignment.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return static
      */
     public static function forceCreate(array $attributes)
@@ -589,9 +593,11 @@
         // the model in a variable, which we will then use in the closure.
         $model = new static;
 
-        return static::unguarded(function () use ($model, $attributes) {
-            return $model->create($attributes);
-        });
+        return static::unguarded(
+            function () use ($model, $attributes) {
+                return $model->create($attributes);
+            }
+        );
     }
 
     /**
@@ -607,7 +613,7 @@
     /**
      * Begin querying the model on a given connection.
      *
-     * @param  string|null  $connection
+     * @param  string|null $connection
      * @return \Illuminate\Database\Eloquent\Builder
      */
     public static function on($connection = null)
@@ -637,7 +643,7 @@
     /**
      * Get all of the models from the database.
      *
-     * @param  array|mixed  $columns
+     * @param  array|mixed $columns
      * @return \Illuminate\Database\Eloquent\Collection|static[]
      */
     public static function all($columns = ['*'])
@@ -652,7 +658,7 @@
     /**
      * Reload a fresh model instance from the database.
      *
-     * @param  array|string  $with
+     * @param  array|string $with
      * @return $this|null
      */
     public function fresh($with = [])
@@ -673,7 +679,7 @@
     /**
      * Eager load relations on the model.
      *
-     * @param  array|string  $relations
+     * @param  array|string $relations
      * @return $this
      */
     public function load($relations)
@@ -692,7 +698,7 @@
     /**
      * Begin querying a model with eager loading.
      *
-     * @param  array|string  $relations
+     * @param  array|string $relations
      * @return \Illuminate\Database\Eloquent\Builder|static
      */
     public static function with($relations)
@@ -709,7 +715,7 @@
     /**
      * Append attributes to query when building a query.
      *
-     * @param  array|string  $attributes
+     * @param  array|string $attributes
      * @return $this
      */
     public function append($attributes)
@@ -728,9 +734,9 @@
     /**
      * Define a one-to-one relationship.
      *
-     * @param  string  $related
-     * @param  string  $foreignKey
-     * @param  string  $localKey
+     * @param  string $related
+     * @param  string $foreignKey
+     * @param  string $localKey
      * @return \Illuminate\Database\Eloquent\Relations\HasOne
      */
     public function hasOne($related, $foreignKey = null, $localKey = null)
@@ -747,11 +753,11 @@
     /**
      * Define a polymorphic one-to-one relationship.
      *
-     * @param  string  $related
-     * @param  string  $name
-     * @param  string  $type
-     * @param  string  $id
-     * @param  string  $localKey
+     * @param  string $related
+     * @param  string $name
+     * @param  string $type
+     * @param  string $id
+     * @param  string $localKey
      * @return \Illuminate\Database\Eloquent\Relations\MorphOne
      */
     public function morphOne($related, $name, $type = null, $id = null, $localKey = null)
@@ -770,10 +776,10 @@
     /**
      * Define an inverse one-to-one or many relationship.
      *
-     * @param  string  $related
-     * @param  string  $foreignKey
-     * @param  string  $otherKey
-     * @param  string  $relation
+     * @param  string $related
+     * @param  string $foreignKey
+     * @param  string $otherKey
+     * @param  string $relation
      * @return \Illuminate\Database\Eloquent\Relations\BelongsTo
      */
     public function belongsTo($related, $foreignKey = null, $otherKey = null, $relation = null)
@@ -809,9 +815,9 @@
     /**
      * Define a polymorphic, inverse one-to-one or many relationship.
      *
-     * @param  string  $name
-     * @param  string  $type
-     * @param  string  $id
+     * @param  string $name
+     * @param  string $type
+     * @param  string $id
      * @return \Illuminate\Database\Eloquent\Relations\MorphTo
      */
     public function morphTo($name = null, $type = null, $id = null)
@@ -853,7 +859,7 @@
     /**
      * Retrieve the fully qualified class name from a slug.
      *
-     * @param  string  $class
+     * @param  string $class
      * @return string
      */
     public function getActualClassNameForMorph($class)
@@ -864,9 +870,9 @@
     /**
      * Define a one-to-many relationship.
      *
-     * @param  string  $related
-     * @param  string  $foreignKey
-     * @param  string  $localKey
+     * @param  string $related
+     * @param  string $foreignKey
+     * @param  string $localKey
      * @return \Illuminate\Database\Eloquent\Relations\HasMany
      */
     public function hasMany($related, $foreignKey = null, $localKey = null)
@@ -883,11 +889,11 @@
     /**
      * Define a has-many-through relationship.
      *
-     * @param  string  $related
-     * @param  string  $through
-     * @param  string|null  $firstKey
-     * @param  string|null  $secondKey
-     * @param  string|null  $localKey
+     * @param  string      $related
+     * @param  string      $through
+     * @param  string|null $firstKey
+     * @param  string|null $secondKey
+     * @param  string|null $localKey
      * @return \Illuminate\Database\Eloquent\Relations\HasManyThrough
      */
     public function hasManyThrough($related, $through, $firstKey = null, $secondKey = null, $localKey = null)
@@ -906,11 +912,11 @@
     /**
      * Define a polymorphic one-to-many relationship.
      *
-     * @param  string  $related
-     * @param  string  $name
-     * @param  string  $type
-     * @param  string  $id
-     * @param  string  $localKey
+     * @param  string $related
+     * @param  string $name
+     * @param  string $type
+     * @param  string $id
+     * @param  string $localKey
      * @return \Illuminate\Database\Eloquent\Relations\MorphMany
      */
     public function morphMany($related, $name, $type = null, $id = null, $localKey = null)
@@ -932,11 +938,11 @@
     /**
      * Define a many-to-many relationship.
      *
-     * @param  string  $related
-     * @param  string  $table
-     * @param  string  $foreignKey
-     * @param  string  $otherKey
-     * @param  string  $relation
+     * @param  string $related
+     * @param  string $table
+     * @param  string $foreignKey
+     * @param  string $otherKey
+     * @param  string $relation
      * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
      */
     public function belongsToMany($related, $table = null, $foreignKey = null, $otherKey = null, $relation = null)
@@ -975,12 +981,12 @@
     /**
      * Define a polymorphic many-to-many relationship.
      *
-     * @param  string  $related
-     * @param  string  $name
-     * @param  string  $table
-     * @param  string  $foreignKey
-     * @param  string  $otherKey
-     * @param  bool  $inverse
+     * @param  string $related
+     * @param  string $name
+     * @param  string $table
+     * @param  string $foreignKey
+     * @param  string $otherKey
+     * @param  bool   $inverse
      * @return \Illuminate\Database\Eloquent\Relations\MorphToMany
      */
     public function morphToMany($related, $name, $table = null, $foreignKey = null, $otherKey = null, $inverse = false)
@@ -1012,11 +1018,11 @@
     /**
      * Define a polymorphic, inverse many-to-many relationship.
      *
-     * @param  string  $related
-     * @param  string  $name
-     * @param  string  $table
-     * @param  string  $foreignKey
-     * @param  string  $otherKey
+     * @param  string $related
+     * @param  string $name
+     * @param  string $table
+     * @param  string $foreignKey
+     * @param  string $otherKey
      * @return \Illuminate\Database\Eloquent\Relations\MorphToMany
      */
     public function morphedByMany($related, $name, $table = null, $foreignKey = null, $otherKey = null)
@@ -1040,11 +1046,13 @@
     {
         $self = __FUNCTION__;
 
-        $caller = Arr::first(debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS), function ($key, $trace) use ($self) {
-            $caller = $trace['function'];
+        $caller = Arr::first(
+            debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS), function ($key, $trace) use ($self) {
+                $caller = $trace['function'];
 
-            return ! in_array($caller, Model::$manyMethods) && $caller != $self;
-        });
+                return ! in_array($caller, Model::$manyMethods) && $caller != $self;
+            }
+        );
 
         return ! is_null($caller) ? $caller['function'] : null;
     }
@@ -1052,7 +1060,7 @@
     /**
      * Get the joining table name for a many-to-many relation.
      *
-     * @param  string  $related
+     * @param  string $related
      * @return string
      */
     public function joiningTable($related)
@@ -1077,7 +1085,7 @@
     /**
      * Destroy the models for the given IDs.
      *
-     * @param  array|int  $ids
+     * @param  array|int $ids
      * @return int
      */
     public static function destroy($ids)
@@ -1166,8 +1174,8 @@
     /**
      * Register a saving model event with the dispatcher.
      *
-     * @param  \Closure|string  $callback
-     * @param  int  $priority
+     * @param  \Closure|string $callback
+     * @param  int             $priority
      * @return void
      */
     public static function saving($callback, $priority = 0)
@@ -1178,8 +1186,8 @@
     /**
      * Register a saved model event with the dispatcher.
      *
-     * @param  \Closure|string  $callback
-     * @param  int  $priority
+     * @param  \Closure|string $callback
+     * @param  int             $priority
      * @return void
      */
     public static function saved($callback, $priority = 0)
@@ -1190,8 +1198,8 @@
     /**
      * Register an updating model event with the dispatcher.
      *
-     * @param  \Closure|string  $callback
-     * @param  int  $priority
+     * @param  \Closure|string $callback
+     * @param  int             $priority
      * @return void
      */
     public static function updating($callback, $priority = 0)
@@ -1202,8 +1210,8 @@
     /**
      * Register an updated model event with the dispatcher.
      *
-     * @param  \Closure|string  $callback
-     * @param  int  $priority
+     * @param  \Closure|string $callback
+     * @param  int             $priority
      * @return void
      */
     public static function updated($callback, $priority = 0)
@@ -1214,8 +1222,8 @@
     /**
      * Register a creating model event with the dispatcher.
      *
-     * @param  \Closure|string  $callback
-     * @param  int  $priority
+     * @param  \Closure|string $callback
+     * @param  int             $priority
      * @return void
      */
     public static function creating($callback, $priority = 0)
@@ -1226,8 +1234,8 @@
     /**
      * Register a created model event with the dispatcher.
      *
-     * @param  \Closure|string  $callback
-     * @param  int  $priority
+     * @param  \Closure|string $callback
+     * @param  int             $priority
      * @return void
      */
     public static function created($callback, $priority = 0)
@@ -1238,8 +1246,8 @@
     /**
      * Register a deleting model event with the dispatcher.
      *
-     * @param  \Closure|string  $callback
-     * @param  int  $priority
+     * @param  \Closure|string $callback
+     * @param  int             $priority
      * @return void
      */
     public static function deleting($callback, $priority = 0)
@@ -1250,8 +1258,8 @@
     /**
      * Register a deleted model event with the dispatcher.
      *
-     * @param  \Closure|string  $callback
-     * @param  int  $priority
+     * @param  \Closure|string $callback
+     * @param  int             $priority
      * @return void
      */
     public static function deleted($callback, $priority = 0)
@@ -1280,9 +1288,9 @@
     /**
      * Register a model event with the dispatcher.
      *
-     * @param  string  $event
-     * @param  \Closure|string  $callback
-     * @param  int  $priority
+     * @param  string          $event
+     * @param  \Closure|string $callback
+     * @param  int             $priority
      * @return void
      */
     protected static function registerModelEvent($event, $callback, $priority = 0)
@@ -1314,7 +1322,7 @@
     /**
      * Set the observable event names.
      *
-     * @param  array  $observables
+     * @param  array $observables
      * @return $this
      */
     public function setObservableEvents(array $observables)
@@ -1327,7 +1335,7 @@
     /**
      * Add an observable event name.
      *
-     * @param  array|mixed  $observables
+     * @param  array|mixed $observables
      * @return void
      */
     public function addObservableEvents($observables)
@@ -1340,7 +1348,7 @@
     /**
      * Remove an observable event name.
      *
-     * @param  array|mixed  $observables
+     * @param  array|mixed $observables
      * @return void
      */
     public function removeObservableEvents($observables)
@@ -1353,8 +1361,8 @@
     /**
      * Increment a column's value by a given amount.
      *
-     * @param  string  $column
-     * @param  int  $amount
+     * @param  string $column
+     * @param  int    $amount
      * @param  array  $extra
      * @return int
      */
@@ -1366,8 +1374,8 @@
     /**
      * Decrement a column's value by a given amount.
      *
-     * @param  string  $column
-     * @param  int  $amount
+     * @param  string $column
+     * @param  int    $amount
      * @param  array  $extra
      * @return int
      */
@@ -1379,10 +1387,10 @@
     /**
      * Run the increment or decrement method on the model.
      *
-     * @param  string  $column
-     * @param  int  $amount
+     * @param  string $column
+     * @param  int    $amount
      * @param  array  $extra
-     * @param  string  $method
+     * @param  string $method
      * @return int
      */
     protected function incrementOrDecrement($column, $amount, $extra, $method)
@@ -1401,9 +1409,9 @@
     /**
      * Increment the underlying attribute value and sync with original.
      *
-     * @param  string  $column
-     * @param  int  $amount
-     * @param  string  $method
+     * @param  string $column
+     * @param  int    $amount
+     * @param  string $method
      * @return void
      */
     protected function incrementOrDecrementAttributeValue($column, $amount, $method)
@@ -1416,8 +1424,8 @@
     /**
      * Update the model in the database.
      *
-     * @param  array  $attributes
-     * @param  array  $options
+     * @param  array $attributes
+     * @param  array $options
      * @return bool|int
      */
     public function update(array $attributes = [], array $options = [])
@@ -1460,7 +1468,7 @@
     /**
      * Save the model to the database.
      *
-     * @param  array  $options
+     * @param  array $options
      * @return bool
      */
     public function save(array $options = [])
@@ -1498,22 +1506,24 @@
     /**
      * Save the model to the database using transaction.
      *
-     * @param  array  $options
+     * @param  array $options
      * @return bool
      *
      * @throws \Throwable
      */
     public function saveOrFail(array $options = [])
     {
-        return $this->getConnection()->transaction(function () use ($options) {
-            return $this->save($options);
-        });
+        return $this->getConnection()->transaction(
+            function () use ($options) {
+                return $this->save($options);
+            }
+        );
     }
 
     /**
      * Finish processing on a successful save operation.
      *
-     * @param  array  $options
+     * @param  array $options
      * @return void
      */
     protected function finishSave(array $options)
@@ -1530,8 +1540,8 @@
     /**
      * Perform a model update operation.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  array  $options
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  array                                 $options
      * @return bool
      */
     protected function performUpdate(Builder $query, array $options = [])
@@ -1571,8 +1581,8 @@
     /**
      * Perform a model insert operation.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  array  $options
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  array                                 $options
      * @return bool
      */
     protected function performInsert(Builder $query, array $options = [])
@@ -1619,8 +1629,8 @@
     /**
      * Insert the given attributes and set the ID on the model.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  array  $attributes
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  array                                 $attributes
      * @return void
      */
     protected function insertAndSetId(Builder $query, $attributes)
@@ -1645,9 +1655,11 @@
 
                 $this->$relation->touchOwners();
             } elseif ($this->$relation instanceof Collection) {
-                $this->$relation->each(function (Model $relation) {
-                    $relation->touchOwners();
-                });
+                $this->$relation->each(
+                    function (Model $relation) {
+                        $relation->touchOwners();
+                    }
+                );
             }
         }
     }
@@ -1655,7 +1667,7 @@
     /**
      * Determine if the model touches a given relation.
      *
-     * @param  string  $relation
+     * @param  string $relation
      * @return bool
      */
     public function touches($relation)
@@ -1666,8 +1678,8 @@
     /**
      * Fire the given event for the model.
      *
-     * @param  string  $event
-     * @param  bool  $halt
+     * @param  string $event
+     * @param  bool   $halt
      * @return mixed
      */
     protected function fireModelEvent($event, $halt = true)
@@ -1689,7 +1701,7 @@
     /**
      * Set the keys for a save update query.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
+     * @param  \Illuminate\Database\Eloquent\Builder $query
      * @return \Illuminate\Database\Eloquent\Builder
      */
     protected function setKeysForSaveQuery(Builder $query)
@@ -1750,7 +1762,7 @@
     /**
      * Set the value of the "created at" attribute.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return $this
      */
     public function setCreatedAt($value)
@@ -1763,7 +1775,7 @@
     /**
      * Set the value of the "updated at" attribute.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return $this
      */
     public function setUpdatedAt($value)
@@ -1832,7 +1844,7 @@
     /**
      * Get a new query instance without a given scope.
      *
-     * @param  \Illuminate\Database\Eloquent\Scope|string  $scope
+     * @param  \Illuminate\Database\Eloquent\Scope|string $scope
      * @return \Illuminate\Database\Eloquent\Builder
      */
     public function newQueryWithoutScope($scope)
@@ -1862,7 +1874,7 @@
     /**
      * Create a new Eloquent query builder for the model.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return \Illuminate\Database\Eloquent\Builder|static
      */
     public function newEloquentBuilder($query)
@@ -1887,7 +1899,7 @@
     /**
      * Create a new Eloquent Collection instance.
      *
-     * @param  array  $models
+     * @param  array $models
      * @return \Illuminate\Database\Eloquent\Collection
      */
     public function newCollection(array $models = [])
@@ -1898,10 +1910,10 @@
     /**
      * Create a new pivot model instance.
      *
-     * @param  \Illuminate\Database\Eloquent\Model  $parent
-     * @param  array  $attributes
-     * @param  string  $table
-     * @param  bool  $exists
+     * @param  \Illuminate\Database\Eloquent\Model $parent
+     * @param  array                               $attributes
+     * @param  string                              $table
+     * @param  bool                                $exists
      * @return \Illuminate\Database\Eloquent\Relations\Pivot
      */
     public function newPivot(Model $parent, array $attributes, $table, $exists)
@@ -1926,7 +1938,7 @@
     /**
      * Set the table associated with the model.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return $this
      */
     public function setTable($table)
@@ -1969,7 +1981,7 @@
     /**
      * Set the primary key for the model.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return $this
      */
     public function setKeyName($key)
@@ -2022,9 +2034,9 @@
     /**
      * Get the polymorphic relationship columns.
      *
-     * @param  string  $name
-     * @param  string  $type
-     * @param  string  $id
+     * @param  string $name
+     * @param  string $type
+     * @param  string $id
      * @return array
      */
     protected function getMorphs($name, $type, $id)
@@ -2067,7 +2079,7 @@
     /**
      * Set the number of models to return per page.
      *
-     * @param  int  $perPage
+     * @param  int $perPage
      * @return $this
      */
     public function setPerPage($perPage)
@@ -2100,7 +2112,7 @@
     /**
      * Set the hidden attributes for the model.
      *
-     * @param  array  $hidden
+     * @param  array $hidden
      * @return $this
      */
     public function setHidden(array $hidden)
@@ -2113,7 +2125,7 @@
     /**
      * Add hidden attributes for the model.
      *
-     * @param  array|string|null  $attributes
+     * @param  array|string|null $attributes
      * @return void
      */
     public function addHidden($attributes = null)
@@ -2126,7 +2138,7 @@
     /**
      * Make the given, typically hidden, attributes visible.
      *
-     * @param  array|string  $attributes
+     * @param  array|string $attributes
      * @return $this
      */
     public function makeVisible($attributes)
@@ -2143,7 +2155,7 @@
     /**
      * Make the given, typically hidden, attributes visible.
      *
-     * @param  array|string  $attributes
+     * @param  array|string $attributes
      * @return $this
      *
      * @deprecated since version 5.2. Use the "makeVisible" method directly.
@@ -2166,7 +2178,7 @@
     /**
      * Set the visible attributes for the model.
      *
-     * @param  array  $visible
+     * @param  array $visible
      * @return $this
      */
     public function setVisible(array $visible)
@@ -2179,7 +2191,7 @@
     /**
      * Add visible attributes for the model.
      *
-     * @param  array|string|null  $attributes
+     * @param  array|string|null $attributes
      * @return void
      */
     public function addVisible($attributes = null)
@@ -2192,7 +2204,7 @@
     /**
      * Set the accessors to append to model arrays.
      *
-     * @param  array  $appends
+     * @param  array $appends
      * @return $this
      */
     public function setAppends(array $appends)
@@ -2215,7 +2227,7 @@
     /**
      * Set the fillable attributes for the model.
      *
-     * @param  array  $fillable
+     * @param  array $fillable
      * @return $this
      */
     public function fillable(array $fillable)
@@ -2238,7 +2250,7 @@
     /**
      * Set the guarded attributes for the model.
      *
-     * @param  array  $guarded
+     * @param  array $guarded
      * @return $this
      */
     public function guard(array $guarded)
@@ -2251,7 +2263,7 @@
     /**
      * Disable all mass assignable restrictions.
      *
-     * @param  bool  $state
+     * @param  bool $state
      * @return void
      */
     public static function unguard($state = true)
@@ -2282,7 +2294,7 @@
     /**
      * Run the given callable while being unguarded.
      *
-     * @param  callable  $callback
+     * @param  callable $callback
      * @return mixed
      */
     public static function unguarded(callable $callback)
@@ -2303,7 +2315,7 @@
     /**
      * Determine if the given attribute may be mass assigned.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function isFillable($key)
@@ -2329,7 +2341,7 @@
     /**
      * Determine if the given key is guarded.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function isGuarded($key)
@@ -2350,7 +2362,7 @@
     /**
      * Remove the table name from a given key.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return string
      */
     protected function removeTableFromKey($key)
@@ -2375,7 +2387,7 @@
     /**
      * Set the relationships that are touched on save.
      *
-     * @param  array  $touches
+     * @param  array $touches
      * @return $this
      */
     public function setTouchedRelations(array $touches)
@@ -2398,7 +2410,7 @@
     /**
      * Set whether IDs are incrementing.
      *
-     * @param  bool  $value
+     * @param  bool $value
      * @return $this
      */
     public function setIncrementing($value)
@@ -2411,7 +2423,7 @@
     /**
      * Convert the model instance to JSON.
      *
-     * @param  int  $options
+     * @param  int $options
      * @return string
      */
     public function toJson($options = 0)
@@ -2482,8 +2494,9 @@
         // the values to their appropriate type. If the attribute has a mutator we
         // will not perform the cast on those attributes to avoid any confusion.
         foreach ($this->getCasts() as $key => $value) {
-            if (! array_key_exists($key, $attributes) ||
-                in_array($key, $mutatedAttributes)) {
+            if (! array_key_exists($key, $attributes) 
+                || in_array($key, $mutatedAttributes)
+            ) {
                 continue;
             }
 
@@ -2589,7 +2602,7 @@
     /**
      * Get an attribute array of all arrayable values.
      *
-     * @param  array  $values
+     * @param  array $values
      * @return array
      */
     protected function getArrayableItems(array $values)
@@ -2604,7 +2617,7 @@
     /**
      * Get an attribute from the model.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function getAttribute($key)
@@ -2619,7 +2632,7 @@
     /**
      * Get a plain attribute (not a relationship).
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function getAttributeValue($key)
@@ -2653,7 +2666,7 @@
     /**
      * Get a relationship.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function getRelationValue($key)
@@ -2676,7 +2689,7 @@
     /**
      * Get an attribute from the $attributes array.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     protected function getAttributeFromArray($key)
@@ -2689,7 +2702,7 @@
     /**
      * Get a relationship value from a method.
      *
-     * @param  string  $method
+     * @param  string $method
      * @return mixed
      *
      * @throws \LogicException
@@ -2699,8 +2712,10 @@
         $relations = $this->$method();
 
         if (! $relations instanceof Relation) {
-            throw new LogicException('Relationship method must return an object of type '
-                .'Illuminate\Database\Eloquent\Relations\Relation');
+            throw new LogicException(
+                'Relationship method must return an object of type '
+                .'Illuminate\Database\Eloquent\Relations\Relation'
+            );
         }
 
         $this->setRelation($method, $results = $relations->getResults());
@@ -2711,7 +2726,7 @@
     /**
      * Determine if a get mutator exists for an attribute.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function hasGetMutator($key)
@@ -2722,7 +2737,7 @@
     /**
      * Get the value of an attribute using its mutator.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
      * @return mixed
      */
@@ -2734,7 +2749,7 @@
     /**
      * Get the value of an attribute using its mutator for array conversion.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
      * @return mixed
      */
@@ -2748,8 +2763,8 @@
     /**
      * Determine whether an attribute should be cast to a native type.
      *
-     * @param  string  $key
-     * @param  array|string|null  $types
+     * @param  string            $key
+     * @param  array|string|null $types
      * @return bool
      */
     public function hasCast($key, $types = null)
@@ -2769,9 +2784,11 @@
     public function getCasts()
     {
         if ($this->getIncrementing()) {
-            return array_merge([
+            return array_merge(
+                [
                 $this->getKeyName() => $this->keyType,
-            ], $this->casts);
+                ], $this->casts
+            );
         }
 
         return $this->casts;
@@ -2780,7 +2797,7 @@
     /**
      * Determine whether a value is Date / DateTime castable for inbound manipulation.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     protected function isDateCastable($key)
@@ -2791,7 +2808,7 @@
     /**
      * Determine whether a value is JSON castable for inbound manipulation.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     protected function isJsonCastable($key)
@@ -2802,7 +2819,7 @@
     /**
      * Get the type of cast for a model attribute.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return string
      */
     protected function getCastType($key)
@@ -2813,7 +2830,7 @@
     /**
      * Cast an attribute to a native PHP type.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
      * @return mixed
      */
@@ -2824,39 +2841,39 @@
         }
 
         switch ($this->getCastType($key)) {
-            case 'int':
-            case 'integer':
-                return (int) $value;
-            case 'real':
-            case 'float':
-            case 'double':
-                return (float) $value;
-            case 'string':
-                return (string) $value;
-            case 'bool':
-            case 'boolean':
-                return (bool) $value;
-            case 'object':
-                return $this->fromJson($value, true);
-            case 'array':
-            case 'json':
-                return $this->fromJson($value);
-            case 'collection':
-                return new BaseCollection($this->fromJson($value));
-            case 'date':
-            case 'datetime':
-                return $this->asDateTime($value);
-            case 'timestamp':
-                return $this->asTimeStamp($value);
-            default:
-                return $value;
+        case 'int':
+        case 'integer':
+            return (int) $value;
+        case 'real':
+        case 'float':
+        case 'double':
+            return (float) $value;
+        case 'string':
+            return (string) $value;
+        case 'bool':
+        case 'boolean':
+            return (bool) $value;
+        case 'object':
+            return $this->fromJson($value, true);
+        case 'array':
+        case 'json':
+            return $this->fromJson($value);
+        case 'collection':
+            return new BaseCollection($this->fromJson($value));
+        case 'date':
+        case 'datetime':
+            return $this->asDateTime($value);
+        case 'timestamp':
+            return $this->asTimeStamp($value);
+        default:
+            return $value;
         }
     }
 
     /**
      * Set a given attribute on the model.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
      * @return $this
      */
@@ -2890,7 +2907,7 @@
     /**
      * Determine if a set mutator exists for an attribute.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function hasSetMutator($key)
@@ -2913,7 +2930,7 @@
     /**
      * Convert a DateTime to a storable string.
      *
-     * @param  \DateTime|int  $value
+     * @param  \DateTime|int $value
      * @return string
      */
     public function fromDateTime($value)
@@ -2928,7 +2945,7 @@
     /**
      * Return a timestamp as DateTime object.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return \Carbon\Carbon
      */
     protected function asDateTime($value)
@@ -2972,7 +2989,7 @@
     /**
      * Return a timestamp as unix timestamp.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return int
      */
     protected function asTimeStamp($value)
@@ -2983,7 +3000,7 @@
     /**
      * Prepare a date for array / JSON serialization.
      *
-     * @param  \DateTime  $date
+     * @param  \DateTime $date
      * @return string
      */
     protected function serializeDate(DateTime $date)
@@ -3004,7 +3021,7 @@
     /**
      * Set the date format used by the model.
      *
-     * @param  string  $format
+     * @param  string $format
      * @return $this
      */
     public function setDateFormat($format)
@@ -3017,7 +3034,7 @@
     /**
      * Encode the given value as JSON.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return string
      */
     protected function asJson($value)
@@ -3028,8 +3045,8 @@
     /**
      * Decode the given JSON back into an array or object.
      *
-     * @param  string  $value
-     * @param  bool  $asObject
+     * @param  string $value
+     * @param  bool   $asObject
      * @return mixed
      */
     public function fromJson($value, $asObject = false)
@@ -3040,7 +3057,7 @@
     /**
      * Clone the model into a new, non-existing instance.
      *
-     * @param  array|null  $except
+     * @param  array|null $except
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function replicate(array $except = null)
@@ -3075,7 +3092,7 @@
     /**
      * Set the array of model attributes. No checking is done.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @param  bool  $sync
      * @return $this
      */
@@ -3093,8 +3110,8 @@
     /**
      * Get the model's original attribute values.
      *
-     * @param  string|null  $key
-     * @param  mixed  $default
+     * @param  string|null $key
+     * @param  mixed       $default
      * @return mixed|array
      */
     public function getOriginal($key = null, $default = null)
@@ -3117,7 +3134,7 @@
     /**
      * Sync a single original attribute with its current value.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @return $this
      */
     public function syncOriginalAttribute($attribute)
@@ -3130,7 +3147,7 @@
     /**
      * Determine if the model or given attribute(s) have been modified.
      *
-     * @param  array|string|null  $attributes
+     * @param  array|string|null $attributes
      * @return bool
      */
     public function isDirty($attributes = null)
@@ -3166,8 +3183,9 @@
         foreach ($this->attributes as $key => $value) {
             if (! array_key_exists($key, $this->original)) {
                 $dirty[$key] = $value;
-            } elseif ($value !== $this->original[$key] &&
-                                 ! $this->originalIsNumericallyEquivalent($key)) {
+            } elseif ($value !== $this->original[$key] 
+                && ! $this->originalIsNumericallyEquivalent($key)
+            ) {
                 $dirty[$key] = $value;
             }
         }
@@ -3178,7 +3196,7 @@
     /**
      * Determine if the new and old values for a given key are numerically equivalent.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     protected function originalIsNumericallyEquivalent($key)
@@ -3203,7 +3221,7 @@
     /**
      * Get a specified relationship.
      *
-     * @param  string  $relation
+     * @param  string $relation
      * @return mixed
      */
     public function getRelation($relation)
@@ -3214,7 +3232,7 @@
     /**
      * Determine if the given relation is loaded.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function relationLoaded($key)
@@ -3225,7 +3243,7 @@
     /**
      * Set the specific relationship in the model.
      *
-     * @param  string  $relation
+     * @param  string $relation
      * @param  mixed  $value
      * @return $this
      */
@@ -3239,7 +3257,7 @@
     /**
      * Set the entire relations array on the model.
      *
-     * @param  array  $relations
+     * @param  array $relations
      * @return $this
      */
     public function setRelations(array $relations)
@@ -3272,7 +3290,7 @@
     /**
      * Set the connection associated with the model.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return $this
      */
     public function setConnection($name)
@@ -3285,7 +3303,7 @@
     /**
      * Resolve a connection instance.
      *
-     * @param  string|null  $connection
+     * @param  string|null $connection
      * @return \Illuminate\Database\Connection
      */
     public static function resolveConnection($connection = null)
@@ -3306,7 +3324,7 @@
     /**
      * Set the connection resolver instance.
      *
-     * @param  \Illuminate\Database\ConnectionResolverInterface  $resolver
+     * @param  \Illuminate\Database\ConnectionResolverInterface $resolver
      * @return void
      */
     public static function setConnectionResolver(Resolver $resolver)
@@ -3337,7 +3355,7 @@
     /**
      * Set the event dispatcher instance.
      *
-     * @param  \Illuminate\Contracts\Events\Dispatcher  $dispatcher
+     * @param  \Illuminate\Contracts\Events\Dispatcher $dispatcher
      * @return void
      */
     public static function setEventDispatcher(Dispatcher $dispatcher)
@@ -3374,7 +3392,7 @@
     /**
      * Extract and cache all the mutated attributes of a class.
      *
-     * @param  string  $class
+     * @param  string $class
      * @return void
      */
     public static function cacheMutatedAttributes($class)
@@ -3400,7 +3418,7 @@
     /**
      * Dynamically retrieve attributes on the model.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function __get($key)
@@ -3411,7 +3429,7 @@
     /**
      * Dynamically set attributes on the model.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
      * @return void
      */
@@ -3423,7 +3441,7 @@
     /**
      * Determine if the given attribute exists.
      *
-     * @param  mixed  $offset
+     * @param  mixed $offset
      * @return bool
      */
     public function offsetExists($offset)
@@ -3434,7 +3452,7 @@
     /**
      * Get the value for a given offset.
      *
-     * @param  mixed  $offset
+     * @param  mixed $offset
      * @return mixed
      */
     public function offsetGet($offset)
@@ -3445,8 +3463,8 @@
     /**
      * Set the value for a given offset.
      *
-     * @param  mixed  $offset
-     * @param  mixed  $value
+     * @param  mixed $offset
+     * @param  mixed $value
      * @return void
      */
     public function offsetSet($offset, $value)
@@ -3457,7 +3475,7 @@
     /**
      * Unset the value for a given offset.
      *
-     * @param  mixed  $offset
+     * @param  mixed $offset
      * @return void
      */
     public function offsetUnset($offset)
@@ -3468,7 +3486,7 @@
     /**
      * Determine if an attribute or relation exists on the model.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function __isset($key)
@@ -3479,7 +3497,7 @@
     /**
      * Unset an attribute on the model.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return void
      */
     public function __unset($key)
@@ -3490,7 +3508,7 @@
     /**
      * Handle dynamic method calls into the model.
      *
-     * @param  string  $method
+     * @param  string $method
      * @param  array  $parameters
      * @return mixed
      */
@@ -3508,7 +3526,7 @@
     /**
      * Handle dynamic static method calls into the method.
      *
-     * @param  string  $method
+     * @param  string $method
      * @param  array  $parameters
      * @return mixed
      */

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/ModelNotFoundException.php
+++ PHP_CodeSniffer
@@ -16,7 +16,7 @@
     /**
      * Set the affected Eloquent model.
      *
-     * @param  string   $model
+     * @param  string $model
      * @return $this
      */
     public function setModel($model)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/QueueEntityResolver.php
+++ PHP_CodeSniffer
@@ -10,7 +10,7 @@
     /**
      * Resolve the entity for the given ID.
      *
-     * @param  string  $type
+     * @param  string $type
      * @param  mixed  $id
      * @return mixed
      *

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/BelongsTo.php
+++ PHP_CodeSniffer
@@ -40,11 +40,11 @@
     /**
      * Create a new belongs to relationship instance.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Model  $parent
-     * @param  string  $foreignKey
-     * @param  string  $otherKey
-     * @param  string  $relation
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Model   $parent
+     * @param  string                                $foreignKey
+     * @param  string                                $otherKey
+     * @param  string                                $relation
      * @return void
      */
     public function __construct(Builder $query, Model $parent, $foreignKey, $otherKey, $relation)
@@ -86,9 +86,9 @@
     /**
      * Add the constraints for a relationship query.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Builder  $parent
-     * @param  array|mixed  $columns
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Builder $parent
+     * @param  array|mixed                           $columns
      * @return \Illuminate\Database\Eloquent\Builder
      */
     public function getRelationQuery(Builder $query, Builder $parent, $columns = ['*'])
@@ -107,9 +107,9 @@
     /**
      * Add the constraints for a relationship query on the same table.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Builder  $parent
-     * @param  array|mixed  $columns
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Builder $parent
+     * @param  array|mixed                           $columns
      * @return \Illuminate\Database\Eloquent\Builder
      */
     public function getRelationQueryForSelfRelation(Builder $query, Builder $parent, $columns = ['*'])
@@ -138,7 +138,7 @@
     /**
      * Set the constraints for an eager load of the relation.
      *
-     * @param  array  $models
+     * @param  array $models
      * @return void
      */
     public function addEagerConstraints(array $models)
@@ -154,7 +154,7 @@
     /**
      * Gather the keys from an array of related models.
      *
-     * @param  array  $models
+     * @param  array $models
      * @return array
      */
     protected function getEagerModelKeys(array $models)
@@ -183,8 +183,8 @@
     /**
      * Initialize the relation on a set of models.
      *
-     * @param  array   $models
-     * @param  string  $relation
+     * @param  array  $models
+     * @param  string $relation
      * @return array
      */
     public function initRelation(array $models, $relation)
@@ -199,9 +199,9 @@
     /**
      * Match the eagerly loaded results to their parents.
      *
-     * @param  array   $models
-     * @param  \Illuminate\Database\Eloquent\Collection  $results
-     * @param  string  $relation
+     * @param  array                                    $models
+     * @param  \Illuminate\Database\Eloquent\Collection $results
+     * @param  string                                   $relation
      * @return array
      */
     public function match(array $models, Collection $results, $relation)
@@ -234,7 +234,7 @@
     /**
      * Associate the model instance to the given parent.
      *
-     * @param  \Illuminate\Database\Eloquent\Model|int  $model
+     * @param  \Illuminate\Database\Eloquent\Model|int $model
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function associate($model)
@@ -265,7 +265,7 @@
     /**
      * Update the parent model on the relationship.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return mixed
      */
     public function update(array $attributes)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/BelongsToMany.php
+++ PHP_CodeSniffer
@@ -77,12 +77,12 @@
     /**
      * Create a new belongs to many relationship instance.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Model  $parent
-     * @param  string  $table
-     * @param  string  $foreignKey
-     * @param  string  $otherKey
-     * @param  string  $relationName
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Model   $parent
+     * @param  string                                $table
+     * @param  string                                $foreignKey
+     * @param  string                                $otherKey
+     * @param  string                                $relationName
      * @return void
      */
     public function __construct(Builder $query, Model $parent, $table, $foreignKey, $otherKey, $relationName = null)
@@ -108,10 +108,10 @@
     /**
      * Set a where clause for a pivot table column.
      *
-     * @param  string  $column
-     * @param  string  $operator
-     * @param  mixed   $value
-     * @param  string  $boolean
+     * @param  string $column
+     * @param  string $operator
+     * @param  mixed  $value
+     * @param  string $boolean
      * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
      */
     public function wherePivot($column, $operator = null, $value = null, $boolean = 'and')
@@ -124,10 +124,10 @@
     /**
      * Set a "where in" clause for a pivot table column.
      *
-     * @param  string  $column
-     * @param  mixed   $values
-     * @param  string  $boolean
-     * @param  bool    $not
+     * @param  string $column
+     * @param  mixed  $values
+     * @param  string $boolean
+     * @param  bool   $not
      * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
      */
     public function wherePivotIn($column, $values, $boolean = 'and', $not = false)
@@ -140,9 +140,9 @@
     /**
      * Set an "or where" clause for a pivot table column.
      *
-     * @param  string  $column
-     * @param  string  $operator
-     * @param  mixed   $value
+     * @param  string $column
+     * @param  string $operator
+     * @param  mixed  $value
      * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
      */
     public function orWherePivot($column, $operator = null, $value = null)
@@ -153,8 +153,8 @@
     /**
      * Set an "or where in" clause for a pivot table column.
      *
-     * @param  string  $column
-     * @param  mixed   $values
+     * @param  string $column
+     * @param  mixed  $values
      * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
      */
     public function orWherePivotIn($column, $values)
@@ -165,7 +165,7 @@
     /**
      * Execute the query and get the first result.
      *
-     * @param  array   $columns
+     * @param  array $columns
      * @return mixed
      */
     public function first($columns = ['*'])
@@ -178,7 +178,7 @@
     /**
      * Execute the query and get the first result or throw an exception.
      *
-     * @param  array  $columns
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Model|static
      *
      * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
@@ -195,7 +195,7 @@
     /**
      * Execute the query as a "select" statement.
      *
-     * @param  array  $columns
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Collection
      */
     public function get($columns = ['*'])
@@ -226,10 +226,10 @@
     /**
      * Get a paginator for the "select" statement.
      *
-     * @param  int  $perPage
-     * @param  array  $columns
-     * @param  string  $pageName
-     * @param  int|null  $page
+     * @param  int      $perPage
+     * @param  array    $columns
+     * @param  string   $pageName
+     * @param  int|null $page
      * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator
      */
     public function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)
@@ -246,9 +246,9 @@
     /**
      * Paginate the given query into a simple paginator.
      *
-     * @param  int  $perPage
+     * @param  int    $perPage
      * @param  array  $columns
-     * @param  string  $pageName
+     * @param  string $pageName
      * @return \Illuminate\Contracts\Pagination\Paginator
      */
     public function simplePaginate($perPage = null, $columns = ['*'], $pageName = 'page')
@@ -265,25 +265,27 @@
     /**
      * Chunk the results of the query.
      *
-     * @param  int  $count
-     * @param  callable  $callback
+     * @param  int      $count
+     * @param  callable $callback
      * @return bool
      */
     public function chunk($count, callable $callback)
     {
         $this->query->addSelect($this->getSelectColumns());
 
-        return $this->query->chunk($count, function ($results) use ($callback) {
-            $this->hydratePivotRelation($results->all());
+        return $this->query->chunk(
+            $count, function ($results) use ($callback) {
+                $this->hydratePivotRelation($results->all());
 
-            return $callback($results);
-        });
+                return $callback($results);
+            }
+        );
     }
 
     /**
      * Hydrate the pivot table relationship on the models.
      *
-     * @param  array  $models
+     * @param  array $models
      * @return void
      */
     protected function hydratePivotRelation(array $models)
@@ -301,7 +303,7 @@
     /**
      * Get the pivot attributes from a model.
      *
-     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  \Illuminate\Database\Eloquent\Model $model
      * @return array
      */
     protected function cleanPivotAttributes(Model $model)
@@ -339,9 +341,9 @@
     /**
      * Add the constraints for a relationship query.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Builder  $parent
-     * @param  array|mixed  $columns
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Builder $parent
+     * @param  array|mixed                           $columns
      * @return \Illuminate\Database\Eloquent\Builder
      */
     public function getRelationQuery(Builder $query, Builder $parent, $columns = ['*'])
@@ -358,9 +360,9 @@
     /**
      * Add the constraints for a relationship query on the same table.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Builder  $parent
-     * @param  array|mixed  $columns
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Builder $parent
+     * @param  array|mixed                           $columns
      * @return \Illuminate\Database\Eloquent\Builder
      */
     public function getRelationQueryForSelfJoin(Builder $query, Builder $parent, $columns = ['*'])
@@ -389,7 +391,7 @@
     /**
      * Set the select clause for the relation query.
      *
-     * @param  array  $columns
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
      */
     protected function getSelectColumns(array $columns = ['*'])
@@ -425,7 +427,7 @@
     /**
      * Determine whether the given column is defined as a pivot column.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return bool
      */
     protected function hasPivotColumn($column)
@@ -436,7 +438,7 @@
     /**
      * Set the join clause for the relation query.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder|null  $query
+     * @param  \Illuminate\Database\Eloquent\Builder|null $query
      * @return $this
      */
     protected function setJoin($query = null)
@@ -472,7 +474,7 @@
     /**
      * Set the constraints for an eager load of the relation.
      *
-     * @param  array  $models
+     * @param  array $models
      * @return void
      */
     public function addEagerConstraints(array $models)
@@ -483,8 +485,8 @@
     /**
      * Initialize the relation on a set of models.
      *
-     * @param  array   $models
-     * @param  string  $relation
+     * @param  array  $models
+     * @param  string $relation
      * @return array
      */
     public function initRelation(array $models, $relation)
@@ -499,9 +501,9 @@
     /**
      * Match the eagerly loaded results to their parents.
      *
-     * @param  array   $models
-     * @param  \Illuminate\Database\Eloquent\Collection  $results
-     * @param  string  $relation
+     * @param  array                                    $models
+     * @param  \Illuminate\Database\Eloquent\Collection $results
+     * @param  string                                   $relation
      * @return array
      */
     public function match(array $models, Collection $results, $relation)
@@ -525,7 +527,7 @@
     /**
      * Build model dictionary keyed by the relation's foreign key.
      *
-     * @param  \Illuminate\Database\Eloquent\Collection  $results
+     * @param  \Illuminate\Database\Eloquent\Collection $results
      * @return array
      */
     protected function buildDictionary(Collection $results)
@@ -584,9 +586,9 @@
     /**
      * Save a new model and attach it to the parent model.
      *
-     * @param  \Illuminate\Database\Eloquent\Model  $model
-     * @param  array  $joining
-     * @param  bool   $touch
+     * @param  \Illuminate\Database\Eloquent\Model $model
+     * @param  array                               $joining
+     * @param  bool                                $touch
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function save(Model $model, array $joining = [], $touch = true)
@@ -601,8 +603,8 @@
     /**
      * Save an array of new models and attach them to the parent model.
      *
-     * @param  \Illuminate\Support\Collection|array  $models
-     * @param  array  $joinings
+     * @param  \Illuminate\Support\Collection|array $models
+     * @param  array                                $joinings
      * @return array
      */
     public function saveMany($models, array $joinings = [])
@@ -619,8 +621,8 @@
     /**
      * Find a related model by its primary key.
      *
-     * @param  mixed  $id
-     * @param  array  $columns
+     * @param  mixed $id
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|null
      */
     public function find($id, $columns = ['*'])
@@ -637,8 +639,8 @@
     /**
      * Find multiple related models by their primary keys.
      *
-     * @param  mixed  $ids
-     * @param  array  $columns
+     * @param  mixed $ids
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Collection
      */
     public function findMany($ids, $columns = ['*'])
@@ -655,8 +657,8 @@
     /**
      * Find a related model by its primary key or throw an exception.
      *
-     * @param  mixed  $id
-     * @param  array  $columns
+     * @param  mixed $id
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection
      *
      * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
@@ -679,8 +681,8 @@
     /**
      * Find a related model by its primary key or return new instance of the related model.
      *
-     * @param  mixed  $id
-     * @param  array  $columns
+     * @param  mixed $id
+     * @param  array $columns
      * @return \Illuminate\Support\Collection|\Illuminate\Database\Eloquent\Model
      */
     public function findOrNew($id, $columns = ['*'])
@@ -695,7 +697,7 @@
     /**
      * Get the first related model record matching the attributes or instantiate it.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function firstOrNew(array $attributes)
@@ -710,9 +712,9 @@
     /**
      * Get the first related record matching the attributes or create it.
      *
-     * @param  array  $attributes
-     * @param  array  $joining
-     * @param  bool   $touch
+     * @param  array $attributes
+     * @param  array $joining
+     * @param  bool  $touch
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function firstOrCreate(array $attributes, array $joining = [], $touch = true)
@@ -727,10 +729,10 @@
     /**
      * Create or update a related record matching the attributes, and fill it with values.
      *
-     * @param  array  $attributes
-     * @param  array  $values
-     * @param  array  $joining
-     * @param  bool   $touch
+     * @param  array $attributes
+     * @param  array $values
+     * @param  array $joining
+     * @param  bool  $touch
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function updateOrCreate(array $attributes, array $values = [], array $joining = [], $touch = true)
@@ -749,9 +751,9 @@
     /**
      * Create a new instance of the related model.
      *
-     * @param  array  $attributes
-     * @param  array  $joining
-     * @param  bool   $touch
+     * @param  array $attributes
+     * @param  array $joining
+     * @param  bool  $touch
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function create(array $attributes, array $joining = [], $touch = true)
@@ -771,8 +773,8 @@
     /**
      * Create an array of new instances of the related models.
      *
-     * @param  array  $records
-     * @param  array  $joinings
+     * @param  array $records
+     * @param  array $joinings
      * @return array
      */
     public function createMany(array $records, array $joinings = [])
@@ -791,8 +793,8 @@
     /**
      * Sync the intermediate tables with a list of IDs or collection of models.
      *
-     * @param  \Illuminate\Database\Eloquent\Collection|array  $ids
-     * @param  bool   $detaching
+     * @param  \Illuminate\Database\Eloquent\Collection|array $ids
+     * @param  bool                                           $detaching
      * @return array
      */
     public function sync($ids, $detaching = true)
@@ -820,9 +822,11 @@
         if ($detaching && count($detach) > 0) {
             $this->detach($detach);
 
-            $changes['detached'] = (array) array_map(function ($v) {
-                return is_numeric($v) ? (int) $v : (string) $v;
-            }, $detach);
+            $changes['detached'] = (array) array_map(
+                function ($v) {
+                    return is_numeric($v) ? (int) $v : (string) $v;
+                }, $detach
+            );
         }
 
         // Now we are finally ready to attach the new records. Note that we'll disable
@@ -842,7 +846,7 @@
     /**
      * Format the sync list so that it is keyed by ID.
      *
-     * @param  array  $records
+     * @param  array $records
      * @return array
      */
     protected function formatSyncList(array $records)
@@ -863,9 +867,9 @@
     /**
      * Attach all of the IDs that aren't in the current array.
      *
-     * @param  array  $records
-     * @param  array  $current
-     * @param  bool   $touch
+     * @param  array $records
+     * @param  array $current
+     * @param  bool  $touch
      * @return array
      */
     protected function attachNew(array $records, array $current, $touch = true)
@@ -885,8 +889,9 @@
             // Now we'll try to update an existing pivot record with the attributes that were
             // given to the method. If the model is actually updated we will add it to the
             // list of updated pivot records so we return them back out to the consumer.
-            elseif (count($attributes) > 0 &&
-                $this->updateExistingPivot($id, $attributes, $touch)) {
+            elseif (count($attributes) > 0 
+                && $this->updateExistingPivot($id, $attributes, $touch)
+            ) {
                 $changes['updated'][] = is_numeric($id) ? (int) $id : (string) $id;
             }
         }
@@ -897,9 +902,9 @@
     /**
      * Update an existing pivot record on the table.
      *
-     * @param  mixed  $id
-     * @param  array  $attributes
-     * @param  bool   $touch
+     * @param  mixed $id
+     * @param  array $attributes
+     * @param  bool  $touch
      * @return int
      */
     public function updateExistingPivot($id, array $attributes, $touch = true)
@@ -920,9 +925,9 @@
     /**
      * Attach a model to the parent.
      *
-     * @param  mixed  $id
-     * @param  array  $attributes
-     * @param  bool   $touch
+     * @param  mixed $id
+     * @param  array $attributes
+     * @param  bool  $touch
      * @return void
      */
     public function attach($id, array $attributes = [], $touch = true)
@@ -947,8 +952,8 @@
     /**
      * Create an array of records to insert into the pivot table.
      *
-     * @param  array  $ids
-     * @param  array  $attributes
+     * @param  array $ids
+     * @param  array $attributes
      * @return array
      */
     protected function createAttachRecords($ids, array $attributes)
@@ -971,10 +976,10 @@
     /**
      * Create a full attachment record payload.
      *
-     * @param  int    $key
-     * @param  mixed  $value
-     * @param  array  $attributes
-     * @param  bool   $timed
+     * @param  int   $key
+     * @param  mixed $value
+     * @param  array $attributes
+     * @param  bool  $timed
      * @return array
      */
     protected function attacher($key, $value, $attributes, $timed)
@@ -992,9 +997,9 @@
     /**
      * Get the attach record ID and extra attributes.
      *
-     * @param  mixed  $key
-     * @param  mixed  $value
-     * @param  array  $attributes
+     * @param  mixed $key
+     * @param  mixed $value
+     * @param  array $attributes
      * @return array
      */
     protected function getAttachId($key, $value, array $attributes)
@@ -1009,8 +1014,8 @@
     /**
      * Create a new pivot attachment record.
      *
-     * @param  int   $id
-     * @param  bool  $timed
+     * @param  int  $id
+     * @param  bool $timed
      * @return array
      */
     protected function createAttachRecord($id, $timed)
@@ -1032,8 +1037,8 @@
     /**
      * Set the creation and update timestamps on an attach record.
      *
-     * @param  array  $record
-     * @param  bool   $exists
+     * @param  array $record
+     * @param  bool  $exists
      * @return array
      */
     protected function setTimestampsOnAttach(array $record, $exists = false)
@@ -1054,8 +1059,8 @@
     /**
      * Detach models from the relationship.
      *
-     * @param  int|array  $ids
-     * @param  bool  $touch
+     * @param  int|array $ids
+     * @param  bool      $touch
      * @return int
      */
     public function detach($ids = [], $touch = true)
@@ -1152,7 +1157,7 @@
     /**
      * Get a new pivot statement for a given "other" ID.
      *
-     * @param  mixed  $id
+     * @param  mixed $id
      * @return \Illuminate\Database\Query\Builder
      */
     public function newPivotStatementForId($id)
@@ -1163,8 +1168,8 @@
     /**
      * Create a new pivot model instance.
      *
-     * @param  array  $attributes
-     * @param  bool   $exists
+     * @param  array $attributes
+     * @param  bool  $exists
      * @return \Illuminate\Database\Eloquent\Relations\Pivot
      */
     public function newPivot(array $attributes = [], $exists = false)
@@ -1177,7 +1182,7 @@
     /**
      * Create a new existing pivot model instance.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return \Illuminate\Database\Eloquent\Relations\Pivot
      */
     public function newExistingPivot(array $attributes = [])
@@ -1188,7 +1193,7 @@
     /**
      * Set the columns on the pivot table to retrieve.
      *
-     * @param  array|mixed  $columns
+     * @param  array|mixed $columns
      * @return $this
      */
     public function withPivot($columns)
@@ -1203,8 +1208,8 @@
     /**
      * Specify that the pivot table has creation and update timestamps.
      *
-     * @param  mixed  $createdAt
-     * @param  mixed  $updatedAt
+     * @param  mixed $createdAt
+     * @param  mixed $updatedAt
      * @return \Illuminate\Database\Eloquent\Relations\BelongsToMany
      */
     public function withTimestamps($createdAt = null, $updatedAt = null)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/HasMany.php
+++ PHP_CodeSniffer
@@ -19,8 +19,8 @@
     /**
      * Initialize the relation on a set of models.
      *
-     * @param  array   $models
-     * @param  string  $relation
+     * @param  array  $models
+     * @param  string $relation
      * @return array
      */
     public function initRelation(array $models, $relation)
@@ -35,9 +35,9 @@
     /**
      * Match the eagerly loaded results to their parents.
      *
-     * @param  array   $models
-     * @param  \Illuminate\Database\Eloquent\Collection  $results
-     * @param  string  $relation
+     * @param  array                                    $models
+     * @param  \Illuminate\Database\Eloquent\Collection $results
+     * @param  string                                   $relation
      * @return array
      */
     public function match(array $models, Collection $results, $relation)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/HasManyThrough.php
+++ PHP_CodeSniffer
@@ -42,12 +42,12 @@
     /**
      * Create a new has many through relationship instance.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Model  $farParent
-     * @param  \Illuminate\Database\Eloquent\Model  $parent
-     * @param  string  $firstKey
-     * @param  string  $secondKey
-     * @param  string  $localKey
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Model   $farParent
+     * @param  \Illuminate\Database\Eloquent\Model   $parent
+     * @param  string                                $firstKey
+     * @param  string                                $secondKey
+     * @param  string                                $localKey
      * @return void
      */
     public function __construct(Builder $query, Model $farParent, Model $parent, $firstKey, $secondKey, $localKey)
@@ -81,9 +81,9 @@
     /**
      * Add the constraints for a relationship query.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Builder  $parent
-     * @param  array|mixed  $columns
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Builder $parent
+     * @param  array|mixed                           $columns
      * @return \Illuminate\Database\Eloquent\Builder
      */
     public function getRelationQuery(Builder $query, Builder $parent, $columns = ['*'])
@@ -102,7 +102,7 @@
     /**
      * Set the join clause on the query.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder|null  $query
+     * @param  \Illuminate\Database\Eloquent\Builder|null $query
      * @return void
      */
     protected function setJoin(Builder $query = null)
@@ -131,7 +131,7 @@
     /**
      * Set the constraints for an eager load of the relation.
      *
-     * @param  array  $models
+     * @param  array $models
      * @return void
      */
     public function addEagerConstraints(array $models)
@@ -144,8 +144,8 @@
     /**
      * Initialize the relation on a set of models.
      *
-     * @param  array   $models
-     * @param  string  $relation
+     * @param  array  $models
+     * @param  string $relation
      * @return array
      */
     public function initRelation(array $models, $relation)
@@ -160,9 +160,9 @@
     /**
      * Match the eagerly loaded results to their parents.
      *
-     * @param  array   $models
-     * @param  \Illuminate\Database\Eloquent\Collection  $results
-     * @param  string  $relation
+     * @param  array                                    $models
+     * @param  \Illuminate\Database\Eloquent\Collection $results
+     * @param  string                                   $relation
      * @return array
      */
     public function match(array $models, Collection $results, $relation)
@@ -188,7 +188,7 @@
     /**
      * Build model dictionary keyed by the relation's foreign key.
      *
-     * @param  \Illuminate\Database\Eloquent\Collection  $results
+     * @param  \Illuminate\Database\Eloquent\Collection $results
      * @return array
      */
     protected function buildDictionary(Collection $results)
@@ -220,7 +220,7 @@
     /**
      * Execute the query and get the first related model.
      *
-     * @param  array   $columns
+     * @param  array $columns
      * @return mixed
      */
     public function first($columns = ['*'])
@@ -233,7 +233,7 @@
     /**
      * Execute the query and get the first result or throw an exception.
      *
-     * @param  array  $columns
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Model|static
      *
      * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
@@ -250,8 +250,8 @@
     /**
      * Find a related model by its primary key.
      *
-     * @param  mixed  $id
-     * @param  array  $columns
+     * @param  mixed $id
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection|null
      */
     public function find($id, $columns = ['*'])
@@ -268,8 +268,8 @@
     /**
      * Find multiple related models by their primary keys.
      *
-     * @param  mixed  $ids
-     * @param  array  $columns
+     * @param  mixed $ids
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Collection
      */
     public function findMany($ids, $columns = ['*'])
@@ -286,8 +286,8 @@
     /**
      * Find a related model by its primary key or throw an exception.
      *
-     * @param  mixed  $id
-     * @param  array  $columns
+     * @param  mixed $id
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Model|\Illuminate\Database\Eloquent\Collection
      *
      * @throws \Illuminate\Database\Eloquent\ModelNotFoundException
@@ -310,7 +310,7 @@
     /**
      * Execute the query as a "select" statement.
      *
-     * @param  array  $columns
+     * @param  array $columns
      * @return \Illuminate\Database\Eloquent\Collection
      */
     public function get($columns = ['*'])
@@ -339,7 +339,7 @@
     /**
      * Set the select clause for the relation query.
      *
-     * @param  array  $columns
+     * @param  array $columns
      * @return array
      */
     protected function getSelectColumns(array $columns = ['*'])
@@ -354,10 +354,10 @@
     /**
      * Get a paginator for the "select" statement.
      *
-     * @param  int  $perPage
+     * @param  int    $perPage
      * @param  array  $columns
-     * @param  string  $pageName
-     * @param  int  $page
+     * @param  string $pageName
+     * @param  int    $page
      * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator
      */
     public function paginate($perPage = null, $columns = ['*'], $pageName = 'page', $page = null)
@@ -370,9 +370,9 @@
     /**
      * Paginate the given query into a simple paginator.
      *
-     * @param  int  $perPage
+     * @param  int    $perPage
      * @param  array  $columns
-     * @param  string  $pageName
+     * @param  string $pageName
      * @return \Illuminate\Contracts\Pagination\Paginator
      */
     public function simplePaginate($perPage = null, $columns = ['*'], $pageName = 'page')

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/HasOne.php
+++ PHP_CodeSniffer
@@ -19,8 +19,8 @@
     /**
      * Initialize the relation on a set of models.
      *
-     * @param  array   $models
-     * @param  string  $relation
+     * @param  array  $models
+     * @param  string $relation
      * @return array
      */
     public function initRelation(array $models, $relation)
@@ -35,9 +35,9 @@
     /**
      * Match the eagerly loaded results to their parents.
      *
-     * @param  array   $models
-     * @param  \Illuminate\Database\Eloquent\Collection  $results
-     * @param  string  $relation
+     * @param  array                                    $models
+     * @param  \Illuminate\Database\Eloquent\Collection $results
+     * @param  string                                   $relation
      * @return array
      */
     public function match(array $models, Collection $results, $relation)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/HasOneOrMany.php
+++ PHP_CodeSniffer
@@ -33,10 +33,10 @@
     /**
      * Create a new has one or many relationship instance.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Model  $parent
-     * @param  string  $foreignKey
-     * @param  string  $localKey
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Model   $parent
+     * @param  string                                $foreignKey
+     * @param  string                                $localKey
      * @return void
      */
     public function __construct(Builder $query, Model $parent, $foreignKey, $localKey)
@@ -64,9 +64,9 @@
     /**
      * Add the constraints for a relationship query.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Builder  $parent
-     * @param  array|mixed  $columns
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Builder $parent
+     * @param  array|mixed                           $columns
      * @return \Illuminate\Database\Eloquent\Builder
      */
     public function getRelationQuery(Builder $query, Builder $parent, $columns = ['*'])
@@ -81,9 +81,9 @@
     /**
      * Add the constraints for a relationship query on the same table.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Builder  $parent
-     * @param  array|mixed  $columns
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Builder $parent
+     * @param  array|mixed                           $columns
      * @return \Illuminate\Database\Eloquent\Builder
      */
     public function getRelationQueryForSelfRelation(Builder $query, Builder $parent, $columns = ['*'])
@@ -112,7 +112,7 @@
     /**
      * Set the constraints for an eager load of the relation.
      *
-     * @param  array  $models
+     * @param  array $models
      * @return void
      */
     public function addEagerConstraints(array $models)
@@ -123,9 +123,9 @@
     /**
      * Match the eagerly loaded results to their single parents.
      *
-     * @param  array   $models
-     * @param  \Illuminate\Database\Eloquent\Collection  $results
-     * @param  string  $relation
+     * @param  array                                    $models
+     * @param  \Illuminate\Database\Eloquent\Collection $results
+     * @param  string                                   $relation
      * @return array
      */
     public function matchOne(array $models, Collection $results, $relation)
@@ -136,9 +136,9 @@
     /**
      * Match the eagerly loaded results to their many parents.
      *
-     * @param  array   $models
-     * @param  \Illuminate\Database\Eloquent\Collection  $results
-     * @param  string  $relation
+     * @param  array                                    $models
+     * @param  \Illuminate\Database\Eloquent\Collection $results
+     * @param  string                                   $relation
      * @return array
      */
     public function matchMany(array $models, Collection $results, $relation)
@@ -149,10 +149,10 @@
     /**
      * Match the eagerly loaded results to their many parents.
      *
-     * @param  array   $models
-     * @param  \Illuminate\Database\Eloquent\Collection  $results
-     * @param  string  $relation
-     * @param  string  $type
+     * @param  array                                    $models
+     * @param  \Illuminate\Database\Eloquent\Collection $results
+     * @param  string                                   $relation
+     * @param  string                                   $type
      * @return array
      */
     protected function matchOneOrMany(array $models, Collection $results, $relation, $type)
@@ -178,9 +178,9 @@
     /**
      * Get the value of a relationship by one or many type.
      *
-     * @param  array   $dictionary
-     * @param  string  $key
-     * @param  string  $type
+     * @param  array  $dictionary
+     * @param  string $key
+     * @param  string $type
      * @return mixed
      */
     protected function getRelationValue(array $dictionary, $key, $type)
@@ -193,7 +193,7 @@
     /**
      * Build model dictionary keyed by the relation's foreign key.
      *
-     * @param  \Illuminate\Database\Eloquent\Collection  $results
+     * @param  \Illuminate\Database\Eloquent\Collection $results
      * @return array
      */
     protected function buildDictionary(Collection $results)
@@ -215,7 +215,7 @@
     /**
      * Attach a model instance to the parent model.
      *
-     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  \Illuminate\Database\Eloquent\Model $model
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function save(Model $model)
@@ -228,7 +228,7 @@
     /**
      * Attach a collection of models to the parent instance.
      *
-     * @param  \Traversable|array  $models
+     * @param  \Traversable|array $models
      * @return \Traversable|array
      */
     public function saveMany($models)
@@ -243,8 +243,8 @@
     /**
      * Find a model by its primary key or return new instance of the related model.
      *
-     * @param  mixed  $id
-     * @param  array  $columns
+     * @param  mixed $id
+     * @param  array $columns
      * @return \Illuminate\Support\Collection|\Illuminate\Database\Eloquent\Model
      */
     public function findOrNew($id, $columns = ['*'])
@@ -261,7 +261,7 @@
     /**
      * Get the first related model record matching the attributes or instantiate it.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function firstOrNew(array $attributes)
@@ -278,7 +278,7 @@
     /**
      * Get the first related record matching the attributes or create it.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function firstOrCreate(array $attributes)
@@ -293,8 +293,8 @@
     /**
      * Create or update a related record matching the attributes, and fill it with values.
      *
-     * @param  array  $attributes
-     * @param  array  $values
+     * @param  array $attributes
+     * @param  array $values
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function updateOrCreate(array $attributes, array $values = [])
@@ -311,7 +311,7 @@
     /**
      * Create a new instance of the related model.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function create(array $attributes)
@@ -331,7 +331,7 @@
     /**
      * Create an array of new instances of the related model.
      *
-     * @param  array  $records
+     * @param  array $records
      * @return array
      */
     public function createMany(array $records)
@@ -348,7 +348,7 @@
     /**
      * Perform an update on all the related models.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return int
      */
     public function update(array $attributes)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/MorphMany.php
+++ PHP_CodeSniffer
@@ -19,8 +19,8 @@
     /**
      * Initialize the relation on a set of models.
      *
-     * @param  array   $models
-     * @param  string  $relation
+     * @param  array  $models
+     * @param  string $relation
      * @return array
      */
     public function initRelation(array $models, $relation)
@@ -35,9 +35,9 @@
     /**
      * Match the eagerly loaded results to their parents.
      *
-     * @param  array   $models
-     * @param  \Illuminate\Database\Eloquent\Collection  $results
-     * @param  string  $relation
+     * @param  array                                    $models
+     * @param  \Illuminate\Database\Eloquent\Collection $results
+     * @param  string                                   $relation
      * @return array
      */
     public function match(array $models, Collection $results, $relation)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/MorphOne.php
+++ PHP_CodeSniffer
@@ -19,8 +19,8 @@
     /**
      * Initialize the relation on a set of models.
      *
-     * @param  array   $models
-     * @param  string  $relation
+     * @param  array  $models
+     * @param  string $relation
      * @return array
      */
     public function initRelation(array $models, $relation)
@@ -35,9 +35,9 @@
     /**
      * Match the eagerly loaded results to their parents.
      *
-     * @param  array   $models
-     * @param  \Illuminate\Database\Eloquent\Collection  $results
-     * @param  string  $relation
+     * @param  array                                    $models
+     * @param  \Illuminate\Database\Eloquent\Collection $results
+     * @param  string                                   $relation
      * @return array
      */
     public function match(array $models, Collection $results, $relation)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/MorphOneOrMany.php
+++ PHP_CodeSniffer
@@ -24,11 +24,11 @@
     /**
      * Create a new morph one or many relationship instance.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Model  $parent
-     * @param  string  $type
-     * @param  string  $id
-     * @param  string  $localKey
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Model   $parent
+     * @param  string                                $type
+     * @param  string                                $id
+     * @param  string                                $localKey
      * @return void
      */
     public function __construct(Builder $query, Model $parent, $type, $id, $localKey)
@@ -57,9 +57,9 @@
     /**
      * Get the relationship query.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Builder  $parent
-     * @param  array|mixed  $columns
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Builder $parent
+     * @param  array|mixed                           $columns
      * @return \Illuminate\Database\Eloquent\Builder
      */
     public function getRelationQuery(Builder $query, Builder $parent, $columns = ['*'])
@@ -72,7 +72,7 @@
     /**
      * Set the constraints for an eager load of the relation.
      *
-     * @param  array  $models
+     * @param  array $models
      * @return void
      */
     public function addEagerConstraints(array $models)
@@ -85,7 +85,7 @@
     /**
      * Attach a model instance to the parent model.
      *
-     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  \Illuminate\Database\Eloquent\Model $model
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function save(Model $model)
@@ -98,8 +98,8 @@
     /**
      * Find a related model by its primary key or return new instance of the related model.
      *
-     * @param  mixed  $id
-     * @param  array  $columns
+     * @param  mixed $id
+     * @param  array $columns
      * @return \Illuminate\Support\Collection|\Illuminate\Database\Eloquent\Model
      */
     public function findOrNew($id, $columns = ['*'])
@@ -119,7 +119,7 @@
     /**
      * Get the first related model record matching the attributes or instantiate it.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function firstOrNew(array $attributes)
@@ -139,7 +139,7 @@
     /**
      * Get the first related record matching the attributes or create it.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function firstOrCreate(array $attributes)
@@ -154,8 +154,8 @@
     /**
      * Create or update a related record matching the attributes, and fill it with values.
      *
-     * @param  array  $attributes
-     * @param  array  $values
+     * @param  array $attributes
+     * @param  array $values
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function updateOrCreate(array $attributes, array $values = [])
@@ -172,7 +172,7 @@
     /**
      * Create a new instance of the related model.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function create(array $attributes)
@@ -192,7 +192,7 @@
     /**
      * Set the foreign ID and type for creating a related model.
      *
-     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  \Illuminate\Database\Eloquent\Model $model
      * @return void
      */
     protected function setForeignAttributesForCreate(Model $model)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/MorphPivot.php
+++ PHP_CodeSniffer
@@ -27,7 +27,7 @@
     /**
      * Set the keys for a save update query.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
+     * @param  \Illuminate\Database\Eloquent\Builder $query
      * @return \Illuminate\Database\Eloquent\Builder
      */
     protected function setKeysForSaveQuery(Builder $query)
@@ -54,7 +54,7 @@
     /**
      * Set the morph type for the pivot.
      *
-     * @param  string  $morphType
+     * @param  string $morphType
      * @return $this
      */
     public function setMorphType($morphType)
@@ -67,7 +67,7 @@
     /**
      * Set the morph class for the pivot.
      *
-     * @param  string  $morphClass
+     * @param  string $morphClass
      * @return \Illuminate\Database\Eloquent\Relations\MorphPivot
      */
     public function setMorphClass($morphClass)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/MorphTo.php
+++ PHP_CodeSniffer
@@ -40,12 +40,12 @@
     /**
      * Create a new morph to relationship instance.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Model  $parent
-     * @param  string  $foreignKey
-     * @param  string  $otherKey
-     * @param  string  $type
-     * @param  string  $relation
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Model   $parent
+     * @param  string                                $foreignKey
+     * @param  string                                $otherKey
+     * @param  string                                $type
+     * @param  string                                $relation
      * @return void
      */
     public function __construct(Builder $query, Model $parent, $foreignKey, $otherKey, $type, $relation)
@@ -72,7 +72,7 @@
     /**
      * Set the constraints for an eager load of the relation.
      *
-     * @param  array  $models
+     * @param  array $models
      * @return void
      */
     public function addEagerConstraints(array $models)
@@ -83,7 +83,7 @@
     /**
      * Build a dictionary with the models.
      *
-     * @param  \Illuminate\Database\Eloquent\Collection  $models
+     * @param  \Illuminate\Database\Eloquent\Collection $models
      * @return void
      */
     protected function buildDictionary(Collection $models)
@@ -98,9 +98,9 @@
     /**
      * Match the eagerly loaded results to their parents.
      *
-     * @param  array   $models
-     * @param  \Illuminate\Database\Eloquent\Collection  $results
-     * @param  string  $relation
+     * @param  array                                    $models
+     * @param  \Illuminate\Database\Eloquent\Collection $results
+     * @param  string                                   $relation
      * @return array
      */
     public function match(array $models, Collection $results, $relation)
@@ -111,7 +111,7 @@
     /**
      * Associate the model instance to the given parent.
      *
-     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  \Illuminate\Database\Eloquent\Model $model
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function associate($model)
@@ -156,8 +156,8 @@
     /**
      * Match the results for a given type to their parents.
      *
-     * @param  string  $type
-     * @param  \Illuminate\Database\Eloquent\Collection  $results
+     * @param  string                                   $type
+     * @param  \Illuminate\Database\Eloquent\Collection $results
      * @return void
      */
     protected function matchToMorphParents($type, Collection $results)
@@ -174,7 +174,7 @@
     /**
      * Get all of the relation results for a type.
      *
-     * @param  string  $type
+     * @param  string $type
      * @return \Illuminate\Database\Eloquent\Collection
      */
     protected function getResultsByType($type)
@@ -193,22 +193,24 @@
     /**
      * Gather all of the foreign keys for a given type.
      *
-     * @param  string  $type
+     * @param  string $type
      * @return array
      */
     protected function gatherKeysByType($type)
     {
         $foreign = $this->foreignKey;
 
-        return collect($this->dictionary[$type])->map(function ($models) use ($foreign) {
-            return head($models)->{$foreign};
-        })->values()->unique();
+        return collect($this->dictionary[$type])->map(
+            function ($models) use ($foreign) {
+                return head($models)->{$foreign};
+            }
+        )->values()->unique();
     }
 
     /**
      * Create a new model instance by type.
      *
-     * @param  string  $type
+     * @param  string $type
      * @return \Illuminate\Database\Eloquent\Model
      */
     public function createModelByType($type)
@@ -241,7 +243,7 @@
     /**
      * Replay stored macro calls on the actual related instance.
      *
-     * @param \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Builder $query
      * @return \Illuminate\Database\Eloquent\Builder
      */
     protected function replayMacros(Builder $query)
@@ -256,8 +258,8 @@
     /**
      * Handle dynamic method calls to the relationship.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      */
     public function __call($method, $parameters)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/MorphToMany.php
+++ PHP_CodeSniffer
@@ -34,14 +34,14 @@
     /**
      * Create a new morph to many relationship instance.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Model  $parent
-     * @param  string  $name
-     * @param  string  $table
-     * @param  string  $foreignKey
-     * @param  string  $otherKey
-     * @param  string  $relationName
-     * @param  bool  $inverse
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Model   $parent
+     * @param  string                                $name
+     * @param  string                                $table
+     * @param  string                                $foreignKey
+     * @param  string                                $otherKey
+     * @param  string                                $relationName
+     * @param  bool                                  $inverse
      * @return void
      */
     public function __construct(Builder $query, Model $parent, $name, $table, $foreignKey, $otherKey, $relationName = null, $inverse = false)
@@ -70,9 +70,9 @@
     /**
      * Add the constraints for a relationship count query.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Builder  $parent
-     * @param  array|mixed  $columns
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Builder $parent
+     * @param  array|mixed                           $columns
      * @return \Illuminate\Database\Eloquent\Builder
      */
     public function getRelationQuery(Builder $query, Builder $parent, $columns = ['*'])
@@ -85,7 +85,7 @@
     /**
      * Set the constraints for an eager load of the relation.
      *
-     * @param  array  $models
+     * @param  array $models
      * @return void
      */
     public function addEagerConstraints(array $models)
@@ -98,8 +98,8 @@
     /**
      * Create a new pivot attachment record.
      *
-     * @param  int   $id
-     * @param  bool  $timed
+     * @param  int  $id
+     * @param  bool $timed
      * @return array
      */
     protected function createAttachRecord($id, $timed)
@@ -124,8 +124,8 @@
     /**
      * Create a new pivot model instance.
      *
-     * @param  array  $attributes
-     * @param  bool   $exists
+     * @param  array $attributes
+     * @param  bool  $exists
      * @return \Illuminate\Database\Eloquent\Relations\Pivot
      */
     public function newPivot(array $attributes = [], $exists = false)
@@ -133,8 +133,8 @@
         $pivot = new MorphPivot($this->parent, $attributes, $this->table, $exists);
 
         $pivot->setPivotKeys($this->foreignKey, $this->otherKey)
-              ->setMorphType($this->morphType)
-              ->setMorphClass($this->morphClass);
+            ->setMorphType($this->morphType)
+            ->setMorphClass($this->morphClass);
 
         return $pivot;
     }

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/Pivot.php
+++ PHP_CodeSniffer
@@ -38,10 +38,10 @@
     /**
      * Create a new pivot model instance.
      *
-     * @param  \Illuminate\Database\Eloquent\Model  $parent
-     * @param  array   $attributes
-     * @param  string  $table
-     * @param  bool    $exists
+     * @param  \Illuminate\Database\Eloquent\Model $parent
+     * @param  array                               $attributes
+     * @param  string                              $table
+     * @param  bool                                $exists
      * @return void
      */
     public function __construct(Model $parent, $attributes, $table, $exists = false)
@@ -72,10 +72,10 @@
     /**
      * Create a new pivot model from raw values returned from a query.
      *
-     * @param  \Illuminate\Database\Eloquent\Model  $parent
-     * @param  array   $attributes
-     * @param  string  $table
-     * @param  bool    $exists
+     * @param  \Illuminate\Database\Eloquent\Model $parent
+     * @param  array                               $attributes
+     * @param  string                              $table
+     * @param  bool                                $exists
      * @return static
      */
     public static function fromRawAttributes(Model $parent, $attributes, $table, $exists = false)
@@ -90,7 +90,7 @@
     /**
      * Set the keys for a save update query.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
+     * @param  \Illuminate\Database\Eloquent\Builder $query
      * @return \Illuminate\Database\Eloquent\Builder
      */
     protected function setKeysForSaveQuery(Builder $query)
@@ -147,8 +147,8 @@
     /**
      * Set the key names for the pivot model instance.
      *
-     * @param  string  $foreignKey
-     * @param  string  $otherKey
+     * @param  string $foreignKey
+     * @param  string $otherKey
      * @return $this
      */
     public function setPivotKeys($foreignKey, $otherKey)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Relations/Relation.php
+++ PHP_CodeSniffer
@@ -49,8 +49,8 @@
     /**
      * Create a new relation instance.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Model  $parent
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Model   $parent
      * @return void
      */
     public function __construct(Builder $query, Model $parent)
@@ -72,7 +72,7 @@
     /**
      * Set the constraints for an eager load of the relation.
      *
-     * @param  array  $models
+     * @param  array $models
      * @return void
      */
     abstract public function addEagerConstraints(array $models);
@@ -80,8 +80,8 @@
     /**
      * Initialize the relation on a set of models.
      *
-     * @param  array   $models
-     * @param  string  $relation
+     * @param  array  $models
+     * @param  string $relation
      * @return array
      */
     abstract public function initRelation(array $models, $relation);
@@ -89,9 +89,9 @@
     /**
      * Match the eagerly loaded results to their parents.
      *
-     * @param  array   $models
-     * @param  \Illuminate\Database\Eloquent\Collection  $results
-     * @param  string  $relation
+     * @param  array                                    $models
+     * @param  \Illuminate\Database\Eloquent\Collection $results
+     * @param  string                                   $relation
      * @return array
      */
     abstract public function match(array $models, Collection $results, $relation);
@@ -128,7 +128,7 @@
     /**
      * Run a raw update against the base query.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return int
      */
     public function rawUpdate(array $attributes = [])
@@ -139,8 +139,8 @@
     /**
      * Add the constraints for a relationship count query.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Builder  $parent
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Builder $parent
      * @return \Illuminate\Database\Eloquent\Builder
      */
     public function getRelationCountQuery(Builder $query, Builder $parent)
@@ -151,9 +151,9 @@
     /**
      * Add the constraints for a relationship query.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $query
-     * @param  \Illuminate\Database\Eloquent\Builder  $parent
-     * @param  array|mixed $columns
+     * @param  \Illuminate\Database\Eloquent\Builder $query
+     * @param  \Illuminate\Database\Eloquent\Builder $parent
+     * @param  array|mixed                           $columns
      * @return \Illuminate\Database\Eloquent\Builder
      */
     public function getRelationQuery(Builder $query, Builder $parent, $columns = ['*'])
@@ -168,7 +168,7 @@
     /**
      * Run a callback with constraints disabled on the relation.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return mixed
      */
     public static function noConstraints(Closure $callback)
@@ -192,15 +192,21 @@
     /**
      * Get all of the primary keys for an array of models.
      *
-     * @param  array   $models
-     * @param  string  $key
+     * @param  array  $models
+     * @param  string $key
      * @return array
      */
     protected function getKeys(array $models, $key = null)
     {
-        return array_unique(array_values(array_map(function ($value) use ($key) {
-            return $key ? $value->getAttribute($key) : $value->getKey();
-        }, $models)));
+        return array_unique(
+            array_values(
+                array_map(
+                    function ($value) use ($key) {
+                        return $key ? $value->getAttribute($key) : $value->getKey();
+                    }, $models
+                )
+            )
+        );
     }
 
     /**
@@ -286,7 +292,7 @@
     /**
      * Wrap the given value with the parent query's grammar.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     public function wrap($value)
@@ -297,8 +303,8 @@
     /**
      * Set or get the morph map for polymorphic relations.
      *
-     * @param  array|null  $map
-     * @param  bool  $merge
+     * @param  array|null $map
+     * @param  bool       $merge
      * @return array
      */
     public static function morphMap(array $map = null, $merge = true)
@@ -315,7 +321,7 @@
     /**
      * Builds a table-keyed array from model class names.
      *
-     * @param  string[]|null  $models
+     * @param  string[]|null $models
      * @return array|null
      */
     protected static function buildMorphMapFromModels(array $models = null)
@@ -324,9 +330,11 @@
             return $models;
         }
 
-        $tables = array_map(function ($model) {
-            return (new $model)->getTable();
-        }, $models);
+        $tables = array_map(
+            function ($model) {
+                return (new $model)->getTable();
+            }, $models
+        );
 
         return array_combine($tables, $models);
     }
@@ -334,8 +342,8 @@
     /**
      * Handle dynamic method calls to the relationship.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      */
     public function __call($method, $parameters)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/Scope.php
+++ PHP_CodeSniffer
@@ -7,8 +7,8 @@
     /**
      * Apply the scope to a given Eloquent query builder.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $builder
-     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  \Illuminate\Database\Eloquent\Builder $builder
+     * @param  \Illuminate\Database\Eloquent\Model   $model
      * @return void
      */
     public function apply(Builder $builder, Model $model);

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/SoftDeletes.php
+++ PHP_CodeSniffer
@@ -106,7 +106,7 @@
     /**
      * Register a restoring model event with the dispatcher.
      *
-     * @param  \Closure|string  $callback
+     * @param  \Closure|string $callback
      * @return void
      */
     public static function restoring($callback)
@@ -117,7 +117,7 @@
     /**
      * Register a restored model event with the dispatcher.
      *
-     * @param  \Closure|string  $callback
+     * @param  \Closure|string $callback
      * @return void
      */
     public static function restored($callback)

--- vendor/laravel/framework/src/Illuminate/Database/Eloquent/SoftDeletingScope.php
+++ PHP_CodeSniffer
@@ -14,8 +14,8 @@
     /**
      * Apply the scope to a given Eloquent query builder.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $builder
-     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  \Illuminate\Database\Eloquent\Builder $builder
+     * @param  \Illuminate\Database\Eloquent\Model   $model
      * @return void
      */
     public function apply(Builder $builder, Model $model)
@@ -26,7 +26,7 @@
     /**
      * Extend the query builder with the needed functions.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $builder
+     * @param  \Illuminate\Database\Eloquent\Builder $builder
      * @return void
      */
     public function extend(Builder $builder)
@@ -35,19 +35,23 @@
             $this->{"add{$extension}"}($builder);
         }
 
-        $builder->onDelete(function (Builder $builder) {
-            $column = $this->getDeletedAtColumn($builder);
-
-            return $builder->update([
-                $column => $builder->getModel()->freshTimestampString(),
-            ]);
-        });
+        $builder->onDelete(
+            function (Builder $builder) {
+                $column = $this->getDeletedAtColumn($builder);
+
+                return $builder->update(
+                    [
+                    $column => $builder->getModel()->freshTimestampString(),
+                    ]
+                );
+            }
+        );
     }
 
     /**
      * Get the "deleted at" column for the builder.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $builder
+     * @param  \Illuminate\Database\Eloquent\Builder $builder
      * @return string
      */
     protected function getDeletedAtColumn(Builder $builder)
@@ -62,60 +66,68 @@
     /**
      * Add the force delete extension to the builder.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $builder
+     * @param  \Illuminate\Database\Eloquent\Builder $builder
      * @return void
      */
     protected function addForceDelete(Builder $builder)
     {
-        $builder->macro('forceDelete', function (Builder $builder) {
-            return $builder->getQuery()->delete();
-        });
+        $builder->macro(
+            'forceDelete', function (Builder $builder) {
+                return $builder->getQuery()->delete();
+            }
+        );
     }
 
     /**
      * Add the restore extension to the builder.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $builder
+     * @param  \Illuminate\Database\Eloquent\Builder $builder
      * @return void
      */
     protected function addRestore(Builder $builder)
     {
-        $builder->macro('restore', function (Builder $builder) {
-            $builder->withTrashed();
-
-            return $builder->update([$builder->getModel()->getDeletedAtColumn() => null]);
-        });
+        $builder->macro(
+            'restore', function (Builder $builder) {
+                $builder->withTrashed();
+
+                return $builder->update([$builder->getModel()->getDeletedAtColumn() => null]);
+            }
+        );
     }
 
     /**
      * Add the with-trashed extension to the builder.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $builder
+     * @param  \Illuminate\Database\Eloquent\Builder $builder
      * @return void
      */
     protected function addWithTrashed(Builder $builder)
     {
-        $builder->macro('withTrashed', function (Builder $builder) {
-            return $builder->withoutGlobalScope($this);
-        });
+        $builder->macro(
+            'withTrashed', function (Builder $builder) {
+                return $builder->withoutGlobalScope($this);
+            }
+        );
     }
 
     /**
      * Add the only-trashed extension to the builder.
      *
-     * @param  \Illuminate\Database\Eloquent\Builder  $builder
+     * @param  \Illuminate\Database\Eloquent\Builder $builder
      * @return void
      */
     protected function addOnlyTrashed(Builder $builder)
     {
-        $builder->macro('onlyTrashed', function (Builder $builder) {
-            $model = $builder->getModel();
-
-            $builder->withoutGlobalScope($this)->whereNotNull(
-                $model->getQualifiedDeletedAtColumn()
-            );
-
-            return $builder;
-        });
+        $builder->macro(
+            'onlyTrashed', function (Builder $builder) {
+                $model = $builder->getModel();
+
+                $builder->withoutGlobalScope($this)->whereNotNull(
+                    $model->getQualifiedDeletedAtColumn()
+                );
+
+                return $builder;
+            }
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Database/Events/ConnectionEvent.php
+++ PHP_CodeSniffer
@@ -21,7 +21,7 @@
     /**
      * Create a new event instance.
      *
-     * @param  \Illuminate\Database\Connection  $connection
+     * @param  \Illuminate\Database\Connection $connection
      * @return void
      */
     public function __construct($connection)

--- vendor/laravel/framework/src/Illuminate/Database/Events/QueryExecuted.php
+++ PHP_CodeSniffer
@@ -42,9 +42,9 @@
     /**
      * Create a new event instance.
      *
-     * @param  string  $sql
-     * @param  array  $bindings
-     * @param  float  $time
+     * @param string $sql
+     * @param array  $bindings
+     * @param float  $time
      * @param
      */
     public function __construct($sql, $bindings, $time, $connection)

--- vendor/laravel/framework/src/Illuminate/Database/Grammar.php
+++ PHP_CodeSniffer
@@ -16,7 +16,7 @@
     /**
      * Wrap an array of values.
      *
-     * @param  array  $values
+     * @param  array $values
      * @return array
      */
     public function wrapArray(array $values)
@@ -27,7 +27,7 @@
     /**
      * Wrap a table in keyword identifiers.
      *
-     * @param  \Illuminate\Database\Query\Expression|string  $table
+     * @param  \Illuminate\Database\Query\Expression|string $table
      * @return string
      */
     public function wrapTable($table)
@@ -42,8 +42,8 @@
     /**
      * Wrap a value in keyword identifiers.
      *
-     * @param  \Illuminate\Database\Query\Expression|string  $value
-     * @param  bool    $prefixAlias
+     * @param  \Illuminate\Database\Query\Expression|string $value
+     * @param  bool                                         $prefixAlias
      * @return string
      */
     public function wrap($value, $prefixAlias = false)
@@ -86,7 +86,7 @@
     /**
      * Wrap a single string in keyword identifiers.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function wrapValue($value)
@@ -101,7 +101,7 @@
     /**
      * Convert an array of column names into a delimited string.
      *
-     * @param  array   $columns
+     * @param  array $columns
      * @return string
      */
     public function columnize(array $columns)
@@ -112,7 +112,7 @@
     /**
      * Create query parameter place-holders for an array.
      *
-     * @param  array   $values
+     * @param  array $values
      * @return string
      */
     public function parameterize(array $values)
@@ -123,7 +123,7 @@
     /**
      * Get the appropriate query parameter place-holder for a value.
      *
-     * @param  mixed   $value
+     * @param  mixed $value
      * @return string
      */
     public function parameter($value)
@@ -134,7 +134,7 @@
     /**
      * Get the value of a raw expression.
      *
-     * @param  \Illuminate\Database\Query\Expression  $expression
+     * @param  \Illuminate\Database\Query\Expression $expression
      * @return string
      */
     public function getValue($expression)
@@ -145,7 +145,7 @@
     /**
      * Determine if the given value is a raw expression.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return bool
      */
     public function isExpression($value)
@@ -176,7 +176,7 @@
     /**
      * Set the grammar's table prefix.
      *
-     * @param  string  $prefix
+     * @param  string $prefix
      * @return $this
      */
     public function setTablePrefix($prefix)

--- vendor/laravel/framework/src/Illuminate/Database/Migrations/DatabaseMigrationRepository.php
+++ PHP_CodeSniffer
@@ -30,8 +30,8 @@
     /**
      * Create a new database migration repository instance.
      *
-     * @param  \Illuminate\Database\ConnectionResolverInterface  $resolver
-     * @param  string  $table
+     * @param  \Illuminate\Database\ConnectionResolverInterface $resolver
+     * @param  string                                           $table
      * @return void
      */
     public function __construct(Resolver $resolver, $table)
@@ -48,9 +48,9 @@
     public function getRan()
     {
         return $this->table()
-                ->orderBy('batch', 'asc')
-                ->orderBy('migration', 'asc')
-                ->pluck('migration');
+            ->orderBy('batch', 'asc')
+            ->orderBy('migration', 'asc')
+            ->pluck('migration');
     }
 
     /**
@@ -68,8 +68,8 @@
     /**
      * Log that a migration was run.
      *
-     * @param  string  $file
-     * @param  int     $batch
+     * @param  string $file
+     * @param  int    $batch
      * @return void
      */
     public function log($file, $batch)
@@ -82,7 +82,7 @@
     /**
      * Remove a migration from the log.
      *
-     * @param  object  $migration
+     * @param  object $migration
      * @return void
      */
     public function delete($migration)
@@ -119,14 +119,16 @@
     {
         $schema = $this->getConnection()->getSchemaBuilder();
 
-        $schema->create($this->table, function ($table) {
-            // The migrations table is responsible for keeping track of which of the
-            // migrations have actually run for the application. We'll create the
-            // table to hold the migration file's path as well as the batch ID.
-            $table->string('migration');
-
-            $table->integer('batch');
-        });
+        $schema->create(
+            $this->table, function ($table) {
+                // The migrations table is responsible for keeping track of which of the
+                // migrations have actually run for the application. We'll create the
+                // table to hold the migration file's path as well as the batch ID.
+                $table->string('migration');
+
+                $table->integer('batch');
+            }
+        );
     }
 
     /**
@@ -174,7 +176,7 @@
     /**
      * Set the information source to gather data.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function setSource($name)

--- vendor/laravel/framework/src/Illuminate/Database/Migrations/MigrationCreator.php
+++ PHP_CodeSniffer
@@ -25,7 +25,7 @@
     /**
      * Create a new migration creator instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
+     * @param  \Illuminate\Filesystem\Filesystem $files
      * @return void
      */
     public function __construct(Filesystem $files)
@@ -36,10 +36,10 @@
     /**
      * Create a new migration at the given path.
      *
-     * @param  string  $name
-     * @param  string  $path
-     * @param  string  $table
-     * @param  bool    $create
+     * @param  string $name
+     * @param  string $path
+     * @param  string $table
+     * @param  bool   $create
      * @return string
      */
     public function create($name, $path, $table = null, $create = false)
@@ -61,8 +61,8 @@
     /**
      * Get the migration stub file.
      *
-     * @param  string  $table
-     * @param  bool    $create
+     * @param  string $table
+     * @param  bool   $create
      * @return string
      */
     protected function getStub($table, $create)
@@ -84,9 +84,9 @@
     /**
      * Populate the place-holders in the migration stub.
      *
-     * @param  string  $name
-     * @param  string  $stub
-     * @param  string  $table
+     * @param  string $name
+     * @param  string $stub
+     * @param  string $table
      * @return string
      */
     protected function populateStub($name, $stub, $table)
@@ -106,7 +106,7 @@
     /**
      * Get the class name of a migration name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     protected function getClassName($name)
@@ -129,7 +129,7 @@
     /**
      * Register a post migration create hook.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return void
      */
     public function afterCreate(Closure $callback)
@@ -140,8 +140,8 @@
     /**
      * Get the full path name to the migration.
      *
-     * @param  string  $name
-     * @param  string  $path
+     * @param  string $name
+     * @param  string $path
      * @return string
      */
     protected function getPath($name, $path)

--- vendor/laravel/framework/src/Illuminate/Database/Migrations/MigrationRepositoryInterface.php
+++ PHP_CodeSniffer
@@ -21,8 +21,8 @@
     /**
      * Log that a migration was run.
      *
-     * @param  string  $file
-     * @param  int     $batch
+     * @param  string $file
+     * @param  int    $batch
      * @return void
      */
     public function log($file, $batch);
@@ -30,7 +30,7 @@
     /**
      * Remove a migration from the log.
      *
-     * @param  object  $migration
+     * @param  object $migration
      * @return void
      */
     public function delete($migration);
@@ -59,7 +59,7 @@
     /**
      * Set the information source to gather data.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function setSource($name);

--- vendor/laravel/framework/src/Illuminate/Database/Migrations/Migrator.php
+++ PHP_CodeSniffer
@@ -47,15 +47,16 @@
     /**
      * Create a new migrator instance.
      *
-     * @param  \Illuminate\Database\Migrations\MigrationRepositoryInterface  $repository
-     * @param  \Illuminate\Database\ConnectionResolverInterface  $resolver
-     * @param  \Illuminate\Filesystem\Filesystem  $files
+     * @param  \Illuminate\Database\Migrations\MigrationRepositoryInterface $repository
+     * @param  \Illuminate\Database\ConnectionResolverInterface             $resolver
+     * @param  \Illuminate\Filesystem\Filesystem                            $files
      * @return void
      */
     public function __construct(MigrationRepositoryInterface $repository,
-                                Resolver $resolver,
-                                Filesystem $files)
-    {
+        Resolver $resolver,
+        Filesystem $files
+    ) {
+    
         $this->files = $files;
         $this->resolver = $resolver;
         $this->repository = $repository;
@@ -64,7 +65,7 @@
     /**
      * Run the outstanding migrations at a given path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @param  array  $options
      * @return void
      */
@@ -89,8 +90,8 @@
     /**
      * Run an array of migrations.
      *
-     * @param  array  $migrations
-     * @param  array  $options
+     * @param  array $migrations
+     * @param  array $options
      * @return void
      */
     public function runMigrationList($migrations, array $options = [])
@@ -128,9 +129,9 @@
     /**
      * Run "up" a migration instance.
      *
-     * @param  string  $file
-     * @param  int     $batch
-     * @param  bool    $pretend
+     * @param  string $file
+     * @param  int    $batch
+     * @param  bool   $pretend
      * @return void
      */
     protected function runUp($file, $batch, $pretend)
@@ -157,7 +158,7 @@
     /**
      * Rollback the last migration operation.
      *
-     * @param  bool  $pretend
+     * @param  bool $pretend
      * @return int
      */
     public function rollback($pretend = false)
@@ -188,7 +189,7 @@
     /**
      * Rolls all of the currently applied migrations back.
      *
-     * @param  bool  $pretend
+     * @param  bool $pretend
      * @return int
      */
     public function reset($pretend = false)
@@ -213,8 +214,8 @@
     /**
      * Run "down" a migration instance.
      *
-     * @param  object  $migration
-     * @param  bool    $pretend
+     * @param  object $migration
+     * @param  bool   $pretend
      * @return void
      */
     protected function runDown($migration, $pretend)
@@ -243,7 +244,7 @@
     /**
      * Get all of the migration files in a given path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return array
      */
     public function getMigrationFiles($path)
@@ -257,9 +258,11 @@
             return [];
         }
 
-        $files = array_map(function ($file) {
-            return str_replace('.php', '', basename($file));
-        }, $files);
+        $files = array_map(
+            function ($file) {
+                return str_replace('.php', '', basename($file));
+            }, $files
+        );
 
         // Once we have all of the formatted file names we will sort them and since
         // they all start with a timestamp this should give us the migrations in
@@ -272,8 +275,8 @@
     /**
      * Require in all the migration files in a given path.
      *
-     * @param  string  $path
-     * @param  array   $files
+     * @param  string $path
+     * @param  array  $files
      * @return void
      */
     public function requireFiles($path, array $files)
@@ -286,8 +289,8 @@
     /**
      * Pretend to run the migrations.
      *
-     * @param  object  $migration
-     * @param  string  $method
+     * @param  object $migration
+     * @param  string $method
      * @return void
      */
     protected function pretendToRun($migration, $method)
@@ -302,8 +305,8 @@
     /**
      * Get all of the queries that would be run for a migration.
      *
-     * @param  object  $migration
-     * @param  string  $method
+     * @param  object $migration
+     * @param  string $method
      * @return array
      */
     protected function getQueries($migration, $method)
@@ -315,15 +318,17 @@
         // that would get fired against the database system for this migration.
         $db = $this->resolveConnection($connection);
 
-        return $db->pretend(function () use ($migration, $method) {
-            $migration->$method();
-        });
+        return $db->pretend(
+            function () use ($migration, $method) {
+                $migration->$method();
+            }
+        );
     }
 
     /**
      * Resolve a migration instance from a file.
      *
-     * @param  string  $file
+     * @param  string $file
      * @return object
      */
     public function resolve($file)
@@ -338,7 +343,7 @@
     /**
      * Raise a note event for the migrator.
      *
-     * @param  string  $message
+     * @param  string $message
      * @return void
      */
     protected function note($message)
@@ -359,7 +364,7 @@
     /**
      * Resolve the database connection instance.
      *
-     * @param  string  $connection
+     * @param  string $connection
      * @return \Illuminate\Database\Connection
      */
     public function resolveConnection($connection)
@@ -370,7 +375,7 @@
     /**
      * Set the default connection name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function setConnection($name)

--- vendor/laravel/framework/src/Illuminate/Database/MigrationServiceProvider.php
+++ PHP_CodeSniffer
@@ -49,11 +49,13 @@
      */
     protected function registerRepository()
     {
-        $this->app->singleton('migration.repository', function ($app) {
-            $table = $app['config']['database.migrations'];
+        $this->app->singleton(
+            'migration.repository', function ($app) {
+                $table = $app['config']['database.migrations'];
 
-            return new DatabaseMigrationRepository($app['db'], $table);
-        });
+                return new DatabaseMigrationRepository($app['db'], $table);
+            }
+        );
     }
 
     /**
@@ -66,11 +68,13 @@
         // The migrator is responsible for actually running and rollback the migration
         // files in the application. We'll pass in our database connection resolver
         // so the migrator can resolve any of these connections when it needs to.
-        $this->app->singleton('migrator', function ($app) {
-            $repository = $app['migration.repository'];
+        $this->app->singleton(
+            'migrator', function ($app) {
+                $repository = $app['migration.repository'];
 
-            return new Migrator($repository, $app['db'], $app['files']);
-        });
+                return new Migrator($repository, $app['db'], $app['files']);
+            }
+        );
     }
 
     /**
@@ -80,9 +84,11 @@
      */
     protected function registerCreator()
     {
-        $this->app->singleton('migration.creator', function ($app) {
-            return new MigrationCreator($app['files']);
-        });
+        $this->app->singleton(
+            'migration.creator', function ($app) {
+                return new MigrationCreator($app['files']);
+            }
+        );
     }
 
     /**
@@ -119,9 +125,11 @@
      */
     protected function registerMigrateCommand()
     {
-        $this->app->singleton('command.migrate', function ($app) {
-            return new MigrateCommand($app['migrator']);
-        });
+        $this->app->singleton(
+            'command.migrate', function ($app) {
+                return new MigrateCommand($app['migrator']);
+            }
+        );
     }
 
     /**
@@ -131,9 +139,11 @@
      */
     protected function registerRollbackCommand()
     {
-        $this->app->singleton('command.migrate.rollback', function ($app) {
-            return new RollbackCommand($app['migrator']);
-        });
+        $this->app->singleton(
+            'command.migrate.rollback', function ($app) {
+                return new RollbackCommand($app['migrator']);
+            }
+        );
     }
 
     /**
@@ -143,9 +153,11 @@
      */
     protected function registerResetCommand()
     {
-        $this->app->singleton('command.migrate.reset', function ($app) {
-            return new ResetCommand($app['migrator']);
-        });
+        $this->app->singleton(
+            'command.migrate.reset', function ($app) {
+                return new ResetCommand($app['migrator']);
+            }
+        );
     }
 
     /**
@@ -155,9 +167,11 @@
      */
     protected function registerRefreshCommand()
     {
-        $this->app->singleton('command.migrate.refresh', function () {
-            return new RefreshCommand;
-        });
+        $this->app->singleton(
+            'command.migrate.refresh', function () {
+                return new RefreshCommand;
+            }
+        );
     }
 
     /**
@@ -167,16 +181,18 @@
      */
     protected function registerMakeCommand()
     {
-        $this->app->singleton('command.migrate.make', function ($app) {
-            // Once we have the migration creator registered, we will create the command
-            // and inject the creator. The creator is responsible for the actual file
-            // creation of the migrations, and may be extended by these developers.
-            $creator = $app['migration.creator'];
+        $this->app->singleton(
+            'command.migrate.make', function ($app) {
+                // Once we have the migration creator registered, we will create the command
+                // and inject the creator. The creator is responsible for the actual file
+                // creation of the migrations, and may be extended by these developers.
+                $creator = $app['migration.creator'];
 
-            $composer = $app['composer'];
+                $composer = $app['composer'];
 
-            return new MigrateMakeCommand($creator, $composer);
-        });
+                return new MigrateMakeCommand($creator, $composer);
+            }
+        );
     }
 
     /**
@@ -186,9 +202,11 @@
      */
     protected function registerStatusCommand()
     {
-        $this->app->singleton('command.migrate.status', function ($app) {
-            return new StatusCommand($app['migrator']);
-        });
+        $this->app->singleton(
+            'command.migrate.status', function ($app) {
+                return new StatusCommand($app['migrator']);
+            }
+        );
     }
 
     /**
@@ -198,9 +216,11 @@
      */
     protected function registerInstallCommand()
     {
-        $this->app->singleton('command.migrate.install', function ($app) {
-            return new InstallCommand($app['migration.repository']);
-        });
+        $this->app->singleton(
+            'command.migrate.install', function ($app) {
+                return new InstallCommand($app['migration.repository']);
+            }
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Database/Query/Builder.php
+++ PHP_CodeSniffer
@@ -208,15 +208,16 @@
     /**
      * Create a new query builder instance.
      *
-     * @param  \Illuminate\Database\ConnectionInterface  $connection
-     * @param  \Illuminate\Database\Query\Grammars\Grammar  $grammar
-     * @param  \Illuminate\Database\Query\Processors\Processor  $processor
+     * @param  \Illuminate\Database\ConnectionInterface        $connection
+     * @param  \Illuminate\Database\Query\Grammars\Grammar     $grammar
+     * @param  \Illuminate\Database\Query\Processors\Processor $processor
      * @return void
      */
     public function __construct(ConnectionInterface $connection,
-                                Grammar $grammar = null,
-                                Processor $processor = null)
-    {
+        Grammar $grammar = null,
+        Processor $processor = null
+    ) {
+    
         $this->connection = $connection;
         $this->grammar = $grammar ?: $connection->getQueryGrammar();
         $this->processor = $processor ?: $connection->getPostProcessor();
@@ -225,7 +226,7 @@
     /**
      * Set the columns to be selected.
      *
-     * @param  array|mixed  $columns
+     * @param  array|mixed $columns
      * @return $this
      */
     public function select($columns = ['*'])
@@ -238,8 +239,8 @@
     /**
      * Add a new "raw" select expression to the query.
      *
-     * @param  string  $expression
-     * @param  array   $bindings
+     * @param  string $expression
+     * @param  array  $bindings
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function selectRaw($expression, array $bindings = [])
@@ -257,7 +258,7 @@
      * Add a subselect expression to the query.
      *
      * @param  \Closure|\Illuminate\Database\Query\Builder|string $query
-     * @param  string  $as
+     * @param  string                                             $as
      * @return \Illuminate\Database\Query\Builder|static
      *
      * @throws \InvalidArgumentException
@@ -286,7 +287,7 @@
     /**
      * Add a new select column to the query.
      *
-     * @param  array|mixed  $column
+     * @param  array|mixed $column
      * @return $this
      */
     public function addSelect($column)
@@ -313,7 +314,7 @@
     /**
      * Set the table which the query is targeting.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return $this
      */
     public function from($table)
@@ -326,12 +327,12 @@
     /**
      * Add a join clause to the query.
      *
-     * @param  string  $table
-     * @param  string  $one
-     * @param  string  $operator
-     * @param  string  $two
-     * @param  string  $type
-     * @param  bool    $where
+     * @param  string $table
+     * @param  string $one
+     * @param  string $operator
+     * @param  string $two
+     * @param  string $type
+     * @param  bool   $where
      * @return $this
      */
     public function join($table, $one, $operator = null, $two = null, $type = 'inner', $where = false)
@@ -368,11 +369,11 @@
     /**
      * Add a "join where" clause to the query.
      *
-     * @param  string  $table
-     * @param  string  $one
-     * @param  string  $operator
-     * @param  string  $two
-     * @param  string  $type
+     * @param  string $table
+     * @param  string $one
+     * @param  string $operator
+     * @param  string $two
+     * @param  string $type
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function joinWhere($table, $one, $operator, $two, $type = 'inner')
@@ -383,10 +384,10 @@
     /**
      * Add a left join to the query.
      *
-     * @param  string  $table
-     * @param  string  $first
-     * @param  string  $operator
-     * @param  string  $second
+     * @param  string $table
+     * @param  string $first
+     * @param  string $operator
+     * @param  string $second
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function leftJoin($table, $first, $operator = null, $second = null)
@@ -397,10 +398,10 @@
     /**
      * Add a "join where" clause to the query.
      *
-     * @param  string  $table
-     * @param  string  $one
-     * @param  string  $operator
-     * @param  string  $two
+     * @param  string $table
+     * @param  string $one
+     * @param  string $operator
+     * @param  string $two
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function leftJoinWhere($table, $one, $operator, $two)
@@ -411,10 +412,10 @@
     /**
      * Add a right join to the query.
      *
-     * @param  string  $table
-     * @param  string  $first
-     * @param  string  $operator
-     * @param  string  $second
+     * @param  string $table
+     * @param  string $first
+     * @param  string $operator
+     * @param  string $second
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function rightJoin($table, $first, $operator = null, $second = null)
@@ -425,10 +426,10 @@
     /**
      * Add a "right join where" clause to the query.
      *
-     * @param  string  $table
-     * @param  string  $one
-     * @param  string  $operator
-     * @param  string  $two
+     * @param  string $table
+     * @param  string $one
+     * @param  string $operator
+     * @param  string $two
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function rightJoinWhere($table, $one, $operator, $two)
@@ -439,10 +440,10 @@
     /**
      * Add a "cross join" clause to the query.
      *
-     * @param  string  $table
-     * @param  string  $first
-     * @param  string  $operator
-     * @param  string  $second
+     * @param  string $table
+     * @param  string $first
+     * @param  string $operator
+     * @param  string $second
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function crossJoin($table, $first = null, $operator = null, $second = null)
@@ -459,8 +460,8 @@
     /**
      * Apply the callback's query changes if the given "value" is true.
      *
-     * @param  bool  $value
-     * @param  \Closure  $callback
+     * @param  bool     $value
+     * @param  \Closure $callback
      * @return \Illuminate\Database\Query\Builder
      */
     public function when($value, $callback)
@@ -477,10 +478,10 @@
     /**
      * Add a basic where clause to the query.
      *
-     * @param  string|array|\Closure  $column
-     * @param  string  $operator
-     * @param  mixed   $value
-     * @param  string  $boolean
+     * @param  string|array|\Closure $column
+     * @param  string                $operator
+     * @param  mixed                 $value
+     * @param  string                $boolean
      * @return $this
      *
      * @throws \InvalidArgumentException
@@ -513,8 +514,9 @@
         // If the given operator is not found in the list of valid operators we will
         // assume that the developer is just short-cutting the '=' operators and
         // we will set the operators to '=' and set the values appropriately.
-        if (! in_array(strtolower($operator), $this->operators, true) &&
-            ! in_array(strtolower($operator), $this->grammar->getOperators(), true)) {
+        if (! in_array(strtolower($operator), $this->operators, true) 
+            && ! in_array(strtolower($operator), $this->grammar->getOperators(), true)
+        ) {
             list($value, $operator) = [$operator, '='];
         }
 
@@ -554,27 +556,29 @@
      * Add an array of where clauses to the query.
      *
      * @param  array  $column
-     * @param  string  $boolean
-     * @param  string  $method
+     * @param  string $boolean
+     * @param  string $method
      * @return $this
      */
     protected function addArrayOfWheres($column, $boolean, $method = 'where')
     {
-        return $this->whereNested(function ($query) use ($column, $method) {
-            foreach ($column as $key => $value) {
-                if (is_numeric($key) && is_array($value)) {
-                    call_user_func_array([$query, $method], $value);
-                } else {
-                    $query->$method($key, '=', $value);
+        return $this->whereNested(
+            function ($query) use ($column, $method) {
+                foreach ($column as $key => $value) {
+                    if (is_numeric($key) && is_array($value)) {
+                        call_user_func_array([$query, $method], $value);
+                    } else {
+                        $query->$method($key, '=', $value);
+                    }
                 }
-            }
-        }, $boolean);
+            }, $boolean
+        );
     }
 
     /**
      * Determine if the given operator and value combination is legal.
      *
-     * @param  string  $operator
+     * @param  string $operator
      * @param  mixed  $value
      * @return bool
      */
@@ -588,9 +592,9 @@
     /**
      * Add an "or where" clause to the query.
      *
-     * @param  string  $column
-     * @param  string  $operator
-     * @param  mixed   $value
+     * @param  string $column
+     * @param  string $operator
+     * @param  mixed  $value
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function orWhere($column, $operator = null, $value = null)
@@ -601,7 +605,7 @@
     /**
      * Add a "where" clause comparing two columns to the query.
      *
-     * @param  string|array  $first
+     * @param  string|array $first
      * @param  string|null  $operator
      * @param  string|null  $second
      * @param  string|null  $boolean
@@ -619,8 +623,9 @@
         // If the given operator is not found in the list of valid operators we will
         // assume that the developer is just short-cutting the '=' operators and
         // we will set the operators to '=' and set the values appropriately.
-        if (! in_array(strtolower($operator), $this->operators, true) &&
-            ! in_array(strtolower($operator), $this->grammar->getOperators(), true)) {
+        if (! in_array(strtolower($operator), $this->operators, true) 
+            && ! in_array(strtolower($operator), $this->grammar->getOperators(), true)
+        ) {
             list($second, $operator) = [$operator, '='];
         }
 
@@ -634,7 +639,7 @@
     /**
      * Add an "or where" clause comparing two columns to the query.
      *
-     * @param  string|array  $first
+     * @param  string|array $first
      * @param  string|null  $operator
      * @param  string|null  $second
      * @return \Illuminate\Database\Query\Builder|static
@@ -647,9 +652,9 @@
     /**
      * Add a raw where clause to the query.
      *
-     * @param  string  $sql
-     * @param  array   $bindings
-     * @param  string  $boolean
+     * @param  string $sql
+     * @param  array  $bindings
+     * @param  string $boolean
      * @return $this
      */
     public function whereRaw($sql, array $bindings = [], $boolean = 'and')
@@ -666,8 +671,8 @@
     /**
      * Add a raw or where clause to the query.
      *
-     * @param  string  $sql
-     * @param  array   $bindings
+     * @param  string $sql
+     * @param  array  $bindings
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function orWhereRaw($sql, array $bindings = [])
@@ -678,10 +683,10 @@
     /**
      * Add a where between statement to the query.
      *
-     * @param  string  $column
-     * @param  array   $values
-     * @param  string  $boolean
-     * @param  bool  $not
+     * @param  string $column
+     * @param  array  $values
+     * @param  string $boolean
+     * @param  bool   $not
      * @return $this
      */
     public function whereBetween($column, array $values, $boolean = 'and', $not = false)
@@ -698,8 +703,8 @@
     /**
      * Add an or where between statement to the query.
      *
-     * @param  string  $column
-     * @param  array   $values
+     * @param  string $column
+     * @param  array  $values
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function orWhereBetween($column, array $values)
@@ -710,9 +715,9 @@
     /**
      * Add a where not between statement to the query.
      *
-     * @param  string  $column
-     * @param  array   $values
-     * @param  string  $boolean
+     * @param  string $column
+     * @param  array  $values
+     * @param  string $boolean
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function whereNotBetween($column, array $values, $boolean = 'and')
@@ -723,8 +728,8 @@
     /**
      * Add an or where not between statement to the query.
      *
-     * @param  string  $column
-     * @param  array   $values
+     * @param  string $column
+     * @param  array  $values
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function orWhereNotBetween($column, array $values)
@@ -764,7 +769,7 @@
      * Add another query builder as a nested where to the query builder.
      *
      * @param  \Illuminate\Database\Query\Builder|static $query
-     * @param  string  $boolean
+     * @param  string                                    $boolean
      * @return $this
      */
     public function addNestedWhereQuery($query, $boolean = 'and')
@@ -854,7 +859,7 @@
     /**
      * Add a where not exists clause to the query.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function orWhereNotExists(Closure $callback)
@@ -866,8 +871,8 @@
      * Add an exists clause to the query.
      *
      * @param  \Illuminate\Database\Query\Builder $query
-     * @param  string  $boolean
-     * @param  bool  $not
+     * @param  string                             $boolean
+     * @param  bool                               $not
      * @return $this
      */
     public function addWhereExistsQuery(Builder $query, $boolean = 'and', $not = false)
@@ -884,10 +889,10 @@
     /**
      * Add a "where in" clause to the query.
      *
-     * @param  string  $column
-     * @param  mixed   $values
-     * @param  string  $boolean
-     * @param  bool    $not
+     * @param  string $column
+     * @param  mixed  $values
+     * @param  string $boolean
+     * @param  bool   $not
      * @return $this
      */
     public function whereIn($column, $values, $boolean = 'and', $not = false)
@@ -921,8 +926,8 @@
     /**
      * Add an "or where in" clause to the query.
      *
-     * @param  string  $column
-     * @param  mixed   $values
+     * @param  string $column
+     * @param  mixed  $values
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function orWhereIn($column, $values)
@@ -933,9 +938,9 @@
     /**
      * Add a "where not in" clause to the query.
      *
-     * @param  string  $column
-     * @param  mixed   $values
-     * @param  string  $boolean
+     * @param  string $column
+     * @param  mixed  $values
+     * @param  string $boolean
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function whereNotIn($column, $values, $boolean = 'and')
@@ -946,8 +951,8 @@
     /**
      * Add an "or where not in" clause to the query.
      *
-     * @param  string  $column
-     * @param  mixed   $values
+     * @param  string $column
+     * @param  mixed  $values
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function orWhereNotIn($column, $values)
@@ -983,10 +988,10 @@
     /**
      * Add a external sub-select to the query.
      *
-     * @param  string   $column
-     * @param  \Illuminate\Database\Query\Builder|static  $query
-     * @param  string   $boolean
-     * @param  bool     $not
+     * @param  string                                    $column
+     * @param  \Illuminate\Database\Query\Builder|static $query
+     * @param  string                                    $boolean
+     * @param  bool                                      $not
      * @return $this
      */
     protected function whereInExistingQuery($column, $query, $boolean, $not)
@@ -1003,9 +1008,9 @@
     /**
      * Add a "where null" clause to the query.
      *
-     * @param  string  $column
-     * @param  string  $boolean
-     * @param  bool    $not
+     * @param  string $column
+     * @param  string $boolean
+     * @param  bool   $not
      * @return $this
      */
     public function whereNull($column, $boolean = 'and', $not = false)
@@ -1020,7 +1025,7 @@
     /**
      * Add an "or where null" clause to the query.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function orWhereNull($column)
@@ -1031,8 +1036,8 @@
     /**
      * Add a "where not null" clause to the query.
      *
-     * @param  string  $column
-     * @param  string  $boolean
+     * @param  string $column
+     * @param  string $boolean
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function whereNotNull($column, $boolean = 'and')
@@ -1043,7 +1048,7 @@
     /**
      * Add an "or where not null" clause to the query.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function orWhereNotNull($column)
@@ -1054,10 +1059,10 @@
     /**
      * Add a "where date" statement to the query.
      *
-     * @param  string  $column
-     * @param  string   $operator
-     * @param  int   $value
-     * @param  string   $boolean
+     * @param  string $column
+     * @param  string $operator
+     * @param  int    $value
+     * @param  string $boolean
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function whereDate($column, $operator, $value, $boolean = 'and')
@@ -1068,9 +1073,9 @@
     /**
      * Add an "or where date" statement to the query.
      *
-     * @param  string  $column
-     * @param  string   $operator
-     * @param  int   $value
+     * @param  string $column
+     * @param  string $operator
+     * @param  int    $value
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function orWhereDate($column, $operator, $value)
@@ -1081,10 +1086,10 @@
     /**
      * Add a "where day" statement to the query.
      *
-     * @param  string  $column
-     * @param  string   $operator
-     * @param  int   $value
-     * @param  string   $boolean
+     * @param  string $column
+     * @param  string $operator
+     * @param  int    $value
+     * @param  string $boolean
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function whereDay($column, $operator, $value, $boolean = 'and')
@@ -1095,10 +1100,10 @@
     /**
      * Add a "where month" statement to the query.
      *
-     * @param  string  $column
-     * @param  string   $operator
-     * @param  int   $value
-     * @param  string   $boolean
+     * @param  string $column
+     * @param  string $operator
+     * @param  int    $value
+     * @param  string $boolean
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function whereMonth($column, $operator, $value, $boolean = 'and')
@@ -1109,10 +1114,10 @@
     /**
      * Add a "where year" statement to the query.
      *
-     * @param  string  $column
-     * @param  string   $operator
-     * @param  int   $value
-     * @param  string   $boolean
+     * @param  string $column
+     * @param  string $operator
+     * @param  int    $value
+     * @param  string $boolean
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function whereYear($column, $operator, $value, $boolean = 'and')
@@ -1123,11 +1128,11 @@
     /**
      * Add a date based (year, month, day) statement to the query.
      *
-     * @param  string  $type
-     * @param  string  $column
-     * @param  string  $operator
-     * @param  int  $value
-     * @param  string  $boolean
+     * @param  string $type
+     * @param  string $column
+     * @param  string $operator
+     * @param  int    $value
+     * @param  string $boolean
      * @return $this
      */
     protected function addDateBasedWhere($type, $column, $operator, $value, $boolean = 'and')
@@ -1142,8 +1147,8 @@
     /**
      * Handles dynamic "where" clauses to the query.
      *
-     * @param  string  $method
-     * @param  string  $parameters
+     * @param  string $method
+     * @param  string $parameters
      * @return $this
      */
     public function dynamicWhere($method, $parameters)
@@ -1183,10 +1188,10 @@
     /**
      * Add a single dynamic where clause statement to the query.
      *
-     * @param  string  $segment
-     * @param  string  $connector
-     * @param  array   $parameters
-     * @param  int     $index
+     * @param  string $segment
+     * @param  string $connector
+     * @param  array  $parameters
+     * @param  int    $index
      * @return void
      */
     protected function addDynamic($segment, $connector, $parameters, $index)
@@ -1202,7 +1207,7 @@
     /**
      * Add a "group by" clause to the query.
      *
-     * @param  array|string  $column,...
+     * @param  array|string $column,...
      * @return $this
      */
     public function groupBy()
@@ -1217,10 +1222,10 @@
     /**
      * Add a "having" clause to the query.
      *
-     * @param  string  $column
-     * @param  string  $operator
-     * @param  string  $value
-     * @param  string  $boolean
+     * @param  string $column
+     * @param  string $operator
+     * @param  string $value
+     * @param  string $boolean
      * @return $this
      */
     public function having($column, $operator = null, $value = null, $boolean = 'and')
@@ -1239,9 +1244,9 @@
     /**
      * Add a "or having" clause to the query.
      *
-     * @param  string  $column
-     * @param  string  $operator
-     * @param  string  $value
+     * @param  string $column
+     * @param  string $operator
+     * @param  string $value
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function orHaving($column, $operator = null, $value = null)
@@ -1252,9 +1257,9 @@
     /**
      * Add a raw having clause to the query.
      *
-     * @param  string  $sql
-     * @param  array   $bindings
-     * @param  string  $boolean
+     * @param  string $sql
+     * @param  array  $bindings
+     * @param  string $boolean
      * @return $this
      */
     public function havingRaw($sql, array $bindings = [], $boolean = 'and')
@@ -1271,8 +1276,8 @@
     /**
      * Add a raw or having clause to the query.
      *
-     * @param  string  $sql
-     * @param  array   $bindings
+     * @param  string $sql
+     * @param  array  $bindings
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function orHavingRaw($sql, array $bindings = [])
@@ -1283,8 +1288,8 @@
     /**
      * Add an "order by" clause to the query.
      *
-     * @param  string  $column
-     * @param  string  $direction
+     * @param  string $column
+     * @param  string $direction
      * @return $this
      */
     public function orderBy($column, $direction = 'asc')
@@ -1300,7 +1305,7 @@
     /**
      * Add an "order by" clause for a timestamp to the query.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function latest($column = 'created_at')
@@ -1311,7 +1316,7 @@
     /**
      * Add an "order by" clause for a timestamp to the query.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function oldest($column = 'created_at')
@@ -1322,7 +1327,7 @@
     /**
      * Put the query's results in random order.
      *
-     * @param  string  $seed
+     * @param  string $seed
      * @return $this
      */
     public function inRandomOrder($seed = '')
@@ -1333,7 +1338,7 @@
     /**
      * Add a raw "order by" clause to the query.
      *
-     * @param  string  $sql
+     * @param  string $sql
      * @param  array  $bindings
      * @return $this
      */
@@ -1353,7 +1358,7 @@
     /**
      * Set the "offset" value of the query.
      *
-     * @param  int  $value
+     * @param  int $value
      * @return $this
      */
     public function offset($value)
@@ -1368,7 +1373,7 @@
     /**
      * Alias to set the "offset" value of the query.
      *
-     * @param  int  $value
+     * @param  int $value
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function skip($value)
@@ -1379,7 +1384,7 @@
     /**
      * Set the "limit" value of the query.
      *
-     * @param  int  $value
+     * @param  int $value
      * @return $this
      */
     public function limit($value)
@@ -1396,7 +1401,7 @@
     /**
      * Alias to set the "limit" value of the query.
      *
-     * @param  int  $value
+     * @param  int $value
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function take($value)
@@ -1407,8 +1412,8 @@
     /**
      * Set the limit and offset for a given page.
      *
-     * @param  int  $page
-     * @param  int  $perPage
+     * @param  int $page
+     * @param  int $perPage
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function forPage($page, $perPage = 15)
@@ -1419,28 +1424,30 @@
     /**
      * Constrain the query to the next "page" of results after a given ID.
      *
-     * @param  int  $perPage
-     * @param  int  $lastId
-     * @param  string  $column
+     * @param  int    $perPage
+     * @param  int    $lastId
+     * @param  string $column
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function forPageAfterId($perPage = 15, $lastId = 0, $column = 'id')
     {
         $this->orders = Collection::make($this->orders)
-                ->reject(function ($order) use ($column) {
-                    return $order['column'] === $column;
-                })->values()->all();
+            ->reject(
+                function ($order) use ($column) {
+                        return $order['column'] === $column;
+                }
+            )->values()->all();
 
         return $this->where($column, '>', $lastId)
-                    ->orderBy($column, 'asc')
-                    ->take($perPage);
+            ->orderBy($column, 'asc')
+            ->take($perPage);
     }
 
     /**
      * Add a union statement to the query.
      *
-     * @param  \Illuminate\Database\Query\Builder|\Closure  $query
-     * @param  bool  $all
+     * @param  \Illuminate\Database\Query\Builder|\Closure $query
+     * @param  bool                                        $all
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function union($query, $all = false)
@@ -1459,7 +1466,7 @@
     /**
      * Add a union all statement to the query.
      *
-     * @param  \Illuminate\Database\Query\Builder|\Closure  $query
+     * @param  \Illuminate\Database\Query\Builder|\Closure $query
      * @return \Illuminate\Database\Query\Builder|static
      */
     public function unionAll($query)
@@ -1470,7 +1477,7 @@
     /**
      * Lock the selected rows in the table.
      *
-     * @param  bool  $value
+     * @param  bool $value
      * @return $this
      */
     public function lock($value = true)
@@ -1517,8 +1524,8 @@
     /**
      * Execute a query for a single record by ID.
      *
-     * @param  int    $id
-     * @param  array  $columns
+     * @param  int   $id
+     * @param  array $columns
      * @return mixed|static
      */
     public function find($id, $columns = ['*'])
@@ -1529,7 +1536,7 @@
     /**
      * Get a single column's value from the first result of a query.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return mixed
      */
     public function value($column)
@@ -1542,7 +1549,7 @@
     /**
      * Execute the query and get the first result.
      *
-     * @param  array   $columns
+     * @param  array $columns
      * @return mixed|static
      */
     public function first($columns = ['*'])
@@ -1555,7 +1562,7 @@
     /**
      * Execute the query as a "select" statement.
      *
-     * @param  array  $columns
+     * @param  array $columns
      * @return array|static[]
      */
     public function get($columns = ['*'])
@@ -1586,10 +1593,10 @@
     /**
      * Paginate the given query into a simple paginator.
      *
-     * @param  int  $perPage
-     * @param  array  $columns
-     * @param  string  $pageName
-     * @param  int|null  $page
+     * @param  int      $perPage
+     * @param  array    $columns
+     * @param  string   $pageName
+     * @param  int|null $page
      * @return \Illuminate\Contracts\Pagination\LengthAwarePaginator
      */
     public function paginate($perPage = 15, $columns = ['*'], $pageName = 'page', $page = null)
@@ -1600,10 +1607,12 @@
 
         $results = $total ? $this->forPage($page, $perPage)->get($columns) : [];
 
-        return new LengthAwarePaginator($results, $total, $perPage, $page, [
+        return new LengthAwarePaginator(
+            $results, $total, $perPage, $page, [
             'path' => Paginator::resolveCurrentPath(),
             'pageName' => $pageName,
-        ]);
+            ]
+        );
     }
 
     /**
@@ -1611,10 +1620,10 @@
      *
      * This is more efficient on larger data-sets, etc.
      *
-     * @param  int  $perPage
-     * @param  array  $columns
-     * @param  string  $pageName
-     * @param  int|null  $page
+     * @param  int      $perPage
+     * @param  array    $columns
+     * @param  string   $pageName
+     * @param  int|null $page
      * @return \Illuminate\Contracts\Pagination\Paginator
      */
     public function simplePaginate($perPage = 15, $columns = ['*'], $pageName = 'page', $page = null)
@@ -1623,16 +1632,18 @@
 
         $this->skip(($page - 1) * $perPage)->take($perPage + 1);
 
-        return new Paginator($this->get($columns), $perPage, $page, [
+        return new Paginator(
+            $this->get($columns), $perPage, $page, [
             'path' => Paginator::resolveCurrentPath(),
             'pageName' => $pageName,
-        ]);
+            ]
+        );
     }
 
     /**
      * Get the count of the total records for the paginator.
      *
-     * @param  array  $columns
+     * @param  array $columns
      * @return int
      */
     public function getCountForPagination($columns = ['*'])
@@ -1677,15 +1688,17 @@
     /**
      * Remove the column aliases since they will break count queries.
      *
-     * @param  array  $columns
+     * @param  array $columns
      * @return array
      */
     protected function clearSelectAliases(array $columns)
     {
-        return array_map(function ($column) {
-            return is_string($column) && ($aliasPosition = strpos(strtolower($column), ' as ')) !== false
+        return array_map(
+            function ($column) {
+                return is_string($column) && ($aliasPosition = strpos(strtolower($column), ' as ')) !== false
                     ? substr($column, 0, $aliasPosition) : $column;
-        }, $columns);
+            }, $columns
+        );
     }
 
     /**
@@ -1726,9 +1739,9 @@
     /**
      * Chunk the results of the query.
      *
-     * @param  int  $count
-     * @param  callable  $callback
-     * @return  bool
+     * @param  int      $count
+     * @param  callable $callback
+     * @return bool
      */
     public function chunk($count, callable $callback)
     {
@@ -1753,9 +1766,9 @@
     /**
      * Chunk the results of a query by comparing numeric IDs.
      *
-     * @param  int  $count
-     * @param  callable  $callback
-     * @param  string  $column
+     * @param  int      $count
+     * @param  callable $callback
+     * @param  string   $column
      * @return bool
      */
     public function chunkById($count, callable $callback, $column = 'id')
@@ -1780,8 +1793,8 @@
     /**
      * Execute a callback over each item while chunking.
      *
-     * @param  callable  $callback
-     * @param  int  $count
+     * @param  callable $callback
+     * @param  int      $count
      * @return bool
      *
      * @throws \RuntimeException
@@ -1792,20 +1805,22 @@
             throw new RuntimeException('You must specify an orderBy clause when using the "each" function.');
         }
 
-        return $this->chunk($count, function ($results) use ($callback) {
-            foreach ($results as $key => $value) {
-                if ($callback($value, $key) === false) {
-                    return false;
+        return $this->chunk(
+            $count, function ($results) use ($callback) {
+                foreach ($results as $key => $value) {
+                    if ($callback($value, $key) === false) {
+                        return false;
+                    }
                 }
             }
-        });
+        );
     }
 
     /**
      * Get an array with the values of a given column.
      *
-     * @param  string  $column
-     * @param  string|null  $key
+     * @param  string      $column
+     * @param  string|null $key
      * @return array
      */
     public function pluck($column, $key = null)
@@ -1825,8 +1840,8 @@
     /**
      * Alias for the "pluck" method.
      *
-     * @param  string  $column
-     * @param  string|null  $key
+     * @param  string      $column
+     * @param  string|null $key
      * @return array
      *
      * @deprecated since version 5.2. Use the "pluck" method directly.
@@ -1839,7 +1854,7 @@
     /**
      * Strip off the table name or alias from a column identifier.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return string|null
      */
     protected function stripTableForPluck($column)
@@ -1850,8 +1865,8 @@
     /**
      * Concatenate values of a given column as a string.
      *
-     * @param  string  $column
-     * @param  string  $glue
+     * @param  string $column
+     * @param  string $glue
      * @return string
      */
     public function implode($column, $glue = '')
@@ -1882,7 +1897,7 @@
     /**
      * Retrieve the "count" result of the query.
      *
-     * @param  string  $columns
+     * @param  string $columns
      * @return int
      */
     public function count($columns = '*')
@@ -1897,7 +1912,7 @@
     /**
      * Retrieve the minimum value of a given column.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return float|int
      */
     public function min($column)
@@ -1908,7 +1923,7 @@
     /**
      * Retrieve the maximum value of a given column.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return float|int
      */
     public function max($column)
@@ -1919,7 +1934,7 @@
     /**
      * Retrieve the sum of the values of a given column.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return float|int
      */
     public function sum($column)
@@ -1932,7 +1947,7 @@
     /**
      * Retrieve the average of the values of a given column.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return float|int
      */
     public function avg($column)
@@ -1943,7 +1958,7 @@
     /**
      * Alias for the "avg" method.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return float|int
      */
     public function average($column)
@@ -1954,8 +1969,8 @@
     /**
      * Execute an aggregate function on the database.
      *
-     * @param  string  $function
-     * @param  array   $columns
+     * @param  string $function
+     * @param  array  $columns
      * @return float|int
      */
     public function aggregate($function, $columns = ['*'])
@@ -1992,7 +2007,7 @@
     /**
      * Insert a new record into the database.
      *
-     * @param  array  $values
+     * @param  array $values
      * @return bool
      */
     public function insert(array $values)
@@ -2042,8 +2057,8 @@
     /**
      * Insert a new record and get the value of the primary key.
      *
-     * @param  array   $values
-     * @param  string  $sequence
+     * @param  array  $values
+     * @param  string $sequence
      * @return int
      */
     public function insertGetId(array $values, $sequence = null)
@@ -2058,7 +2073,7 @@
     /**
      * Update a record in the database.
      *
-     * @param  array  $values
+     * @param  array $values
      * @return int
      */
     public function update(array $values)
@@ -2067,16 +2082,18 @@
 
         $sql = $this->grammar->compileUpdate($this, $values);
 
-        return $this->connection->update($sql, $this->cleanBindings(
-            $this->grammar->prepareBindingsForUpdate($bindings, $values)
-        ));
+        return $this->connection->update(
+            $sql, $this->cleanBindings(
+                $this->grammar->prepareBindingsForUpdate($bindings, $values)
+            )
+        );
     }
 
     /**
      * Insert or update a record matching the attributes, and fill it with values.
      *
-     * @param  array  $attributes
-     * @param  array  $values
+     * @param  array $attributes
+     * @param  array $values
      * @return bool
      */
     public function updateOrInsert(array $attributes, array $values = [])
@@ -2091,9 +2108,9 @@
     /**
      * Increment a column's value by a given amount.
      *
-     * @param  string  $column
-     * @param  int     $amount
-     * @param  array   $extra
+     * @param  string $column
+     * @param  int    $amount
+     * @param  array  $extra
      * @return int
      */
     public function increment($column, $amount = 1, array $extra = [])
@@ -2108,9 +2125,9 @@
     /**
      * Decrement a column's value by a given amount.
      *
-     * @param  string  $column
-     * @param  int     $amount
-     * @param  array   $extra
+     * @param  string $column
+     * @param  int    $amount
+     * @param  array  $extra
      * @return int
      */
     public function decrement($column, $amount = 1, array $extra = [])
@@ -2125,7 +2142,7 @@
     /**
      * Delete a record from the database.
      *
-     * @param  mixed  $id
+     * @param  mixed $id
      * @return int
      */
     public function delete($id = null)
@@ -2167,8 +2184,8 @@
     /**
      * Merge an array of where clauses and bindings.
      *
-     * @param  array  $wheres
-     * @param  array  $bindings
+     * @param  array $wheres
+     * @param  array $bindings
      * @return void
      */
     public function mergeWheres($wheres, $bindings)
@@ -2181,20 +2198,24 @@
     /**
      * Remove all of the expressions from a list of bindings.
      *
-     * @param  array  $bindings
+     * @param  array $bindings
      * @return array
      */
     protected function cleanBindings(array $bindings)
     {
-        return array_values(array_filter($bindings, function ($binding) {
-            return ! $binding instanceof Expression;
-        }));
+        return array_values(
+            array_filter(
+                $bindings, function ($binding) {
+                    return ! $binding instanceof Expression;
+                }
+            )
+        );
     }
 
     /**
      * Create a raw database expression.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return \Illuminate\Database\Query\Expression
      */
     public function raw($value)
@@ -2225,8 +2246,8 @@
     /**
      * Set the bindings on the query builder.
      *
-     * @param  array   $bindings
-     * @param  string  $type
+     * @param  array  $bindings
+     * @param  string $type
      * @return $this
      *
      * @throws \InvalidArgumentException
@@ -2245,8 +2266,8 @@
     /**
      * Add a binding to the query.
      *
-     * @param  mixed   $value
-     * @param  string  $type
+     * @param  mixed  $value
+     * @param  string $type
      * @return $this
      *
      * @throws \InvalidArgumentException
@@ -2269,7 +2290,7 @@
     /**
      * Merge an array of bindings into our bindings.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return $this
      */
     public function mergeBindings(Builder $query)
@@ -2324,8 +2345,8 @@
     /**
      * Handle dynamic method calls into the method.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      *
      * @throws \BadMethodCallException

--- vendor/laravel/framework/src/Illuminate/Database/Query/Expression.php
+++ PHP_CodeSniffer
@@ -14,7 +14,7 @@
     /**
      * Create a new raw query expression.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return void
      */
     public function __construct($value)

--- vendor/laravel/framework/src/Illuminate/Database/Query/Grammars/Grammar.php
+++ PHP_CodeSniffer
@@ -37,7 +37,7 @@
     /**
      * Compile a select query into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return string
      */
     public function compileSelect(Builder $query)
@@ -58,7 +58,7 @@
     /**
      * Compile the components necessary for a select clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return array
      */
     protected function compileComponents(Builder $query)
@@ -82,8 +82,8 @@
     /**
      * Compile an aggregated select clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $aggregate
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $aggregate
      * @return string
      */
     protected function compileAggregate(Builder $query, $aggregate)
@@ -103,8 +103,8 @@
     /**
      * Compile the "select *" portion of the query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $columns
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $columns
      * @return string|null
      */
     protected function compileColumns(Builder $query, $columns)
@@ -124,8 +124,8 @@
     /**
      * Compile the "from" portion of the query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  string  $table
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  string                             $table
      * @return string
      */
     protected function compileFrom(Builder $query, $table)
@@ -136,8 +136,8 @@
     /**
      * Compile the "join" portions of the query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $joins
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $joins
      * @return string
      */
     protected function compileJoins(Builder $query, $joins)
@@ -186,7 +186,7 @@
     /**
      * Create a join clause constraint segment.
      *
-     * @param  array  $clause
+     * @param  array $clause
      * @return string
      */
     protected function compileJoinConstraint(array $clause)
@@ -213,7 +213,7 @@
     /**
      * Create a nested join clause constraint segment.
      *
-     * @param  array  $clause
+     * @param  array $clause
      * @return string
      */
     protected function compileNestedJoinConstraint(array $clause)
@@ -234,7 +234,7 @@
     /**
      * Compile the "where" portions of the query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return string
      */
     protected function compileWheres(Builder $query)
@@ -269,8 +269,8 @@
     /**
      * Compile a nested where clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereNested(Builder $query, $where)
@@ -284,7 +284,7 @@
      * Compile a where condition with a sub-select.
      *
      * @param  \Illuminate\Database\Query\Builder $query
-     * @param  array   $where
+     * @param  array                              $where
      * @return string
      */
     protected function whereSub(Builder $query, $where)
@@ -297,8 +297,8 @@
     /**
      * Compile a basic where clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereBasic(Builder $query, $where)
@@ -311,8 +311,8 @@
     /**
      * Compile a where clause comparing two columns..
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereColumn(Builder $query, $where)
@@ -325,8 +325,8 @@
     /**
      * Compile a "between" where clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereBetween(Builder $query, $where)
@@ -339,8 +339,8 @@
     /**
      * Compile a where exists clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereExists(Builder $query, $where)
@@ -351,8 +351,8 @@
     /**
      * Compile a where exists clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereNotExists(Builder $query, $where)
@@ -363,8 +363,8 @@
     /**
      * Compile a "where in" clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereIn(Builder $query, $where)
@@ -381,8 +381,8 @@
     /**
      * Compile a "where not in" clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereNotIn(Builder $query, $where)
@@ -399,8 +399,8 @@
     /**
      * Compile a where in sub-select clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereInSub(Builder $query, $where)
@@ -413,8 +413,8 @@
     /**
      * Compile a where not in sub-select clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereNotInSub(Builder $query, $where)
@@ -427,8 +427,8 @@
     /**
      * Compile a "where null" clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereNull(Builder $query, $where)
@@ -439,8 +439,8 @@
     /**
      * Compile a "where not null" clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereNotNull(Builder $query, $where)
@@ -451,8 +451,8 @@
     /**
      * Compile a "where date" clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereDate(Builder $query, $where)
@@ -463,8 +463,8 @@
     /**
      * Compile a "where day" clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereDay(Builder $query, $where)
@@ -475,8 +475,8 @@
     /**
      * Compile a "where month" clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereMonth(Builder $query, $where)
@@ -487,8 +487,8 @@
     /**
      * Compile a "where year" clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereYear(Builder $query, $where)
@@ -499,9 +499,9 @@
     /**
      * Compile a date based where clause.
      *
-     * @param  string  $type
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  string                             $type
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function dateBasedWhere($type, Builder $query, $where)
@@ -514,8 +514,8 @@
     /**
      * Compile a raw where clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereRaw(Builder $query, $where)
@@ -526,8 +526,8 @@
     /**
      * Compile the "group by" portions of the query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $groups
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $groups
      * @return string
      */
     protected function compileGroups(Builder $query, $groups)
@@ -538,8 +538,8 @@
     /**
      * Compile the "having" portions of the query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $havings
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $havings
      * @return string
      */
     protected function compileHavings(Builder $query, $havings)
@@ -552,7 +552,7 @@
     /**
      * Compile a single having clause.
      *
-     * @param  array   $having
+     * @param  array $having
      * @return string
      */
     protected function compileHaving(array $having)
@@ -570,7 +570,7 @@
     /**
      * Compile a basic having clause.
      *
-     * @param  array   $having
+     * @param  array $having
      * @return string
      */
     protected function compileBasicHaving($having)
@@ -585,25 +585,29 @@
     /**
      * Compile the "order by" portions of the query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $orders
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $orders
      * @return string
      */
     protected function compileOrders(Builder $query, $orders)
     {
-        return 'order by '.implode(', ', array_map(function ($order) {
-            if (isset($order['sql'])) {
-                return $order['sql'];
-            }
-
-            return $this->wrap($order['column']).' '.$order['direction'];
-        }, $orders));
+        return 'order by '.implode(
+            ', ', array_map(
+                function ($order) {
+                    if (isset($order['sql'])) {
+                        return $order['sql'];
+                    }
+
+                    return $this->wrap($order['column']).' '.$order['direction'];
+                }, $orders
+            )
+        );
     }
 
     /**
      * Compile the random statement into SQL.
      *
-     * @param  string  $seed
+     * @param  string $seed
      * @return string
      */
     public function compileRandom($seed)
@@ -614,8 +618,8 @@
     /**
      * Compile the "limit" portions of the query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  int  $limit
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  int                                $limit
      * @return string
      */
     protected function compileLimit(Builder $query, $limit)
@@ -626,8 +630,8 @@
     /**
      * Compile the "offset" portions of the query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  int  $offset
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  int                                $offset
      * @return string
      */
     protected function compileOffset(Builder $query, $offset)
@@ -638,7 +642,7 @@
     /**
      * Compile the "union" queries attached to the main query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return string
      */
     protected function compileUnions(Builder $query)
@@ -667,7 +671,7 @@
     /**
      * Compile a single union statement.
      *
-     * @param  array  $union
+     * @param  array $union
      * @return string
      */
     protected function compileUnion(array $union)
@@ -680,7 +684,7 @@
     /**
      * Compile an exists statement into SQL.
      *
-     * @param \Illuminate\Database\Query\Builder $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return string
      */
     public function compileExists(Builder $query)
@@ -693,8 +697,8 @@
     /**
      * Compile an insert statement into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $values
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $values
      * @return string
      */
     public function compileInsert(Builder $query, array $values)
@@ -727,9 +731,9 @@
     /**
      * Compile an insert and get ID statement into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array   $values
-     * @param  string  $sequence
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $values
+     * @param  string                             $sequence
      * @return string
      */
     public function compileInsertGetId(Builder $query, $values, $sequence)
@@ -740,8 +744,8 @@
     /**
      * Compile an update statement into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $values
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $values
      * @return string
      */
     public function compileUpdate(Builder $query, $values)
@@ -779,8 +783,8 @@
     /**
      * Prepare the bindings for an update statement.
      *
-     * @param  array  $bindings
-     * @param  array  $values
+     * @param  array $bindings
+     * @param  array $values
      * @return array
      */
     public function prepareBindingsForUpdate(array $bindings, array $values)
@@ -791,7 +795,7 @@
     /**
      * Compile a delete statement into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return string
      */
     public function compileDelete(Builder $query)
@@ -806,7 +810,7 @@
     /**
      * Compile a truncate table statement into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return array
      */
     public function compileTruncate(Builder $query)
@@ -817,8 +821,8 @@
     /**
      * Compile the lock into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  bool|string  $value
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  bool|string                        $value
      * @return string
      */
     protected function compileLock(Builder $query, $value)
@@ -839,7 +843,7 @@
     /**
      * Compile the SQL statement to define a savepoint.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     public function compileSavepoint($name)
@@ -850,7 +854,7 @@
     /**
      * Compile the SQL statement to execute a savepoint rollback.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     public function compileSavepointRollBack($name)
@@ -861,20 +865,24 @@
     /**
      * Concatenate an array of segments, removing empties.
      *
-     * @param  array   $segments
+     * @param  array $segments
      * @return string
      */
     protected function concatenate($segments)
     {
-        return implode(' ', array_filter($segments, function ($value) {
-            return (string) $value !== '';
-        }));
+        return implode(
+            ' ', array_filter(
+                $segments, function ($value) {
+                    return (string) $value !== '';
+                }
+            )
+        );
     }
 
     /**
      * Remove the leading boolean from a statement.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function removeLeadingBoolean($value)

--- vendor/laravel/framework/src/Illuminate/Database/Query/Grammars/MySqlGrammar.php
+++ PHP_CodeSniffer
@@ -30,7 +30,7 @@
     /**
      * Compile a select query into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return string
      */
     public function compileSelect(Builder $query)
@@ -47,7 +47,7 @@
     /**
      * Compile a single union statement.
      *
-     * @param  array  $union
+     * @param  array $union
      * @return string
      */
     protected function compileUnion(array $union)
@@ -60,7 +60,7 @@
     /**
      * Compile the random statement into SQL.
      *
-     * @param  string  $seed
+     * @param  string $seed
      * @return string
      */
     public function compileRandom($seed)
@@ -71,8 +71,8 @@
     /**
      * Compile the lock into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  bool|string  $value
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  bool|string                        $value
      * @return string
      */
     protected function compileLock(Builder $query, $value)
@@ -87,8 +87,8 @@
     /**
      * Compile an update statement into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $values
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $values
      * @return string
      */
     public function compileUpdate(Builder $query, $values)
@@ -142,8 +142,8 @@
     /**
      * Prepares a JSON column being updated using the JSON_SET function.
      *
-     * @param  string  $key
-     * @param  \Illuminate\Database\JsonExpression  $value
+     * @param  string                              $key
+     * @param  \Illuminate\Database\JsonExpression $value
      * @return string
      */
     protected function compileJsonUpdateColumn($key, JsonExpression $value)
@@ -160,8 +160,8 @@
     /**
      * Prepare the bindings for an update statement.
      *
-     * @param  array  $bindings
-     * @param  array  $values
+     * @param  array $bindings
+     * @param  array $values
      * @return array
      */
     public function prepareBindingsForUpdate(array $bindings, array $values)
@@ -182,7 +182,7 @@
     /**
      * Compile a delete statement into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return string
      */
     public function compileDelete(Builder $query)
@@ -213,7 +213,7 @@
     /**
      * Wrap a single string in keyword identifiers.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function wrapValue($value)
@@ -232,7 +232,7 @@
     /**
      * Wrap the given JSON selector.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function wrapJsonSelector($value)
@@ -247,7 +247,7 @@
     /**
      * Determine if the given string is a JSON selector.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return bool
      */
     protected function isJsonSelector($value)

--- vendor/laravel/framework/src/Illuminate/Database/Query/Grammars/PostgresGrammar.php
+++ PHP_CodeSniffer
@@ -22,8 +22,8 @@
     /**
      * Compile the lock into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  bool|string  $value
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  bool|string                        $value
      * @return string
      */
     protected function compileLock(Builder $query, $value)
@@ -38,8 +38,8 @@
     /**
      * Compile a "where date" clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereDate(Builder $query, $where)
@@ -52,9 +52,9 @@
     /**
      * Compile a date based where clause.
      *
-     * @param  string  $type
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  string                             $type
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function dateBasedWhere($type, Builder $query, $where)
@@ -67,8 +67,8 @@
     /**
      * Compile an update statement into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $values
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $values
      * @return string
      */
     public function compileUpdate(Builder $query, $values)
@@ -90,7 +90,7 @@
     /**
      * Compile the columns for the update statement.
      *
-     * @param  array   $values
+     * @param  array $values
      * @return string
      */
     protected function compileUpdateColumns($values)
@@ -110,7 +110,7 @@
     /**
      * Compile the "from" clause for an update with a join.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return string|null
      */
     protected function compileUpdateFrom(Builder $query)
@@ -136,7 +136,7 @@
     /**
      * Compile the additional where clauses for updates with joins.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return string
      */
     protected function compileUpdateWheres(Builder $query)
@@ -162,7 +162,7 @@
     /**
      * Compile the "join" clauses for an update.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return string
      */
     protected function compileUpdateJoinWheres(Builder $query)
@@ -184,9 +184,9 @@
     /**
      * Compile an insert and get ID statement into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array   $values
-     * @param  string  $sequence
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $values
+     * @param  string                             $sequence
      * @return string
      */
     public function compileInsertGetId(Builder $query, $values, $sequence)
@@ -201,7 +201,7 @@
     /**
      * Compile a truncate table statement into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return array
      */
     public function compileTruncate(Builder $query)
@@ -212,7 +212,7 @@
     /**
      * Wrap a single string in keyword identifiers.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function wrapValue($value)
@@ -231,7 +231,7 @@
     /**
      * Wrap the given JSON selector.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function wrapJsonSelector($value)
@@ -254,13 +254,15 @@
     /**
      * Wrap the attributes of the give JSON path.
      *
-     * @param  array  $path
+     * @param  array $path
      * @return array
      */
     protected function wrapJsonPathAttributes($path)
     {
-        return array_map(function ($attribute) {
-            return "'$attribute'";
-        }, $path);
+        return array_map(
+            function ($attribute) {
+                return "'$attribute'";
+            }, $path
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Database/Query/Grammars/SQLiteGrammar.php
+++ PHP_CodeSniffer
@@ -20,8 +20,8 @@
     /**
      * Compile an insert statement into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $values
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $values
      * @return string
      */
     public function compileInsert(Builder $query, array $values)
@@ -61,7 +61,7 @@
     /**
      * Compile a truncate table statement into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return array
      */
     public function compileTruncate(Builder $query)
@@ -76,8 +76,8 @@
     /**
      * Compile a "where date" clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereDate(Builder $query, $where)
@@ -88,8 +88,8 @@
     /**
      * Compile a "where day" clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereDay(Builder $query, $where)
@@ -100,8 +100,8 @@
     /**
      * Compile a "where month" clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereMonth(Builder $query, $where)
@@ -112,8 +112,8 @@
     /**
      * Compile a "where year" clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereYear(Builder $query, $where)
@@ -124,9 +124,9 @@
     /**
      * Compile a date based where clause.
      *
-     * @param  string  $type
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  string                             $type
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function dateBasedWhere($type, Builder $query, $where)

--- vendor/laravel/framework/src/Illuminate/Database/Query/Grammars/SqlServerGrammar.php
+++ PHP_CodeSniffer
@@ -20,7 +20,7 @@
     /**
      * Compile a select query into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return string
      */
     public function compileSelect(Builder $query)
@@ -50,8 +50,8 @@
     /**
      * Compile the "select *" portion of the query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $columns
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $columns
      * @return string|null
      */
     protected function compileColumns(Builder $query, $columns)
@@ -75,8 +75,8 @@
     /**
      * Compile the "from" portion of the query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  string  $table
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  string                             $table
      * @return string
      */
     protected function compileFrom(Builder $query, $table)
@@ -97,8 +97,8 @@
     /**
      * Create a full ANSI offset clause for the query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $components
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $components
      * @return string
      */
     protected function compileAnsiOffset(Builder $query, $components)
@@ -135,7 +135,7 @@
     /**
      * Compile the over statement for a table expression.
      *
-     * @param  string  $orderings
+     * @param  string $orderings
      * @return string
      */
     protected function compileOver($orderings)
@@ -146,7 +146,7 @@
     /**
      * Compile the limit / offset row constraint for a query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return string
      */
     protected function compileRowConstraint($query)
@@ -165,8 +165,8 @@
     /**
      * Compile a common table expression for a query.
      *
-     * @param  string  $sql
-     * @param  string  $constraint
+     * @param  string $sql
+     * @param  string $constraint
      * @return string
      */
     protected function compileTableExpression($sql, $constraint)
@@ -177,7 +177,7 @@
     /**
      * Compile the random statement into SQL.
      *
-     * @param  string  $seed
+     * @param  string $seed
      * @return string
      */
     public function compileRandom($seed)
@@ -188,8 +188,8 @@
     /**
      * Compile the "limit" portions of the query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  int  $limit
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  int                                $limit
      * @return string
      */
     protected function compileLimit(Builder $query, $limit)
@@ -200,8 +200,8 @@
     /**
      * Compile the "offset" portions of the query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  int  $offset
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  int                                $offset
      * @return string
      */
     protected function compileOffset(Builder $query, $offset)
@@ -212,7 +212,7 @@
     /**
      * Compile a truncate table statement into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return array
      */
     public function compileTruncate(Builder $query)
@@ -223,7 +223,7 @@
     /**
      * Compile an exists statement into SQL.
      *
-     * @param \Illuminate\Database\Query\Builder $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return string
      */
     public function compileExists(Builder $query)
@@ -238,8 +238,8 @@
     /**
      * Compile a "where date" clause.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $where
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $where
      * @return string
      */
     protected function whereDate(Builder $query, $where)
@@ -272,7 +272,7 @@
     /**
      * Wrap a single string in keyword identifiers.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function wrapValue($value)
@@ -287,8 +287,8 @@
     /**
      * Compile an update statement into SQL.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $values
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $values
      * @return string
      */
     public function compileUpdate(Builder $query, $values)
@@ -336,7 +336,7 @@
     /**
      * Wrap a table in keyword identifiers.
      *
-     * @param  \Illuminate\Database\Query\Expression|string  $table
+     * @param  \Illuminate\Database\Query\Expression|string $table
      * @return string
      */
     public function wrapTable($table)
@@ -347,7 +347,7 @@
     /**
      * Wrap a table in keyword identifiers.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return string
      */
     protected function wrapTableValuedFunction($table)

--- vendor/laravel/framework/src/Illuminate/Database/Query/JoinClause.php
+++ PHP_CodeSniffer
@@ -38,8 +38,8 @@
     /**
      * Create a new join clause instance.
      *
-     * @param  string  $type
-     * @param  string  $table
+     * @param  string $type
+     * @param  string $table
      * @return void
      */
     public function __construct($type, $table)
@@ -60,11 +60,11 @@
      *
      * on `contacts`.`user_id` = `users`.`id`  and `contacts`.`info_id` = `info`.`id`
      *
-     * @param  \Closure|string  $first
-     * @param  string|null  $operator
-     * @param  string|null  $second
-     * @param  string  $boolean
-     * @param  bool  $where
+     * @param  \Closure|string $first
+     * @param  string|null     $operator
+     * @param  string|null     $second
+     * @param  string          $boolean
+     * @param  bool            $where
      * @return $this
      *
      * @throws \InvalidArgumentException
@@ -97,9 +97,9 @@
     /**
      * Add an "or on" clause to the join.
      *
-     * @param  \Closure|string  $first
-     * @param  string|null  $operator
-     * @param  string|null  $second
+     * @param  \Closure|string $first
+     * @param  string|null     $operator
+     * @param  string|null     $second
      * @return \Illuminate\Database\Query\JoinClause
      */
     public function orOn($first, $operator = null, $second = null)
@@ -110,10 +110,10 @@
     /**
      * Add an "on where" clause to the join.
      *
-     * @param  \Closure|string  $first
-     * @param  string|null  $operator
-     * @param  string|null  $second
-     * @param  string  $boolean
+     * @param  \Closure|string $first
+     * @param  string|null     $operator
+     * @param  string|null     $second
+     * @param  string          $boolean
      * @return \Illuminate\Database\Query\JoinClause
      */
     public function where($first, $operator = null, $second = null, $boolean = 'and')
@@ -124,9 +124,9 @@
     /**
      * Add an "or on where" clause to the join.
      *
-     * @param  \Closure|string  $first
-     * @param  string|null  $operator
-     * @param  string|null  $second
+     * @param  \Closure|string $first
+     * @param  string|null     $operator
+     * @param  string|null     $second
      * @return \Illuminate\Database\Query\JoinClause
      */
     public function orWhere($first, $operator = null, $second = null)
@@ -137,8 +137,8 @@
     /**
      * Add an "on where is null" clause to the join.
      *
-     * @param  string  $column
-     * @param  string  $boolean
+     * @param  string $column
+     * @param  string $boolean
      * @return \Illuminate\Database\Query\JoinClause
      */
     public function whereNull($column, $boolean = 'and')
@@ -149,7 +149,7 @@
     /**
      * Add an "or on where is null" clause to the join.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Database\Query\JoinClause
      */
     public function orWhereNull($column)
@@ -160,8 +160,8 @@
     /**
      * Add an "on where is not null" clause to the join.
      *
-     * @param  string  $column
-     * @param  string  $boolean
+     * @param  string $column
+     * @param  string $boolean
      * @return \Illuminate\Database\Query\JoinClause
      */
     public function whereNotNull($column, $boolean = 'and')
@@ -172,7 +172,7 @@
     /**
      * Add an "or on where is not null" clause to the join.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Database\Query\JoinClause
      */
     public function orWhereNotNull($column)
@@ -183,7 +183,7 @@
     /**
      * Add an "on where in (...)" clause to the join.
      *
-     * @param  string  $column
+     * @param  string $column
      * @param  array  $values
      * @return \Illuminate\Database\Query\JoinClause
      */
@@ -195,7 +195,7 @@
     /**
      * Add an "on where not in (...)" clause to the join.
      *
-     * @param  string  $column
+     * @param  string $column
      * @param  array  $values
      * @return \Illuminate\Database\Query\JoinClause
      */
@@ -207,7 +207,7 @@
     /**
      * Add an "or on where in (...)" clause to the join.
      *
-     * @param  string  $column
+     * @param  string $column
      * @param  array  $values
      * @return \Illuminate\Database\Query\JoinClause
      */
@@ -219,7 +219,7 @@
     /**
      * Add an "or on where not in (...)" clause to the join.
      *
-     * @param  string  $column
+     * @param  string $column
      * @param  array  $values
      * @return \Illuminate\Database\Query\JoinClause
      */
@@ -231,7 +231,7 @@
     /**
      * Add a nested where statement to the query.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @param  string   $boolean
      * @return \Illuminate\Database\Query\JoinClause
      */

--- vendor/laravel/framework/src/Illuminate/Database/Query/JsonExpression.php
+++ PHP_CodeSniffer
@@ -16,7 +16,7 @@
     /**
      * Create a new raw query expression.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return void
      */
     public function __construct($value)
@@ -27,22 +27,22 @@
     /**
      * Translate the given value into the appropriate JSON binding parameter.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return string
      */
     protected function getJsonBindingParameter($value)
     {
         switch ($type = gettype($value)) {
-            case 'boolean':
-                return $value ? 'true' : 'false';
-            case 'integer':
-            case 'double':
-                return $value;
-            case 'string':
-                return '?';
-            case 'object':
-            case 'array':
-                return '?';
+        case 'boolean':
+            return $value ? 'true' : 'false';
+        case 'integer':
+        case 'double':
+            return $value;
+        case 'string':
+            return '?';
+        case 'object':
+        case 'array':
+            return '?';
         }
 
         throw new InvalidArgumentException('JSON value is of illegal type: '.$type);

--- vendor/laravel/framework/src/Illuminate/Database/Query/Processors/MySqlProcessor.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Process the results of a column listing query.
      *
-     * @param  array  $results
+     * @param  array $results
      * @return array
      */
     public function processColumnListing($results)

--- vendor/laravel/framework/src/Illuminate/Database/Query/Processors/PostgresProcessor.php
+++ PHP_CodeSniffer
@@ -9,10 +9,10 @@
     /**
      * Process an "insert get ID" query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  string  $sql
-     * @param  array   $values
-     * @param  string  $sequence
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  string                             $sql
+     * @param  array                              $values
+     * @param  string                             $sequence
      * @return int
      */
     public function processInsertGetId(Builder $query, $sql, $values, $sequence = null)
@@ -29,7 +29,7 @@
     /**
      * Process the results of a column listing query.
      *
-     * @param  array  $results
+     * @param  array $results
      * @return array
      */
     public function processColumnListing($results)

--- vendor/laravel/framework/src/Illuminate/Database/Query/Processors/Processor.php
+++ PHP_CodeSniffer
@@ -9,8 +9,8 @@
     /**
      * Process the results of a "select" query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  array  $results
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  array                              $results
      * @return array
      */
     public function processSelect(Builder $query, $results)
@@ -21,10 +21,10 @@
     /**
      * Process an  "insert get ID" query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  string  $sql
-     * @param  array   $values
-     * @param  string  $sequence
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  string                             $sql
+     * @param  array                              $values
+     * @param  string                             $sequence
      * @return int
      */
     public function processInsertGetId(Builder $query, $sql, $values, $sequence = null)
@@ -39,7 +39,7 @@
     /**
      * Process the results of a column listing query.
      *
-     * @param  array  $results
+     * @param  array $results
      * @return array
      */
     public function processColumnListing($results)

--- vendor/laravel/framework/src/Illuminate/Database/Query/Processors/SQLiteProcessor.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Process the results of a column listing query.
      *
-     * @param  array  $results
+     * @param  array $results
      * @return array
      */
     public function processColumnListing($results)

--- vendor/laravel/framework/src/Illuminate/Database/Query/Processors/SqlServerProcessor.php
+++ PHP_CodeSniffer
@@ -10,10 +10,10 @@
     /**
      * Process an "insert get ID" query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  string  $sql
-     * @param  array   $values
-     * @param  string  $sequence
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  string                             $sql
+     * @param  array                              $values
+     * @param  string                             $sequence
      * @return int
      */
     public function processInsertGetId(Builder $query, $sql, $values, $sequence = null)
@@ -34,7 +34,7 @@
     /**
      * Process an "insert get ID" query for ODBC.
      *
-     * @param  \Illuminate\Database\Connection  $connection
+     * @param  \Illuminate\Database\Connection $connection
      * @return int
      */
     protected function processInsertGetIdForOdbc($connection)
@@ -53,7 +53,7 @@
     /**
      * Process the results of a column listing query.
      *
-     * @param  array  $results
+     * @param  array $results
      * @return array
      */
     public function processColumnListing($results)

--- vendor/laravel/framework/src/Illuminate/Database/QueryException.php
+++ PHP_CodeSniffer
@@ -23,8 +23,8 @@
     /**
      * Create a new query exception instance.
      *
-     * @param  string  $sql
-     * @param  array  $bindings
+     * @param  string     $sql
+     * @param  array      $bindings
      * @param  \Exception $previous
      * @return void
      */
@@ -46,8 +46,8 @@
     /**
      * Format the SQL error message.
      *
-     * @param  string  $sql
-     * @param  array  $bindings
+     * @param  string     $sql
+     * @param  array      $bindings
      * @param  \Exception $previous
      * @return string
      */

--- vendor/laravel/framework/src/Illuminate/Database/Schema/Blueprint.php
+++ PHP_CodeSniffer
@@ -57,8 +57,8 @@
     /**
      * Create a new schema blueprint.
      *
-     * @param  string  $table
-     * @param  \Closure|null  $callback
+     * @param  string        $table
+     * @param  \Closure|null $callback
      * @return void
      */
     public function __construct($table, Closure $callback = null)
@@ -73,7 +73,7 @@
     /**
      * Execute the blueprint against the database.
      *
-     * @param  \Illuminate\Database\Connection  $connection
+     * @param  \Illuminate\Database\Connection              $connection
      * @param  \Illuminate\Database\Schema\Grammars\Grammar $grammar
      * @return void
      */
@@ -87,8 +87,8 @@
     /**
      * Get the raw SQL statements for the blueprint.
      *
-     * @param  \Illuminate\Database\Connection  $connection
-     * @param  \Illuminate\Database\Schema\Grammars\Grammar  $grammar
+     * @param  \Illuminate\Database\Connection              $connection
+     * @param  \Illuminate\Database\Schema\Grammars\Grammar $grammar
      * @return array
      */
     public function toSql(Connection $connection, Grammar $grammar)
@@ -220,7 +220,7 @@
     /**
      * Indicate that the given columns should be dropped.
      *
-     * @param  array|mixed  $columns
+     * @param  array|mixed $columns
      * @return \Illuminate\Support\Fluent
      */
     public function dropColumn($columns)
@@ -233,8 +233,8 @@
     /**
      * Indicate that the given columns should be renamed.
      *
-     * @param  string  $from
-     * @param  string  $to
+     * @param  string $from
+     * @param  string $to
      * @return \Illuminate\Support\Fluent
      */
     public function renameColumn($from, $to)
@@ -245,7 +245,7 @@
     /**
      * Indicate that the given primary key should be dropped.
      *
-     * @param  string|array  $index
+     * @param  string|array $index
      * @return \Illuminate\Support\Fluent
      */
     public function dropPrimary($index = null)
@@ -256,7 +256,7 @@
     /**
      * Indicate that the given unique key should be dropped.
      *
-     * @param  string|array  $index
+     * @param  string|array $index
      * @return \Illuminate\Support\Fluent
      */
     public function dropUnique($index)
@@ -267,7 +267,7 @@
     /**
      * Indicate that the given index should be dropped.
      *
-     * @param  string|array  $index
+     * @param  string|array $index
      * @return \Illuminate\Support\Fluent
      */
     public function dropIndex($index)
@@ -278,7 +278,7 @@
     /**
      * Indicate that the given foreign key should be dropped.
      *
-     * @param  string|array  $index
+     * @param  string|array $index
      * @return \Illuminate\Support\Fluent
      */
     public function dropForeign($index)
@@ -329,7 +329,7 @@
     /**
      * Rename the table to a given name.
      *
-     * @param  string  $to
+     * @param  string $to
      * @return \Illuminate\Support\Fluent
      */
     public function rename($to)
@@ -340,8 +340,8 @@
     /**
      * Specify the primary key(s) for the table.
      *
-     * @param  string|array  $columns
-     * @param  string  $name
+     * @param  string|array $columns
+     * @param  string       $name
      * @return \Illuminate\Support\Fluent
      */
     public function primary($columns, $name = null)
@@ -352,8 +352,8 @@
     /**
      * Specify a unique index for the table.
      *
-     * @param  string|array  $columns
-     * @param  string  $name
+     * @param  string|array $columns
+     * @param  string       $name
      * @return \Illuminate\Support\Fluent
      */
     public function unique($columns, $name = null)
@@ -364,8 +364,8 @@
     /**
      * Specify an index for the table.
      *
-     * @param  string|array  $columns
-     * @param  string  $name
+     * @param  string|array $columns
+     * @param  string       $name
      * @return \Illuminate\Support\Fluent
      */
     public function index($columns, $name = null)
@@ -376,8 +376,8 @@
     /**
      * Specify a foreign key for the table.
      *
-     * @param  string|array  $columns
-     * @param  string  $name
+     * @param  string|array $columns
+     * @param  string       $name
      * @return \Illuminate\Support\Fluent
      */
     public function foreign($columns, $name = null)
@@ -388,7 +388,7 @@
     /**
      * Create a new auto-incrementing integer (4-byte) column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function increments($column)
@@ -399,7 +399,7 @@
     /**
      * Create a new auto-incrementing small integer (2-byte) column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function smallIncrements($column)
@@ -410,7 +410,7 @@
     /**
      * Create a new auto-incrementing medium integer (3-byte) column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function mediumIncrements($column)
@@ -421,7 +421,7 @@
     /**
      * Create a new auto-incrementing big integer (8-byte) column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function bigIncrements($column)
@@ -432,8 +432,8 @@
     /**
      * Create a new char column on the table.
      *
-     * @param  string  $column
-     * @param  int  $length
+     * @param  string $column
+     * @param  int    $length
      * @return \Illuminate\Support\Fluent
      */
     public function char($column, $length = 255)
@@ -444,8 +444,8 @@
     /**
      * Create a new string column on the table.
      *
-     * @param  string  $column
-     * @param  int  $length
+     * @param  string $column
+     * @param  int    $length
      * @return \Illuminate\Support\Fluent
      */
     public function string($column, $length = 255)
@@ -456,7 +456,7 @@
     /**
      * Create a new text column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function text($column)
@@ -467,7 +467,7 @@
     /**
      * Create a new medium text column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function mediumText($column)
@@ -478,7 +478,7 @@
     /**
      * Create a new long text column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function longText($column)
@@ -489,9 +489,9 @@
     /**
      * Create a new integer (4-byte) column on the table.
      *
-     * @param  string  $column
-     * @param  bool  $autoIncrement
-     * @param  bool  $unsigned
+     * @param  string $column
+     * @param  bool   $autoIncrement
+     * @param  bool   $unsigned
      * @return \Illuminate\Support\Fluent
      */
     public function integer($column, $autoIncrement = false, $unsigned = false)
@@ -502,9 +502,9 @@
     /**
      * Create a new tiny integer (1-byte) column on the table.
      *
-     * @param  string  $column
-     * @param  bool  $autoIncrement
-     * @param  bool  $unsigned
+     * @param  string $column
+     * @param  bool   $autoIncrement
+     * @param  bool   $unsigned
      * @return \Illuminate\Support\Fluent
      */
     public function tinyInteger($column, $autoIncrement = false, $unsigned = false)
@@ -515,9 +515,9 @@
     /**
      * Create a new small integer (2-byte) column on the table.
      *
-     * @param  string  $column
-     * @param  bool  $autoIncrement
-     * @param  bool  $unsigned
+     * @param  string $column
+     * @param  bool   $autoIncrement
+     * @param  bool   $unsigned
      * @return \Illuminate\Support\Fluent
      */
     public function smallInteger($column, $autoIncrement = false, $unsigned = false)
@@ -528,9 +528,9 @@
     /**
      * Create a new medium integer (3-byte) column on the table.
      *
-     * @param  string  $column
-     * @param  bool  $autoIncrement
-     * @param  bool  $unsigned
+     * @param  string $column
+     * @param  bool   $autoIncrement
+     * @param  bool   $unsigned
      * @return \Illuminate\Support\Fluent
      */
     public function mediumInteger($column, $autoIncrement = false, $unsigned = false)
@@ -541,9 +541,9 @@
     /**
      * Create a new big integer (8-byte) column on the table.
      *
-     * @param  string  $column
-     * @param  bool  $autoIncrement
-     * @param  bool  $unsigned
+     * @param  string $column
+     * @param  bool   $autoIncrement
+     * @param  bool   $unsigned
      * @return \Illuminate\Support\Fluent
      */
     public function bigInteger($column, $autoIncrement = false, $unsigned = false)
@@ -554,8 +554,8 @@
     /**
      * Create a new unsigned tiny integer (1-byte) column on the table.
      *
-     * @param  string  $column
-     * @param  bool  $autoIncrement
+     * @param  string $column
+     * @param  bool   $autoIncrement
      * @return \Illuminate\Support\Fluent
      */
     public function unsignedTinyInteger($column, $autoIncrement = false)
@@ -566,8 +566,8 @@
     /**
      * Create a new unsigned small integer (2-byte) column on the table.
      *
-     * @param  string  $column
-     * @param  bool  $autoIncrement
+     * @param  string $column
+     * @param  bool   $autoIncrement
      * @return \Illuminate\Support\Fluent
      */
     public function unsignedSmallInteger($column, $autoIncrement = false)
@@ -578,8 +578,8 @@
     /**
      * Create a new unsigned medium integer (3-byte) column on the table.
      *
-     * @param  string  $column
-     * @param  bool  $autoIncrement
+     * @param  string $column
+     * @param  bool   $autoIncrement
      * @return \Illuminate\Support\Fluent
      */
     public function unsignedMediumInteger($column, $autoIncrement = false)
@@ -590,8 +590,8 @@
     /**
      * Create a new unsigned integer (4-byte) column on the table.
      *
-     * @param  string  $column
-     * @param  bool  $autoIncrement
+     * @param  string $column
+     * @param  bool   $autoIncrement
      * @return \Illuminate\Support\Fluent
      */
     public function unsignedInteger($column, $autoIncrement = false)
@@ -602,8 +602,8 @@
     /**
      * Create a new unsigned big integer (8-byte) column on the table.
      *
-     * @param  string  $column
-     * @param  bool  $autoIncrement
+     * @param  string $column
+     * @param  bool   $autoIncrement
      * @return \Illuminate\Support\Fluent
      */
     public function unsignedBigInteger($column, $autoIncrement = false)
@@ -614,9 +614,9 @@
     /**
      * Create a new float column on the table.
      *
-     * @param  string  $column
-     * @param  int     $total
-     * @param  int     $places
+     * @param  string $column
+     * @param  int    $total
+     * @param  int    $places
      * @return \Illuminate\Support\Fluent
      */
     public function float($column, $total = 8, $places = 2)
@@ -628,7 +628,7 @@
      * Create a new double column on the table.
      *
      * @param  string   $column
-     * @param  int|null    $total
+     * @param  int|null $total
      * @param  int|null $places
      * @return \Illuminate\Support\Fluent
      */
@@ -640,9 +640,9 @@
     /**
      * Create a new decimal column on the table.
      *
-     * @param  string  $column
-     * @param  int     $total
-     * @param  int     $places
+     * @param  string $column
+     * @param  int    $total
+     * @param  int    $places
      * @return \Illuminate\Support\Fluent
      */
     public function decimal($column, $total = 8, $places = 2)
@@ -653,7 +653,7 @@
     /**
      * Create a new boolean column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function boolean($column)
@@ -664,8 +664,8 @@
     /**
      * Create a new enum column on the table.
      *
-     * @param  string  $column
-     * @param  array   $allowed
+     * @param  string $column
+     * @param  array  $allowed
      * @return \Illuminate\Support\Fluent
      */
     public function enum($column, array $allowed)
@@ -676,7 +676,7 @@
     /**
      * Create a new json column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function json($column)
@@ -687,7 +687,7 @@
     /**
      * Create a new jsonb column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function jsonb($column)
@@ -698,7 +698,7 @@
     /**
      * Create a new date column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function date($column)
@@ -709,7 +709,7 @@
     /**
      * Create a new date-time column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function dateTime($column)
@@ -720,7 +720,7 @@
     /**
      * Create a new date-time column (with time zone) on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function dateTimeTz($column)
@@ -731,7 +731,7 @@
     /**
      * Create a new time column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function time($column)
@@ -742,7 +742,7 @@
     /**
      * Create a new time column (with time zone) on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function timeTz($column)
@@ -753,7 +753,7 @@
     /**
      * Create a new timestamp column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function timestamp($column)
@@ -764,7 +764,7 @@
     /**
      * Create a new timestamp (with time zone) column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function timestampTz($column)
@@ -821,7 +821,7 @@
     /**
      * Create a new binary column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function binary($column)
@@ -832,7 +832,7 @@
     /**
      * Create a new uuid column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function uuid($column)
@@ -843,7 +843,7 @@
     /**
      * Create a new IP address column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function ipAddress($column)
@@ -854,7 +854,7 @@
     /**
      * Create a new MAC address column on the table.
      *
-     * @param  string  $column
+     * @param  string $column
      * @return \Illuminate\Support\Fluent
      */
     public function macAddress($column)
@@ -865,8 +865,8 @@
     /**
      * Add the proper columns for a polymorphic table.
      *
-     * @param  string  $name
-     * @param  string|null  $indexName
+     * @param  string      $name
+     * @param  string|null $indexName
      * @return void
      */
     public function morphs($name, $indexName = null)
@@ -891,9 +891,9 @@
     /**
      * Create a new drop index command on the blueprint.
      *
-     * @param  string  $command
-     * @param  string  $type
-     * @param  string|array  $index
+     * @param  string       $command
+     * @param  string       $type
+     * @param  string|array $index
      * @return \Illuminate\Support\Fluent
      */
     protected function dropIndexCommand($command, $type, $index)
@@ -915,9 +915,9 @@
     /**
      * Add a new index command to the blueprint.
      *
-     * @param  string        $type
-     * @param  string|array  $columns
-     * @param  string        $index
+     * @param  string       $type
+     * @param  string|array $columns
+     * @param  string       $index
      * @return \Illuminate\Support\Fluent
      */
     protected function indexCommand($type, $columns, $index)
@@ -937,8 +937,8 @@
     /**
      * Create a default index name for the table.
      *
-     * @param  string  $type
-     * @param  array   $columns
+     * @param  string $type
+     * @param  array  $columns
      * @return string
      */
     protected function createIndexName($type, array $columns)
@@ -951,9 +951,9 @@
     /**
      * Add a new column to the blueprint.
      *
-     * @param  string  $type
-     * @param  string  $name
-     * @param  array   $parameters
+     * @param  string $type
+     * @param  string $name
+     * @param  array  $parameters
      * @return \Illuminate\Support\Fluent
      */
     public function addColumn($type, $name, array $parameters = [])
@@ -968,14 +968,18 @@
     /**
      * Remove a column from the schema blueprint.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return $this
      */
     public function removeColumn($name)
     {
-        $this->columns = array_values(array_filter($this->columns, function ($c) use ($name) {
-            return $c['attributes']['name'] != $name;
-        }));
+        $this->columns = array_values(
+            array_filter(
+                $this->columns, function ($c) use ($name) {
+                    return $c['attributes']['name'] != $name;
+                }
+            )
+        );
 
         return $this;
     }
@@ -983,7 +987,7 @@
     /**
      * Add a new command to the blueprint.
      *
-     * @param  string  $name
+     * @param  string $name
      * @param  array  $parameters
      * @return \Illuminate\Support\Fluent
      */
@@ -997,8 +1001,8 @@
     /**
      * Create a new Fluent command.
      *
-     * @param  string  $name
-     * @param  array   $parameters
+     * @param  string $name
+     * @param  array  $parameters
      * @return \Illuminate\Support\Fluent
      */
     protected function createCommand($name, array $parameters = [])
@@ -1043,9 +1047,11 @@
      */
     public function getAddedColumns()
     {
-        return array_filter($this->columns, function ($column) {
-            return ! $column->change;
-        });
+        return array_filter(
+            $this->columns, function ($column) {
+                return ! $column->change;
+            }
+        );
     }
 
     /**
@@ -1055,8 +1061,10 @@
      */
     public function getChangedColumns()
     {
-        return array_filter($this->columns, function ($column) {
-            return (bool) $column->change;
-        });
+        return array_filter(
+            $this->columns, function ($column) {
+                return (bool) $column->change;
+            }
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Database/Schema/Builder.php
+++ PHP_CodeSniffer
@@ -31,7 +31,7 @@
     /**
      * Create a new database Schema manager.
      *
-     * @param  \Illuminate\Database\Connection  $connection
+     * @param  \Illuminate\Database\Connection $connection
      * @return void
      */
     public function __construct(Connection $connection)
@@ -43,7 +43,7 @@
     /**
      * Determine if the given table exists.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return bool
      */
     public function hasTable($table)
@@ -58,8 +58,8 @@
     /**
      * Determine if the given table has a given column.
      *
-     * @param  string  $table
-     * @param  string  $column
+     * @param  string $table
+     * @param  string $column
      * @return bool
      */
     public function hasColumn($table, $column)
@@ -72,8 +72,8 @@
     /**
      * Determine if the given table has given columns.
      *
-     * @param  string  $table
-     * @param  array   $columns
+     * @param  string $table
+     * @param  array  $columns
      * @return bool
      */
     public function hasColumns($table, array $columns)
@@ -92,8 +92,8 @@
     /**
      * Get the data type for the given column name.
      *
-     * @param  string  $table
-     * @param  string  $column
+     * @param  string $table
+     * @param  string $column
      * @return string
      */
     public function getColumnType($table, $column)
@@ -106,7 +106,7 @@
     /**
      * Get the column listing for a given table.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return array
      */
     public function getColumnListing($table)
@@ -121,8 +121,8 @@
     /**
      * Modify a table on the schema.
      *
-     * @param  string    $table
-     * @param  \Closure  $callback
+     * @param  string   $table
+     * @param  \Closure $callback
      * @return \Illuminate\Database\Schema\Blueprint
      */
     public function table($table, Closure $callback)
@@ -133,8 +133,8 @@
     /**
      * Create a new table on the schema.
      *
-     * @param  string    $table
-     * @param  \Closure  $callback
+     * @param  string   $table
+     * @param  \Closure $callback
      * @return \Illuminate\Database\Schema\Blueprint
      */
     public function create($table, Closure $callback)
@@ -151,7 +151,7 @@
     /**
      * Drop a table from the schema.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return \Illuminate\Database\Schema\Blueprint
      */
     public function drop($table)
@@ -166,7 +166,7 @@
     /**
      * Drop a table from the schema if it exists.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return \Illuminate\Database\Schema\Blueprint
      */
     public function dropIfExists($table)
@@ -181,8 +181,8 @@
     /**
      * Rename a table on the schema.
      *
-     * @param  string  $from
-     * @param  string  $to
+     * @param  string $from
+     * @param  string $to
      * @return \Illuminate\Database\Schema\Blueprint
      */
     public function rename($from, $to)
@@ -221,7 +221,7 @@
     /**
      * Execute the blueprint to build / modify the table.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
      * @return void
      */
     protected function build(Blueprint $blueprint)
@@ -232,8 +232,8 @@
     /**
      * Create a new command set with a Closure.
      *
-     * @param  string  $table
-     * @param  \Closure|null  $callback
+     * @param  string        $table
+     * @param  \Closure|null $callback
      * @return \Illuminate\Database\Schema\Blueprint
      */
     protected function createBlueprint($table, Closure $callback = null)
@@ -258,7 +258,7 @@
     /**
      * Set the database connection instance.
      *
-     * @param  \Illuminate\Database\Connection  $connection
+     * @param  \Illuminate\Database\Connection $connection
      * @return $this
      */
     public function setConnection(Connection $connection)
@@ -271,7 +271,7 @@
     /**
      * Set the Schema Blueprint resolver callback.
      *
-     * @param  \Closure  $resolver
+     * @param  \Closure $resolver
      * @return void
      */
     public function blueprintResolver(Closure $resolver)

--- vendor/laravel/framework/src/Illuminate/Database/Schema/Grammars/Grammar.php
+++ PHP_CodeSniffer
@@ -20,9 +20,9 @@
     /**
      * Compile a rename column command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
-     * @param  \Illuminate\Database\Connection  $connection
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
+     * @param  \Illuminate\Database\Connection       $connection
      * @return array
      */
     public function compileRenameColumn(Blueprint $blueprint, Fluent $command, Connection $connection)
@@ -41,10 +41,10 @@
     /**
      * Get a new column instance with the new column name.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
-     * @param  \Doctrine\DBAL\Schema\Column  $column
-     * @param  \Doctrine\DBAL\Schema\AbstractSchemaManager  $schema
+     * @param  \Illuminate\Database\Schema\Blueprint       $blueprint
+     * @param  \Illuminate\Support\Fluent                  $command
+     * @param  \Doctrine\DBAL\Schema\Column                $column
+     * @param  \Doctrine\DBAL\Schema\AbstractSchemaManager $schema
      * @return \Doctrine\DBAL\Schema\TableDiff
      */
     protected function getRenamedDiff(Blueprint $blueprint, Fluent $command, Column $column, SchemaManager $schema)
@@ -57,9 +57,9 @@
     /**
      * Set the renamed columns on the table diff.
      *
-     * @param  \Doctrine\DBAL\Schema\TableDiff  $tableDiff
-     * @param  \Illuminate\Support\Fluent  $command
-     * @param  \Doctrine\DBAL\Schema\Column  $column
+     * @param  \Doctrine\DBAL\Schema\TableDiff $tableDiff
+     * @param  \Illuminate\Support\Fluent      $command
+     * @param  \Doctrine\DBAL\Schema\Column    $column
      * @return \Doctrine\DBAL\Schema\TableDiff
      */
     protected function setRenamedColumns(TableDiff $tableDiff, Fluent $command, Column $column)
@@ -74,8 +74,8 @@
     /**
      * Compile a foreign key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileForeign(Blueprint $blueprint, Fluent $command)
@@ -136,9 +136,9 @@
     /**
      * Add the column modifiers to the definition.
      *
-     * @param  string  $sql
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  string                                $sql
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string
      */
     protected function addModifiers($sql, Blueprint $blueprint, Fluent $column)
@@ -155,8 +155,8 @@
     /**
      * Get the primary key command if it exists on the blueprint.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  string  $name
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  string                                $name
      * @return \Illuminate\Support\Fluent|null
      */
     protected function getCommandByName(Blueprint $blueprint, $name)
@@ -171,21 +171,23 @@
     /**
      * Get all of the commands with a given name.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  string  $name
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  string                                $name
      * @return array
      */
     protected function getCommandsByName(Blueprint $blueprint, $name)
     {
-        return array_filter($blueprint->getCommands(), function ($value) use ($name) {
-            return $value->name == $name;
-        });
+        return array_filter(
+            $blueprint->getCommands(), function ($value) use ($name) {
+                return $value->name == $name;
+            }
+        );
     }
 
     /**
      * Get the SQL for the column data type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function getType(Fluent $column)
@@ -196,21 +198,23 @@
     /**
      * Add a prefix to an array of values.
      *
-     * @param  string  $prefix
-     * @param  array   $values
+     * @param  string $prefix
+     * @param  array  $values
      * @return array
      */
     public function prefixArray($prefix, array $values)
     {
-        return array_map(function ($value) use ($prefix) {
-            return $prefix.' '.$value;
-        }, $values);
+        return array_map(
+            function ($value) use ($prefix) {
+                return $prefix.' '.$value;
+            }, $values
+        );
     }
 
     /**
      * Wrap a table in keyword identifiers.
      *
-     * @param  mixed   $table
+     * @param  mixed $table
      * @return string
      */
     public function wrapTable($table)
@@ -237,7 +241,7 @@
     /**
      * Format a value so that it can be used in "default" clauses.
      *
-     * @param  mixed   $value
+     * @param  mixed $value
      * @return string
      */
     protected function getDefaultValue($value)
@@ -256,8 +260,8 @@
     /**
      * Create an empty Doctrine DBAL TableDiff from the Blueprint.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Doctrine\DBAL\Schema\AbstractSchemaManager  $schema
+     * @param  \Illuminate\Database\Schema\Blueprint       $blueprint
+     * @param  \Doctrine\DBAL\Schema\AbstractSchemaManager $schema
      * @return \Doctrine\DBAL\Schema\TableDiff
      */
     protected function getDoctrineTableDiff(Blueprint $blueprint, SchemaManager $schema)
@@ -274,9 +278,9 @@
     /**
      * Compile a change column command into a series of SQL statements.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
-     * @param  \Illuminate\Database\Connection $connection
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
+     * @param  \Illuminate\Database\Connection       $connection
      * @return array
      *
      * @throws \RuntimeException
@@ -284,10 +288,12 @@
     public function compileChange(Blueprint $blueprint, Fluent $command, Connection $connection)
     {
         if (! $connection->isDoctrineAvailable()) {
-            throw new RuntimeException(sprintf(
-                'Changing columns for table "%s" requires Doctrine DBAL; install "doctrine/dbal".',
-                $blueprint->getTable()
-            ));
+            throw new RuntimeException(
+                sprintf(
+                    'Changing columns for table "%s" requires Doctrine DBAL; install "doctrine/dbal".',
+                    $blueprint->getTable()
+                )
+            );
         }
 
         $schema = $connection->getDoctrineSchemaManager();
@@ -304,8 +310,8 @@
     /**
      * Get the Doctrine table difference for the given changes.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Doctrine\DBAL\Schema\AbstractSchemaManager  $schema
+     * @param  \Illuminate\Database\Schema\Blueprint       $blueprint
+     * @param  \Doctrine\DBAL\Schema\AbstractSchemaManager $schema
      * @return \Doctrine\DBAL\Schema\TableDiff|bool
      */
     protected function getChangedDiff(Blueprint $blueprint, SchemaManager $schema)
@@ -318,8 +324,8 @@
     /**
      * Get a copy of the given Doctrine table after making the column changes.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Doctrine\DBAL\Schema\Table  $table
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Doctrine\DBAL\Schema\Table           $table
      * @return \Doctrine\DBAL\Schema\TableDiff
      */
     protected function getTableWithColumnChanges(Blueprint $blueprint, Table $table)
@@ -347,7 +353,7 @@
     /**
      * Get the Doctrine column instance for a column change.
      *
-     * @param  \Doctrine\DBAL\Schema\Table  $table
+     * @param  \Doctrine\DBAL\Schema\Table $table
      * @param  \Illuminate\Support\Fluent  $fluent
      * @return \Doctrine\DBAL\Schema\Column
      */
@@ -361,7 +367,7 @@
     /**
      * Get the Doctrine column change options.
      *
-     * @param  \Illuminate\Support\Fluent  $fluent
+     * @param  \Illuminate\Support\Fluent $fluent
      * @return array
      */
     protected function getDoctrineColumnChangeOptions(Fluent $fluent)
@@ -378,7 +384,7 @@
     /**
      * Get the doctrine column type.
      *
-     * @param  string  $type
+     * @param  string $type
      * @return \Doctrine\DBAL\Types\Type
      */
     protected function getDoctrineColumnType($type)
@@ -386,19 +392,19 @@
         $type = strtolower($type);
 
         switch ($type) {
-            case 'biginteger':
-                $type = 'bigint';
-                break;
-            case 'smallinteger':
-                $type = 'smallint';
-                break;
-            case 'mediumtext':
-            case 'longtext':
-                $type = 'text';
-                break;
-            case 'binary':
-                $type = 'blob';
-                break;
+        case 'biginteger':
+            $type = 'bigint';
+            break;
+        case 'smallinteger':
+            $type = 'smallint';
+            break;
+        case 'mediumtext':
+        case 'longtext':
+            $type = 'text';
+            break;
+        case 'binary':
+            $type = 'blob';
+            break;
         }
 
         return Type::getType($type);
@@ -407,48 +413,48 @@
     /**
      * Calculate the proper column length to force the Doctrine text type.
      *
-     * @param  string  $type
+     * @param  string $type
      * @return int
      */
     protected function calculateDoctrineTextLength($type)
     {
         switch ($type) {
-            case 'mediumText':
-                return 65535 + 1;
-            case 'longText':
-                return 16777215 + 1;
-            default:
-                return 255 + 1;
+        case 'mediumText':
+            return 65535 + 1;
+        case 'longText':
+            return 16777215 + 1;
+        default:
+            return 255 + 1;
         }
     }
 
     /**
      * Get the matching Doctrine option for a given Fluent attribute name.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @return string|null
      */
     protected function mapFluentOptionToDoctrine($attribute)
     {
         switch ($attribute) {
-            case 'type':
-            case 'name':
-                return;
-            case 'nullable':
-                return 'notnull';
-            case 'total':
-                return 'precision';
-            case 'places':
-                return 'scale';
-            default:
-                return $attribute;
+        case 'type':
+        case 'name':
+            return;
+        case 'nullable':
+            return 'notnull';
+        case 'total':
+            return 'precision';
+        case 'places':
+            return 'scale';
+        default:
+            return $attribute;
         }
     }
 
     /**
      * Get the matching Doctrine value for a given Fluent attribute.
      *
-     * @param  string  $option
+     * @param  string $option
      * @param  mixed  $value
      * @return mixed
      */

--- vendor/laravel/framework/src/Illuminate/Database/Schema/Grammars/MySqlGrammar.php
+++ PHP_CodeSniffer
@@ -48,9 +48,9 @@
     /**
      * Compile a create table command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
-     * @param  \Illuminate\Database\Connection  $connection
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
+     * @param  \Illuminate\Database\Connection       $connection
      * @return string
      */
     public function compileCreate(Blueprint $blueprint, Fluent $command, Connection $connection)
@@ -78,9 +78,9 @@
     /**
      * Append the character set specifications to a command.
      *
-     * @param  string  $sql
-     * @param  \Illuminate\Database\Connection  $connection
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
+     * @param  string                                $sql
+     * @param  \Illuminate\Database\Connection       $connection
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
      * @return string
      */
     protected function compileCreateEncoding($sql, Connection $connection, Blueprint $blueprint)
@@ -103,8 +103,8 @@
     /**
      * Compile an add column command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileAdd(Blueprint $blueprint, Fluent $command)
@@ -119,8 +119,8 @@
     /**
      * Compile a primary key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compilePrimary(Blueprint $blueprint, Fluent $command)
@@ -133,8 +133,8 @@
     /**
      * Compile a unique key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileUnique(Blueprint $blueprint, Fluent $command)
@@ -145,8 +145,8 @@
     /**
      * Compile a plain index key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileIndex(Blueprint $blueprint, Fluent $command)
@@ -157,9 +157,9 @@
     /**
      * Compile an index creation command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
-     * @param  string  $type
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
+     * @param  string                                $type
      * @return string
      */
     protected function compileKey(Blueprint $blueprint, Fluent $command, $type)
@@ -176,8 +176,8 @@
     /**
      * Compile a drop table command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDrop(Blueprint $blueprint, Fluent $command)
@@ -188,8 +188,8 @@
     /**
      * Compile a drop table (if exists) command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropIfExists(Blueprint $blueprint, Fluent $command)
@@ -200,8 +200,8 @@
     /**
      * Compile a drop column command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropColumn(Blueprint $blueprint, Fluent $command)
@@ -216,8 +216,8 @@
     /**
      * Compile a drop primary key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropPrimary(Blueprint $blueprint, Fluent $command)
@@ -228,8 +228,8 @@
     /**
      * Compile a drop unique key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropUnique(Blueprint $blueprint, Fluent $command)
@@ -244,8 +244,8 @@
     /**
      * Compile a drop index command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropIndex(Blueprint $blueprint, Fluent $command)
@@ -260,8 +260,8 @@
     /**
      * Compile a drop foreign key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropForeign(Blueprint $blueprint, Fluent $command)
@@ -276,8 +276,8 @@
     /**
      * Compile a rename table command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileRename(Blueprint $blueprint, Fluent $command)
@@ -310,7 +310,7 @@
     /**
      * Create the column definition for a char type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeChar(Fluent $column)
@@ -321,7 +321,7 @@
     /**
      * Create the column definition for a string type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeString(Fluent $column)
@@ -332,7 +332,7 @@
     /**
      * Create the column definition for a text type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeText(Fluent $column)
@@ -343,7 +343,7 @@
     /**
      * Create the column definition for a medium text type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeMediumText(Fluent $column)
@@ -354,7 +354,7 @@
     /**
      * Create the column definition for a long text type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeLongText(Fluent $column)
@@ -365,7 +365,7 @@
     /**
      * Create the column definition for a big integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeBigInteger(Fluent $column)
@@ -376,7 +376,7 @@
     /**
      * Create the column definition for a integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeInteger(Fluent $column)
@@ -387,7 +387,7 @@
     /**
      * Create the column definition for a medium integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeMediumInteger(Fluent $column)
@@ -398,7 +398,7 @@
     /**
      * Create the column definition for a tiny integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTinyInteger(Fluent $column)
@@ -409,7 +409,7 @@
     /**
      * Create the column definition for a small integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeSmallInteger(Fluent $column)
@@ -420,7 +420,7 @@
     /**
      * Create the column definition for a float type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeFloat(Fluent $column)
@@ -431,7 +431,7 @@
     /**
      * Create the column definition for a double type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDouble(Fluent $column)
@@ -446,7 +446,7 @@
     /**
      * Create the column definition for a decimal type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDecimal(Fluent $column)
@@ -457,7 +457,7 @@
     /**
      * Create the column definition for a boolean type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeBoolean(Fluent $column)
@@ -468,7 +468,7 @@
     /**
      * Create the column definition for an enum type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeEnum(Fluent $column)
@@ -479,7 +479,7 @@
     /**
      * Create the column definition for a json type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeJson(Fluent $column)
@@ -490,7 +490,7 @@
     /**
      * Create the column definition for a jsonb type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeJsonb(Fluent $column)
@@ -501,7 +501,7 @@
     /**
      * Create the column definition for a date type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDate(Fluent $column)
@@ -512,7 +512,7 @@
     /**
      * Create the column definition for a date-time type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDateTime(Fluent $column)
@@ -523,7 +523,7 @@
     /**
      * Create the column definition for a date-time type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDateTimeTz(Fluent $column)
@@ -534,7 +534,7 @@
     /**
      * Create the column definition for a time type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTime(Fluent $column)
@@ -545,7 +545,7 @@
     /**
      * Create the column definition for a time type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTimeTz(Fluent $column)
@@ -556,7 +556,7 @@
     /**
      * Create the column definition for a timestamp type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTimestamp(Fluent $column)
@@ -571,7 +571,7 @@
     /**
      * Create the column definition for a timestamp type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTimestampTz(Fluent $column)
@@ -586,7 +586,7 @@
     /**
      * Create the column definition for a binary type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeBinary(Fluent $column)
@@ -597,7 +597,7 @@
     /**
      * Create the column definition for a uuid type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeUuid(Fluent $column)
@@ -608,7 +608,7 @@
     /**
      * Create the column definition for an IP address type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeIpAddress(Fluent $column)
@@ -619,7 +619,7 @@
     /**
      * Create the column definition for a MAC address type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeMacAddress(Fluent $column)
@@ -630,8 +630,8 @@
     /**
      * Get the SQL for a generated virtual column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyVirtualAs(Blueprint $blueprint, Fluent $column)
@@ -644,8 +644,8 @@
     /**
      * Get the SQL for a generated stored column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyStoredAs(Blueprint $blueprint, Fluent $column)
@@ -658,8 +658,8 @@
     /**
      * Get the SQL for an unsigned column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyUnsigned(Blueprint $blueprint, Fluent $column)
@@ -672,8 +672,8 @@
     /**
      * Get the SQL for a character set column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyCharset(Blueprint $blueprint, Fluent $column)
@@ -686,8 +686,8 @@
     /**
      * Get the SQL for a collation column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyCollate(Blueprint $blueprint, Fluent $column)
@@ -700,8 +700,8 @@
     /**
      * Get the SQL for a nullable column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyNullable(Blueprint $blueprint, Fluent $column)
@@ -712,8 +712,8 @@
     /**
      * Get the SQL for a default column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyDefault(Blueprint $blueprint, Fluent $column)
@@ -726,8 +726,8 @@
     /**
      * Get the SQL for an auto-increment column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyIncrement(Blueprint $blueprint, Fluent $column)
@@ -740,8 +740,8 @@
     /**
      * Get the SQL for a "first" column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyFirst(Blueprint $blueprint, Fluent $column)
@@ -754,8 +754,8 @@
     /**
      * Get the SQL for an "after" column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyAfter(Blueprint $blueprint, Fluent $column)
@@ -768,8 +768,8 @@
     /**
      * Get the SQL for a "comment" column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyComment(Blueprint $blueprint, Fluent $column)
@@ -782,7 +782,7 @@
     /**
      * Wrap a single string in keyword identifiers.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function wrapValue($value)

--- vendor/laravel/framework/src/Illuminate/Database/Schema/Grammars/PostgresGrammar.php
+++ PHP_CodeSniffer
@@ -34,7 +34,7 @@
     /**
      * Compile the query to determine the list of columns.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return string
      */
     public function compileColumnExists($table)
@@ -45,8 +45,8 @@
     /**
      * Compile a create table command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileCreate(Blueprint $blueprint, Fluent $command)
@@ -63,8 +63,8 @@
     /**
      * Compile a column addition command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileAdd(Blueprint $blueprint, Fluent $command)
@@ -79,8 +79,8 @@
     /**
      * Compile a primary key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compilePrimary(Blueprint $blueprint, Fluent $command)
@@ -93,8 +93,8 @@
     /**
      * Compile a unique key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileUnique(Blueprint $blueprint, Fluent $command)
@@ -111,8 +111,8 @@
     /**
      * Compile a plain index key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileIndex(Blueprint $blueprint, Fluent $command)
@@ -127,8 +127,8 @@
     /**
      * Compile a drop table command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDrop(Blueprint $blueprint, Fluent $command)
@@ -139,8 +139,8 @@
     /**
      * Compile a drop table (if exists) command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropIfExists(Blueprint $blueprint, Fluent $command)
@@ -151,8 +151,8 @@
     /**
      * Compile a drop column command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropColumn(Blueprint $blueprint, Fluent $command)
@@ -167,8 +167,8 @@
     /**
      * Compile a drop primary key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropPrimary(Blueprint $blueprint, Fluent $command)
@@ -183,8 +183,8 @@
     /**
      * Compile a drop unique key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropUnique(Blueprint $blueprint, Fluent $command)
@@ -199,8 +199,8 @@
     /**
      * Compile a drop index command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropIndex(Blueprint $blueprint, Fluent $command)
@@ -213,8 +213,8 @@
     /**
      * Compile a drop foreign key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropForeign(Blueprint $blueprint, Fluent $command)
@@ -249,8 +249,8 @@
     /**
      * Compile a rename table command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileRename(Blueprint $blueprint, Fluent $command)
@@ -263,7 +263,7 @@
     /**
      * Create the column definition for a char type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeChar(Fluent $column)
@@ -274,7 +274,7 @@
     /**
      * Create the column definition for a string type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeString(Fluent $column)
@@ -285,7 +285,7 @@
     /**
      * Create the column definition for a text type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeText(Fluent $column)
@@ -296,7 +296,7 @@
     /**
      * Create the column definition for a medium text type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeMediumText(Fluent $column)
@@ -307,7 +307,7 @@
     /**
      * Create the column definition for a long text type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeLongText(Fluent $column)
@@ -318,7 +318,7 @@
     /**
      * Create the column definition for a integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeInteger(Fluent $column)
@@ -329,7 +329,7 @@
     /**
      * Create the column definition for a big integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeBigInteger(Fluent $column)
@@ -340,7 +340,7 @@
     /**
      * Create the column definition for a medium integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeMediumInteger(Fluent $column)
@@ -351,7 +351,7 @@
     /**
      * Create the column definition for a tiny integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTinyInteger(Fluent $column)
@@ -362,7 +362,7 @@
     /**
      * Create the column definition for a small integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeSmallInteger(Fluent $column)
@@ -373,7 +373,7 @@
     /**
      * Create the column definition for a float type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeFloat(Fluent $column)
@@ -384,7 +384,7 @@
     /**
      * Create the column definition for a double type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDouble(Fluent $column)
@@ -395,7 +395,7 @@
     /**
      * Create the column definition for a decimal type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDecimal(Fluent $column)
@@ -406,7 +406,7 @@
     /**
      * Create the column definition for a boolean type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeBoolean(Fluent $column)
@@ -417,14 +417,16 @@
     /**
      * Create the column definition for an enum type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeEnum(Fluent $column)
     {
-        $allowed = array_map(function ($a) {
-            return "'".$a."'";
-        }, $column->allowed);
+        $allowed = array_map(
+            function ($a) {
+                return "'".$a."'";
+            }, $column->allowed
+        );
 
         return "varchar(255) check (\"{$column->name}\" in (".implode(', ', $allowed).'))';
     }
@@ -432,7 +434,7 @@
     /**
      * Create the column definition for a json type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeJson(Fluent $column)
@@ -443,7 +445,7 @@
     /**
      * Create the column definition for a jsonb type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeJsonb(Fluent $column)
@@ -454,7 +456,7 @@
     /**
      * Create the column definition for a date type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDate(Fluent $column)
@@ -465,7 +467,7 @@
     /**
      * Create the column definition for a date-time type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDateTime(Fluent $column)
@@ -476,7 +478,7 @@
     /**
      * Create the column definition for a date-time type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDateTimeTz(Fluent $column)
@@ -487,7 +489,7 @@
     /**
      * Create the column definition for a time type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTime(Fluent $column)
@@ -498,7 +500,7 @@
     /**
      * Create the column definition for a time type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTimeTz(Fluent $column)
@@ -509,7 +511,7 @@
     /**
      * Create the column definition for a timestamp type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTimestamp(Fluent $column)
@@ -524,7 +526,7 @@
     /**
      * Create the column definition for a timestamp type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTimestampTz(Fluent $column)
@@ -539,7 +541,7 @@
     /**
      * Create the column definition for a binary type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeBinary(Fluent $column)
@@ -550,7 +552,7 @@
     /**
      * Create the column definition for a uuid type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeUuid(Fluent $column)
@@ -561,7 +563,7 @@
     /**
      * Create the column definition for an IP address type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeIpAddress(Fluent $column)
@@ -572,7 +574,7 @@
     /**
      * Create the column definition for a MAC address type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeMacAddress(Fluent $column)
@@ -583,8 +585,8 @@
     /**
      * Get the SQL for a nullable column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyNullable(Blueprint $blueprint, Fluent $column)
@@ -595,8 +597,8 @@
     /**
      * Get the SQL for a default column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyDefault(Blueprint $blueprint, Fluent $column)
@@ -609,8 +611,8 @@
     /**
      * Get the SQL for an auto-increment column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyIncrement(Blueprint $blueprint, Fluent $column)

--- vendor/laravel/framework/src/Illuminate/Database/Schema/Grammars/SQLiteGrammar.php
+++ PHP_CodeSniffer
@@ -35,7 +35,7 @@
     /**
      * Compile the query to determine the list of columns.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return string
      */
     public function compileColumnExists($table)
@@ -46,8 +46,8 @@
     /**
      * Compile a create table command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileCreate(Blueprint $blueprint, Fluent $command)
@@ -71,7 +71,7 @@
     /**
      * Get the foreign key syntax for a table creation statement.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
      * @return string|null
      */
     protected function addForeignKeys(Blueprint $blueprint)
@@ -101,7 +101,7 @@
     /**
      * Get the SQL for the foreign key.
      *
-     * @param  \Illuminate\Support\Fluent  $foreign
+     * @param  \Illuminate\Support\Fluent $foreign
      * @return string
      */
     protected function getForeignKey($foreign)
@@ -121,7 +121,7 @@
     /**
      * Get the primary key syntax for a table creation statement.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
      * @return string|null
      */
     protected function addPrimaryKeys(Blueprint $blueprint)
@@ -138,8 +138,8 @@
     /**
      * Compile alter table commands for adding columns.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return array
      */
     public function compileAdd(Blueprint $blueprint, Fluent $command)
@@ -160,8 +160,8 @@
     /**
      * Compile a unique key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileUnique(Blueprint $blueprint, Fluent $command)
@@ -178,8 +178,8 @@
     /**
      * Compile a plain index key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileIndex(Blueprint $blueprint, Fluent $command)
@@ -196,8 +196,8 @@
     /**
      * Compile a foreign key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileForeign(Blueprint $blueprint, Fluent $command)
@@ -208,8 +208,8 @@
     /**
      * Compile a drop table command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDrop(Blueprint $blueprint, Fluent $command)
@@ -220,8 +220,8 @@
     /**
      * Compile a drop table (if exists) command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropIfExists(Blueprint $blueprint, Fluent $command)
@@ -232,9 +232,9 @@
     /**
      * Compile a drop column command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
-     * @param  \Illuminate\Database\Connection  $connection
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
+     * @param  \Illuminate\Database\Connection       $connection
      * @return array
      */
     public function compileDropColumn(Blueprint $blueprint, Fluent $command, Connection $connection)
@@ -255,8 +255,8 @@
     /**
      * Compile a drop unique key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropUnique(Blueprint $blueprint, Fluent $command)
@@ -269,8 +269,8 @@
     /**
      * Compile a drop index command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropIndex(Blueprint $blueprint, Fluent $command)
@@ -283,8 +283,8 @@
     /**
      * Compile a rename table command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileRename(Blueprint $blueprint, Fluent $command)
@@ -317,7 +317,7 @@
     /**
      * Create the column definition for a char type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeChar(Fluent $column)
@@ -328,7 +328,7 @@
     /**
      * Create the column definition for a string type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeString(Fluent $column)
@@ -339,7 +339,7 @@
     /**
      * Create the column definition for a text type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeText(Fluent $column)
@@ -350,7 +350,7 @@
     /**
      * Create the column definition for a medium text type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeMediumText(Fluent $column)
@@ -361,7 +361,7 @@
     /**
      * Create the column definition for a long text type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeLongText(Fluent $column)
@@ -372,7 +372,7 @@
     /**
      * Create the column definition for a integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeInteger(Fluent $column)
@@ -383,7 +383,7 @@
     /**
      * Create the column definition for a big integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeBigInteger(Fluent $column)
@@ -394,7 +394,7 @@
     /**
      * Create the column definition for a medium integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeMediumInteger(Fluent $column)
@@ -405,7 +405,7 @@
     /**
      * Create the column definition for a tiny integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTinyInteger(Fluent $column)
@@ -416,7 +416,7 @@
     /**
      * Create the column definition for a small integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeSmallInteger(Fluent $column)
@@ -427,7 +427,7 @@
     /**
      * Create the column definition for a float type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeFloat(Fluent $column)
@@ -438,7 +438,7 @@
     /**
      * Create the column definition for a double type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDouble(Fluent $column)
@@ -449,7 +449,7 @@
     /**
      * Create the column definition for a decimal type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDecimal(Fluent $column)
@@ -460,7 +460,7 @@
     /**
      * Create the column definition for a boolean type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeBoolean(Fluent $column)
@@ -471,7 +471,7 @@
     /**
      * Create the column definition for an enum type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeEnum(Fluent $column)
@@ -482,7 +482,7 @@
     /**
      * Create the column definition for a json type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeJson(Fluent $column)
@@ -493,7 +493,7 @@
     /**
      * Create the column definition for a jsonb type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeJsonb(Fluent $column)
@@ -504,7 +504,7 @@
     /**
      * Create the column definition for a date type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDate(Fluent $column)
@@ -515,7 +515,7 @@
     /**
      * Create the column definition for a date-time type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDateTime(Fluent $column)
@@ -527,9 +527,10 @@
      * Create the column definition for a date-time type.
      *
      * Note: "SQLite does not have a storage class set aside for storing dates and/or times."
+     *
      * @link https://www.sqlite.org/datatype3.html
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDateTimeTz(Fluent $column)
@@ -540,7 +541,7 @@
     /**
      * Create the column definition for a time type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTime(Fluent $column)
@@ -551,7 +552,7 @@
     /**
      * Create the column definition for a time type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTimeTz(Fluent $column)
@@ -562,7 +563,7 @@
     /**
      * Create the column definition for a timestamp type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTimestamp(Fluent $column)
@@ -577,7 +578,7 @@
     /**
      * Create the column definition for a timestamp type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTimestampTz(Fluent $column)
@@ -592,7 +593,7 @@
     /**
      * Create the column definition for a binary type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeBinary(Fluent $column)
@@ -603,7 +604,7 @@
     /**
      * Create the column definition for a uuid type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeUuid(Fluent $column)
@@ -614,7 +615,7 @@
     /**
      * Create the column definition for an IP address type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeIpAddress(Fluent $column)
@@ -625,7 +626,7 @@
     /**
      * Create the column definition for a MAC address type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeMacAddress(Fluent $column)
@@ -636,8 +637,8 @@
     /**
      * Get the SQL for a nullable column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyNullable(Blueprint $blueprint, Fluent $column)
@@ -648,8 +649,8 @@
     /**
      * Get the SQL for a default column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyDefault(Blueprint $blueprint, Fluent $column)
@@ -662,8 +663,8 @@
     /**
      * Get the SQL for an auto-increment column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyIncrement(Blueprint $blueprint, Fluent $column)

--- vendor/laravel/framework/src/Illuminate/Database/Schema/Grammars/SqlServerGrammar.php
+++ PHP_CodeSniffer
@@ -34,7 +34,7 @@
     /**
      * Compile the query to determine the list of columns.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return string
      */
     public function compileColumnExists($table)
@@ -47,8 +47,8 @@
     /**
      * Compile a create table command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileCreate(Blueprint $blueprint, Fluent $command)
@@ -61,8 +61,8 @@
     /**
      * Compile a column addition table command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileAdd(Blueprint $blueprint, Fluent $command)
@@ -77,8 +77,8 @@
     /**
      * Compile a primary key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compilePrimary(Blueprint $blueprint, Fluent $command)
@@ -95,8 +95,8 @@
     /**
      * Compile a unique key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileUnique(Blueprint $blueprint, Fluent $command)
@@ -113,8 +113,8 @@
     /**
      * Compile a plain index key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileIndex(Blueprint $blueprint, Fluent $command)
@@ -131,8 +131,8 @@
     /**
      * Compile a drop table command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDrop(Blueprint $blueprint, Fluent $command)
@@ -143,8 +143,8 @@
     /**
      * Compile a drop table (if exists) command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropIfExists(Blueprint $blueprint, Fluent $command)
@@ -155,8 +155,8 @@
     /**
      * Compile a drop column command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropColumn(Blueprint $blueprint, Fluent $command)
@@ -171,8 +171,8 @@
     /**
      * Compile a drop primary key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropPrimary(Blueprint $blueprint, Fluent $command)
@@ -187,8 +187,8 @@
     /**
      * Compile a drop unique key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropUnique(Blueprint $blueprint, Fluent $command)
@@ -203,8 +203,8 @@
     /**
      * Compile a drop index command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropIndex(Blueprint $blueprint, Fluent $command)
@@ -219,8 +219,8 @@
     /**
      * Compile a drop foreign key command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileDropForeign(Blueprint $blueprint, Fluent $command)
@@ -235,8 +235,8 @@
     /**
      * Compile a rename table command.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $command
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $command
      * @return string
      */
     public function compileRename(Blueprint $blueprint, Fluent $command)
@@ -269,7 +269,7 @@
     /**
      * Create the column definition for a char type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeChar(Fluent $column)
@@ -280,7 +280,7 @@
     /**
      * Create the column definition for a string type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeString(Fluent $column)
@@ -291,7 +291,7 @@
     /**
      * Create the column definition for a text type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeText(Fluent $column)
@@ -302,7 +302,7 @@
     /**
      * Create the column definition for a medium text type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeMediumText(Fluent $column)
@@ -313,7 +313,7 @@
     /**
      * Create the column definition for a long text type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeLongText(Fluent $column)
@@ -324,7 +324,7 @@
     /**
      * Create the column definition for a integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeInteger(Fluent $column)
@@ -335,7 +335,7 @@
     /**
      * Create the column definition for a big integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeBigInteger(Fluent $column)
@@ -346,7 +346,7 @@
     /**
      * Create the column definition for a medium integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeMediumInteger(Fluent $column)
@@ -357,7 +357,7 @@
     /**
      * Create the column definition for a tiny integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTinyInteger(Fluent $column)
@@ -368,7 +368,7 @@
     /**
      * Create the column definition for a small integer type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeSmallInteger(Fluent $column)
@@ -379,7 +379,7 @@
     /**
      * Create the column definition for a float type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeFloat(Fluent $column)
@@ -390,7 +390,7 @@
     /**
      * Create the column definition for a double type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDouble(Fluent $column)
@@ -401,7 +401,7 @@
     /**
      * Create the column definition for a decimal type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDecimal(Fluent $column)
@@ -412,7 +412,7 @@
     /**
      * Create the column definition for a boolean type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeBoolean(Fluent $column)
@@ -423,7 +423,7 @@
     /**
      * Create the column definition for an enum type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeEnum(Fluent $column)
@@ -434,7 +434,7 @@
     /**
      * Create the column definition for a json type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeJson(Fluent $column)
@@ -445,7 +445,7 @@
     /**
      * Create the column definition for a jsonb type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeJsonb(Fluent $column)
@@ -456,7 +456,7 @@
     /**
      * Create the column definition for a date type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDate(Fluent $column)
@@ -467,7 +467,7 @@
     /**
      * Create the column definition for a date-time type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDateTime(Fluent $column)
@@ -478,7 +478,7 @@
     /**
      * Create the column definition for a date-time type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeDateTimeTz(Fluent $column)
@@ -489,7 +489,7 @@
     /**
      * Create the column definition for a time type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTime(Fluent $column)
@@ -500,7 +500,7 @@
     /**
      * Create the column definition for a time type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTimeTz(Fluent $column)
@@ -511,7 +511,7 @@
     /**
      * Create the column definition for a timestamp type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTimestamp(Fluent $column)
@@ -528,7 +528,7 @@
      *
      * @link https://msdn.microsoft.com/en-us/library/bb630289(v=sql.120).aspx
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeTimestampTz(Fluent $column)
@@ -543,7 +543,7 @@
     /**
      * Create the column definition for a binary type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeBinary(Fluent $column)
@@ -554,7 +554,7 @@
     /**
      * Create the column definition for a uuid type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeUuid(Fluent $column)
@@ -565,7 +565,7 @@
     /**
      * Create the column definition for an IP address type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeIpAddress(Fluent $column)
@@ -576,7 +576,7 @@
     /**
      * Create the column definition for a MAC address type.
      *
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Support\Fluent $column
      * @return string
      */
     protected function typeMacAddress(Fluent $column)
@@ -587,8 +587,8 @@
     /**
      * Get the SQL for a nullable column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyNullable(Blueprint $blueprint, Fluent $column)
@@ -599,8 +599,8 @@
     /**
      * Get the SQL for a default column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyDefault(Blueprint $blueprint, Fluent $column)
@@ -613,8 +613,8 @@
     /**
      * Get the SQL for an auto-increment column modifier.
      *
-     * @param  \Illuminate\Database\Schema\Blueprint  $blueprint
-     * @param  \Illuminate\Support\Fluent  $column
+     * @param  \Illuminate\Database\Schema\Blueprint $blueprint
+     * @param  \Illuminate\Support\Fluent            $column
      * @return string|null
      */
     protected function modifyIncrement(Blueprint $blueprint, Fluent $column)

--- vendor/laravel/framework/src/Illuminate/Database/Schema/MySqlBuilder.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Determine if the given table exists.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return bool
      */
     public function hasTable($table)
@@ -24,7 +24,7 @@
     /**
      * Get the column listing for a given table.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return array
      */
     public function getColumnListing($table)

--- vendor/laravel/framework/src/Illuminate/Database/Schema/PostgresBuilder.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Determine if the given table exists.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return bool
      */
     public function hasTable($table)

--- vendor/laravel/framework/src/Illuminate/Database/Seeder.php
+++ PHP_CodeSniffer
@@ -31,7 +31,7 @@
     /**
      * Seed the given connection from the given path.
      *
-     * @param  string  $class
+     * @param  string $class
      * @return void
      */
     public function call($class)
@@ -46,7 +46,7 @@
     /**
      * Resolve an instance of the given seeder class.
      *
-     * @param  string  $class
+     * @param  string $class
      * @return \Illuminate\Database\Seeder
      */
     protected function resolve($class)
@@ -69,7 +69,7 @@
     /**
      * Set the IoC container instance.
      *
-     * @param  \Illuminate\Container\Container  $container
+     * @param  \Illuminate\Container\Container $container
      * @return $this
      */
     public function setContainer(Container $container)
@@ -82,7 +82,7 @@
     /**
      * Set the console command instance.
      *
-     * @param  \Illuminate\Console\Command  $command
+     * @param  \Illuminate\Console\Command $command
      * @return $this
      */
     public function setCommand(Command $command)

--- vendor/laravel/framework/src/Illuminate/Database/SeedServiceProvider.php
+++ PHP_CodeSniffer
@@ -21,9 +21,11 @@
      */
     public function register()
     {
-        $this->app->singleton('seeder', function () {
-            return new Seeder;
-        });
+        $this->app->singleton(
+            'seeder', function () {
+                return new Seeder;
+            }
+        );
 
         $this->registerSeedCommand();
 
@@ -37,9 +39,11 @@
      */
     protected function registerSeedCommand()
     {
-        $this->app->singleton('command.seed', function ($app) {
-            return new SeedCommand($app['db']);
-        });
+        $this->app->singleton(
+            'command.seed', function ($app) {
+                return new SeedCommand($app['db']);
+            }
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Database/SqlServerConnection.php
+++ PHP_CodeSniffer
@@ -15,7 +15,7 @@
     /**
      * Execute a Closure within a transaction.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return mixed
      *
      * @throws \Exception|\Throwable

--- vendor/laravel/framework/src/Illuminate/Encryption/BaseEncrypter.php
+++ PHP_CodeSniffer
@@ -16,8 +16,8 @@
     /**
      * Create a MAC for the given value.
      *
-     * @param  string  $iv
-     * @param  string  $value
+     * @param  string $iv
+     * @param  string $value
      * @return string
      */
     protected function hash($iv, $value)
@@ -28,7 +28,7 @@
     /**
      * Get the JSON array from the given payload.
      *
-     * @param  string  $payload
+     * @param  string $payload
      * @return array
      *
      * @throws \Illuminate\Contracts\Encryption\DecryptException
@@ -54,7 +54,7 @@
     /**
      * Verify that the encryption payload is valid.
      *
-     * @param  array|mixed  $data
+     * @param  array|mixed $data
      * @return bool
      */
     protected function invalidPayload($data)
@@ -65,7 +65,7 @@
     /**
      * Determine if the MAC for the given payload is valid.
      *
-     * @param  array  $payload
+     * @param  array $payload
      * @return bool
      *
      * @throws \RuntimeException

--- vendor/laravel/framework/src/Illuminate/Encryption/Encrypter.php
+++ PHP_CodeSniffer
@@ -19,8 +19,8 @@
     /**
      * Create a new encrypter instance.
      *
-     * @param  string  $key
-     * @param  string  $cipher
+     * @param  string $key
+     * @param  string $cipher
      * @return void
      *
      * @throws \RuntimeException
@@ -40,8 +40,8 @@
     /**
      * Determine if the given key and cipher combination is valid.
      *
-     * @param  string  $key
-     * @param  string  $cipher
+     * @param  string $key
+     * @param  string $cipher
      * @return bool
      */
     public static function supported($key, $cipher)
@@ -54,7 +54,7 @@
     /**
      * Encrypt the given value.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      *
      * @throws \Illuminate\Contracts\Encryption\EncryptException
@@ -86,7 +86,7 @@
     /**
      * Decrypt the given value.
      *
-     * @param  string  $payload
+     * @param  string $payload
      * @return string
      *
      * @throws \Illuminate\Contracts\Encryption\DecryptException

--- vendor/laravel/framework/src/Illuminate/Encryption/EncryptionServiceProvider.php
+++ PHP_CodeSniffer
@@ -15,22 +15,24 @@
      */
     public function register()
     {
-        $this->app->singleton('encrypter', function ($app) {
-            $config = $app->make('config')->get('app');
+        $this->app->singleton(
+            'encrypter', function ($app) {
+                $config = $app->make('config')->get('app');
 
-            if (Str::startsWith($key = $config['key'], 'base64:')) {
-                $key = base64_decode(substr($key, 7));
-            }
+                if (Str::startsWith($key = $config['key'], 'base64:')) {
+                    $key = base64_decode(substr($key, 7));
+                }
 
-            return $this->getEncrypterForKeyAndCipher($key, $config['cipher']);
-        });
+                return $this->getEncrypterForKeyAndCipher($key, $config['cipher']);
+            }
+        );
     }
 
     /**
      * Get the proper encrypter instance for the given key and cipher.
      *
-     * @param  string  $key
-     * @param  string  $cipher
+     * @param  string $key
+     * @param  string $cipher
      * @return mixed
      *
      * @throws \RuntimeException

--- vendor/laravel/framework/src/Illuminate/Encryption/McryptEncrypter.php
+++ PHP_CodeSniffer
@@ -30,8 +30,8 @@
     /**
      * Create a new encrypter instance.
      *
-     * @param  string  $key
-     * @param  string  $cipher
+     * @param  string $key
+     * @param  string $cipher
      * @return void
      *
      * @throws \RuntimeException
@@ -52,8 +52,8 @@
     /**
      * Determine if the given key and cipher combination is valid.
      *
-     * @param  string  $key
-     * @param  string  $cipher
+     * @param  string $key
+     * @param  string $cipher
      * @return bool
      */
     public static function supported($key, $cipher)
@@ -65,7 +65,7 @@
     /**
      * Encrypt the given value.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      *
      * @throws \Illuminate\Contracts\Encryption\EncryptException
@@ -93,8 +93,8 @@
     /**
      * Pad and use mcrypt on the given value and input vector.
      *
-     * @param  string  $value
-     * @param  string  $iv
+     * @param  string $value
+     * @param  string $iv
      * @return string
      */
     protected function padAndMcrypt($value, $iv)
@@ -107,7 +107,7 @@
     /**
      * Decrypt the given value.
      *
-     * @param  string  $payload
+     * @param  string $payload
      * @return string
      */
     public function decrypt($payload)
@@ -127,8 +127,8 @@
     /**
      * Run the mcrypt decryption routine for the value.
      *
-     * @param  string  $value
-     * @param  string  $iv
+     * @param  string $value
+     * @param  string $iv
      * @return string
      *
      * @throws \Illuminate\Contracts\Encryption\DecryptException
@@ -145,7 +145,7 @@
     /**
      * Add PKCS7 padding to a given value.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function addPadding($value)
@@ -158,7 +158,7 @@
     /**
      * Remove the padding from the given value.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function stripPadding($value)
@@ -171,8 +171,8 @@
     /**
      * Determine if the given padding for a value is valid.
      *
-     * @param  string  $pad
-     * @param  string  $value
+     * @param  string $pad
+     * @param  string $value
      * @return bool
      */
     protected function paddingIsValid($pad, $value)

--- vendor/laravel/framework/src/Illuminate/Events/CallQueuedHandler.php
+++ PHP_CodeSniffer
@@ -17,7 +17,7 @@
     /**
      * Create a new job instance.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
+     * @param  \Illuminate\Contracts\Container\Container $container
      * @return void
      */
     public function __construct(Container $container)
@@ -28,8 +28,8 @@
     /**
      * Handle the queued job.
      *
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  array  $data
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  array                           $data
      * @return void
      */
     public function call(Job $job, array $data)
@@ -50,8 +50,8 @@
     /**
      * Set the job instance of the given class if necessary.
      *
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  mixed  $instance
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  mixed                           $instance
      * @return mixed
      */
     protected function setJobInstanceIfNecessary(Job $job, $instance)
@@ -66,7 +66,7 @@
     /**
      * Call the failed method on the job instance.
      *
-     * @param  array  $data
+     * @param  array $data
      * @return void
      */
     public function failed(array $data)

--- vendor/laravel/framework/src/Illuminate/Events/Dispatcher.php
+++ PHP_CodeSniffer
@@ -58,7 +58,7 @@
     /**
      * Create a new event dispatcher instance.
      *
-     * @param  \Illuminate\Contracts\Container\Container|null  $container
+     * @param  \Illuminate\Contracts\Container\Container|null $container
      * @return void
      */
     public function __construct(ContainerContract $container = null)
@@ -69,9 +69,9 @@
     /**
      * Register an event listener with the dispatcher.
      *
-     * @param  string|array  $events
-     * @param  mixed  $listener
-     * @param  int  $priority
+     * @param  string|array $events
+     * @param  mixed        $listener
+     * @param  int          $priority
      * @return void
      */
     public function listen($events, $listener, $priority = 0)
@@ -90,7 +90,7 @@
     /**
      * Setup a wildcard listener callback.
      *
-     * @param  string  $event
+     * @param  string $event
      * @param  mixed  $listener
      * @return void
      */
@@ -102,7 +102,7 @@
     /**
      * Determine if a given event has listeners.
      *
-     * @param  string  $eventName
+     * @param  string $eventName
      * @return bool
      */
     public function hasListeners($eventName)
@@ -113,21 +113,23 @@
     /**
      * Register an event and payload to be fired later.
      *
-     * @param  string  $event
+     * @param  string $event
      * @param  array  $payload
      * @return void
      */
     public function push($event, $payload = [])
     {
-        $this->listen($event.'_pushed', function () use ($event, $payload) {
-            $this->fire($event, $payload);
-        });
+        $this->listen(
+            $event.'_pushed', function () use ($event, $payload) {
+                $this->fire($event, $payload);
+            }
+        );
     }
 
     /**
      * Register an event subscriber with the dispatcher.
      *
-     * @param  object|string  $subscriber
+     * @param  object|string $subscriber
      * @return void
      */
     public function subscribe($subscriber)
@@ -140,7 +142,7 @@
     /**
      * Resolve the subscriber instance.
      *
-     * @param  object|string  $subscriber
+     * @param  object|string $subscriber
      * @return mixed
      */
     protected function resolveSubscriber($subscriber)
@@ -155,8 +157,8 @@
     /**
      * Fire an event until the first non-null response is returned.
      *
-     * @param  string|object  $event
-     * @param  array  $payload
+     * @param  string|object $event
+     * @param  array         $payload
      * @return mixed
      */
     public function until($event, $payload = [])
@@ -167,7 +169,7 @@
     /**
      * Flush a set of pushed events.
      *
-     * @param  string  $event
+     * @param  string $event
      * @return void
      */
     public function flush($event)
@@ -188,9 +190,9 @@
     /**
      * Fire an event and call the listeners.
      *
-     * @param  string|object  $event
-     * @param  mixed  $payload
-     * @param  bool  $halt
+     * @param  string|object $event
+     * @param  mixed         $payload
+     * @param  bool          $halt
      * @return array|null
      */
     public function fire($event, $payload = [], $halt = false)
@@ -247,7 +249,7 @@
     /**
      * Broadcast the given event class.
      *
-     * @param  \Illuminate\Contracts\Broadcasting\ShouldBroadcast  $event
+     * @param  \Illuminate\Contracts\Broadcasting\ShouldBroadcast $event
      * @return void
      */
     protected function broadcastEvent($event)
@@ -257,16 +259,18 @@
 
             $queue = method_exists($event, 'onQueue') ? $event->onQueue() : null;
 
-            $this->resolveQueue()->connection($connection)->pushOn($queue, 'Illuminate\Broadcasting\BroadcastEvent', [
+            $this->resolveQueue()->connection($connection)->pushOn(
+                $queue, 'Illuminate\Broadcasting\BroadcastEvent', [
                 'event' => serialize(clone $event),
-            ]);
+                ]
+            );
         }
     }
 
     /**
      * Get all of the listeners for a given event name.
      *
-     * @param  string  $eventName
+     * @param  string $eventName
      * @return array
      */
     public function getListeners($eventName)
@@ -283,7 +287,7 @@
     /**
      * Get the wildcard listeners for the event.
      *
-     * @param  string  $eventName
+     * @param  string $eventName
      * @return array
      */
     protected function getWildcardListeners($eventName)
@@ -302,7 +306,7 @@
     /**
      * Sort the listeners for a given event by priority.
      *
-     * @param  string  $eventName
+     * @param  string $eventName
      * @return array
      */
     protected function sortListeners($eventName)
@@ -324,7 +328,7 @@
     /**
      * Register an event listener with the dispatcher.
      *
-     * @param  mixed  $listener
+     * @param  mixed $listener
      * @return mixed
      */
     public function makeListener($listener)
@@ -335,7 +339,7 @@
     /**
      * Create a class based listener using the IoC container.
      *
-     * @param  mixed  $listener
+     * @param  mixed $listener
      * @return \Closure
      */
     public function createClassListener($listener)
@@ -352,8 +356,8 @@
     /**
      * Create the class based event callable.
      *
-     * @param  string  $listener
-     * @param  \Illuminate\Container\Container  $container
+     * @param  string                          $listener
+     * @param  \Illuminate\Container\Container $container
      * @return callable
      */
     protected function createClassCallable($listener, $container)
@@ -370,7 +374,7 @@
     /**
      * Parse the class listener into class and method.
      *
-     * @param  string  $listener
+     * @param  string $listener
      * @return array
      */
     protected function parseClassCallable($listener)
@@ -383,7 +387,7 @@
     /**
      * Determine if the event handler class should be queued.
      *
-     * @param  string  $class
+     * @param  string $class
      * @return bool
      */
     protected function handlerShouldBeQueued($class)
@@ -400,8 +404,8 @@
     /**
      * Create a callable for putting an event handler on the queue.
      *
-     * @param  string  $class
-     * @param  string  $method
+     * @param  string $class
+     * @param  string $method
      * @return \Closure
      */
     protected function createQueuedHandlerCallable($class, $method)
@@ -412,9 +416,11 @@
             if (method_exists($class, 'queue')) {
                 $this->callQueueMethodOnHandler($class, $method, $arguments);
             } else {
-                $this->resolveQueue()->push('Illuminate\Events\CallQueuedHandler@call', [
+                $this->resolveQueue()->push(
+                    'Illuminate\Events\CallQueuedHandler@call', [
                     'class' => $class, 'method' => $method, 'data' => serialize($arguments),
-                ]);
+                    ]
+                );
             }
         };
     }
@@ -422,21 +428,23 @@
     /**
      * Clone the given arguments for queueing.
      *
-     * @param  array  $arguments
+     * @param  array $arguments
      * @return array
      */
     protected function cloneArgumentsForQueueing(array $arguments)
     {
-        return array_map(function ($a) {
-            return is_object($a) ? clone $a : $a;
-        }, $arguments);
+        return array_map(
+            function ($a) {
+                return is_object($a) ? clone $a : $a;
+            }, $arguments
+        );
     }
 
     /**
      * Call the queue method on the handler class.
      *
-     * @param  string  $class
-     * @param  string  $method
+     * @param  string $class
+     * @param  string $method
      * @param  array  $arguments
      * @return void
      */
@@ -444,15 +452,17 @@
     {
         $handler = (new ReflectionClass($class))->newInstanceWithoutConstructor();
 
-        $handler->queue($this->resolveQueue(), 'Illuminate\Events\CallQueuedHandler@call', [
+        $handler->queue(
+            $this->resolveQueue(), 'Illuminate\Events\CallQueuedHandler@call', [
             'class' => $class, 'method' => $method, 'data' => serialize($arguments),
-        ]);
+            ]
+        );
     }
 
     /**
      * Remove a set of listeners from the dispatcher.
      *
-     * @param  string  $event
+     * @param  string $event
      * @return void
      */
     public function forget($event)
@@ -491,7 +501,7 @@
     /**
      * Set the queue resolver implementation.
      *
-     * @param  callable  $resolver
+     * @param  callable $resolver
      * @return $this
      */
     public function setQueueResolver(callable $resolver)

--- vendor/laravel/framework/src/Illuminate/Events/EventServiceProvider.php
+++ PHP_CodeSniffer
@@ -13,10 +13,14 @@
      */
     public function register()
     {
-        $this->app->singleton('events', function ($app) {
-            return (new Dispatcher($app))->setQueueResolver(function () use ($app) {
-                return $app->make('Illuminate\Contracts\Queue\Factory');
-            });
-        });
+        $this->app->singleton(
+            'events', function ($app) {
+                return (new Dispatcher($app))->setQueueResolver(
+                    function () use ($app) {
+                        return $app->make('Illuminate\Contracts\Queue\Factory');
+                    }
+                );
+            }
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Filesystem/ClassFinder.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Find all the class and interface names in a given directory.
      *
-     * @param  string  $directory
+     * @param  string $directory
      * @return array
      */
     public function findClasses($directory)
@@ -26,7 +26,7 @@
     /**
      * Extract the class name from the file at the given path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string|null
      */
     public function findClass($path)
@@ -47,8 +47,8 @@
     /**
      * Find the namespace in the tokens starting at a given key.
      *
-     * @param  int  $key
-     * @param  array  $tokens
+     * @param  int   $key
+     * @param  array $tokens
      * @return string|null
      */
     protected function getNamespace($key, array $tokens)
@@ -69,8 +69,8 @@
     /**
      * Find the class in the tokens starting at a given key.
      *
-     * @param  int  $key
-     * @param  array  $tokens
+     * @param  int   $key
+     * @param  array $tokens
      * @return string|null
      */
     protected function getClass($key, array $tokens)
@@ -91,7 +91,7 @@
     /**
      * Determine if the given token is a namespace keyword.
      *
-     * @param  array|string  $token
+     * @param  array|string $token
      * @return bool
      */
     protected function tokenIsNamespace($token)
@@ -102,7 +102,7 @@
     /**
      * Determine if the given token is a class or interface keyword.
      *
-     * @param  array|string  $token
+     * @param  array|string $token
      * @return bool
      */
     protected function tokenIsClassOrInterface($token)
@@ -113,7 +113,7 @@
     /**
      * Determine if the given token is part of the namespace.
      *
-     * @param  array|string  $token
+     * @param  array|string $token
      * @return bool
      */
     protected function isPartOfNamespace($token)
@@ -124,7 +124,7 @@
     /**
      * Determine if the given token is part of the class.
      *
-     * @param  array|string  $token
+     * @param  array|string $token
      * @return bool
      */
     protected function isPartOfClass($token)
@@ -135,7 +135,7 @@
     /**
      * Determine if the given token is whitespace.
      *
-     * @param  array|string  $token
+     * @param  array|string $token
      * @return bool
      */
     protected function isWhitespace($token)

--- vendor/laravel/framework/src/Illuminate/Filesystem/Filesystem.php
+++ PHP_CodeSniffer
@@ -15,7 +15,7 @@
     /**
      * Determine if a file or directory exists.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return bool
      */
     public function exists($path)
@@ -26,8 +26,8 @@
     /**
      * Get the contents of a file.
      *
-     * @param  string  $path
-     * @param  bool  $lock
+     * @param  string $path
+     * @param  bool   $lock
      * @return string
      *
      * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
@@ -44,7 +44,7 @@
     /**
      * Get contents of a file with shared access.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     public function sharedGet($path)
@@ -73,7 +73,7 @@
     /**
      * Get the returned value of a file.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return mixed
      *
      * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
@@ -81,7 +81,7 @@
     public function getRequire($path)
     {
         if ($this->isFile($path)) {
-            return require $path;
+            return include $path;
         }
 
         throw new FileNotFoundException("File does not exist at path {$path}");
@@ -90,20 +90,20 @@
     /**
      * Require the given file once.
      *
-     * @param  string  $file
+     * @param  string $file
      * @return mixed
      */
     public function requireOnce($file)
     {
-        require_once $file;
+        include_once $file;
     }
 
     /**
      * Write the contents of a file.
      *
-     * @param  string  $path
-     * @param  string  $contents
-     * @param  bool  $lock
+     * @param  string $path
+     * @param  string $contents
+     * @param  bool   $lock
      * @return int
      */
     public function put($path, $contents, $lock = false)
@@ -114,8 +114,8 @@
     /**
      * Prepend to a file.
      *
-     * @param  string  $path
-     * @param  string  $data
+     * @param  string $path
+     * @param  string $data
      * @return int
      */
     public function prepend($path, $data)
@@ -130,8 +130,8 @@
     /**
      * Append to a file.
      *
-     * @param  string  $path
-     * @param  string  $data
+     * @param  string $path
+     * @param  string $data
      * @return int
      */
     public function append($path, $data)
@@ -142,7 +142,7 @@
     /**
      * Delete the file at a given path.
      *
-     * @param  string|array  $paths
+     * @param  string|array $paths
      * @return bool
      */
     public function delete($paths)
@@ -167,8 +167,8 @@
     /**
      * Move a file to a new location.
      *
-     * @param  string  $path
-     * @param  string  $target
+     * @param  string $path
+     * @param  string $target
      * @return bool
      */
     public function move($path, $target)
@@ -179,8 +179,8 @@
     /**
      * Copy a file to a new location.
      *
-     * @param  string  $path
-     * @param  string  $target
+     * @param  string $path
+     * @param  string $target
      * @return bool
      */
     public function copy($path, $target)
@@ -191,7 +191,7 @@
     /**
      * Extract the file name from a file path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     public function name($path)
@@ -202,7 +202,7 @@
     /**
      * Extract the trailing name component from a file path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     public function basename($path)
@@ -213,7 +213,7 @@
     /**
      * Extract the parent directory from a file path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     public function dirname($path)
@@ -224,7 +224,7 @@
     /**
      * Extract the file extension from a file path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     public function extension($path)
@@ -235,7 +235,7 @@
     /**
      * Get the file type of a given file.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     public function type($path)
@@ -246,7 +246,7 @@
     /**
      * Get the mime-type of a given file.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string|false
      */
     public function mimeType($path)
@@ -257,7 +257,7 @@
     /**
      * Get the file size of a given file.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return int
      */
     public function size($path)
@@ -268,7 +268,7 @@
     /**
      * Get the file's last modification time.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return int
      */
     public function lastModified($path)
@@ -279,7 +279,7 @@
     /**
      * Determine if the given path is a directory.
      *
-     * @param  string  $directory
+     * @param  string $directory
      * @return bool
      */
     public function isDirectory($directory)
@@ -290,7 +290,7 @@
     /**
      * Determine if the given path is writable.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return bool
      */
     public function isWritable($path)
@@ -301,7 +301,7 @@
     /**
      * Determine if the given path is a file.
      *
-     * @param  string  $file
+     * @param  string $file
      * @return bool
      */
     public function isFile($file)
@@ -312,8 +312,8 @@
     /**
      * Find path names matching a given pattern.
      *
-     * @param  string  $pattern
-     * @param  int     $flags
+     * @param  string $pattern
+     * @param  int    $flags
      * @return array
      */
     public function glob($pattern, $flags = 0)
@@ -324,7 +324,7 @@
     /**
      * Get an array of all files in a directory.
      *
-     * @param  string  $directory
+     * @param  string $directory
      * @return array
      */
     public function files($directory)
@@ -338,16 +338,18 @@
         // To get the appropriate files, we'll simply glob the directory and filter
         // out any "files" that are not truly files so we do not end up with any
         // directories in our list, but only true files within the directory.
-        return array_filter($glob, function ($file) {
-            return filetype($file) == 'file';
-        });
+        return array_filter(
+            $glob, function ($file) {
+                return filetype($file) == 'file';
+            }
+        );
     }
 
     /**
      * Get all of the files from the given directory (recursive).
      *
-     * @param  string  $directory
-     * @param  bool  $hidden
+     * @param  string $directory
+     * @param  bool   $hidden
      * @return array
      */
     public function allFiles($directory, $hidden = false)
@@ -358,7 +360,7 @@
     /**
      * Get all of the directories within a given directory.
      *
-     * @param  string  $directory
+     * @param  string $directory
      * @return array
      */
     public function directories($directory)
@@ -375,10 +377,10 @@
     /**
      * Create a directory.
      *
-     * @param  string  $path
-     * @param  int     $mode
-     * @param  bool    $recursive
-     * @param  bool    $force
+     * @param  string $path
+     * @param  int    $mode
+     * @param  bool   $recursive
+     * @param  bool   $force
      * @return bool
      */
     public function makeDirectory($path, $mode = 0755, $recursive = false, $force = false)
@@ -393,9 +395,9 @@
     /**
      * Move a directory.
      *
-     * @param  string  $from
-     * @param  string  $to
-     * @param  bool  $overwrite
+     * @param  string $from
+     * @param  string $to
+     * @param  bool   $overwrite
      * @return bool
      */
     public function moveDirectory($from, $to, $overwrite = false)
@@ -416,9 +418,9 @@
     /**
      * Copy a directory from one location to another.
      *
-     * @param  string  $directory
-     * @param  string  $destination
-     * @param  int     $options
+     * @param  string $directory
+     * @param  string $destination
+     * @param  int    $options
      * @return bool
      */
     public function copyDirectory($directory, $destination, $options = null)
@@ -470,8 +472,8 @@
      *
      * The directory itself may be optionally preserved.
      *
-     * @param  string  $directory
-     * @param  bool    $preserve
+     * @param  string $directory
+     * @param  bool   $preserve
      * @return bool
      */
     public function deleteDirectory($directory, $preserve = false)
@@ -508,7 +510,7 @@
     /**
      * Empty the specified directory of all files and folders.
      *
-     * @param  string  $directory
+     * @param  string $directory
      * @return bool
      */
     public function cleanDirectory($directory)

--- vendor/laravel/framework/src/Illuminate/Filesystem/FilesystemAdapter.php
+++ PHP_CodeSniffer
@@ -26,7 +26,7 @@
     /**
      * Create a new filesystem adapter instance.
      *
-     * @param  \League\Flysystem\FilesystemInterface  $driver
+     * @param  \League\Flysystem\FilesystemInterface $driver
      * @return void
      */
     public function __construct(FilesystemInterface $driver)
@@ -37,7 +37,7 @@
     /**
      * Determine if a file exists.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return bool
      */
     public function exists($path)
@@ -48,7 +48,7 @@
     /**
      * Get the contents of a file.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      *
      * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
@@ -65,9 +65,9 @@
     /**
      * Write the contents of a file.
      *
-     * @param  string  $path
-     * @param  string|resource  $contents
-     * @param  string  $visibility
+     * @param  string          $path
+     * @param  string|resource $contents
+     * @param  string          $visibility
      * @return bool
      */
     public function put($path, $contents, $visibility = null)
@@ -88,7 +88,7 @@
     /**
      * Get the visibility for the given path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     public function getVisibility($path)
@@ -103,8 +103,8 @@
     /**
      * Set the visibility for the given path.
      *
-     * @param  string  $path
-     * @param  string  $visibility
+     * @param  string $path
+     * @param  string $visibility
      * @return void
      */
     public function setVisibility($path, $visibility)
@@ -115,8 +115,8 @@
     /**
      * Prepend to a file.
      *
-     * @param  string  $path
-     * @param  string  $data
+     * @param  string $path
+     * @param  string $data
      * @return int
      */
     public function prepend($path, $data, $separator = PHP_EOL)
@@ -131,8 +131,8 @@
     /**
      * Append to a file.
      *
-     * @param  string  $path
-     * @param  string  $data
+     * @param  string $path
+     * @param  string $data
      * @return int
      */
     public function append($path, $data, $separator = PHP_EOL)
@@ -147,7 +147,7 @@
     /**
      * Delete the file at a given path.
      *
-     * @param  string|array  $paths
+     * @param  string|array $paths
      * @return bool
      */
     public function delete($paths)
@@ -168,8 +168,8 @@
     /**
      * Copy a file to a new location.
      *
-     * @param  string  $from
-     * @param  string  $to
+     * @param  string $from
+     * @param  string $to
      * @return bool
      */
     public function copy($from, $to)
@@ -180,8 +180,8 @@
     /**
      * Move a file to a new location.
      *
-     * @param  string  $from
-     * @param  string  $to
+     * @param  string $from
+     * @param  string $to
      * @return bool
      */
     public function move($from, $to)
@@ -192,7 +192,7 @@
     /**
      * Get the file size of a given file.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return int
      */
     public function size($path)
@@ -203,7 +203,7 @@
     /**
      * Get the mime-type of a given file.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string|false
      */
     public function mimeType($path)
@@ -214,7 +214,7 @@
     /**
      * Get the file's last modification time.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return int
      */
     public function lastModified($path)
@@ -225,7 +225,7 @@
     /**
      * Get the URL for the file at the given path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     public function url($path)
@@ -248,8 +248,8 @@
     /**
      * Get an array of all files in a directory.
      *
-     * @param  string|null  $directory
-     * @param  bool  $recursive
+     * @param  string|null $directory
+     * @param  bool        $recursive
      * @return array
      */
     public function files($directory = null, $recursive = false)
@@ -262,7 +262,7 @@
     /**
      * Get all of the files from the given directory (recursive).
      *
-     * @param  string|null  $directory
+     * @param  string|null $directory
      * @return array
      */
     public function allFiles($directory = null)
@@ -273,8 +273,8 @@
     /**
      * Get all of the directories within a given directory.
      *
-     * @param  string|null  $directory
-     * @param  bool  $recursive
+     * @param  string|null $directory
+     * @param  bool        $recursive
      * @return array
      */
     public function directories($directory = null, $recursive = false)
@@ -287,7 +287,7 @@
     /**
      * Get all (recursive) of the directories within a given directory.
      *
-     * @param  string|null  $directory
+     * @param  string|null $directory
      * @return array
      */
     public function allDirectories($directory = null)
@@ -298,7 +298,7 @@
     /**
      * Create a directory.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return bool
      */
     public function makeDirectory($path)
@@ -309,7 +309,7 @@
     /**
      * Recursively delete a directory.
      *
-     * @param  string  $directory
+     * @param  string $directory
      * @return bool
      */
     public function deleteDirectory($directory)
@@ -331,7 +331,7 @@
      * Filter directory contents by type.
      *
      * @param  array  $contents
-     * @param  string  $type
+     * @param  string $type
      * @return array
      */
     protected function filterContentsByType($contents, $type)
@@ -346,7 +346,7 @@
     /**
      * Parse the given visibility value.
      *
-     * @param  string|null  $visibility
+     * @param  string|null $visibility
      * @return string|null
      *
      * @throws \InvalidArgumentException
@@ -358,10 +358,10 @@
         }
 
         switch ($visibility) {
-            case FilesystemContract::VISIBILITY_PUBLIC:
-                return AdapterInterface::VISIBILITY_PUBLIC;
-            case FilesystemContract::VISIBILITY_PRIVATE:
-                return AdapterInterface::VISIBILITY_PRIVATE;
+        case FilesystemContract::VISIBILITY_PUBLIC:
+            return AdapterInterface::VISIBILITY_PUBLIC;
+        case FilesystemContract::VISIBILITY_PRIVATE:
+            return AdapterInterface::VISIBILITY_PRIVATE;
         }
 
         throw new InvalidArgumentException('Unknown visibility: '.$visibility);
@@ -370,7 +370,7 @@
     /**
      * Pass dynamic methods call onto Flysystem.
      *
-     * @param  string  $method
+     * @param  string $method
      * @param  array  $parameters
      * @return mixed
      *

--- vendor/laravel/framework/src/Illuminate/Filesystem/FilesystemManager.php
+++ PHP_CodeSniffer
@@ -42,7 +42,7 @@
     /**
      * Create a new filesystem manager instance.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return void
      */
     public function __construct($app)
@@ -53,7 +53,7 @@
     /**
      * Get a filesystem instance.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Filesystem\Filesystem
      */
     public function drive($name = null)
@@ -64,7 +64,7 @@
     /**
      * Get a filesystem instance.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Filesystem\Filesystem
      */
     public function disk($name = null)
@@ -89,7 +89,7 @@
     /**
      * Attempt to get the disk from the local cache.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Filesystem\Filesystem
      */
     protected function get($name)
@@ -100,7 +100,7 @@
     /**
      * Resolve the given disk.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Filesystem\Filesystem
      *
      * @throws \InvalidArgumentException
@@ -125,7 +125,7 @@
     /**
      * Call a custom driver creator.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Contracts\Filesystem\Filesystem
      */
     protected function callCustomCreator(array $config)
@@ -142,7 +142,7 @@
     /**
      * Create an instance of the local driver.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Contracts\Filesystem\Filesystem
      */
     public function createLocalDriver(array $config)
@@ -153,32 +153,40 @@
             ? LocalAdapter::SKIP_LINKS
             : LocalAdapter::DISALLOW_LINKS;
 
-        return $this->adapt($this->createFlysystem(new LocalAdapter(
-            $config['root'], LOCK_EX, $links, $permissions
-        ), $config));
+        return $this->adapt(
+            $this->createFlysystem(
+                new LocalAdapter(
+                    $config['root'], LOCK_EX, $links, $permissions
+                ), $config
+            )
+        );
     }
 
     /**
      * Create an instance of the ftp driver.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Contracts\Filesystem\Filesystem
      */
     public function createFtpDriver(array $config)
     {
-        $ftpConfig = Arr::only($config, [
+        $ftpConfig = Arr::only(
+            $config, [
             'host', 'username', 'password', 'port', 'root', 'passive', 'ssl', 'timeout',
-        ]);
+            ]
+        );
 
-        return $this->adapt($this->createFlysystem(
-            new FtpAdapter($ftpConfig), $config
-        ));
+        return $this->adapt(
+            $this->createFlysystem(
+                new FtpAdapter($ftpConfig), $config
+            )
+        );
     }
 
     /**
      * Create an instance of the Amazon S3 driver.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Contracts\Filesystem\Cloud
      */
     public function createS3Driver(array $config)
@@ -189,15 +197,17 @@
 
         $options = isset($config['options']) ? $config['options'] : [];
 
-        return $this->adapt($this->createFlysystem(
-            new S3Adapter(new S3Client($s3Config), $s3Config['bucket'], $root, $options), $config
-        ));
+        return $this->adapt(
+            $this->createFlysystem(
+                new S3Adapter(new S3Client($s3Config), $s3Config['bucket'], $root, $options), $config
+            )
+        );
     }
 
     /**
      * Format the given S3 configuration with the default options.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return array
      */
     protected function formatS3Config(array $config)
@@ -214,27 +224,31 @@
     /**
      * Create an instance of the Rackspace driver.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Contracts\Filesystem\Cloud
      */
     public function createRackspaceDriver(array $config)
     {
-        $client = new Rackspace($config['endpoint'], [
+        $client = new Rackspace(
+            $config['endpoint'], [
             'username' => $config['username'], 'apiKey' => $config['key'],
-        ]);
+            ]
+        );
 
         $root = isset($config['root']) ? $config['root'] : null;
 
-        return $this->adapt($this->createFlysystem(
-            new RackspaceAdapter($this->getRackspaceContainer($client, $config), $root), $config
-        ));
+        return $this->adapt(
+            $this->createFlysystem(
+                new RackspaceAdapter($this->getRackspaceContainer($client, $config), $root), $config
+            )
+        );
     }
 
     /**
      * Get the Rackspace Cloud Files container.
      *
-     * @param  \OpenCloud\Rackspace  $client
-     * @param  array  $config
+     * @param  \OpenCloud\Rackspace $client
+     * @param  array                $config
      * @return \OpenCloud\ObjectStore\Resource\Container
      */
     protected function getRackspaceContainer(Rackspace $client, array $config)
@@ -249,8 +263,8 @@
     /**
      * Create a Flysystem instance with the given adapter.
      *
-     * @param  \League\Flysystem\AdapterInterface  $adapter
-     * @param  array  $config
+     * @param  \League\Flysystem\AdapterInterface $adapter
+     * @param  array                              $config
      * @return \League\Flysystem\FlysystemInterface
      */
     protected function createFlysystem(AdapterInterface $adapter, array $config)
@@ -263,7 +277,7 @@
     /**
      * Adapt the filesystem implementation.
      *
-     * @param  \League\Flysystem\FilesystemInterface  $filesystem
+     * @param  \League\Flysystem\FilesystemInterface $filesystem
      * @return \Illuminate\Contracts\Filesystem\Filesystem
      */
     protected function adapt(FilesystemInterface $filesystem)
@@ -274,7 +288,7 @@
     /**
      * Get the filesystem connection configuration.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return array
      */
     protected function getConfig($name)
@@ -305,8 +319,8 @@
     /**
      * Register a custom driver creator Closure.
      *
-     * @param  string    $driver
-     * @param  \Closure  $callback
+     * @param  string   $driver
+     * @param  \Closure $callback
      * @return $this
      */
     public function extend($driver, Closure $callback)
@@ -319,8 +333,8 @@
     /**
      * Dynamically call the default driver instance.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      */
     public function __call($method, $parameters)

--- vendor/laravel/framework/src/Illuminate/Filesystem/FilesystemServiceProvider.php
+++ PHP_CodeSniffer
@@ -25,9 +25,11 @@
      */
     protected function registerNativeFilesystem()
     {
-        $this->app->singleton('files', function () {
-            return new Filesystem;
-        });
+        $this->app->singleton(
+            'files', function () {
+                return new Filesystem;
+            }
+        );
     }
 
     /**
@@ -39,13 +41,17 @@
     {
         $this->registerManager();
 
-        $this->app->singleton('filesystem.disk', function () {
-            return $this->app['filesystem']->disk($this->getDefaultDriver());
-        });
-
-        $this->app->singleton('filesystem.cloud', function () {
-            return $this->app['filesystem']->disk($this->getCloudDriver());
-        });
+        $this->app->singleton(
+            'filesystem.disk', function () {
+                return $this->app['filesystem']->disk($this->getDefaultDriver());
+            }
+        );
+
+        $this->app->singleton(
+            'filesystem.cloud', function () {
+                return $this->app['filesystem']->disk($this->getCloudDriver());
+            }
+        );
     }
 
     /**
@@ -55,9 +61,11 @@
      */
     protected function registerManager()
     {
-        $this->app->singleton('filesystem', function () {
-            return new FilesystemManager($this->app);
-        });
+        $this->app->singleton(
+            'filesystem', function () {
+                return new FilesystemManager($this->app);
+            }
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Foundation/AliasLoader.php
+++ PHP_CodeSniffer
@@ -28,7 +28,7 @@
     /**
      * Create a new AliasLoader instance.
      *
-     * @param  array  $aliases
+     * @param array $aliases
      */
     private function __construct($aliases)
     {
@@ -38,7 +38,7 @@
     /**
      * Get or create the singleton alias loader instance.
      *
-     * @param  array  $aliases
+     * @param  array $aliases
      * @return \Illuminate\Foundation\AliasLoader
      */
     public static function getInstance(array $aliases = [])
@@ -57,7 +57,7 @@
     /**
      * Load a class alias if it is registered.
      *
-     * @param  string  $alias
+     * @param  string $alias
      * @return bool|null
      */
     public function load($alias)
@@ -70,8 +70,8 @@
     /**
      * Add an alias to the loader.
      *
-     * @param  string  $class
-     * @param  string  $alias
+     * @param  string $class
+     * @param  string $alias
      * @return void
      */
     public function alias($class, $alias)
@@ -116,7 +116,7 @@
     /**
      * Set the registered aliases.
      *
-     * @param  array  $aliases
+     * @param  array $aliases
      * @return void
      */
     public function setAliases(array $aliases)
@@ -137,7 +137,7 @@
     /**
      * Set the "registered" state of the loader.
      *
-     * @param  bool  $value
+     * @param  bool $value
      * @return void
      */
     public function setRegistered($value)
@@ -148,7 +148,7 @@
     /**
      * Set the value of the singleton alias loader.
      *
-     * @param  \Illuminate\Foundation\AliasLoader  $loader
+     * @param  \Illuminate\Foundation\AliasLoader $loader
      * @return void
      */
     public static function setInstance($loader)

--- vendor/laravel/framework/src/Illuminate/Foundation/Application.php
+++ PHP_CodeSniffer
@@ -135,7 +135,7 @@
     /**
      * Create a new Illuminate application instance.
      *
-     * @param  string|null  $basePath
+     * @param  string|null $basePath
      * @return void
      */
     public function __construct($basePath = null)
@@ -190,7 +190,7 @@
     /**
      * Run the given array of bootstrap classes.
      *
-     * @param  array  $bootstrappers
+     * @param  array $bootstrappers
      * @return void
      */
     public function bootstrapWith(array $bootstrappers)
@@ -209,7 +209,7 @@
     /**
      * Register a callback to run after loading the environment.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return void
      */
     public function afterLoadingEnvironment(Closure $callback)
@@ -223,7 +223,7 @@
      * Register a callback to run before a bootstrapper.
      *
      * @param  string  $bootstrapper
-     * @param  Closure  $callback
+     * @param  Closure $callback
      * @return void
      */
     public function beforeBootstrapping($bootstrapper, Closure $callback)
@@ -235,7 +235,7 @@
      * Register a callback to run after a bootstrapper.
      *
      * @param  string  $bootstrapper
-     * @param  Closure  $callback
+     * @param  Closure $callback
      * @return void
      */
     public function afterBootstrapping($bootstrapper, Closure $callback)
@@ -256,7 +256,7 @@
     /**
      * Set the base path for the application.
      *
-     * @param  string  $basePath
+     * @param  string $basePath
      * @return $this
      */
     public function setBasePath($basePath)
@@ -338,7 +338,7 @@
     /**
      * Set the database directory.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return $this
      */
     public function useDatabasePath($path)
@@ -383,7 +383,7 @@
     /**
      * Set the storage directory.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return $this
      */
     public function useStoragePath($path)
@@ -408,7 +408,7 @@
     /**
      * Set the directory for the environment file.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return $this
      */
     public function useEnvironmentPath($path)
@@ -421,7 +421,7 @@
     /**
      * Set the environment file to be loaded during bootstrapping.
      *
-     * @param  string  $file
+     * @param  string $file
      * @return $this
      */
     public function loadEnvironmentFrom($file)
@@ -487,7 +487,7 @@
     /**
      * Detect the application's current environment.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return string
      */
     public function detectEnvironment(Closure $callback)
@@ -533,9 +533,9 @@
     /**
      * Register a service provider with the application.
      *
-     * @param  \Illuminate\Support\ServiceProvider|string  $provider
-     * @param  array  $options
-     * @param  bool   $force
+     * @param  \Illuminate\Support\ServiceProvider|string $provider
+     * @param  array                                      $options
+     * @param  bool                                       $force
      * @return \Illuminate\Support\ServiceProvider
      */
     public function register($provider, $options = [], $force = false)
@@ -575,22 +575,24 @@
     /**
      * Get the registered service provider instance if it exists.
      *
-     * @param  \Illuminate\Support\ServiceProvider|string  $provider
+     * @param  \Illuminate\Support\ServiceProvider|string $provider
      * @return \Illuminate\Support\ServiceProvider|null
      */
     public function getProvider($provider)
     {
         $name = is_string($provider) ? $provider : get_class($provider);
 
-        return Arr::first($this->serviceProviders, function ($key, $value) use ($name) {
-            return $value instanceof $name;
-        });
+        return Arr::first(
+            $this->serviceProviders, function ($key, $value) use ($name) {
+                return $value instanceof $name;
+            }
+        );
     }
 
     /**
      * Resolve a service provider instance from the class name.
      *
-     * @param  string  $provider
+     * @param  string $provider
      * @return \Illuminate\Support\ServiceProvider
      */
     public function resolveProviderClass($provider)
@@ -601,7 +603,7 @@
     /**
      * Mark the given provider as registered.
      *
-     * @param  \Illuminate\Support\ServiceProvider  $provider
+     * @param  \Illuminate\Support\ServiceProvider $provider
      * @return void
      */
     protected function markAsRegistered($provider)
@@ -633,7 +635,7 @@
     /**
      * Load the provider for a deferred service.
      *
-     * @param  string  $service
+     * @param  string $service
      * @return void
      */
     public function loadDeferredProvider($service)
@@ -655,8 +657,8 @@
     /**
      * Register a deferred provider and service.
      *
-     * @param  string  $provider
-     * @param  string  $service
+     * @param  string $provider
+     * @param  string $service
      * @return void
      */
     public function registerDeferredProvider($provider, $service = null)
@@ -671,9 +673,11 @@
         $this->register($instance = new $provider($this));
 
         if (! $this->booted) {
-            $this->booting(function () use ($instance) {
-                $this->bootProvider($instance);
-            });
+            $this->booting(
+                function () use ($instance) {
+                    $this->bootProvider($instance);
+                }
+            );
         }
     }
 
@@ -682,8 +686,8 @@
      *
      * (Overriding Container::make)
      *
-     * @param  string  $abstract
-     * @param  array   $parameters
+     * @param  string $abstract
+     * @param  array  $parameters
      * @return mixed
      */
     public function make($abstract, array $parameters = [])
@@ -702,7 +706,7 @@
      *
      * (Overriding Container::bound)
      *
-     * @param  string  $abstract
+     * @param  string $abstract
      * @return bool
      */
     public function bound($abstract)
@@ -736,9 +740,11 @@
         // finished. This is useful when ordering the boot-up processes we run.
         $this->fireAppCallbacks($this->bootingCallbacks);
 
-        array_walk($this->serviceProviders, function ($p) {
-            $this->bootProvider($p);
-        });
+        array_walk(
+            $this->serviceProviders, function ($p) {
+                $this->bootProvider($p);
+            }
+        );
 
         $this->booted = true;
 
@@ -748,7 +754,7 @@
     /**
      * Boot the given service provider.
      *
-     * @param  \Illuminate\Support\ServiceProvider  $provider
+     * @param  \Illuminate\Support\ServiceProvider $provider
      * @return mixed
      */
     protected function bootProvider(ServiceProvider $provider)
@@ -761,7 +767,7 @@
     /**
      * Register a new boot listener.
      *
-     * @param  mixed  $callback
+     * @param  mixed $callback
      * @return void
      */
     public function booting($callback)
@@ -772,7 +778,7 @@
     /**
      * Register a new "booted" listener.
      *
-     * @param  mixed  $callback
+     * @param  mixed $callback
      * @return void
      */
     public function booted($callback)
@@ -787,7 +793,7 @@
     /**
      * Call the booting callbacks for the application.
      *
-     * @param  array  $callbacks
+     * @param  array $callbacks
      * @return void
      */
     protected function fireAppCallbacks(array $callbacks)
@@ -889,9 +895,9 @@
     /**
      * Throw an HttpException with the given data.
      *
-     * @param  int     $code
-     * @param  string  $message
-     * @param  array   $headers
+     * @param  int    $code
+     * @param  string $message
+     * @param  array  $headers
      * @return void
      *
      * @throws \Symfony\Component\HttpKernel\Exception\HttpException
@@ -908,7 +914,7 @@
     /**
      * Register a terminating callback with the application.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return $this
      */
     public function terminating(Closure $callback)
@@ -953,7 +959,7 @@
     /**
      * Set the application's deferred services.
      *
-     * @param  array  $services
+     * @param  array $services
      * @return void
      */
     public function setDeferredServices(array $services)
@@ -964,7 +970,7 @@
     /**
      * Add an array of services to the application's deferred services.
      *
-     * @param  array  $services
+     * @param  array $services
      * @return void
      */
     public function addDeferredServices(array $services)
@@ -975,7 +981,7 @@
     /**
      * Determine if the given service is a deferred service.
      *
-     * @param  string  $service
+     * @param  string $service
      * @return bool
      */
     public function isDeferredService($service)
@@ -986,7 +992,7 @@
     /**
      * Define a callback to be used to configure Monolog.
      *
-     * @param  callable  $callback
+     * @param  callable $callback
      * @return $this
      */
     public function configureMonologUsing(callable $callback)
@@ -1029,7 +1035,7 @@
     /**
      * Set the current application locale.
      *
-     * @param  string  $locale
+     * @param  string $locale
      * @return void
      */
     public function setLocale($locale)
@@ -1044,7 +1050,7 @@
     /**
      * Determine if application locale is the given locale.
      *
-     * @param  string  $locale
+     * @param  string $locale
      * @return bool
      */
     public function isLocale($locale)

--- vendor/laravel/framework/src/Illuminate/Foundation/Auth/Access/Authorizable.php
+++ PHP_CodeSniffer
@@ -9,8 +9,8 @@
     /**
      * Determine if the entity has a given ability.
      *
-     * @param  string  $ability
-     * @param  array|mixed  $arguments
+     * @param  string      $ability
+     * @param  array|mixed $arguments
      * @return bool
      */
     public function can($ability, $arguments = [])
@@ -21,8 +21,8 @@
     /**
      * Determine if the entity does not have a given ability.
      *
-     * @param  string  $ability
-     * @param  array|mixed  $arguments
+     * @param  string      $ability
+     * @param  array|mixed $arguments
      * @return bool
      */
     public function cant($ability, $arguments = [])
@@ -33,8 +33,8 @@
     /**
      * Determine if the entity does not have a given ability.
      *
-     * @param  string  $ability
-     * @param  array|mixed  $arguments
+     * @param  string      $ability
+     * @param  array|mixed $arguments
      * @return bool
      */
     public function cannot($ability, $arguments = [])

--- vendor/laravel/framework/src/Illuminate/Foundation/Auth/Access/AuthorizesRequests.php
+++ PHP_CodeSniffer
@@ -9,8 +9,8 @@
     /**
      * Authorize a given action against a set of arguments.
      *
-     * @param  mixed  $ability
-     * @param  mixed|array  $arguments
+     * @param  mixed       $ability
+     * @param  mixed|array $arguments
      * @return \Illuminate\Auth\Access\Response
      *
      * @throws \Illuminate\Auth\Access\AuthorizationException
@@ -25,9 +25,9 @@
     /**
      * Authorize a given action for a user.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable|mixed  $user
-     * @param  mixed  $ability
-     * @param  mixed|array  $arguments
+     * @param  \Illuminate\Contracts\Auth\Authenticatable|mixed $user
+     * @param  mixed                                            $ability
+     * @param  mixed|array                                      $arguments
      * @return \Illuminate\Auth\Access\Response
      *
      * @throws \Illuminate\Auth\Access\AuthorizationException
@@ -42,8 +42,8 @@
     /**
      * Guesses the ability's name if it wasn't provided.
      *
-     * @param  mixed  $ability
-     * @param  mixed|array  $arguments
+     * @param  mixed       $ability
+     * @param  mixed|array $arguments
      * @return array
      */
     protected function parseAbilityAndArguments($ability, $arguments)

--- vendor/laravel/framework/src/Illuminate/Foundation/Auth/Access/AuthorizesResources.php
+++ PHP_CodeSniffer
@@ -7,9 +7,9 @@
     /**
      * Authorize a resource action based on the incoming request.
      *
-     * @param  string  $model
-     * @param  string|null  $parameter
-     * @param  array  $options
+     * @param  string      $model
+     * @param  string|null $parameter
+     * @param  array       $options
      * @return void
      */
     public function authorizeResource($model, $parameter = null, array $options = [])

--- vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesUsers.php
+++ PHP_CodeSniffer
@@ -40,7 +40,7 @@
     /**
      * Handle a login request to the application.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Http\Response
      */
     public function postLogin(Request $request)
@@ -51,7 +51,7 @@
     /**
      * Handle a login request to the application.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Http\Response
      */
     public function login(Request $request)
@@ -88,21 +88,23 @@
     /**
      * Validate the user login request.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return void
      */
     protected function validateLogin(Request $request)
     {
-        $this->validate($request, [
+        $this->validate(
+            $request, [
             $this->loginUsername() => 'required', 'password' => 'required',
-        ]);
+            ]
+        );
     }
 
     /**
      * Send the response after the user was authenticated.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  bool  $throttles
+     * @param  \Illuminate\Http\Request $request
+     * @param  bool                     $throttles
      * @return \Illuminate\Http\Response
      */
     protected function handleUserWasAuthenticated(Request $request, $throttles)
@@ -121,16 +123,18 @@
     /**
      * Get the failed login response instance.
      *
-     * @param \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Http\Response
      */
     protected function sendFailedLoginResponse(Request $request)
     {
         return redirect()->back()
             ->withInput($request->only($this->loginUsername(), 'remember'))
-            ->withErrors([
+            ->withErrors(
+                [
                 $this->loginUsername() => $this->getFailedLoginMessage(),
-            ]);
+                ]
+            );
     }
 
     /**
@@ -148,7 +152,7 @@
     /**
      * Get the needed authorization credentials from the request.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return array
      */
     protected function getCredentials(Request $request)

--- vendor/laravel/framework/src/Illuminate/Foundation/Auth/RegistersUsers.php
+++ PHP_CodeSniffer
@@ -36,7 +36,7 @@
     /**
      * Handle a registration request for the application.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Http\Response
      */
     public function postRegister(Request $request)
@@ -47,7 +47,7 @@
     /**
      * Handle a registration request for the application.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Http\Response
      */
     public function register(Request $request)

--- vendor/laravel/framework/src/Illuminate/Foundation/Auth/ResetsPasswords.php
+++ PHP_CodeSniffer
@@ -55,7 +55,7 @@
     /**
      * Send a reset link to the given user.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Http\Response
      */
     public function postEmail(Request $request)
@@ -66,7 +66,7 @@
     /**
      * Send a reset link to the given user.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Http\Response
      */
     public function sendResetLinkEmail(Request $request)
@@ -81,18 +81,18 @@
         );
 
         switch ($response) {
-            case Password::RESET_LINK_SENT:
-                return $this->getSendResetLinkEmailSuccessResponse($response);
-            case Password::INVALID_USER:
-            default:
-                return $this->getSendResetLinkEmailFailureResponse($response);
+        case Password::RESET_LINK_SENT:
+            return $this->getSendResetLinkEmailSuccessResponse($response);
+        case Password::INVALID_USER:
+        default:
+            return $this->getSendResetLinkEmailFailureResponse($response);
         }
     }
 
     /**
      * Validate the request of sending reset link.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return void
      */
     protected function validateSendResetLinkEmail(Request $request)
@@ -103,7 +103,7 @@
     /**
      * Get the needed credentials for sending the reset link.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return array
      */
     protected function getSendResetLinkEmailCredentials(Request $request)
@@ -136,7 +136,7 @@
     /**
      * Get the response for after the reset link has been successfully sent.
      *
-     * @param  string  $response
+     * @param  string $response
      * @return \Symfony\Component\HttpFoundation\Response
      */
     protected function getSendResetLinkEmailSuccessResponse($response)
@@ -147,7 +147,7 @@
     /**
      * Get the response for after the reset link could not be sent.
      *
-     * @param  string  $response
+     * @param  string $response
      * @return \Symfony\Component\HttpFoundation\Response
      */
     protected function getSendResetLinkEmailFailureResponse($response)
@@ -160,8 +160,8 @@
      *
      * If no token is present, display the link request form.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  string|null  $token
+     * @param  \Illuminate\Http\Request $request
+     * @param  string|null              $token
      * @return \Illuminate\Http\Response
      */
     public function getReset(Request $request, $token = null)
@@ -174,8 +174,8 @@
      *
      * If no token is present, display the link request form.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  string|null  $token
+     * @param  \Illuminate\Http\Request $request
+     * @param  string|null              $token
      * @return \Illuminate\Http\Response
      */
     public function showResetForm(Request $request, $token = null)
@@ -200,7 +200,7 @@
     /**
      * Reset the given user's password.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Http\Response
      */
     public function postReset(Request $request)
@@ -211,7 +211,7 @@
     /**
      * Reset the given user's password.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Http\Response
      */
     public function reset(Request $request)
@@ -227,15 +227,17 @@
 
         $broker = $this->getBroker();
 
-        $response = Password::broker($broker)->reset($credentials, function ($user, $password) {
-            $this->resetPassword($user, $password);
-        });
+        $response = Password::broker($broker)->reset(
+            $credentials, function ($user, $password) {
+                $this->resetPassword($user, $password);
+            }
+        );
 
         switch ($response) {
-            case Password::PASSWORD_RESET:
-                return $this->getResetSuccessResponse($response);
-            default:
-                return $this->getResetFailureResponse($request, $response);
+        case Password::PASSWORD_RESET:
+            return $this->getResetSuccessResponse($response);
+        default:
+            return $this->getResetFailureResponse($request, $response);
         }
     }
 
@@ -276,7 +278,7 @@
     /**
      * Get the password reset credentials from the request.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return array
      */
     protected function getResetCredentials(Request $request)
@@ -289,16 +291,18 @@
     /**
      * Reset the given user's password.
      *
-     * @param  \Illuminate\Contracts\Auth\CanResetPassword  $user
-     * @param  string  $password
+     * @param  \Illuminate\Contracts\Auth\CanResetPassword $user
+     * @param  string                                      $password
      * @return void
      */
     protected function resetPassword($user, $password)
     {
-        $user->forceFill([
+        $user->forceFill(
+            [
             'password' => bcrypt($password),
             'remember_token' => Str::random(60),
-        ])->save();
+            ]
+        )->save();
 
         Auth::guard($this->getGuard())->login($user);
     }
@@ -306,7 +310,7 @@
     /**
      * Get the response for after a successful password reset.
      *
-     * @param  string  $response
+     * @param  string $response
      * @return \Symfony\Component\HttpFoundation\Response
      */
     protected function getResetSuccessResponse($response)
@@ -317,7 +321,7 @@
     /**
      * Get the response for after a failing password reset.
      *
-     * @param  Request  $request
+     * @param  Request $request
      * @param  string  $response
      * @return \Symfony\Component\HttpFoundation\Response
      */

--- vendor/laravel/framework/src/Illuminate/Foundation/Auth/ThrottlesLogins.php
+++ PHP_CodeSniffer
@@ -12,7 +12,7 @@
     /**
      * Determine if the user has too many failed login attempts.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return bool
      */
     protected function hasTooManyLoginAttempts(Request $request)
@@ -26,7 +26,7 @@
     /**
      * Increment the login attempts for the user.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return int
      */
     protected function incrementLoginAttempts(Request $request)
@@ -39,7 +39,7 @@
     /**
      * Determine how many retries are left for the user.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return int
      */
     protected function retriesLeft(Request $request)
@@ -53,7 +53,7 @@
     /**
      * Redirect the user after determining they are locked out.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Http\RedirectResponse
      */
     protected function sendLockoutResponse(Request $request)
@@ -62,15 +62,17 @@
 
         return redirect()->back()
             ->withInput($request->only($this->loginUsername(), 'remember'))
-            ->withErrors([
+            ->withErrors(
+                [
                 $this->loginUsername() => $this->getLockoutErrorMessage($seconds),
-            ]);
+                ]
+            );
     }
 
     /**
      * Get the login lockout error message.
      *
-     * @param  int  $seconds
+     * @param  int $seconds
      * @return string
      */
     protected function getLockoutErrorMessage($seconds)
@@ -83,7 +85,7 @@
     /**
      * Get the lockout seconds.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return int
      */
     protected function secondsRemainingOnLockout(Request $request)
@@ -96,7 +98,7 @@
     /**
      * Clear the login locks for the given user credentials.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return void
      */
     protected function clearLoginAttempts(Request $request)
@@ -109,7 +111,7 @@
     /**
      * Get the throttle key for the given request.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return string
      */
     protected function getThrottleKey(Request $request)
@@ -140,7 +142,7 @@
     /**
      * Fire an event when a lockout occurs.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return void
      */
     protected function fireLockoutEvent(Request $request)

--- vendor/laravel/framework/src/Illuminate/Foundation/Bootstrap/BootProviders.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Bootstrap the given application.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return void
      */
     public function bootstrap(Application $app)

--- vendor/laravel/framework/src/Illuminate/Foundation/Bootstrap/ConfigureLogging.php
+++ PHP_CodeSniffer
@@ -11,7 +11,7 @@
     /**
      * Bootstrap the given application.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return void
      */
     public function bootstrap(Application $app)
@@ -33,13 +33,15 @@
     /**
      * Register the logger instance in the container.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return \Illuminate\Log\Writer
      */
     protected function registerLogger(Application $app)
     {
-        $app->instance('log', $log = new Writer(
-            new Monolog($app->environment()), $app['events'])
+        $app->instance(
+            'log', $log = new Writer(
+                new Monolog($app->environment()), $app['events']
+            )
         );
 
         return $log;
@@ -48,8 +50,8 @@
     /**
      * Configure the Monolog handlers for the application.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
-     * @param  \Illuminate\Log\Writer  $log
+     * @param  \Illuminate\Contracts\Foundation\Application $app
+     * @param  \Illuminate\Log\Writer                       $log
      * @return void
      */
     protected function configureHandlers(Application $app, Writer $log)
@@ -62,8 +64,8 @@
     /**
      * Configure the Monolog handlers for the application.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
-     * @param  \Illuminate\Log\Writer  $log
+     * @param  \Illuminate\Contracts\Foundation\Application $app
+     * @param  \Illuminate\Log\Writer                       $log
      * @return void
      */
     protected function configureSingleHandler(Application $app, Writer $log)
@@ -77,8 +79,8 @@
     /**
      * Configure the Monolog handlers for the application.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
-     * @param  \Illuminate\Log\Writer  $log
+     * @param  \Illuminate\Contracts\Foundation\Application $app
+     * @param  \Illuminate\Log\Writer                       $log
      * @return void
      */
     protected function configureDailyHandler(Application $app, Writer $log)
@@ -96,8 +98,8 @@
     /**
      * Configure the Monolog handlers for the application.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
-     * @param  \Illuminate\Log\Writer  $log
+     * @param  \Illuminate\Contracts\Foundation\Application $app
+     * @param  \Illuminate\Log\Writer                       $log
      * @return void
      */
     protected function configureSyslogHandler(Application $app, Writer $log)
@@ -111,8 +113,8 @@
     /**
      * Configure the Monolog handlers for the application.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
-     * @param  \Illuminate\Log\Writer  $log
+     * @param  \Illuminate\Contracts\Foundation\Application $app
+     * @param  \Illuminate\Log\Writer                       $log
      * @return void
      */
     protected function configureErrorlogHandler(Application $app, Writer $log)

--- vendor/laravel/framework/src/Illuminate/Foundation/Bootstrap/DetectEnvironment.php
+++ PHP_CodeSniffer
@@ -11,7 +11,7 @@
     /**
      * Bootstrap the given application.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return void
      */
     public function bootstrap(Application $app)
@@ -30,7 +30,7 @@
     /**
      * Detect if a custom environment file matching the APP_ENV exists.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return void
      */
     protected function checkForSpecificEnvironmentFile($app)

--- vendor/laravel/framework/src/Illuminate/Foundation/Bootstrap/HandleExceptions.php
+++ PHP_CodeSniffer
@@ -21,7 +21,7 @@
     /**
      * Bootstrap the given application.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return void
      */
     public function bootstrap(Application $app)
@@ -44,10 +44,10 @@
     /**
      * Convert a PHP error to an ErrorException.
      *
-     * @param  int  $level
-     * @param  string  $message
-     * @param  string  $file
-     * @param  int  $line
+     * @param  int    $level
+     * @param  string $message
+     * @param  string $file
+     * @param  int    $line
      * @param  array  $context
      * @return void
      *
@@ -67,7 +67,7 @@
      * the HTTP and Console kernels. But, fatal error exceptions must
      * be handled differently since they are not normal exceptions.
      *
-     * @param  \Throwable  $e
+     * @param  \Throwable $e
      * @return void
      */
     public function handleException($e)
@@ -88,7 +88,7 @@
     /**
      * Render an exception to the console.
      *
-     * @param  \Exception  $e
+     * @param  \Exception $e
      * @return void
      */
     protected function renderForConsole(Exception $e)
@@ -99,7 +99,7 @@
     /**
      * Render an exception as an HTTP response and send it.
      *
-     * @param  \Exception  $e
+     * @param  \Exception $e
      * @return void
      */
     protected function renderHttpResponse(Exception $e)
@@ -122,8 +122,8 @@
     /**
      * Create a new fatal exception instance from an error array.
      *
-     * @param  array  $error
-     * @param  int|null  $traceOffset
+     * @param  array    $error
+     * @param  int|null $traceOffset
      * @return \Symfony\Component\Debug\Exception\FatalErrorException
      */
     protected function fatalExceptionFromError(array $error, $traceOffset = null)
@@ -136,7 +136,7 @@
     /**
      * Determine if the error type is fatal.
      *
-     * @param  int  $type
+     * @param  int $type
      * @return bool
      */
     protected function isFatal($type)

--- vendor/laravel/framework/src/Illuminate/Foundation/Bootstrap/LoadConfiguration.php
+++ PHP_CodeSniffer
@@ -13,7 +13,7 @@
     /**
      * Bootstrap the given application.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return void
      */
     public function bootstrap(Application $app)
@@ -24,7 +24,7 @@
         // the configuration items from that file so that it is very quick. Otherwise
         // we will need to spin through every configuration file and load them all.
         if (file_exists($cached = $app->getCachedConfigPath())) {
-            $items = require $cached;
+            $items = include $cached;
 
             $loadedFromCache = true;
         }
@@ -38,9 +38,11 @@
             $this->loadConfigurationFiles($app, $config);
         }
 
-        $app->detectEnvironment(function () use ($config) {
-            return $config->get('app.env', 'production');
-        });
+        $app->detectEnvironment(
+            function () use ($config) {
+                return $config->get('app.env', 'production');
+            }
+        );
 
         date_default_timezone_set($config['app.timezone']);
 
@@ -50,21 +52,21 @@
     /**
      * Load the configuration items from all of the files.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
-     * @param  \Illuminate\Contracts\Config\Repository  $repository
+     * @param  \Illuminate\Contracts\Foundation\Application $app
+     * @param  \Illuminate\Contracts\Config\Repository      $repository
      * @return void
      */
     protected function loadConfigurationFiles(Application $app, RepositoryContract $repository)
     {
         foreach ($this->getConfigurationFiles($app) as $key => $path) {
-            $repository->set($key, require $path);
+            $repository->set($key, include $path);
         }
     }
 
     /**
      * Get all of the configuration files for the application.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return array
      */
     protected function getConfigurationFiles(Application $app)
@@ -85,8 +87,8 @@
     /**
      * Get the configuration file nesting path.
      *
-     * @param  \Symfony\Component\Finder\SplFileInfo  $file
-     * @param  string  $configPath
+     * @param  \Symfony\Component\Finder\SplFileInfo $file
+     * @param  string                                $configPath
      * @return string
      */
     protected function getConfigurationNesting(SplFileInfo $file, $configPath)

--- vendor/laravel/framework/src/Illuminate/Foundation/Bootstrap/RegisterFacades.php
+++ PHP_CodeSniffer
@@ -11,7 +11,7 @@
     /**
      * Bootstrap the given application.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return void
      */
     public function bootstrap(Application $app)

--- vendor/laravel/framework/src/Illuminate/Foundation/Bootstrap/RegisterProviders.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Bootstrap the given application.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return void
      */
     public function bootstrap(Application $app)

--- vendor/laravel/framework/src/Illuminate/Foundation/Bootstrap/SetRequestForConsole.php
+++ PHP_CodeSniffer
@@ -10,7 +10,7 @@
     /**
      * Bootstrap the given application.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return void
      */
     public function bootstrap(Application $app)

--- vendor/laravel/framework/src/Illuminate/Foundation/Bus/DispatchesJobs.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Dispatch a job to its appropriate handler.
      *
-     * @param  mixed  $job
+     * @param  mixed $job
      * @return mixed
      */
     protected function dispatch($job)
@@ -20,7 +20,7 @@
     /**
      * Dispatch a command to its appropriate handler in the current process.
      *
-     * @param  mixed  $job
+     * @param  mixed $job
      * @return mixed
      */
     public function dispatchNow($job)

--- vendor/laravel/framework/src/Illuminate/Foundation/ComposerScripts.php
+++ PHP_CodeSniffer
@@ -9,12 +9,12 @@
     /**
      * Handle the post-install Composer event.
      *
-     * @param  \Composer\Script\Event  $event
+     * @param  \Composer\Script\Event $event
      * @return void
      */
     public static function postInstall(Event $event)
     {
-        require_once $event->getComposer()->getConfig()->get('vendor-dir').'/autoload.php';
+        include_once $event->getComposer()->getConfig()->get('vendor-dir').'/autoload.php';
 
         static::clearCompiled();
     }
@@ -22,12 +22,12 @@
     /**
      * Handle the post-update Composer event.
      *
-     * @param  \Composer\Script\Event  $event
+     * @param  \Composer\Script\Event $event
      * @return void
      */
     public static function postUpdate(Event $event)
     {
-        require_once $event->getComposer()->getConfig()->get('vendor-dir').'/autoload.php';
+        include_once $event->getComposer()->getConfig()->get('vendor-dir').'/autoload.php';
 
         static::clearCompiled();
     }

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/AppNameCommand.php
+++ PHP_CodeSniffer
@@ -48,8 +48,8 @@
     /**
      * Create a new key generator command.
      *
-     * @param  \Illuminate\Support\Composer  $composer
-     * @param  \Illuminate\Filesystem\Filesystem  $files
+     * @param  \Illuminate\Support\Composer      $composer
+     * @param  \Illuminate\Filesystem\Filesystem $files
      * @return void
      */
     public function __construct(Composer $composer, Filesystem $files)
@@ -106,7 +106,7 @@
     /**
      * Replace the App namespace at the given path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return void
      */
     protected function replaceNamespace($path)
@@ -231,9 +231,9 @@
     /**
      * Replace the given string in the given file.
      *
-     * @param  string  $path
-     * @param  string|array  $search
-     * @param  string|array  $replace
+     * @param  string       $path
+     * @param  string|array $search
+     * @param  string|array $replace
      * @return void
      */
     protected function replaceIn($path, $search, $replace)
@@ -264,7 +264,7 @@
     /**
      * Get the path to the given configuration file.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     protected function getConfigPath($name)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/ConfigCacheCommand.php
+++ PHP_CodeSniffer
@@ -31,7 +31,7 @@
     /**
      * Create a new config cache command instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
+     * @param  \Illuminate\Filesystem\Filesystem $files
      * @return void
      */
     public function __construct(Filesystem $files)
@@ -66,7 +66,7 @@
      */
     protected function getFreshConfiguration()
     {
-        $app = require $this->laravel->bootstrapPath().'/app.php';
+        $app = include $this->laravel->bootstrapPath().'/app.php';
 
         $app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();
 

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/ConfigClearCommand.php
+++ PHP_CodeSniffer
@@ -31,7 +31,7 @@
     /**
      * Create a new config clear command instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
+     * @param  \Illuminate\Filesystem\Filesystem $files
      * @return void
      */
     public function __construct(Filesystem $files)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/ConsoleMakeCommand.php
+++ PHP_CodeSniffer
@@ -32,8 +32,8 @@
     /**
      * Replace the class name for the given stub.
      *
-     * @param  string  $stub
-     * @param  string  $name
+     * @param  string $stub
+     * @param  string $name
      * @return string
      */
     protected function replaceClass($stub, $name)
@@ -56,7 +56,7 @@
     /**
      * Get the default namespace for the class.
      *
-     * @param  string  $rootNamespace
+     * @param  string $rootNamespace
      * @return string
      */
     protected function getDefaultNamespace($rootNamespace)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/EventMakeCommand.php
+++ PHP_CodeSniffer
@@ -30,7 +30,7 @@
     /**
      * Determine if the class already exists.
      *
-     * @param  string  $rawName
+     * @param  string $rawName
      * @return bool
      */
     protected function alreadyExists($rawName)
@@ -51,7 +51,7 @@
     /**
      * Get the default namespace for the class.
      *
-     * @param  string  $rootNamespace
+     * @param  string $rootNamespace
      * @return string
      */
     protected function getDefaultNamespace($rootNamespace)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/IlluminateCaster.php
+++ PHP_CodeSniffer
@@ -36,7 +36,7 @@
     /**
      * Get an array representing the properties of an application.
      *
-     * @param  \Illuminate\Foundation\Application  $app
+     * @param  \Illuminate\Foundation\Application $app
      * @return array
      */
     public static function castApplication(Application $app)
@@ -61,7 +61,7 @@
     /**
      * Get an array representing the properties of a collection.
      *
-     * @param  \Illuminate\Support\Collection  $collection
+     * @param  \Illuminate\Support\Collection $collection
      * @return array
      */
     public static function castCollection(Collection $collection)
@@ -74,7 +74,7 @@
     /**
      * Get an array representing the properties of a model.
      *
-     * @param  \Illuminate\Database\Eloquent\Model  $model
+     * @param  \Illuminate\Database\Eloquent\Model $model
      * @return array
      */
     public static function castModel(Model $model)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/JobMakeCommand.php
+++ PHP_CodeSniffer
@@ -45,7 +45,7 @@
     /**
      * Get the default namespace for the class.
      *
-     * @param  string  $rootNamespace
+     * @param  string $rootNamespace
      * @return string
      */
     protected function getDefaultNamespace($rootNamespace)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/Kernel.php
+++ PHP_CodeSniffer
@@ -60,8 +60,8 @@
     /**
      * Create a new console kernel instance.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
-     * @param  \Illuminate\Contracts\Events\Dispatcher  $events
+     * @param  \Illuminate\Contracts\Foundation\Application $app
+     * @param  \Illuminate\Contracts\Events\Dispatcher      $events
      * @return void
      */
     public function __construct(Application $app, Dispatcher $events)
@@ -73,9 +73,11 @@
         $this->app = $app;
         $this->events = $events;
 
-        $this->app->booted(function () {
-            $this->defineConsoleSchedule();
-        });
+        $this->app->booted(
+            function () {
+                $this->defineConsoleSchedule();
+            }
+        );
     }
 
     /**
@@ -95,8 +97,8 @@
     /**
      * Run the console application.
      *
-     * @param  \Symfony\Component\Console\Input\InputInterface  $input
-     * @param  \Symfony\Component\Console\Output\OutputInterface  $output
+     * @param  \Symfony\Component\Console\Input\InputInterface   $input
+     * @param  \Symfony\Component\Console\Output\OutputInterface $output
      * @return int
      */
     public function handle($input, $output = null)
@@ -125,8 +127,8 @@
     /**
      * Terminate the application.
      *
-     * @param  \Symfony\Component\Console\Input\InputInterface  $input
-     * @param  int  $status
+     * @param  \Symfony\Component\Console\Input\InputInterface $input
+     * @param  int                                             $status
      * @return void
      */
     public function terminate($input, $status)
@@ -137,7 +139,7 @@
     /**
      * Define the application's command schedule.
      *
-     * @param  \Illuminate\Console\Scheduling\Schedule  $schedule
+     * @param  \Illuminate\Console\Scheduling\Schedule $schedule
      * @return void
      */
     protected function schedule(Schedule $schedule)
@@ -148,7 +150,7 @@
     /**
      * Register the given command with the console application.
      *
-     * @param  \Symfony\Component\Console\Command\Command  $command
+     * @param  \Symfony\Component\Console\Command\Command $command
      * @return void
      */
     public function registerCommand($command)
@@ -159,7 +161,7 @@
     /**
      * Run an Artisan console command by name.
      *
-     * @param  string  $command
+     * @param  string $command
      * @param  array  $parameters
      * @return int
      */
@@ -173,8 +175,8 @@
     /**
      * Queue the given console command.
      *
-     * @param  string  $command
-     * @param  array   $parameters
+     * @param  string $command
+     * @param  array  $parameters
      * @return void
      */
     public function queue($command, array $parameters = [])
@@ -234,7 +236,7 @@
     {
         if (is_null($this->artisan)) {
             return $this->artisan = (new Artisan($this->app, $this->events, $this->app->version()))
-                                ->resolveCommands($this->commands);
+                ->resolveCommands($this->commands);
         }
 
         return $this->artisan;
@@ -253,7 +255,7 @@
     /**
      * Report the exception to the exception handler.
      *
-     * @param  \Exception  $e
+     * @param  \Exception $e
      * @return void
      */
     protected function reportException(Exception $e)
@@ -264,8 +266,8 @@
     /**
      * Report the exception to the exception handler.
      *
-     * @param  \Symfony\Component\Console\Output\OutputInterface  $output
-     * @param  \Exception  $e
+     * @param  \Symfony\Component\Console\Output\OutputInterface $output
+     * @param  \Exception                                        $e
      * @return void
      */
     protected function renderException($output, Exception $e)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/KeyGenerateCommand.php
+++ PHP_CodeSniffer
@@ -46,16 +46,18 @@
     /**
      * Set the application key in the environment file.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return void
      */
     protected function setKeyInEnvironmentFile($key)
     {
-        file_put_contents($this->laravel->environmentFilePath(), str_replace(
-            'APP_KEY='.$this->laravel['config']['app.key'],
-            'APP_KEY='.$key,
-            file_get_contents($this->laravel->environmentFilePath())
-        ));
+        file_put_contents(
+            $this->laravel->environmentFilePath(), str_replace(
+                'APP_KEY='.$this->laravel['config']['app.key'],
+                'APP_KEY='.$key,
+                file_get_contents($this->laravel->environmentFilePath())
+            )
+        );
     }
 
     /**
@@ -65,8 +67,10 @@
      */
     protected function generateRandomKey()
     {
-        return 'base64:'.base64_encode(random_bytes(
-            $this->laravel['config']['app.cipher'] == 'AES-128-CBC' ? 16 : 32
-        ));
+        return 'base64:'.base64_encode(
+            random_bytes(
+                $this->laravel['config']['app.cipher'] == 'AES-128-CBC' ? 16 : 32
+            )
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/ListenerMakeCommand.php
+++ PHP_CodeSniffer
@@ -46,7 +46,7 @@
     /**
      * Build the class with the given name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     protected function buildClass($name)
@@ -87,7 +87,7 @@
     /**
      * Determine if the class already exists.
      *
-     * @param  string  $rawName
+     * @param  string $rawName
      * @return bool
      */
     protected function alreadyExists($rawName)
@@ -98,7 +98,7 @@
     /**
      * Get the default namespace for the class.
      *
-     * @param  string  $rootNamespace
+     * @param  string $rootNamespace
      * @return string
      */
     protected function getDefaultNamespace($rootNamespace)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/ModelMakeCommand.php
+++ PHP_CodeSniffer
@@ -58,7 +58,7 @@
     /**
      * Get the default namespace for the class.
      *
-     * @param  string  $rootNamespace
+     * @param  string $rootNamespace
      * @return string
      */
     protected function getDefaultNamespace($rootNamespace)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/OptimizeCommand.php
+++ PHP_CodeSniffer
@@ -34,7 +34,7 @@
     /**
      * Create a new optimize command instance.
      *
-     * @param  \Illuminate\Support\Composer  $composer
+     * @param  \Illuminate\Support\Composer $composer
      * @return void
      */
     public function __construct(Composer $composer)
@@ -98,7 +98,7 @@
     {
         $app = $this->laravel;
 
-        $core = require __DIR__.'/Optimize/config.php';
+        $core = include __DIR__.'/Optimize/config.php';
 
         $files = array_merge($core, $app['config']->get('compile.files', []));
 

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/PolicyMakeCommand.php
+++ PHP_CodeSniffer
@@ -40,7 +40,7 @@
     /**
      * Get the default namespace for the class.
      *
-     * @param  string  $rootNamespace
+     * @param  string $rootNamespace
      * @return string
      */
     protected function getDefaultNamespace($rootNamespace)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/ProviderMakeCommand.php
+++ PHP_CodeSniffer
@@ -40,7 +40,7 @@
     /**
      * Get the default namespace for the class.
      *
-     * @param  string  $rootNamespace
+     * @param  string $rootNamespace
      * @return string
      */
     protected function getDefaultNamespace($rootNamespace)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/QueuedJob.php
+++ PHP_CodeSniffer
@@ -16,7 +16,7 @@
     /**
      * Create a new job instance.
      *
-     * @param  \Illuminate\Contracts\Console\Kernel  $kernel
+     * @param  \Illuminate\Contracts\Console\Kernel $kernel
      * @return void
      */
     public function __construct(KernelContract $kernel)
@@ -27,8 +27,8 @@
     /**
      * Fire the job.
      *
-     * @param  \Illuminate\Queue\Jobs\Job  $job
-     * @param  array  $data
+     * @param  \Illuminate\Queue\Jobs\Job $job
+     * @param  array                      $data
      * @return void
      */
     public function fire($job, $data)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/RequestMakeCommand.php
+++ PHP_CodeSniffer
@@ -40,7 +40,7 @@
     /**
      * Get the default namespace for the class.
      *
-     * @param  string  $rootNamespace
+     * @param  string $rootNamespace
      * @return string
      */
     protected function getDefaultNamespace($rootNamespace)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/RouteCacheCommand.php
+++ PHP_CodeSniffer
@@ -32,7 +32,7 @@
     /**
      * Create a new route command instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
+     * @param  \Illuminate\Filesystem\Filesystem $files
      * @return void
      */
     public function __construct(Filesystem $files)
@@ -75,7 +75,7 @@
      */
     protected function getFreshApplicationRoutes()
     {
-        $app = require $this->laravel->bootstrapPath().'/app.php';
+        $app = include $this->laravel->bootstrapPath().'/app.php';
 
         $app->make('Illuminate\Contracts\Console\Kernel')->bootstrap();
 
@@ -85,7 +85,7 @@
     /**
      * Build the route cache file.
      *
-     * @param  \Illuminate\Routing\RouteCollection  $routes
+     * @param  \Illuminate\Routing\RouteCollection $routes
      * @return string
      */
     protected function buildRouteCacheFile(RouteCollection $routes)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/RouteClearCommand.php
+++ PHP_CodeSniffer
@@ -31,7 +31,7 @@
     /**
      * Create a new route clear command instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
+     * @param  \Illuminate\Filesystem\Filesystem $files
      * @return void
      */
     public function __construct(Filesystem $files)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/RouteListCommand.php
+++ PHP_CodeSniffer
@@ -50,7 +50,7 @@
     /**
      * Create a new route command instance.
      *
-     * @param  \Illuminate\Routing\Router  $router
+     * @param  \Illuminate\Routing\Router $router
      * @return void
      */
     public function __construct(Router $router)
@@ -89,9 +89,11 @@
         }
 
         if ($sort = $this->option('sort')) {
-            $results = Arr::sort($results, function ($value) use ($sort) {
-                return $value[$sort];
-            });
+            $results = Arr::sort(
+                $results, function ($value) use ($sort) {
+                    return $value[$sort];
+                }
+            );
         }
 
         if ($this->option('reverse')) {
@@ -104,25 +106,27 @@
     /**
      * Get the route information for a given route.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @return array
      */
     protected function getRouteInformation(Route $route)
     {
-        return $this->filterRoute([
+        return $this->filterRoute(
+            [
             'host'   => $route->domain(),
             'method' => implode('|', $route->methods()),
             'uri'    => $route->uri(),
             'name'   => $route->getName(),
             'action' => $route->getActionName(),
             'middleware' => $this->getMiddleware($route),
-        ]);
+            ]
+        );
     }
 
     /**
      * Display the route information on the console.
      *
-     * @param  array  $routes
+     * @param  array $routes
      * @return void
      */
     protected function displayRoutes(array $routes)
@@ -133,7 +137,7 @@
     /**
      * Get before filters.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @return string
      */
     protected function getMiddleware($route)
@@ -152,7 +156,7 @@
     /**
      * Get the middleware for the given Controller@action name.
      *
-     * @param  string  $actionName
+     * @param  string $actionName
      * @return array
      */
     protected function getControllerMiddleware($actionName)
@@ -169,8 +173,8 @@
     /**
      * Get the middlewares for the given controller instance and method.
      *
-     * @param  \Illuminate\Routing\Controller  $controller
-     * @param  string  $method
+     * @param  \Illuminate\Routing\Controller $controller
+     * @param  string                         $method
      * @return array
      */
     protected function getControllerMiddlewareFromInstance($controller, $method)
@@ -191,7 +195,7 @@
     /**
      * Determine if the given options exclude a particular method.
      *
-     * @param  string  $method
+     * @param  string $method
      * @param  array  $options
      * @return bool
      */
@@ -204,14 +208,15 @@
     /**
      * Filter the route by URI and / or name.
      *
-     * @param  array  $route
+     * @param  array $route
      * @return array|null
      */
     protected function filterRoute(array $route)
     {
-        if (($this->option('name') && ! Str::contains($route['name'], $this->option('name'))) ||
-             $this->option('path') && ! Str::contains($route['uri'], $this->option('path')) ||
-             $this->option('method') && ! Str::contains($route['method'], $this->option('method'))) {
+        if (($this->option('name') && ! Str::contains($route['name'], $this->option('name'))) 
+            || $this->option('path') && ! Str::contains($route['uri'], $this->option('path')) 
+            || $this->option('method') && ! Str::contains($route['method'], $this->option('method'))
+        ) {
             return;
         }
 

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/TestMakeCommand.php
+++ PHP_CodeSniffer
@@ -40,7 +40,7 @@
     /**
      * Get the destination class path.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     protected function getPath($name)
@@ -53,7 +53,7 @@
     /**
      * Get the default namespace for the class.
      *
-     * @param  string  $rootNamespace
+     * @param  string $rootNamespace
      * @return string
      */
     protected function getDefaultNamespace($rootNamespace)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/VendorPublishCommand.php
+++ PHP_CodeSniffer
@@ -37,7 +37,7 @@
     /**
      * Create a new command instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
+     * @param  \Illuminate\Filesystem\Filesystem $files
      * @return void
      */
     public function __construct(Filesystem $files)
@@ -66,7 +66,7 @@
     /**
      * Publishes the assets for a tag.
      *
-     * @param  string  $tag
+     * @param  string $tag
      * @return mixed
      */
     private function publishTag($tag)
@@ -95,8 +95,8 @@
     /**
      * Publish the file to the given path.
      *
-     * @param  string  $from
-     * @param  string  $to
+     * @param  string $from
+     * @param  string $to
      * @return void
      */
     protected function publishFile($from, $to)
@@ -115,16 +115,18 @@
     /**
      * Publish the directory to the given directory.
      *
-     * @param  string  $from
-     * @param  string  $to
+     * @param  string $from
+     * @param  string $to
      * @return void
      */
     protected function publishDirectory($from, $to)
     {
-        $manager = new MountManager([
+        $manager = new MountManager(
+            [
             'from' => new Flysystem(new LocalAdapter($from)),
             'to' => new Flysystem(new LocalAdapter($to)),
-        ]);
+            ]
+        );
 
         foreach ($manager->listContents('from://', true) as $file) {
             if ($file['type'] === 'file' && (! $manager->has('to://'.$file['path']) || $this->option('force'))) {
@@ -138,7 +140,7 @@
     /**
      * Create the directory to house the published files if needed.
      *
-     * @param  string  $directory
+     * @param  string $directory
      * @return void
      */
     protected function createParentDirectory($directory)
@@ -151,9 +153,9 @@
     /**
      * Write a status message to the console.
      *
-     * @param  string  $from
-     * @param  string  $to
-     * @param  string  $type
+     * @param  string $from
+     * @param  string $to
+     * @param  string $type
      * @return void
      */
     protected function status($from, $to, $type)

--- vendor/laravel/framework/src/Illuminate/Foundation/Console/ViewClearCommand.php
+++ PHP_CodeSniffer
@@ -31,7 +31,7 @@
     /**
      * Create a new config clear command instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
+     * @param  \Illuminate\Filesystem\Filesystem $files
      * @return void
      */
     public function __construct(Filesystem $files)

--- vendor/laravel/framework/src/Illuminate/Foundation/EnvironmentDetector.php
+++ PHP_CodeSniffer
@@ -11,8 +11,8 @@
     /**
      * Detect the application's current environment.
      *
-     * @param  \Closure  $callback
-     * @param  array|null  $consoleArgs
+     * @param  \Closure   $callback
+     * @param  array|null $consoleArgs
      * @return string
      */
     public function detect(Closure $callback, $consoleArgs = null)
@@ -27,7 +27,7 @@
     /**
      * Set the application environment for a web request.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return string
      */
     protected function detectWebEnvironment(Closure $callback)
@@ -38,8 +38,8 @@
     /**
      * Set the application environment from command-line arguments.
      *
-     * @param  \Closure  $callback
-     * @param  array  $args
+     * @param  \Closure $callback
+     * @param  array    $args
      * @return string
      */
     protected function detectConsoleEnvironment(Closure $callback, array $args)
@@ -57,13 +57,15 @@
     /**
      * Get the environment argument from the console.
      *
-     * @param  array  $args
+     * @param  array $args
      * @return string|null
      */
     protected function getEnvironmentArgument(array $args)
     {
-        return Arr::first($args, function ($k, $v) {
-            return Str::startsWith($v, '--env');
-        });
+        return Arr::first(
+            $args, function ($k, $v) {
+                return Str::startsWith($v, '--env');
+            }
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Foundation/Exceptions/Handler.php
+++ PHP_CodeSniffer
@@ -37,7 +37,7 @@
     /**
      * Create a new exception handler instance.
      *
-     * @param  \Psr\Log\LoggerInterface  $log
+     * @param  \Psr\Log\LoggerInterface $log
      * @return void
      */
     public function __construct(LoggerInterface $log)
@@ -48,7 +48,7 @@
     /**
      * Report or log an exception.
      *
-     * @param  \Exception  $e
+     * @param  \Exception $e
      * @return void
      */
     public function report(Exception $e)
@@ -61,7 +61,7 @@
     /**
      * Determine if the exception should be reported.
      *
-     * @param  \Exception  $e
+     * @param  \Exception $e
      * @return bool
      */
     public function shouldReport(Exception $e)
@@ -72,7 +72,7 @@
     /**
      * Determine if the exception is in the "do not report" list.
      *
-     * @param  \Exception  $e
+     * @param  \Exception $e
      * @return bool
      */
     protected function shouldntReport(Exception $e)
@@ -91,8 +91,8 @@
     /**
      * Render an exception into a response.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Exception  $e
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Exception               $e
      * @return \Symfony\Component\HttpFoundation\Response
      */
     public function render($request, Exception $e)
@@ -119,8 +119,8 @@
     /**
      * Map exception into an illuminate response.
      *
-     * @param  \Symfony\Component\HttpFoundation\Response  $response
-     * @param  \Exception  $e
+     * @param  \Symfony\Component\HttpFoundation\Response $response
+     * @param  \Exception                                 $e
      * @return \Illuminate\Http\Response
      */
     protected function toIlluminateResponse($response, Exception $e)
@@ -133,8 +133,8 @@
     /**
      * Render an exception to the console.
      *
-     * @param  \Symfony\Component\Console\Output\OutputInterface  $output
-     * @param  \Exception  $e
+     * @param  \Symfony\Component\Console\Output\OutputInterface $output
+     * @param  \Exception                                        $e
      * @return void
      */
     public function renderForConsole($output, Exception $e)
@@ -145,7 +145,7 @@
     /**
      * Render the given HttpException.
      *
-     * @param  \Symfony\Component\HttpKernel\Exception\HttpException  $e
+     * @param  \Symfony\Component\HttpKernel\Exception\HttpException $e
      * @return \Symfony\Component\HttpFoundation\Response
      */
     protected function renderHttpException(HttpException $e)
@@ -162,7 +162,7 @@
     /**
      * Create a Symfony response for the given exception.
      *
-     * @param  \Exception  $e
+     * @param  \Exception $e
      * @return \Symfony\Component\HttpFoundation\Response
      */
     protected function convertExceptionToResponse(Exception $e)
@@ -179,8 +179,8 @@
     /**
      * Convert an authentication exception into an unauthenticated response.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Illuminate\Auth\AuthenticationException  $e
+     * @param  \Illuminate\Http\Request                 $request
+     * @param  \Illuminate\Auth\AuthenticationException $e
      * @return \Symfony\Component\HttpFoundation\Response
      */
     protected function unauthenticated($request, AuthenticationException $e)
@@ -195,8 +195,8 @@
     /**
      * Get the html response content.
      *
-     * @param  string  $content
-     * @param  string  $css
+     * @param  string $content
+     * @param  string $css
      * @return string
      */
     protected function decorate($content, $css)
@@ -225,7 +225,7 @@
     /**
      * Determine if the given exception is an HTTP exception.
      *
-     * @param  \Exception  $e
+     * @param  \Exception $e
      * @return bool
      */
     protected function isHttpException(Exception $e)

--- vendor/laravel/framework/src/Illuminate/Foundation/helpers.php
+++ PHP_CodeSniffer
@@ -17,9 +17,9 @@
     /**
      * Throw an HttpException with the given data.
      *
-     * @param  int     $code
-     * @param  string  $message
-     * @param  array   $headers
+     * @param  int    $code
+     * @param  string $message
+     * @param  array  $headers
      * @return void
      *
      * @throws \Symfony\Component\HttpKernel\Exception\HttpException
@@ -35,10 +35,10 @@
     /**
      * Throw an HttpException with the given data if the given condition is true.
      *
-     * @param  bool    $boolean
-     * @param  int     $code
-     * @param  string  $message
-     * @param  array   $headers
+     * @param  bool   $boolean
+     * @param  int    $code
+     * @param  string $message
+     * @param  array  $headers
      * @return void
      *
      * @throws \Symfony\Component\HttpKernel\Exception\HttpException
@@ -56,10 +56,10 @@
     /**
      * Throw an HttpException with the given data unless the given condition is true.
      *
-     * @param  bool    $boolean
-     * @param  int     $code
-     * @param  string  $message
-     * @param  array   $headers
+     * @param  bool   $boolean
+     * @param  int    $code
+     * @param  string $message
+     * @param  array  $headers
      * @return void
      *
      * @throws \Symfony\Component\HttpKernel\Exception\HttpException
@@ -77,9 +77,9 @@
     /**
      * Generate a URL to a controller action.
      *
-     * @param  string  $name
-     * @param  array   $parameters
-     * @param  bool    $absolute
+     * @param  string $name
+     * @param  array  $parameters
+     * @param  bool   $absolute
      * @return string
      */
     function action($name, $parameters = [], $absolute = true)
@@ -92,8 +92,8 @@
     /**
      * Get the available container instance.
      *
-     * @param  string  $make
-     * @param  array   $parameters
+     * @param  string $make
+     * @param  array  $parameters
      * @return mixed|\Illuminate\Foundation\Application
      */
     function app($make = null, $parameters = [])
@@ -110,7 +110,7 @@
     /**
      * Get the path to the application folder.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     function app_path($path = '')
@@ -123,8 +123,8 @@
     /**
      * Generate an asset path for the application.
      *
-     * @param  string  $path
-     * @param  bool    $secure
+     * @param  string $path
+     * @param  bool   $secure
      * @return string
      */
     function asset($path, $secure = null)
@@ -137,7 +137,7 @@
     /**
      * Get the available auth instance.
      *
-     * @param  string|null  $guard
+     * @param  string|null $guard
      * @return \Illuminate\Contracts\Auth\Factory|\Illuminate\Contracts\Auth\Guard|\Illuminate\Contracts\Auth\StatefulGuard
      */
     function auth($guard = null)
@@ -154,8 +154,8 @@
     /**
      * Create a new redirect response to the previous location.
      *
-     * @param  int    $status
-     * @param  array  $headers
+     * @param  int   $status
+     * @param  array $headers
      * @return \Illuminate\Http\RedirectResponse
      */
     function back($status = 302, $headers = [])
@@ -168,7 +168,7 @@
     /**
      * Get the path to the base of the install.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     function base_path($path = '')
@@ -181,8 +181,8 @@
     /**
      * Hash the given value.
      *
-     * @param  string  $value
-     * @param  array   $options
+     * @param  string $value
+     * @param  array  $options
      * @return string
      */
     function bcrypt($value, $options = [])
@@ -197,8 +197,8 @@
      *
      * If an array is passed as the key, we will assume you want to set an array of values.
      *
-     * @param  array|string  $key
-     * @param  mixed  $default
+     * @param  array|string $key
+     * @param  mixed        $default
      * @return mixed
      */
     function config($key = null, $default = null)
@@ -219,7 +219,7 @@
     /**
      * Get the configuration path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     function config_path($path = '')
@@ -232,13 +232,13 @@
     /**
      * Create a new cookie instance.
      *
-     * @param  string  $name
-     * @param  string  $value
-     * @param  int     $minutes
-     * @param  string  $path
-     * @param  string  $domain
-     * @param  bool    $secure
-     * @param  bool    $httpOnly
+     * @param  string $name
+     * @param  string $value
+     * @param  int    $minutes
+     * @param  string $path
+     * @param  string $domain
+     * @param  bool   $secure
+     * @param  bool   $httpOnly
      * @return \Symfony\Component\HttpFoundation\Cookie
      */
     function cookie($name = null, $value = null, $minutes = 0, $path = null, $domain = null, $secure = false, $httpOnly = true)
@@ -289,7 +289,7 @@
     /**
      * Get the database path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     function database_path($path = '')
@@ -302,7 +302,7 @@
     /**
      * Decrypt the given value.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     function decrypt($value)
@@ -315,7 +315,7 @@
     /**
      * Dispatch a job to its appropriate handler.
      *
-     * @param  mixed  $job
+     * @param  mixed $job
      * @return mixed
      */
     function dispatch($job)
@@ -328,8 +328,8 @@
     /**
      * Get the path to a versioned Elixir file.
      *
-     * @param  string  $file
-     * @param  string  $buildDirectory
+     * @param  string $file
+     * @param  string $buildDirectory
      * @return string
      *
      * @throws \InvalidArgumentException
@@ -357,7 +357,7 @@
     /**
      * Encrypt the given value.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     function encrypt($value)
@@ -370,8 +370,8 @@
     /**
      * Gets the value of an environment variable. Supports boolean, empty and null.
      *
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  string $key
+     * @param  mixed  $default
      * @return mixed
      */
     function env($key, $default = null)
@@ -383,18 +383,18 @@
         }
 
         switch (strtolower($value)) {
-            case 'true':
-            case '(true)':
-                return true;
-            case 'false':
-            case '(false)':
-                return false;
-            case 'empty':
-            case '(empty)':
-                return '';
-            case 'null':
-            case '(null)':
-                return;
+        case 'true':
+        case '(true)':
+            return true;
+        case 'false':
+        case '(false)':
+            return false;
+        case 'empty':
+        case '(empty)':
+            return '';
+        case 'null':
+        case '(null)':
+            return;
         }
 
         if (strlen($value) > 1 && Str::startsWith($value, '"') && Str::endsWith($value, '"')) {
@@ -409,9 +409,9 @@
     /**
      * Fire an event and call the listeners.
      *
-     * @param  string|object  $event
-     * @param  mixed  $payload
-     * @param  bool  $halt
+     * @param  string|object $event
+     * @param  mixed         $payload
+     * @param  bool          $halt
      * @return array|null
      */
     function event($event, $payload = [], $halt = false)
@@ -447,8 +447,8 @@
     /**
      * Write some information to the log.
      *
-     * @param  string  $message
-     * @param  array   $context
+     * @param  string $message
+     * @param  array  $context
      * @return void
      */
     function info($message, $context = [])
@@ -461,7 +461,7 @@
     /**
      * Log a debug message to the logs.
      *
-     * @param  string  $message
+     * @param  string $message
      * @param  array  $context
      * @return \Illuminate\Contracts\Logging\Log|null
      */
@@ -479,7 +479,7 @@
     /**
      * Generate a form field to spoof the HTTP verb used by forms.
      *
-     * @param  string  $method
+     * @param  string $method
      * @return \Illuminate\Support\HtmlString
      */
     function method_field($method)
@@ -492,8 +492,8 @@
     /**
      * Retrieve an old input item.
      *
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  string $key
+     * @param  mixed  $default
      * @return mixed
      */
     function old($key = null, $default = null)
@@ -506,7 +506,7 @@
     /**
      * Get a policy instance for a given class.
      *
-     * @param  object|string  $class
+     * @param  object|string $class
      * @return mixed
      *
      * @throws \InvalidArgumentException
@@ -521,7 +521,7 @@
     /**
      * Get the path to the public folder.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     function public_path($path = '')
@@ -534,10 +534,10 @@
     /**
      * Get an instance of the redirector.
      *
-     * @param  string|null  $to
-     * @param  int     $status
-     * @param  array   $headers
-     * @param  bool    $secure
+     * @param  string|null $to
+     * @param  int         $status
+     * @param  array       $headers
+     * @param  bool        $secure
      * @return \Illuminate\Routing\Redirector|\Illuminate\Http\RedirectResponse
      */
     function redirect($to = null, $status = 302, $headers = [], $secure = null)
@@ -554,8 +554,8 @@
     /**
      * Get an instance of the current request or an input item from the request.
      *
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  string $key
+     * @param  mixed  $default
      * @return \Illuminate\Http\Request|string|array
      */
     function request($key = null, $default = null)
@@ -572,7 +572,7 @@
     /**
      * Get the path to the resources folder.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     function resource_path($path = '')
@@ -585,9 +585,9 @@
     /**
      * Return a new response from the application.
      *
-     * @param  string  $content
-     * @param  int     $status
-     * @param  array   $headers
+     * @param  string $content
+     * @param  int    $status
+     * @param  array  $headers
      * @return \Symfony\Component\HttpFoundation\Response|\Illuminate\Contracts\Routing\ResponseFactory
      */
     function response($content = '', $status = 200, array $headers = [])
@@ -606,9 +606,9 @@
     /**
      * Generate a URL to a named route.
      *
-     * @param  string  $name
-     * @param  array   $parameters
-     * @param  bool    $absolute
+     * @param  string $name
+     * @param  array  $parameters
+     * @param  bool   $absolute
      * @return string
      */
     function route($name, $parameters = [], $absolute = true)
@@ -621,7 +621,7 @@
     /**
      * Generate an asset path for the application.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     function secure_asset($path)
@@ -634,8 +634,8 @@
     /**
      * Generate a HTTPS url for the application.
      *
-     * @param  string  $path
-     * @param  mixed   $parameters
+     * @param  string $path
+     * @param  mixed  $parameters
      * @return string
      */
     function secure_url($path, $parameters = [])
@@ -650,8 +650,8 @@
      *
      * If an array is passed as the key, we will assume you want to set an array of values.
      *
-     * @param  array|string  $key
-     * @param  mixed  $default
+     * @param  array|string $key
+     * @param  mixed        $default
      * @return mixed
      */
     function session($key = null, $default = null)
@@ -672,7 +672,7 @@
     /**
      * Get the path to the storage folder.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     function storage_path($path = '')
@@ -685,10 +685,10 @@
     /**
      * Translate the given message.
      *
-     * @param  string  $id
-     * @param  array   $parameters
-     * @param  string  $domain
-     * @param  string  $locale
+     * @param  string $id
+     * @param  array  $parameters
+     * @param  string $domain
+     * @param  string $locale
      * @return \Symfony\Component\Translation\TranslatorInterface|string
      */
     function trans($id = null, $parameters = [], $domain = 'messages', $locale = null)
@@ -705,11 +705,11 @@
     /**
      * Translates the given message based on a count.
      *
-     * @param  string  $id
-     * @param  int|array|\Countable  $number
-     * @param  array   $parameters
-     * @param  string  $domain
-     * @param  string  $locale
+     * @param  string               $id
+     * @param  int|array|\Countable $number
+     * @param  array                $parameters
+     * @param  string               $domain
+     * @param  string               $locale
      * @return string
      */
     function trans_choice($id, $number, array $parameters = [], $domain = 'messages', $locale = null)
@@ -722,9 +722,9 @@
     /**
      * Generate a url for the application.
      *
-     * @param  string  $path
-     * @param  mixed   $parameters
-     * @param  bool    $secure
+     * @param  string $path
+     * @param  mixed  $parameters
+     * @param  bool   $secure
      * @return Illuminate\Contracts\Routing\UrlGenerator|string
      */
     function url($path = null, $parameters = [], $secure = null)
@@ -741,10 +741,10 @@
     /**
      * Create a new Validator instance.
      *
-     * @param  array  $data
-     * @param  array  $rules
-     * @param  array  $messages
-     * @param  array  $customAttributes
+     * @param  array $data
+     * @param  array $rules
+     * @param  array $messages
+     * @param  array $customAttributes
      * @return \Illuminate\Contracts\Validation\Validator
      */
     function validator(array $data = [], array $rules = [], array $messages = [], array $customAttributes = [])
@@ -763,9 +763,9 @@
     /**
      * Get the evaluated view contents for the given view.
      *
-     * @param  string  $view
-     * @param  array   $data
-     * @param  array   $mergeData
+     * @param  string $view
+     * @param  array  $data
+     * @param  array  $mergeData
      * @return \Illuminate\View\View|\Illuminate\Contracts\View\Factory
      */
     function view($view = null, $data = [], $mergeData = [])

--- vendor/laravel/framework/src/Illuminate/Foundation/Http/FormRequest.php
+++ PHP_CodeSniffer
@@ -97,16 +97,18 @@
     /**
      * Handle a failed validation attempt.
      *
-     * @param  \Illuminate\Contracts\Validation\Validator  $validator
+     * @param  \Illuminate\Contracts\Validation\Validator $validator
      * @return void
      *
      * @throws \Illuminate\Http\Exception\HttpResponseException
      */
     protected function failedValidation(Validator $validator)
     {
-        throw new HttpResponseException($this->response(
-            $this->formatErrors($validator)
-        ));
+        throw new HttpResponseException(
+            $this->response(
+                $this->formatErrors($validator)
+            )
+        );
     }
 
     /**
@@ -138,7 +140,7 @@
     /**
      * Get the proper failed validation response for the request.
      *
-     * @param  array  $errors
+     * @param  array $errors
      * @return \Symfony\Component\HttpFoundation\Response
      */
     public function response(array $errors)
@@ -148,8 +150,8 @@
         }
 
         return $this->redirector->to($this->getRedirectUrl())
-                                        ->withInput($this->except($this->dontFlash))
-                                        ->withErrors($errors, $this->errorBag);
+            ->withInput($this->except($this->dontFlash))
+            ->withErrors($errors, $this->errorBag);
     }
 
     /**
@@ -165,7 +167,7 @@
     /**
      * Format the errors from the given Validator instance.
      *
-     * @param  \Illuminate\Contracts\Validation\Validator  $validator
+     * @param  \Illuminate\Contracts\Validation\Validator $validator
      * @return array
      */
     protected function formatErrors(Validator $validator)
@@ -196,7 +198,7 @@
     /**
      * Set the Redirector instance.
      *
-     * @param  \Illuminate\Routing\Redirector  $redirector
+     * @param  \Illuminate\Routing\Redirector $redirector
      * @return $this
      */
     public function setRedirector(Redirector $redirector)
@@ -209,7 +211,7 @@
     /**
      * Set the container implementation.
      *
-     * @param  \Illuminate\Container\Container  $container
+     * @param  \Illuminate\Container\Container $container
      * @return $this
      */
     public function setContainer(Container $container)

--- vendor/laravel/framework/src/Illuminate/Foundation/Http/Kernel.php
+++ PHP_CodeSniffer
@@ -67,8 +67,8 @@
     /**
      * Create a new HTTP kernel instance.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
-     * @param  \Illuminate\Routing\Router  $router
+     * @param  \Illuminate\Contracts\Foundation\Application $app
+     * @param  \Illuminate\Routing\Router                   $router
      * @return void
      */
     public function __construct(Application $app, Router $router)
@@ -88,7 +88,7 @@
     /**
      * Handle an incoming HTTP request.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Http\Response
      */
     public function handle($request)
@@ -115,7 +115,7 @@
     /**
      * Send the given request through the middleware / router.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Http\Response
      */
     protected function sendRequestThroughRouter($request)
@@ -136,7 +136,7 @@
      * Call the terminate method on any terminable middleware.
      *
      * @param  \Illuminate\Http\Request  $request
-     * @param  \Illuminate\Http\Response  $response
+     * @param  \Illuminate\Http\Response $response
      * @return void
      */
     public function terminate($request, $response)
@@ -162,7 +162,7 @@
     /**
      * Gather the route middleware for the given request.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return array
      */
     protected function gatherRouteMiddlewares($request)
@@ -177,7 +177,7 @@
     /**
      * Parse a middleware string to get the name and parameters.
      *
-     * @param  string  $middleware
+     * @param  string $middleware
      * @return array
      */
     protected function parseMiddleware($middleware)
@@ -194,7 +194,7 @@
     /**
      * Add a new middleware to beginning of the stack if it does not already exist.
      *
-     * @param  string  $middleware
+     * @param  string $middleware
      * @return $this
      */
     public function prependMiddleware($middleware)
@@ -209,7 +209,7 @@
     /**
      * Add a new middleware to end of the stack if it does not already exist.
      *
-     * @param  string  $middleware
+     * @param  string $middleware
      * @return $this
      */
     public function pushMiddleware($middleware)
@@ -250,7 +250,7 @@
     /**
      * Determine if the kernel has a given middleware.
      *
-     * @param  string  $middleware
+     * @param  string $middleware
      * @return bool
      */
     public function hasMiddleware($middleware)
@@ -271,7 +271,7 @@
     /**
      * Report the exception to the exception handler.
      *
-     * @param  \Exception  $e
+     * @param  \Exception $e
      * @return void
      */
     protected function reportException(Exception $e)
@@ -282,8 +282,8 @@
     /**
      * Render the exception to a response.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Exception  $e
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Exception               $e
      * @return \Symfony\Component\HttpFoundation\Response
      */
     protected function renderException($request, Exception $e)

--- vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/Authorize.php
+++ PHP_CodeSniffer
@@ -17,7 +17,7 @@
     /**
      * Create a new middleware instance.
      *
-     * @param  \Illuminate\Contracts\Auth\Access\Gate  $gate
+     * @param  \Illuminate\Contracts\Auth\Access\Gate $gate
      * @return void
      */
     public function __construct(Gate $gate)
@@ -28,10 +28,10 @@
     /**
      * Handle an incoming request.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Closure  $next
-     * @param  string  $ability
-     * @param  string|null  $model
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Closure                 $next
+     * @param  string                   $ability
+     * @param  string|null              $model
      * @return mixed
      *
      * @throws \Illuminate\Auth\Access\AuthorizationException
@@ -46,8 +46,8 @@
     /**
      * Get the arguments parameter for the gate.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  string|null  $model
+     * @param  \Illuminate\Http\Request $request
+     * @param  string|null              $model
      * @return array|string|\Illuminate\Database\Eloquent\Model
      */
     protected function getGateArguments($request, $model)

--- vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/CheckForMaintenanceMode.php
+++ PHP_CodeSniffer
@@ -18,7 +18,7 @@
     /**
      * Create a new middleware instance.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return void
      */
     public function __construct(Application $app)
@@ -29,8 +29,8 @@
     /**
      * Handle an incoming request.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Closure  $next
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Closure                 $next
      * @return mixed
      *
      * @throws \Symfony\Component\HttpKernel\Exception\HttpException

--- vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/VerifyCsrfToken.php
+++ PHP_CodeSniffer
@@ -34,8 +34,8 @@
     /**
      * Create a new middleware instance.
      *
-     * @param  \Illuminate\Foundation\Application  $app
-     * @param  \Illuminate\Contracts\Encryption\Encrypter  $encrypter
+     * @param  \Illuminate\Foundation\Application         $app
+     * @param  \Illuminate\Contracts\Encryption\Encrypter $encrypter
      * @return void
      */
     public function __construct(Application $app, Encrypter $encrypter)
@@ -47,19 +47,18 @@
     /**
      * Handle an incoming request.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Closure  $next
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Closure                 $next
      * @return mixed
      *
      * @throws \Illuminate\Session\TokenMismatchException
      */
     public function handle($request, Closure $next)
     {
-        if (
-            $this->isReading($request) ||
-            $this->runningUnitTests() ||
-            $this->shouldPassThrough($request) ||
-            $this->tokensMatch($request)
+        if ($this->isReading($request) 
+            || $this->runningUnitTests() 
+            || $this->shouldPassThrough($request) 
+            || $this->tokensMatch($request)
         ) {
             return $this->addCookieToResponse($request, $next($request));
         }
@@ -70,7 +69,7 @@
     /**
      * Determine if the request has a URI that should pass through CSRF verification.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return bool
      */
     protected function shouldPassThrough($request)
@@ -101,7 +100,7 @@
     /**
      * Determine if the session and input CSRF tokens match.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return bool
      */
     protected function tokensMatch($request)
@@ -125,7 +124,7 @@
      * Add the CSRF token to the response cookies.
      *
      * @param  \Illuminate\Http\Request  $request
-     * @param  \Illuminate\Http\Response  $response
+     * @param  \Illuminate\Http\Response $response
      * @return \Illuminate\Http\Response
      */
     protected function addCookieToResponse($request, $response)
@@ -145,7 +144,7 @@
     /**
      * Determine if the HTTP request uses a ‘read’ verb.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return bool
      */
     protected function isReading($request)

--- vendor/laravel/framework/src/Illuminate/Foundation/Http/Middleware/VerifyPostSize.php
+++ PHP_CodeSniffer
@@ -10,8 +10,8 @@
     /**
      * Handle an incoming request.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Closure  $next
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Closure                 $next
      * @return mixed
      *
      * @throws \Illuminate\Http\Exception\PostTooLargeException
@@ -39,14 +39,14 @@
         $metric = strtoupper(substr($postMaxSize, -1));
 
         switch ($metric) {
-            case 'K':
-                return (int) $postMaxSize * 1024;
-            case 'M':
-                return (int) $postMaxSize * 1048576;
-            case 'G':
-                return (int) $postMaxSize * 1073741824;
-            default:
-                return (int) $postMaxSize;
+        case 'K':
+            return (int) $postMaxSize * 1024;
+        case 'M':
+            return (int) $postMaxSize * 1048576;
+        case 'G':
+            return (int) $postMaxSize * 1073741824;
+        default:
+            return (int) $postMaxSize;
         }
     }
 }

--- vendor/laravel/framework/src/Illuminate/Foundation/Inspiring.php
+++ PHP_CodeSniffer
@@ -17,7 +17,8 @@
      */
     public static function quote()
     {
-        return Collection::make([
+        return Collection::make(
+            [
             'When there is no desire, all things are at peace. - Laozi',
             'Simplicity is the ultimate sophistication. - Leonardo da Vinci',
             'Simplicity is the essence of happiness. - Cedric Bledsoe',
@@ -27,6 +28,7 @@
             'He who is contented is rich. - Laozi',
             'Very little is needed to make a happy life. - Marcus Antoninus',
 
-        ])->random();
+            ]
+        )->random();
     }
 }

--- vendor/laravel/framework/src/Illuminate/Foundation/ProviderRepository.php
+++ PHP_CodeSniffer
@@ -31,9 +31,9 @@
     /**
      * Create a new service repository instance.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
-     * @param  \Illuminate\Filesystem\Filesystem  $files
-     * @param  string  $manifestPath
+     * @param  \Illuminate\Contracts\Foundation\Application $app
+     * @param  \Illuminate\Filesystem\Filesystem            $files
+     * @param  string                                       $manifestPath
      * @return void
      */
     public function __construct(ApplicationContract $app, Filesystem $files, $manifestPath)
@@ -46,7 +46,7 @@
     /**
      * Register the application service providers.
      *
-     * @param  array  $providers
+     * @param  array $providers
      * @return void
      */
     public function load(array $providers)
@@ -80,7 +80,7 @@
     /**
      * Register the load events for the given provider.
      *
-     * @param  string  $provider
+     * @param  string $provider
      * @param  array  $events
      * @return void
      */
@@ -92,15 +92,17 @@
 
         $app = $this->app;
 
-        $app->make('events')->listen($events, function () use ($app, $provider) {
-            $app->register($provider);
-        });
+        $app->make('events')->listen(
+            $events, function () use ($app, $provider) {
+                $app->register($provider);
+            }
+        );
     }
 
     /**
      * Compile the application manifest file.
      *
-     * @param  array  $providers
+     * @param  array $providers
      * @return array
      */
     protected function compileManifest($providers)
@@ -138,7 +140,7 @@
     /**
      * Create a new provider instance.
      *
-     * @param  string  $provider
+     * @param  string $provider
      * @return \Illuminate\Support\ServiceProvider
      */
     public function createProvider($provider)
@@ -149,8 +151,8 @@
     /**
      * Determine if the manifest should be compiled.
      *
-     * @param  array  $manifest
-     * @param  array  $providers
+     * @param  array $manifest
+     * @param  array $providers
      * @return bool
      */
     public function shouldRecompile($manifest, $providers)
@@ -180,7 +182,7 @@
     /**
      * Write the service manifest file to disk.
      *
-     * @param  array  $manifest
+     * @param  array $manifest
      * @return array
      */
     public function writeManifest($manifest)
@@ -195,7 +197,7 @@
     /**
      * Create a fresh service manifest data structure.
      *
-     * @param  array  $providers
+     * @param  array $providers
      * @return array
      */
     protected function freshManifest(array $providers)

--- vendor/laravel/framework/src/Illuminate/Foundation/Providers/ArtisanServiceProvider.php
+++ PHP_CodeSniffer
@@ -114,7 +114,7 @@
     /**
      * Register the given commands.
      *
-     * @param  array  $commands
+     * @param  array $commands
      * @return void
      */
     protected function registerCommands(array $commands)
@@ -135,9 +135,11 @@
      */
     protected function registerAppNameCommand()
     {
-        $this->app->singleton('command.app.name', function ($app) {
-            return new AppNameCommand($app['composer'], $app['files']);
-        });
+        $this->app->singleton(
+            'command.app.name', function ($app) {
+                return new AppNameCommand($app['composer'], $app['files']);
+            }
+        );
     }
 
     /**
@@ -147,9 +149,11 @@
      */
     protected function registerAuthMakeCommand()
     {
-        $this->app->singleton('command.auth.make', function ($app) {
-            return new MakeAuthCommand;
-        });
+        $this->app->singleton(
+            'command.auth.make', function ($app) {
+                return new MakeAuthCommand;
+            }
+        );
     }
 
     /**
@@ -159,9 +163,11 @@
      */
     protected function registerCacheTableCommand()
     {
-        $this->app->singleton('command.cache.table', function ($app) {
-            return new CacheTableCommand($app['files'], $app['composer']);
-        });
+        $this->app->singleton(
+            'command.cache.table', function ($app) {
+                return new CacheTableCommand($app['files'], $app['composer']);
+            }
+        );
     }
 
     /**
@@ -171,9 +177,11 @@
      */
     protected function registerClearCompiledCommand()
     {
-        $this->app->singleton('command.clear-compiled', function () {
-            return new ClearCompiledCommand;
-        });
+        $this->app->singleton(
+            'command.clear-compiled', function () {
+                return new ClearCompiledCommand;
+            }
+        );
     }
 
     /**
@@ -183,9 +191,11 @@
      */
     protected function registerClearResetsCommand()
     {
-        $this->app->singleton('command.auth.resets.clear', function () {
-            return new ClearResetsCommand;
-        });
+        $this->app->singleton(
+            'command.auth.resets.clear', function () {
+                return new ClearResetsCommand;
+            }
+        );
     }
 
     /**
@@ -195,9 +205,11 @@
      */
     protected function registerConfigCacheCommand()
     {
-        $this->app->singleton('command.config.cache', function ($app) {
-            return new ConfigCacheCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.config.cache', function ($app) {
+                return new ConfigCacheCommand($app['files']);
+            }
+        );
     }
 
     /**
@@ -207,9 +219,11 @@
      */
     protected function registerConfigClearCommand()
     {
-        $this->app->singleton('command.config.clear', function ($app) {
-            return new ConfigClearCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.config.clear', function ($app) {
+                return new ConfigClearCommand($app['files']);
+            }
+        );
     }
 
     /**
@@ -219,9 +233,11 @@
      */
     protected function registerConsoleMakeCommand()
     {
-        $this->app->singleton('command.console.make', function ($app) {
-            return new ConsoleMakeCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.console.make', function ($app) {
+                return new ConsoleMakeCommand($app['files']);
+            }
+        );
     }
 
     /**
@@ -231,9 +247,11 @@
      */
     protected function registerControllerMakeCommand()
     {
-        $this->app->singleton('command.controller.make', function ($app) {
-            return new ControllerMakeCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.controller.make', function ($app) {
+                return new ControllerMakeCommand($app['files']);
+            }
+        );
     }
 
     /**
@@ -243,9 +261,11 @@
      */
     protected function registerEventGenerateCommand()
     {
-        $this->app->singleton('command.event.generate', function () {
-            return new EventGenerateCommand;
-        });
+        $this->app->singleton(
+            'command.event.generate', function () {
+                return new EventGenerateCommand;
+            }
+        );
     }
 
     /**
@@ -255,9 +275,11 @@
      */
     protected function registerEventMakeCommand()
     {
-        $this->app->singleton('command.event.make', function ($app) {
-            return new EventMakeCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.event.make', function ($app) {
+                return new EventMakeCommand($app['files']);
+            }
+        );
     }
 
     /**
@@ -267,9 +289,11 @@
      */
     protected function registerDownCommand()
     {
-        $this->app->singleton('command.down', function () {
-            return new DownCommand;
-        });
+        $this->app->singleton(
+            'command.down', function () {
+                return new DownCommand;
+            }
+        );
     }
 
     /**
@@ -279,9 +303,11 @@
      */
     protected function registerEnvironmentCommand()
     {
-        $this->app->singleton('command.environment', function () {
-            return new EnvironmentCommand;
-        });
+        $this->app->singleton(
+            'command.environment', function () {
+                return new EnvironmentCommand;
+            }
+        );
     }
 
     /**
@@ -291,9 +317,11 @@
      */
     protected function registerJobMakeCommand()
     {
-        $this->app->singleton('command.job.make', function ($app) {
-            return new JobMakeCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.job.make', function ($app) {
+                return new JobMakeCommand($app['files']);
+            }
+        );
     }
 
     /**
@@ -303,9 +331,11 @@
      */
     protected function registerKeyGenerateCommand()
     {
-        $this->app->singleton('command.key.generate', function () {
-            return new KeyGenerateCommand;
-        });
+        $this->app->singleton(
+            'command.key.generate', function () {
+                return new KeyGenerateCommand;
+            }
+        );
     }
 
     /**
@@ -315,9 +345,11 @@
      */
     protected function registerListenerMakeCommand()
     {
-        $this->app->singleton('command.listener.make', function ($app) {
-            return new ListenerMakeCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.listener.make', function ($app) {
+                return new ListenerMakeCommand($app['files']);
+            }
+        );
     }
 
     /**
@@ -327,9 +359,11 @@
      */
     protected function registerMiddlewareMakeCommand()
     {
-        $this->app->singleton('command.middleware.make', function ($app) {
-            return new MiddlewareMakeCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.middleware.make', function ($app) {
+                return new MiddlewareMakeCommand($app['files']);
+            }
+        );
     }
 
     /**
@@ -339,9 +373,11 @@
      */
     protected function registerModelMakeCommand()
     {
-        $this->app->singleton('command.model.make', function ($app) {
-            return new ModelMakeCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.model.make', function ($app) {
+                return new ModelMakeCommand($app['files']);
+            }
+        );
     }
 
     /**
@@ -351,9 +387,11 @@
      */
     protected function registerOptimizeCommand()
     {
-        $this->app->singleton('command.optimize', function ($app) {
-            return new OptimizeCommand($app['composer']);
-        });
+        $this->app->singleton(
+            'command.optimize', function ($app) {
+                return new OptimizeCommand($app['composer']);
+            }
+        );
     }
 
     /**
@@ -363,9 +401,11 @@
      */
     protected function registerProviderMakeCommand()
     {
-        $this->app->singleton('command.provider.make', function ($app) {
-            return new ProviderMakeCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.provider.make', function ($app) {
+                return new ProviderMakeCommand($app['files']);
+            }
+        );
     }
 
     /**
@@ -375,9 +415,11 @@
      */
     protected function registerQueueFailedTableCommand()
     {
-        $this->app->singleton('command.queue.failed-table', function ($app) {
-            return new FailedTableCommand($app['files'], $app['composer']);
-        });
+        $this->app->singleton(
+            'command.queue.failed-table', function ($app) {
+                return new FailedTableCommand($app['files'], $app['composer']);
+            }
+        );
     }
 
     /**
@@ -387,9 +429,11 @@
      */
     protected function registerQueueTableCommand()
     {
-        $this->app->singleton('command.queue.table', function ($app) {
-            return new TableCommand($app['files'], $app['composer']);
-        });
+        $this->app->singleton(
+            'command.queue.table', function ($app) {
+                return new TableCommand($app['files'], $app['composer']);
+            }
+        );
     }
 
     /**
@@ -399,9 +443,11 @@
      */
     protected function registerRequestMakeCommand()
     {
-        $this->app->singleton('command.request.make', function ($app) {
-            return new RequestMakeCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.request.make', function ($app) {
+                return new RequestMakeCommand($app['files']);
+            }
+        );
     }
 
     /**
@@ -411,9 +457,11 @@
      */
     protected function registerSeederMakeCommand()
     {
-        $this->app->singleton('command.seeder.make', function ($app) {
-            return new SeederMakeCommand($app['files'], $app['composer']);
-        });
+        $this->app->singleton(
+            'command.seeder.make', function ($app) {
+                return new SeederMakeCommand($app['files'], $app['composer']);
+            }
+        );
     }
 
     /**
@@ -423,9 +471,11 @@
      */
     protected function registerSessionTableCommand()
     {
-        $this->app->singleton('command.session.table', function ($app) {
-            return new SessionTableCommand($app['files'], $app['composer']);
-        });
+        $this->app->singleton(
+            'command.session.table', function ($app) {
+                return new SessionTableCommand($app['files'], $app['composer']);
+            }
+        );
     }
 
     /**
@@ -435,9 +485,11 @@
      */
     protected function registerRouteCacheCommand()
     {
-        $this->app->singleton('command.route.cache', function ($app) {
-            return new RouteCacheCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.route.cache', function ($app) {
+                return new RouteCacheCommand($app['files']);
+            }
+        );
     }
 
     /**
@@ -447,9 +499,11 @@
      */
     protected function registerRouteClearCommand()
     {
-        $this->app->singleton('command.route.clear', function ($app) {
-            return new RouteClearCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.route.clear', function ($app) {
+                return new RouteClearCommand($app['files']);
+            }
+        );
     }
 
     /**
@@ -459,9 +513,11 @@
      */
     protected function registerRouteListCommand()
     {
-        $this->app->singleton('command.route.list', function ($app) {
-            return new RouteListCommand($app['router']);
-        });
+        $this->app->singleton(
+            'command.route.list', function ($app) {
+                return new RouteListCommand($app['router']);
+            }
+        );
     }
 
     /**
@@ -471,9 +527,11 @@
      */
     protected function registerServeCommand()
     {
-        $this->app->singleton('command.serve', function () {
-            return new ServeCommand;
-        });
+        $this->app->singleton(
+            'command.serve', function () {
+                return new ServeCommand;
+            }
+        );
     }
 
     /**
@@ -483,9 +541,11 @@
      */
     protected function registerTestMakeCommand()
     {
-        $this->app->singleton('command.test.make', function ($app) {
-            return new TestMakeCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.test.make', function ($app) {
+                return new TestMakeCommand($app['files']);
+            }
+        );
     }
 
     /**
@@ -495,9 +555,11 @@
      */
     protected function registerTinkerCommand()
     {
-        $this->app->singleton('command.tinker', function () {
-            return new TinkerCommand;
-        });
+        $this->app->singleton(
+            'command.tinker', function () {
+                return new TinkerCommand;
+            }
+        );
     }
 
     /**
@@ -507,9 +569,11 @@
      */
     protected function registerUpCommand()
     {
-        $this->app->singleton('command.up', function () {
-            return new UpCommand;
-        });
+        $this->app->singleton(
+            'command.up', function () {
+                return new UpCommand;
+            }
+        );
     }
 
     /**
@@ -519,9 +583,11 @@
      */
     protected function registerVendorPublishCommand()
     {
-        $this->app->singleton('command.vendor.publish', function ($app) {
-            return new VendorPublishCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.vendor.publish', function ($app) {
+                return new VendorPublishCommand($app['files']);
+            }
+        );
     }
 
     /**
@@ -531,9 +597,11 @@
      */
     protected function registerViewClearCommand()
     {
-        $this->app->singleton('command.view.clear', function ($app) {
-            return new ViewClearCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.view.clear', function ($app) {
+                return new ViewClearCommand($app['files']);
+            }
+        );
     }
 
     /**
@@ -543,9 +611,11 @@
      */
     protected function registerPolicyMakeCommand()
     {
-        $this->app->singleton('command.policy.make', function ($app) {
-            return new PolicyMakeCommand($app['files']);
-        });
+        $this->app->singleton(
+            'command.policy.make', function ($app) {
+                return new PolicyMakeCommand($app['files']);
+            }
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Foundation/Providers/ComposerServiceProvider.php
+++ PHP_CodeSniffer
@@ -21,9 +21,11 @@
      */
     public function register()
     {
-        $this->app->singleton('composer', function ($app) {
-            return new Composer($app['files'], $app->basePath());
-        });
+        $this->app->singleton(
+            'composer', function ($app) {
+                return new Composer($app['files'], $app->basePath());
+            }
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Foundation/Providers/FoundationServiceProvider.php
+++ PHP_CodeSniffer
@@ -37,22 +37,26 @@
      */
     protected function configureFormRequests()
     {
-        $this->app->afterResolving(function (ValidatesWhenResolved $resolved) {
-            $resolved->validate();
-        });
+        $this->app->afterResolving(
+            function (ValidatesWhenResolved $resolved) {
+                $resolved->validate();
+            }
+        );
 
-        $this->app->resolving(function (FormRequest $request, $app) {
-            $this->initializeRequest($request, $app['request']);
+        $this->app->resolving(
+            function (FormRequest $request, $app) {
+                $this->initializeRequest($request, $app['request']);
 
-            $request->setContainer($app)->setRedirector($app->make(Redirector::class));
-        });
+                $request->setContainer($app)->setRedirector($app->make(Redirector::class));
+            }
+        );
     }
 
     /**
      * Initialize the form request with data from the given request.
      *
-     * @param  \Illuminate\Foundation\Http\FormRequest  $form
-     * @param  \Symfony\Component\HttpFoundation\Request  $current
+     * @param  \Illuminate\Foundation\Http\FormRequest   $form
+     * @param  \Symfony\Component\HttpFoundation\Request $current
      * @return void
      */
     protected function initializeRequest(FormRequest $form, Request $current)

--- vendor/laravel/framework/src/Illuminate/Foundation/Support/Providers/AuthServiceProvider.php
+++ PHP_CodeSniffer
@@ -17,7 +17,7 @@
     /**
      * Register the application's policies.
      *
-     * @param  \Illuminate\Contracts\Auth\Access\Gate  $gate
+     * @param  \Illuminate\Contracts\Auth\Access\Gate $gate
      * @return void
      */
     public function registerPolicies(GateContract $gate)

--- vendor/laravel/framework/src/Illuminate/Foundation/Support/Providers/EventServiceProvider.php
+++ PHP_CodeSniffer
@@ -24,7 +24,7 @@
     /**
      * Register the application's event listeners.
      *
-     * @param  \Illuminate\Contracts\Events\Dispatcher  $events
+     * @param  \Illuminate\Contracts\Events\Dispatcher $events
      * @return void
      */
     public function boot(DispatcherContract $events)

--- vendor/laravel/framework/src/Illuminate/Foundation/Support/Providers/RouteServiceProvider.php
+++ PHP_CodeSniffer
@@ -18,7 +18,7 @@
     /**
      * Bootstrap any application services.
      *
-     * @param  \Illuminate\Routing\Router  $router
+     * @param  \Illuminate\Routing\Router $router
      * @return void
      */
     public function boot(Router $router)
@@ -30,9 +30,11 @@
         } else {
             $this->loadRoutes();
 
-            $this->app->booted(function () use ($router) {
-                $router->getRoutes()->refreshNameLookups();
-            });
+            $this->app->booted(
+                function () use ($router) {
+                    $router->getRoutes()->refreshNameLookups();
+                }
+            );
         }
     }
 
@@ -57,9 +59,11 @@
      */
     protected function loadCachedRoutes()
     {
-        $this->app->booted(function () {
-            require $this->app->getCachedRoutesPath();
-        });
+        $this->app->booted(
+            function () {
+                include $this->app->getCachedRoutesPath();
+            }
+        );
     }
 
     /**
@@ -75,7 +79,7 @@
     /**
      * Load the standard routes file for the application.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return mixed
      */
     protected function loadRoutesFrom($path)
@@ -83,12 +87,14 @@
         $router = $this->app->make(Router::class);
 
         if (is_null($this->namespace)) {
-            return require $path;
+            return include $path;
         }
 
-        $router->group(['namespace' => $this->namespace], function (Router $router) use ($path) {
-            require $path;
-        });
+        $router->group(
+            ['namespace' => $this->namespace], function (Router $router) use ($path) {
+                include $path;
+            }
+        );
     }
 
     /**
@@ -104,7 +110,7 @@
     /**
      * Pass dynamic methods onto the router instance.
      *
-     * @param  string  $method
+     * @param  string $method
      * @param  array  $parameters
      * @return mixed
      */

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/ImpersonatesUsers.php
+++ PHP_CodeSniffer
@@ -9,8 +9,8 @@
     /**
      * Set the currently logged in user for the application.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  string|null  $driver
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  string|null                                $driver
      * @return $this
      */
     public function actingAs(UserContract $user, $driver = null)
@@ -23,8 +23,8 @@
     /**
      * Set the currently logged in user for the application.
      *
-     * @param  \Illuminate\Contracts\Auth\Authenticatable  $user
-     * @param  string|null  $driver
+     * @param  \Illuminate\Contracts\Auth\Authenticatable $user
+     * @param  string|null                                $driver
      * @return void
      */
     public function be(UserContract $user, $driver = null)

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/InteractsWithAuthentication.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Assert that the user is authenticated.
      *
-     * @param string|null  $guard
+     * @param  string|null $guard
      * @return $this
      */
     public function seeIsAuthenticated($guard = null)
@@ -20,7 +20,7 @@
     /**
      * Assert that the user is not authenticated.
      *
-     * @param  string|null  $guard
+     * @param  string|null $guard
      * @return $this
      */
     public function dontSeeIsAuthenticated($guard = null)
@@ -33,7 +33,7 @@
     /**
      * Return true if the user is authenticated, false otherwise.
      *
-     * @param  string|null  $guard
+     * @param  string|null $guard
      * @return bool
      */
     protected function isAuthenticated($guard = null)
@@ -45,7 +45,7 @@
      * Assert that the user is authenticated as the given user.
      *
      * @param  $user
-     * @param  string|null  $guard
+     * @param  string|null $guard
      * @return $this
      */
     public function seeIsAuthenticatedAs($user, $guard = null)
@@ -68,8 +68,8 @@
     /**
      * Assert that the given credentials are valid.
      *
-     * @param  array  $credentials
-     * @param  string|null  $guard
+     * @param  array       $credentials
+     * @param  string|null $guard
      * @return $this
      */
     public function seeCredentials(array $credentials, $guard = null)
@@ -84,8 +84,8 @@
     /**
      * Assert that the given credentials are invalid.
      *
-     * @param  array  $credentials
-     * @param  string|null  $guard
+     * @param  array       $credentials
+     * @param  string|null $guard
      * @return $this
      */
     public function dontSeeCredentials(array $credentials, $guard = null)
@@ -100,8 +100,8 @@
     /**
      * Return true is the credentials are valid, false otherwise.
      *
-     * @param  array $credentials
-     * @param  string|null  $guard
+     * @param  array       $credentials
+     * @param  string|null $guard
      * @return bool
      */
     protected function hasCredentials(array $credentials, $guard = null)

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/InteractsWithConsole.php
+++ PHP_CodeSniffer
@@ -16,8 +16,8 @@
     /**
      * Call artisan command and return code.
      *
-     * @param string  $command
-     * @param array   $parameters
+     * @param  string $command
+     * @param  array  $parameters
      * @return int
      */
     public function artisan($command, $parameters = [])

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/InteractsWithContainer.php
+++ PHP_CodeSniffer
@@ -7,8 +7,8 @@
     /**
      * Register an instance of an object in the container.
      *
-     * @param  string  $abstract
-     * @param  object  $instance
+     * @param  string $abstract
+     * @param  object $instance
      * @return object
      */
     protected function instance($abstract, $instance)

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/InteractsWithDatabase.php
+++ PHP_CodeSniffer
@@ -7,9 +7,9 @@
     /**
      * Assert that a given where condition exists in the database.
      *
-     * @param  string  $table
+     * @param  string $table
      * @param  array  $data
-     * @param  string  $connection
+     * @param  string $connection
      * @return $this
      */
     protected function seeInDatabase($table, array $data, $connection = null)
@@ -20,9 +20,11 @@
 
         $count = $database->connection($connection)->table($table)->where($data)->count();
 
-        $this->assertGreaterThan(0, $count, sprintf(
-            'Unable to find row in database table [%s] that matched attributes [%s].', $table, json_encode($data)
-        ));
+        $this->assertGreaterThan(
+            0, $count, sprintf(
+                'Unable to find row in database table [%s] that matched attributes [%s].', $table, json_encode($data)
+            )
+        );
 
         return $this;
     }
@@ -30,9 +32,9 @@
     /**
      * Assert that a given where condition does not exist in the database.
      *
-     * @param  string  $table
+     * @param  string $table
      * @param  array  $data
-     * @param  string  $connection
+     * @param  string $connection
      * @return $this
      */
     protected function missingFromDatabase($table, array $data, $connection = null)
@@ -43,9 +45,9 @@
     /**
      * Assert that a given where condition does not exist in the database.
      *
-     * @param  string  $table
+     * @param  string $table
      * @param  array  $data
-     * @param  string  $connection
+     * @param  string $connection
      * @return $this
      */
     protected function dontSeeInDatabase($table, array $data, $connection = null)
@@ -56,9 +58,9 @@
     /**
      * Assert that a given where condition does not exist in the database.
      *
-     * @param  string  $table
+     * @param  string $table
      * @param  array  $data
-     * @param  string  $connection
+     * @param  string $connection
      * @return $this
      */
     protected function notSeeInDatabase($table, array $data, $connection = null)
@@ -69,9 +71,11 @@
 
         $count = $database->connection($connection)->table($table)->where($data)->count();
 
-        $this->assertEquals(0, $count, sprintf(
-            'Found unexpected records in database table [%s] that matched attributes [%s].', $table, json_encode($data)
-        ));
+        $this->assertEquals(
+            0, $count, sprintf(
+                'Found unexpected records in database table [%s] that matched attributes [%s].', $table, json_encode($data)
+            )
+        );
 
         return $this;
     }
@@ -79,7 +83,7 @@
     /**
      * Seed a given database connection.
      *
-     * @param  string  $class
+     * @param  string $class
      * @return void
      */
     public function seed($class = 'DatabaseSeeder')

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/InteractsWithPages.php
+++ PHP_CodeSniffer
@@ -53,7 +53,7 @@
     /**
      * Visit the given URI with a GET request.
      *
-     * @param  string  $uri
+     * @param  string $uri
      * @return $this
      */
     public function visit($uri)
@@ -64,8 +64,8 @@
     /**
      * Make a request to the application and create a Crawler instance.
      *
-     * @param  string  $method
-     * @param  string  $uri
+     * @param  string $method
+     * @param  string $uri
      * @param  array  $parameters
      * @param  array  $cookies
      * @param  array  $files
@@ -101,8 +101,8 @@
     /**
      * Make a request to the application using the given form.
      *
-     * @param  \Symfony\Component\DomCrawler\Form  $form
-     * @param  array  $uploads
+     * @param  \Symfony\Component\DomCrawler\Form $form
+     * @param  array                              $uploads
      * @return $this
      */
     protected function makeRequestUsingForm(Form $form, array $uploads = [])
@@ -117,7 +117,7 @@
     /**
      * Extract the parameters from the given form.
      *
-     * @param  \Symfony\Component\DomCrawler\Form  $form
+     * @param  \Symfony\Component\DomCrawler\Form $form
      * @return array
      */
     protected function extractParametersFromForm(Form $form)
@@ -158,7 +158,7 @@
     /**
      * Assert that the current page matches a given URI.
      *
-     * @param  string  $uri
+     * @param  string $uri
      * @return $this
      */
     protected function seePageIs($uri)
@@ -175,8 +175,8 @@
     /**
      * Assert that a given page successfully loaded.
      *
-     * @param  string  $uri
-     * @param  string|null  $message
+     * @param  string      $uri
+     * @param  string|null $message
      * @return void
      *
      * @throws \Illuminate\Foundation\Testing\HttpException
@@ -200,8 +200,8 @@
     /**
      * Narrow the test content to a specific area of the page.
      *
-     * @param  string  $element
-     * @param  \Closure  $callback
+     * @param  string   $element
+     * @param  \Closure $callback
      * @return $this
      */
     public function within($element, Closure $callback)
@@ -232,9 +232,9 @@
     /**
      * Assert the given constraint.
      *
-     * @param  \Illuminate\Foundation\Testing\Constraints\PageConstraint  $constraint
-     * @param  bool  $reverse
-     * @param  string  $message
+     * @param  \Illuminate\Foundation\Testing\Constraints\PageConstraint $constraint
+     * @param  bool                                                      $reverse
+     * @param  string                                                    $message
      * @return $this
      */
     protected function assertInPage(PageConstraint $constraint, $reverse = false, $message = '')
@@ -254,8 +254,8 @@
     /**
      * Assert that a given string is seen on the current HTML.
      *
-     * @param  string  $text
-     * @param  bool  $negate
+     * @param  string $text
+     * @param  bool   $negate
      * @return $this
      */
     public function see($text, $negate = false)
@@ -266,7 +266,7 @@
     /**
      * Assert that a given string is not seen on the current HTML.
      *
-     * @param  string  $text
+     * @param  string $text
      * @return $this
      */
     public function dontSee($text)
@@ -277,9 +277,9 @@
     /**
      * Assert that an element is present on the page.
      *
-     * @param  string  $selector
+     * @param  string $selector
      * @param  array  $attributes
-     * @param  bool  $negate
+     * @param  bool   $negate
      * @return $this
      */
     public function seeElement($selector, array $attributes = [], $negate = false)
@@ -290,7 +290,7 @@
     /**
      * Assert that an element is not present on the page.
      *
-     * @param  string  $selector
+     * @param  string $selector
      * @param  array  $attributes
      * @return $this
      */
@@ -302,8 +302,8 @@
     /**
      * Assert that a given string is seen on the current text.
      *
-     * @param  string  $text
-     * @param  bool  $negate
+     * @param  string $text
+     * @param  bool   $negate
      * @return $this
      */
     public function seeText($text, $negate = false)
@@ -314,7 +314,7 @@
     /**
      * Assert that a given string is not seen on the current text.
      *
-     * @param  string  $text
+     * @param  string $text
      * @return $this
      */
     public function dontSeeText($text)
@@ -325,9 +325,9 @@
     /**
      * Assert that a given string is seen inside an element.
      *
-     * @param  string  $element
-     * @param  string  $text
-     * @param  bool  $negate
+     * @param  string $element
+     * @param  string $text
+     * @param  bool   $negate
      * @return $this
      */
     public function seeInElement($element, $text, $negate = false)
@@ -338,8 +338,8 @@
     /**
      * Assert that a given string is not seen inside an element.
      *
-     * @param  string  $element
-     * @param  string  $text
+     * @param  string $element
+     * @param  string $text
      * @return $this
      */
     public function dontSeeInElement($element, $text)
@@ -350,9 +350,9 @@
     /**
      * Assert that a given link is seen on the page.
      *
-     * @param  string $text
+     * @param  string      $text
      * @param  string|null $url
-     * @param  bool  $negate
+     * @param  bool        $negate
      * @return $this
      */
     public function seeLink($text, $url = null, $negate = false)
@@ -363,8 +363,8 @@
     /**
      * Assert that a given link is not seen on the page.
      *
-     * @param  string  $text
-     * @param  string|null  $url
+     * @param  string      $text
+     * @param  string|null $url
      * @return $this
      */
     public function dontSeeLink($text, $url = null)
@@ -375,9 +375,9 @@
     /**
      * Assert that an input field contains the given value.
      *
-     * @param  string  $selector
-     * @param  string  $expected
-     * @param  bool  $negate
+     * @param  string $selector
+     * @param  string $expected
+     * @param  bool   $negate
      * @return $this
      */
     public function seeInField($selector, $expected, $negate = false)
@@ -388,8 +388,8 @@
     /**
      * Assert that an input field does not contain the given value.
      *
-     * @param  string  $selector
-     * @param  string  $value
+     * @param  string $selector
+     * @param  string $value
      * @return $this
      */
     public function dontSeeInField($selector, $value)
@@ -400,9 +400,9 @@
     /**
      * Assert that the expected value is selected.
      *
-     * @param  string  $selector
-     * @param  string  $value
-     * @param  bool  $negate
+     * @param  string $selector
+     * @param  string $value
+     * @param  bool   $negate
      * @return $this
      */
     public function seeIsSelected($selector, $value, $negate = false)
@@ -413,8 +413,8 @@
     /**
      * Assert that the given value is not selected.
      *
-     * @param  string  $selector
-     * @param  string  $value
+     * @param  string $selector
+     * @param  string $value
      * @return $this
      */
     public function dontSeeIsSelected($selector, $value)
@@ -425,8 +425,8 @@
     /**
      * Assert that the given checkbox is selected.
      *
-     * @param  string  $selector
-     * @param  bool  $negate
+     * @param  string $selector
+     * @param  bool   $negate
      * @return $this
      */
     public function seeIsChecked($selector, $negate = false)
@@ -437,7 +437,7 @@
     /**
      * Assert that the given checkbox is not selected.
      *
-     * @param  string  $selector
+     * @param  string $selector
      * @return $this
      */
     public function dontSeeIsChecked($selector)
@@ -448,7 +448,7 @@
     /**
      * Click a link with the given body, name, or ID attribute.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return $this
      *
      * @throws \InvalidArgumentException
@@ -475,8 +475,8 @@
     /**
      * Fill an input field with the given text.
      *
-     * @param  string  $text
-     * @param  string  $element
+     * @param  string $text
+     * @param  string $element
      * @return $this
      */
     protected function type($text, $element)
@@ -487,7 +487,7 @@
     /**
      * Check a checkbox on the page.
      *
-     * @param  string  $element
+     * @param  string $element
      * @return $this
      */
     protected function check($element)
@@ -498,7 +498,7 @@
     /**
      * Uncheck a checkbox on the page.
      *
-     * @param  string  $element
+     * @param  string $element
      * @return $this
      */
     protected function uncheck($element)
@@ -509,8 +509,8 @@
     /**
      * Select an option from a drop-down.
      *
-     * @param  string  $option
-     * @param  string  $element
+     * @param  string $option
+     * @param  string $element
      * @return $this
      */
     protected function select($option, $element)
@@ -521,8 +521,8 @@
     /**
      * Attach a file to a form field on the page.
      *
-     * @param  string  $absolutePath
-     * @param  string  $element
+     * @param  string $absolutePath
+     * @param  string $element
      * @return $this
      */
     protected function attach($absolutePath, $element)
@@ -535,7 +535,7 @@
     /**
      * Submit a form using the button with the given text value.
      *
-     * @param  string  $buttonText
+     * @param  string $buttonText
      * @return $this
      */
     protected function press($buttonText)
@@ -546,7 +546,7 @@
     /**
      * Submit a form on the page with the given input.
      *
-     * @param  string  $buttonText
+     * @param  string $buttonText
      * @param  array  $inputs
      * @param  array  $uploads
      * @return $this
@@ -561,7 +561,7 @@
     /**
      * Fill the form with the given data.
      *
-     * @param  string  $buttonText
+     * @param  string $buttonText
      * @param  array  $inputs
      * @return \Symfony\Component\DomCrawler\Form
      */
@@ -579,7 +579,7 @@
     /**
      * Get the form from the page with the given submit button text.
      *
-     * @param  string|null  $buttonText
+     * @param  string|null $buttonText
      * @return \Symfony\Component\DomCrawler\Form
      *
      * @throws \InvalidArgumentException
@@ -602,8 +602,8 @@
     /**
      * Store a form input in the local array.
      *
-     * @param  string  $element
-     * @param  string  $text
+     * @param  string $element
+     * @param  string $text
      * @return $this
      */
     protected function storeInput($element, $text)
@@ -620,7 +620,7 @@
     /**
      * Assert that a filtered Crawler returns nodes.
      *
-     * @param  string  $filter
+     * @param  string $filter
      * @return void
      *
      * @throws \InvalidArgumentException
@@ -639,8 +639,8 @@
     /**
      * Filter elements according to the given name or ID attribute.
      *
-     * @param  string  $name
-     * @param  array|string  $elements
+     * @param  string       $name
+     * @param  array|string $elements
      * @return \Symfony\Component\DomCrawler\Crawler
      */
     protected function filterByNameOrId($name, $elements = '*')
@@ -651,9 +651,11 @@
 
         $elements = is_array($elements) ? $elements : [$elements];
 
-        array_walk($elements, function (&$element) use ($name, $id) {
-            $element = "{$element}#{$id}, {$element}[name='{$name}']";
-        });
+        array_walk(
+            $elements, function (&$element) use ($name, $id) {
+                $element = "{$element}#{$id}, {$element}[name='{$name}']";
+            }
+        );
 
         return $this->crawler()->filter(implode(', ', $elements));
     }
@@ -661,8 +663,8 @@
     /**
      * Convert the given uploads to UploadedFile instances.
      *
-     * @param  \Symfony\Component\DomCrawler\Form  $form
-     * @param  array  $uploads
+     * @param  \Symfony\Component\DomCrawler\Form $form
+     * @param  array                              $uploads
      * @return array
      */
     protected function convertUploadsForTesting(Form $form, array $uploads)
@@ -671,11 +673,13 @@
 
         $names = array_keys($files);
 
-        $files = array_map(function (array $file, $name) use ($uploads) {
-            return isset($uploads[$name])
+        $files = array_map(
+            function (array $file, $name) use ($uploads) {
+                return isset($uploads[$name])
                         ? $this->getUploadedFileForTesting($file, $uploads, $name)
                         : $file;
-        }, $files, $names);
+            }, $files, $names
+        );
 
         return array_combine($names, $files);
     }
@@ -685,7 +689,7 @@
      *
      * @param  array  $file
      * @param  array  $uploads
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Http\UploadedFile
      */
     protected function getUploadedFileForTesting($file, $uploads, $name)

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/InteractsWithSession.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Set the session to the given array.
      *
-     * @param  array  $data
+     * @param  array $data
      * @return $this
      */
     public function withSession(array $data)
@@ -22,7 +22,7 @@
     /**
      * Set the session to the given array.
      *
-     * @param  array  $data
+     * @param  array $data
      * @return void
      */
     public function session(array $data)
@@ -61,8 +61,8 @@
     /**
      * Assert that the session has a given value.
      *
-     * @param  string|array  $key
-     * @param  mixed  $value
+     * @param  string|array $key
+     * @param  mixed        $value
      * @return void
      */
     public function seeInSession($key, $value = null)
@@ -75,8 +75,8 @@
     /**
      * Assert that the session has a given value.
      *
-     * @param  string|array  $key
-     * @param  mixed  $value
+     * @param  string|array $key
+     * @param  mixed        $value
      * @return void
      */
     public function assertSessionHas($key, $value = null)
@@ -95,7 +95,7 @@
     /**
      * Assert that the session has a given list of values.
      *
-     * @param  array  $bindings
+     * @param  array $bindings
      * @return void
      */
     public function assertSessionHasAll(array $bindings)
@@ -112,7 +112,7 @@
     /**
      * Assert that the session does not have a given key.
      *
-     * @param  string|array  $key
+     * @param  string|array $key
      * @return void
      */
     public function assertSessionMissing($key)
@@ -129,8 +129,8 @@
     /**
      * Assert that the session has errors bound.
      *
-     * @param  string|array  $bindings
-     * @param  mixed  $format
+     * @param  string|array $bindings
+     * @param  mixed        $format
      * @return void
      */
     public function assertSessionHasErrors($bindings = [], $format = null)

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MakesHttpRequests.php
+++ PHP_CodeSniffer
@@ -50,8 +50,8 @@
     /**
      * Visit the given URI with a JSON request.
      *
-     * @param  string  $method
-     * @param  string  $uri
+     * @param  string $method
+     * @param  string $uri
      * @param  array  $data
      * @param  array  $headers
      * @return $this
@@ -62,11 +62,13 @@
 
         $content = json_encode($data);
 
-        $headers = array_merge([
+        $headers = array_merge(
+            [
             'CONTENT_LENGTH' => mb_strlen($content, '8bit'),
             'CONTENT_TYPE' => 'application/json',
             'Accept' => 'application/json',
-        ], $headers);
+            ], $headers
+        );
 
         $this->call(
             $method, $uri, [], [], $files, $this->transformHeadersToServerVars($headers), $content
@@ -78,7 +80,7 @@
     /**
      * Extract the file uploads from the given data array.
      *
-     * @param  array  $data
+     * @param  array $data
      * @return array
      */
     protected function extractFilesFromDataArray(&$data)
@@ -99,7 +101,7 @@
     /**
      * Visit the given URI with a GET request.
      *
-     * @param  string  $uri
+     * @param  string $uri
      * @param  array  $headers
      * @return $this
      */
@@ -115,7 +117,7 @@
     /**
      * Visit the given URI with a POST request.
      *
-     * @param  string  $uri
+     * @param  string $uri
      * @param  array  $data
      * @param  array  $headers
      * @return $this
@@ -132,7 +134,7 @@
     /**
      * Visit the given URI with a PUT request.
      *
-     * @param  string  $uri
+     * @param  string $uri
      * @param  array  $data
      * @param  array  $headers
      * @return $this
@@ -149,7 +151,7 @@
     /**
      * Visit the given URI with a PATCH request.
      *
-     * @param  string  $uri
+     * @param  string $uri
      * @param  array  $data
      * @param  array  $headers
      * @return $this
@@ -166,7 +168,7 @@
     /**
      * Visit the given URI with a DELETE request.
      *
-     * @param  string  $uri
+     * @param  string $uri
      * @param  array  $data
      * @param  array  $headers
      * @return $this
@@ -185,7 +187,7 @@
      *
      * This method allows you to fully customize the entire Request object.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return $this
      */
     public function handle(Request $request)
@@ -200,7 +202,7 @@
     /**
      * Assert that the response contains JSON.
      *
-     * @param  array|null  $data
+     * @param  array|null $data
      * @return $this
      */
     protected function shouldReturnJson(array $data = null)
@@ -211,7 +213,7 @@
     /**
      * Assert that the response contains JSON.
      *
-     * @param  array|null  $data
+     * @param  array|null $data
      * @return $this|null
      */
     protected function receiveJson($data = null)
@@ -222,14 +224,16 @@
     /**
      * Assert that the response contains an exact JSON array.
      *
-     * @param  array  $data
+     * @param  array $data
      * @return $this
      */
     public function seeJsonEquals(array $data)
     {
-        $actual = json_encode(Arr::sortRecursive(
-            json_decode($this->response->getContent(), true)
-        ));
+        $actual = json_encode(
+            Arr::sortRecursive(
+                json_decode($this->response->getContent(), true)
+            )
+        );
 
         $this->assertEquals(json_encode(Arr::sortRecursive($data)), $actual);
 
@@ -239,8 +243,8 @@
     /**
      * Assert that the response contains JSON.
      *
-     * @param  array|null  $data
-     * @param  bool  $negate
+     * @param  array|null $data
+     * @param  bool       $negate
      * @return $this
      */
     public function seeJson(array $data = null, $negate = false)
@@ -265,7 +269,7 @@
     /**
      * Assert that the response doesn't contain JSON.
      *
-     * @param  array|null  $data
+     * @param  array|null $data
      * @return $this
      */
     public function dontSeeJson(array $data = null)
@@ -276,8 +280,8 @@
     /**
      * Assert that the JSON response has a given structure.
      *
-     * @param  array|null  $structure
-     * @param  array|null  $responseData
+     * @param  array|null $structure
+     * @param  array|null $responseData
      * @return $this
      */
     public function seeJsonStructure(array $structure = null, $responseData = null)
@@ -311,7 +315,7 @@
     /**
      * Assert that the response contains the given JSON.
      *
-     * @param  array  $data
+     * @param  array $data
      * @param  bool  $negate
      * @return $this
      */
@@ -319,9 +323,11 @@
     {
         $method = $negate ? 'assertFalse' : 'assertTrue';
 
-        $actual = json_encode(Arr::sortRecursive(
-            (array) $this->decodeResponseJson()
-        ));
+        $actual = json_encode(
+            Arr::sortRecursive(
+                (array) $this->decodeResponseJson()
+            )
+        );
 
         foreach (Arr::sortRecursive($data) as $key => $value) {
             $expected = $this->formatToExpectedJson($key, $value);
@@ -338,7 +344,7 @@
     /**
      * Assert that the response is a superset of the given JSON.
      *
-     * @param  array  $data
+     * @param  array $data
      * @return $this
      */
     protected function seeJsonSubset(array $data)
@@ -367,7 +373,7 @@
     /**
      * Format the given key and value into a JSON string for expectation checks.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
      * @return string
      */
@@ -389,7 +395,7 @@
     /**
      * Asserts that the status code of the response matches the given code.
      *
-     * @param  int  $status
+     * @param  int $status
      * @return $this
      */
     protected function seeStatusCode($status)
@@ -402,7 +408,7 @@
     /**
      * Asserts that the response contains the given header and equals the optional value.
      *
-     * @param  string  $headerName
+     * @param  string $headerName
      * @param  mixed  $value
      * @return $this
      */
@@ -425,7 +431,7 @@
     /**
      * Asserts that the response contains the given cookie and equals the optional value.
      *
-     * @param  string  $cookieName
+     * @param  string $cookieName
      * @param  mixed  $value
      * @return $this
      */
@@ -437,9 +443,9 @@
     /**
      * Asserts that the response contains the given cookie and equals the optional value.
      *
-     * @param  string  $cookieName
+     * @param  string $cookieName
      * @param  mixed  $value
-     * @param  bool  $encrypted
+     * @param  bool   $encrypted
      * @return $this
      */
     protected function seeCookie($cookieName, $value = null, $encrypted = true)
@@ -477,7 +483,7 @@
     /**
      * Define a set of server variables to be sent with the requests.
      *
-     * @param  array  $server
+     * @param  array $server
      * @return $this
      */
     protected function withServerVariables(array $server)
@@ -490,13 +496,13 @@
     /**
      * Call the given URI and return the Response.
      *
-     * @param  string  $method
-     * @param  string  $uri
-     * @param  array   $parameters
-     * @param  array   $cookies
-     * @param  array   $files
-     * @param  array   $server
-     * @param  string  $content
+     * @param  string $method
+     * @param  string $uri
+     * @param  array  $parameters
+     * @param  array  $cookies
+     * @param  array  $files
+     * @param  array  $server
+     * @param  string $content
      * @return \Illuminate\Http\Response
      */
     public function call($method, $uri, $parameters = [], $cookies = [], $files = [], $server = [], $content = null)
@@ -522,13 +528,13 @@
     /**
      * Call the given HTTPS URI and return the Response.
      *
-     * @param  string  $method
-     * @param  string  $uri
-     * @param  array   $parameters
-     * @param  array   $cookies
-     * @param  array   $files
-     * @param  array   $server
-     * @param  string  $content
+     * @param  string $method
+     * @param  string $uri
+     * @param  array  $parameters
+     * @param  array  $cookies
+     * @param  array  $files
+     * @param  array  $server
+     * @param  string $content
      * @return \Illuminate\Http\Response
      */
     public function callSecure($method, $uri, $parameters = [], $cookies = [], $files = [], $server = [], $content = null)
@@ -541,14 +547,14 @@
     /**
      * Call a controller action and return the Response.
      *
-     * @param  string  $method
-     * @param  string  $action
-     * @param  array   $wildcards
-     * @param  array   $parameters
-     * @param  array   $cookies
-     * @param  array   $files
-     * @param  array   $server
-     * @param  string  $content
+     * @param  string $method
+     * @param  string $action
+     * @param  array  $wildcards
+     * @param  array  $parameters
+     * @param  array  $cookies
+     * @param  array  $files
+     * @param  array  $server
+     * @param  string $content
      * @return \Illuminate\Http\Response
      */
     public function action($method, $action, $wildcards = [], $parameters = [], $cookies = [], $files = [], $server = [], $content = null)
@@ -561,14 +567,14 @@
     /**
      * Call a named route and return the Response.
      *
-     * @param  string  $method
-     * @param  string  $name
-     * @param  array   $routeParameters
-     * @param  array   $parameters
-     * @param  array   $cookies
-     * @param  array   $files
-     * @param  array   $server
-     * @param  string  $content
+     * @param  string $method
+     * @param  string $name
+     * @param  array  $routeParameters
+     * @param  array  $parameters
+     * @param  array  $cookies
+     * @param  array  $files
+     * @param  array  $server
+     * @param  string $content
      * @return \Illuminate\Http\Response
      */
     public function route($method, $name, $routeParameters = [], $parameters = [], $cookies = [], $files = [], $server = [], $content = null)
@@ -581,7 +587,7 @@
     /**
      * Turn the given URI into a fully qualified URL.
      *
-     * @param  string  $uri
+     * @param  string $uri
      * @return string
      */
     protected function prepareUrlForRequest($uri)
@@ -600,7 +606,7 @@
     /**
      * Transform headers array to array of $_SERVER vars with HTTP_* format.
      *
-     * @param  array  $headers
+     * @param  array $headers
      * @return array
      */
     protected function transformHeadersToServerVars(array $headers)
@@ -638,7 +644,7 @@
     /**
      * Assert that the client response has a given code.
      *
-     * @param  int  $code
+     * @param  int $code
      * @return $this
      */
     public function assertResponseStatus($code)
@@ -653,8 +659,8 @@
     /**
      * Assert that the response view has a given piece of bound data.
      *
-     * @param  string|array  $key
-     * @param  mixed  $value
+     * @param  string|array $key
+     * @param  mixed        $value
      * @return $this
      */
     public function assertViewHas($key, $value = null)
@@ -679,7 +685,7 @@
     /**
      * Assert that the view has a given list of bound data.
      *
-     * @param  array  $bindings
+     * @param  array $bindings
      * @return $this
      */
     public function assertViewHasAll(array $bindings)
@@ -698,7 +704,7 @@
     /**
      * Assert that the response view is missing a piece of bound data.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return $this
      */
     public function assertViewMissing($key)
@@ -715,8 +721,8 @@
     /**
      * Assert whether the client was redirected to a given URI.
      *
-     * @param  string  $uri
-     * @param  array   $with
+     * @param  string $uri
+     * @param  array  $with
      * @return $this
      */
     public function assertRedirectedTo($uri, $with = [])
@@ -733,9 +739,9 @@
     /**
      * Assert whether the client was redirected to a given route.
      *
-     * @param  string  $name
-     * @param  array   $parameters
-     * @param  array   $with
+     * @param  string $name
+     * @param  array  $parameters
+     * @param  array  $with
      * @return $this
      */
     public function assertRedirectedToRoute($name, $parameters = [], $with = [])
@@ -746,9 +752,9 @@
     /**
      * Assert whether the client was redirected to a given action.
      *
-     * @param  string  $name
-     * @param  array   $parameters
-     * @param  array   $with
+     * @param  string $name
+     * @param  array  $parameters
+     * @param  array  $with
      * @return $this
      */
     public function assertRedirectedToAction($name, $parameters = [], $with = [])

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Concerns/MocksApplicationServices.php
+++ PHP_CodeSniffer
@@ -26,7 +26,7 @@
      *
      * These events will be mocked, so that handlers will not actually be executed.
      *
-     * @param  array|string  $events
+     * @param  array|string $events
      * @return $this
      *
      * @throws \Exception
@@ -37,15 +37,17 @@
 
         $this->withoutEvents();
 
-        $this->beforeApplicationDestroyed(function () use ($events) {
-            $fired = $this->getFiredEvents($events);
-
-            if ($eventsNotFired = array_diff($events, $fired)) {
-                throw new Exception(
-                    'These expected events were not fired: ['.implode(', ', $eventsNotFired).']'
-                );
+        $this->beforeApplicationDestroyed(
+            function () use ($events) {
+                $fired = $this->getFiredEvents($events);
+
+                if ($eventsNotFired = array_diff($events, $fired)) {
+                    throw new Exception(
+                        'These expected events were not fired: ['.implode(', ', $eventsNotFired).']'
+                    );
+                }
             }
-        });
+        );
 
         return $this;
     }
@@ -55,7 +57,7 @@
      *
      * These events will be mocked, so that handlers will not actually be executed.
      *
-     * @param  array|string  $events
+     * @param  array|string $events
      * @return $this
      */
     public function doesntExpectEvents($events)
@@ -64,13 +66,15 @@
 
         $this->withoutEvents();
 
-        $this->beforeApplicationDestroyed(function () use ($events) {
-            if ($fired = $this->getFiredEvents($events)) {
-                throw new Exception(
-                    'These unexpected events were fired: ['.implode(', ', $fired).']'
-                );
+        $this->beforeApplicationDestroyed(
+            function () use ($events) {
+                if ($fired = $this->getFiredEvents($events)) {
+                    throw new Exception(
+                        'These unexpected events were fired: ['.implode(', ', $fired).']'
+                    );
+                }
             }
-        });
+        );
 
         return $this;
     }
@@ -84,9 +88,11 @@
     {
         $mock = Mockery::mock('Illuminate\Contracts\Events\Dispatcher');
 
-        $mock->shouldReceive('fire')->andReturnUsing(function ($called) {
-            $this->firedEvents[] = $called;
-        });
+        $mock->shouldReceive('fire')->andReturnUsing(
+            function ($called) {
+                $this->firedEvents[] = $called;
+            }
+        );
 
         $this->app->instance('events', $mock);
 
@@ -96,18 +102,22 @@
     /**
      * Specify a list of observers that will not run for the given operation.
      *
-     * @param  array|string  $observers
+     * @param  array|string $observers
      * @return $this
      */
     public function withoutObservers($observers)
     {
         $observers = is_array($observers) ? $observers : [$observers];
 
-        array_map(function ($observer) {
-            $this->app->bind($observer, function () use ($observer) {
-                return $this->getMockBuilder($observer)->disableOriginalConstructor()->getMock();
-            });
-        }, $observers);
+        array_map(
+            function ($observer) {
+                $this->app->bind(
+                    $observer, function () use ($observer) {
+                        return $this->getMockBuilder($observer)->disableOriginalConstructor()->getMock();
+                    }
+                );
+            }, $observers
+        );
 
         return $this;
     }
@@ -115,7 +125,7 @@
     /**
      * Filter the given events against the fired events.
      *
-     * @param  array  $events
+     * @param  array $events
      * @return array
      */
     protected function getFiredEvents(array $events)
@@ -128,7 +138,7 @@
      *
      * These jobs will be mocked, so that handlers will not actually be executed.
      *
-     * @param  array|string  $jobs
+     * @param  array|string $jobs
      * @return $this
      */
     protected function expectsJobs($jobs)
@@ -137,15 +147,17 @@
 
         $this->withoutJobs();
 
-        $this->beforeApplicationDestroyed(function () use ($jobs) {
-            $dispatched = $this->getDispatchedJobs($jobs);
-
-            if ($jobsNotDispatched = array_diff($jobs, $dispatched)) {
-                throw new Exception(
-                    'These expected jobs were not dispatched: ['.implode(', ', $jobsNotDispatched).']'
-                );
+        $this->beforeApplicationDestroyed(
+            function () use ($jobs) {
+                $dispatched = $this->getDispatchedJobs($jobs);
+
+                if ($jobsNotDispatched = array_diff($jobs, $dispatched)) {
+                    throw new Exception(
+                        'These expected jobs were not dispatched: ['.implode(', ', $jobsNotDispatched).']'
+                    );
+                }
             }
-        });
+        );
 
         return $this;
     }
@@ -155,7 +167,7 @@
      *
      * These jobs will be mocked, so that handlers will not actually be executed.
      *
-     * @param  array|string  $jobs
+     * @param  array|string $jobs
      * @return $this
      */
     protected function doesntExpectJobs($jobs)
@@ -164,13 +176,15 @@
 
         $this->withoutJobs();
 
-        $this->beforeApplicationDestroyed(function () use ($jobs) {
-            if ($dispatched = $this->getDispatchedJobs($jobs)) {
-                throw new Exception(
-                    'These unexpected jobs were dispatched: ['.implode(', ', $dispatched).']'
-                );
+        $this->beforeApplicationDestroyed(
+            function () use ($jobs) {
+                if ($dispatched = $this->getDispatchedJobs($jobs)) {
+                    throw new Exception(
+                        'These unexpected jobs were dispatched: ['.implode(', ', $dispatched).']'
+                    );
+                }
             }
-        });
+        );
 
         return $this;
     }
@@ -184,9 +198,11 @@
     {
         $mock = Mockery::mock('Illuminate\Contracts\Bus\Dispatcher');
 
-        $mock->shouldReceive('dispatch')->andReturnUsing(function ($dispatched) {
-            $this->dispatchedJobs[] = $dispatched;
-        });
+        $mock->shouldReceive('dispatch')->andReturnUsing(
+            function ($dispatched) {
+                $this->dispatchedJobs[] = $dispatched;
+            }
+        );
 
         $this->app->instance(
             'Illuminate\Contracts\Bus\Dispatcher', $mock
@@ -198,7 +214,7 @@
     /**
      * Filter the given jobs against the dispatched jobs.
      *
-     * @param  array  $jobs
+     * @param  array $jobs
      * @return array
      */
     protected function getDispatchedJobs(array $jobs)
@@ -209,29 +225,32 @@
     /**
      * Filter the given classes against an array of dispatched classes.
      *
-     * @param  array  $classes
-     * @param  array  $dispatched
+     * @param  array $classes
+     * @param  array $dispatched
      * @return array
      */
     protected function getDispatched(array $classes, array $dispatched)
     {
-        return array_filter($classes, function ($class) use ($dispatched) {
-            return $this->wasDispatched($class, $dispatched);
-        });
+        return array_filter(
+            $classes, function ($class) use ($dispatched) {
+                return $this->wasDispatched($class, $dispatched);
+            }
+        );
     }
 
     /**
      * Check if the given class exists in an array of dispatched classes.
      *
-     * @param  string  $needle
+     * @param  string $needle
      * @param  array  $haystack
      * @return bool
      */
     protected function wasDispatched($needle, array $haystack)
     {
         foreach ($haystack as $dispatched) {
-            if ((is_string($dispatched) && ($dispatched === $needle || is_subclass_of($dispatched, $needle))) ||
-                $dispatched instanceof $needle) {
+            if ((is_string($dispatched) && ($dispatched === $needle || is_subclass_of($dispatched, $needle))) 
+                || $dispatched instanceof $needle
+            ) {
                 return true;
             }
         }

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Constraints/FormFieldConstraint.php
+++ PHP_CodeSniffer
@@ -23,7 +23,7 @@
     /**
      * Create a new constraint instance.
      *
-     * @param  string  $selector
+     * @param  string $selector
      * @param  mixed  $value
      * @return void
      */
@@ -45,7 +45,7 @@
     /**
      * Get the form field.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler  $crawler
+     * @param  \Symfony\Component\DomCrawler\Crawler $crawler
      * @return \Symfony\Component\DomCrawler\Crawler
      *
      * @throws \PHPUnit_Framework_ExpectationFailedException
@@ -58,10 +58,12 @@
             return $field;
         }
 
-        $this->fail($crawler, sprintf(
-            'There is no %s with the name or ID [%s]',
-            $this->validElements(), $this->selector
-        ));
+        $this->fail(
+            $crawler, sprintf(
+                'There is no %s with the name or ID [%s]',
+                $this->validElements(), $this->selector
+            )
+        );
     }
 
     /**
@@ -75,8 +77,10 @@
 
         $id = str_replace(['[', ']'], ['\\[', '\\]'], $name);
 
-        return collect(explode(',', $this->validElements()))->map(function ($element) use ($name, $id) {
-            return "{$element}#{$id}, {$element}[name='{$name}']";
-        })->all();
+        return collect(explode(',', $this->validElements()))->map(
+            function ($element) use ($name, $id) {
+                return "{$element}#{$id}, {$element}[name='{$name}']";
+            }
+        )->all();
     }
 }

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Constraints/HasElement.php
+++ PHP_CodeSniffer
@@ -23,7 +23,7 @@
     /**
      * Create a new constraint instance.
      *
-     * @param  string  $selector
+     * @param  string $selector
      * @param  array  $attributes
      * @return void
      */
@@ -36,7 +36,7 @@
     /**
      * Check if the element is found in the given crawler.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler|string  $crawler
+     * @param  \Symfony\Component\DomCrawler\Crawler|string $crawler
      * @return bool
      */
     public function matches($crawler)
@@ -51,9 +51,11 @@
             return true;
         }
 
-        $elements = $elements->reduce(function ($element) {
-            return $this->hasAttributes($element);
-        });
+        $elements = $elements->reduce(
+            function ($element) {
+                return $this->hasAttributes($element);
+            }
+        );
 
         return $elements->count() > 0;
     }
@@ -61,7 +63,7 @@
     /**
      * Determines if the given element has the attributes.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler  $element
+     * @param  \Symfony\Component\DomCrawler\Crawler $element
      * @return bool
      */
     protected function hasAttributes(Crawler $element)

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Constraints/HasInElement.php
+++ PHP_CodeSniffer
@@ -23,8 +23,8 @@
     /**
      * Create a new constraint instance.
      *
-     * @param  string  $element
-     * @param  string  $text
+     * @param  string $element
+     * @param  string $text
      * @return void
      */
     public function __construct($element, $text)
@@ -36,7 +36,7 @@
     /**
      * Check if the source or text is found within the element in the given crawler.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler|string  $crawler
+     * @param  \Symfony\Component\DomCrawler\Crawler|string $crawler
      * @return bool
      */
     public function matches($crawler)

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Constraints/HasLink.php
+++ PHP_CodeSniffer
@@ -24,8 +24,8 @@
     /**
      * Create a new constraint instance.
      *
-     * @param  string  $text
-     * @param  string|null  $url
+     * @param  string      $text
+     * @param  string|null $url
      * @return void
      */
     public function __construct($text, $url = null)
@@ -37,7 +37,7 @@
     /**
      * Check if the link is found in the given crawler.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler|string  $crawler
+     * @param  \Symfony\Component\DomCrawler\Crawler|string $crawler
      * @return bool
      */
     public function matches($crawler)

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Constraints/HasSource.php
+++ PHP_CodeSniffer
@@ -14,7 +14,7 @@
     /**
      * Create a new constraint instance.
      *
-     * @param  string  $source
+     * @param  string $source
      * @return void
      */
     public function __construct($source)
@@ -25,7 +25,7 @@
     /**
      * Check if the source is found in the given crawler.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler|string  $crawler
+     * @param  \Symfony\Component\DomCrawler\Crawler|string $crawler
      * @return bool
      */
     protected function matches($crawler)

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Constraints/HasText.php
+++ PHP_CodeSniffer
@@ -14,7 +14,7 @@
     /**
      * Create a new constraint instance.
      *
-     * @param  string  $text
+     * @param  string $text
      * @return void
      */
     public function __construct($text)
@@ -25,7 +25,7 @@
     /**
      * Check if the plain text is found in the given crawler.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler|string  $crawler
+     * @param  \Symfony\Component\DomCrawler\Crawler|string $crawler
      * @return bool
      */
     protected function matches($crawler)

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Constraints/HasValue.php
+++ PHP_CodeSniffer
@@ -19,7 +19,7 @@
     /**
      * Check if the input contains the expected value.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler|string  $crawler
+     * @param  \Symfony\Component\DomCrawler\Crawler|string $crawler
      * @return bool
      */
     public function matches($crawler)
@@ -32,7 +32,7 @@
     /**
      * Get the value of an input or textarea.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler  $crawler
+     * @param  \Symfony\Component\DomCrawler\Crawler $crawler
      * @return string
      *
      * @throws \PHPUnit_Framework_ExpectationFailedException

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Constraints/IsChecked.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Create a new constraint instance.
      *
-     * @param  string  $selector
+     * @param  string $selector
      * @return void
      */
     public function __construct($selector)
@@ -28,7 +28,7 @@
     /**
      * Determine if the checkbox is checked.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler|string  $crawler
+     * @param  \Symfony\Component\DomCrawler\Crawler|string $crawler
      * @return bool
      */
     public function matches($crawler)

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Constraints/IsSelected.php
+++ PHP_CodeSniffer
@@ -20,7 +20,7 @@
     /**
      * Determine if the select or radio element is selected.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler|string  $crawler
+     * @param  \Symfony\Component\DomCrawler\Crawler|string $crawler
      * @return bool
      */
     protected function matches($crawler)
@@ -33,7 +33,7 @@
     /**
      * Get the selected value of a select field or radio group.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler  $crawler
+     * @param  \Symfony\Component\DomCrawler\Crawler $crawler
      * @return array
      *
      * @throws \PHPUnit_Framework_ExpectationFailedException
@@ -50,7 +50,7 @@
     /**
      * Get the selected value from a select field.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler  $select
+     * @param  \Symfony\Component\DomCrawler\Crawler $select
      * @return array
      */
     protected function getSelectedValueFromSelect(Crawler $select)
@@ -75,7 +75,7 @@
     /**
      * Get the selected value from an option element.
      *
-     * @param  \DOMElement  $option
+     * @param  \DOMElement $option
      * @return string
      */
     protected function getOptionValue(DOMElement $option)
@@ -90,7 +90,7 @@
     /**
      * Get the checked value from a radio group.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler  $radioGroup
+     * @param  \Symfony\Component\DomCrawler\Crawler $radioGroup
      * @return string|null
      */
     protected function getCheckedValueFromRadioGroup(Crawler $radioGroup)

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Constraints/PageConstraint.php
+++ PHP_CodeSniffer
@@ -12,7 +12,7 @@
     /**
      * Make sure we obtain the HTML from the crawler or the response.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler|string  $crawler
+     * @param  \Symfony\Component\DomCrawler\Crawler|string $crawler
      * @return string
      */
     protected function html($crawler)
@@ -23,7 +23,7 @@
     /**
      * Make sure we obtain the HTML from the crawler or the response.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler|string  $crawler
+     * @param  \Symfony\Component\DomCrawler\Crawler|string $crawler
      * @return string
      */
     protected function text($crawler)
@@ -34,7 +34,7 @@
     /**
      * Create a crawler instance if the given value is not already a Crawler.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler|string  $crawler
+     * @param  \Symfony\Component\DomCrawler\Crawler|string $crawler
      * @return \Symfony\Component\DomCrawler\Crawler
      */
     protected function crawler($crawler)
@@ -45,7 +45,7 @@
     /**
      * Get the escaped text pattern for the constraint.
      *
-     * @param  string  $text
+     * @param  string $text
      * @return string
      */
     protected function getEscapedPattern($text)
@@ -61,9 +61,9 @@
     /**
      * Throw an exception for the given comparison and test description.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler|string  $crawler
-     * @param  string  $description
-     * @param  \SebastianBergmann\Comparator\ComparisonFailure|null  $comparisonFailure
+     * @param  \Symfony\Component\DomCrawler\Crawler|string         $crawler
+     * @param  string                                               $description
+     * @param  \SebastianBergmann\Comparator\ComparisonFailure|null $comparisonFailure
      * @return void
      *
      * @throws \PHPUnit_Framework_ExpectationFailedException

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/Constraints/ReversePageConstraint.php
+++ PHP_CodeSniffer
@@ -14,7 +14,7 @@
     /**
      * Create a new reverse page constraint instance.
      *
-     * @param  \Illuminate\Foundation\Testing\Constraints\PageConstraint  $pageConstraint
+     * @param  \Illuminate\Foundation\Testing\Constraints\PageConstraint $pageConstraint
      * @return void
      */
     public function __construct(PageConstraint $pageConstraint)
@@ -25,7 +25,7 @@
     /**
      * Reverse the original page constraint result.
      *
-     * @param  \Symfony\Component\DomCrawler\Crawler  $crawler
+     * @param  \Symfony\Component\DomCrawler\Crawler $crawler
      * @return bool
      */
     public function matches($crawler)

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/DatabaseMigrations.php
+++ PHP_CodeSniffer
@@ -13,8 +13,10 @@
     {
         $this->artisan('migrate');
 
-        $this->beforeApplicationDestroyed(function () {
-            $this->artisan('migrate:rollback');
-        });
+        $this->beforeApplicationDestroyed(
+            function () {
+                $this->artisan('migrate:rollback');
+            }
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/DatabaseTransactions.php
+++ PHP_CodeSniffer
@@ -17,11 +17,13 @@
             $database->connection($name)->beginTransaction();
         }
 
-        $this->beforeApplicationDestroyed(function () use ($database) {
-            foreach ($this->connectionsToTransact() as $name) {
-                $database->connection($name)->rollBack();
+        $this->beforeApplicationDestroyed(
+            function () use ($database) {
+                foreach ($this->connectionsToTransact() as $name) {
+                    $database->connection($name)->rollBack();
+                }
             }
-        });
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Foundation/Testing/TestCase.php
+++ PHP_CodeSniffer
@@ -145,7 +145,7 @@
     /**
      * Register a callback to be run after the application is created.
      *
-     * @param  callable  $callback
+     * @param  callable $callback
      * @return void
      */
     protected function afterApplicationCreated(callable $callback)
@@ -160,7 +160,7 @@
     /**
      * Register a callback to be run before the application is destroyed.
      *
-     * @param  callable  $callback
+     * @param  callable $callback
      * @return void
      */
     protected function beforeApplicationDestroyed(callable $callback)

--- vendor/laravel/framework/src/Illuminate/Foundation/Validation/ValidatesRequests.php
+++ PHP_CodeSniffer
@@ -20,8 +20,8 @@
     /**
      * Run the validation routine against the given validator.
      *
-     * @param  \Illuminate\Contracts\Validation\Validator|array  $validator
-     * @param  \Illuminate\Http\Request|null  $request
+     * @param  \Illuminate\Contracts\Validation\Validator|array $validator
+     * @param  \Illuminate\Http\Request|null                    $request
      * @return void
      */
     public function validateWith($validator, Request $request = null)
@@ -40,10 +40,10 @@
     /**
      * Validate the given request with the given rules.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  array  $rules
-     * @param  array  $messages
-     * @param  array  $customAttributes
+     * @param  \Illuminate\Http\Request $request
+     * @param  array                    $rules
+     * @param  array                    $messages
+     * @param  array                    $customAttributes
      * @return void
      */
     public function validate(Request $request, array $rules, array $messages = [], array $customAttributes = [])
@@ -58,43 +58,47 @@
     /**
      * Validate the given request with the given rules.
      *
-     * @param  string  $errorBag
-     * @param  \Illuminate\Http\Request  $request
-     * @param  array  $rules
-     * @param  array  $messages
-     * @param  array  $customAttributes
+     * @param  string                   $errorBag
+     * @param  \Illuminate\Http\Request $request
+     * @param  array                    $rules
+     * @param  array                    $messages
+     * @param  array                    $customAttributes
      * @return void
      *
      * @throws \Illuminate\Foundation\Validation\ValidationException
      */
     public function validateWithBag($errorBag, Request $request, array $rules, array $messages = [], array $customAttributes = [])
     {
-        $this->withErrorBag($errorBag, function () use ($request, $rules, $messages, $customAttributes) {
-            $this->validate($request, $rules, $messages, $customAttributes);
-        });
+        $this->withErrorBag(
+            $errorBag, function () use ($request, $rules, $messages, $customAttributes) {
+                $this->validate($request, $rules, $messages, $customAttributes);
+            }
+        );
     }
 
     /**
      * Throw the failed validation exception.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Illuminate\Contracts\Validation\Validator  $validator
+     * @param  \Illuminate\Http\Request                   $request
+     * @param  \Illuminate\Contracts\Validation\Validator $validator
      * @return void
      *
      * @throws \Illuminate\Foundation\Validation\ValidationException
      */
     protected function throwValidationException(Request $request, $validator)
     {
-        throw new ValidationException($validator, $this->buildFailedValidationResponse(
-            $request, $this->formatValidationErrors($validator)
-        ));
+        throw new ValidationException(
+            $validator, $this->buildFailedValidationResponse(
+                $request, $this->formatValidationErrors($validator)
+            )
+        );
     }
 
     /**
      * Create the response for when a request fails validation.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  array  $errors
+     * @param  \Illuminate\Http\Request $request
+     * @param  array                    $errors
      * @return \Illuminate\Http\Response
      */
     protected function buildFailedValidationResponse(Request $request, array $errors)
@@ -111,7 +115,7 @@
     /**
      * Format the validation errors to be returned.
      *
-     * @param  \Illuminate\Contracts\Validation\Validator  $validator
+     * @param  \Illuminate\Contracts\Validation\Validator $validator
      * @return array
      */
     protected function formatValidationErrors(Validator $validator)
@@ -142,8 +146,8 @@
     /**
      * Execute a Closure within with a given error bag set as the default bag.
      *
-     * @param  string  $errorBag
-     * @param  callable  $callback
+     * @param  string   $errorBag
+     * @param  callable $callback
      * @return void
      */
     protected function withErrorBag($errorBag, callable $callback)

--- vendor/laravel/framework/src/Illuminate/Hashing/BcryptHasher.php
+++ PHP_CodeSniffer
@@ -17,8 +17,8 @@
     /**
      * Hash the given value.
      *
-     * @param  string  $value
-     * @param  array   $options
+     * @param  string $value
+     * @param  array  $options
      * @return string
      *
      * @throws \RuntimeException
@@ -39,9 +39,9 @@
     /**
      * Check the given plain value against a hash.
      *
-     * @param  string  $value
-     * @param  string  $hashedValue
-     * @param  array   $options
+     * @param  string $value
+     * @param  string $hashedValue
+     * @param  array  $options
      * @return bool
      */
     public function check($value, $hashedValue, array $options = [])
@@ -56,8 +56,8 @@
     /**
      * Check if the given hash has been hashed using the given options.
      *
-     * @param  string  $hashedValue
-     * @param  array   $options
+     * @param  string $hashedValue
+     * @param  array  $options
      * @return bool
      */
     public function needsRehash($hashedValue, array $options = [])
@@ -70,7 +70,7 @@
     /**
      * Set the default password work factor.
      *
-     * @param  int  $rounds
+     * @param  int $rounds
      * @return $this
      */
     public function setRounds($rounds)

--- vendor/laravel/framework/src/Illuminate/Hashing/HashServiceProvider.php
+++ PHP_CodeSniffer
@@ -20,9 +20,11 @@
      */
     public function register()
     {
-        $this->app->singleton('hash', function () {
-            return new BcryptHasher;
-        });
+        $this->app->singleton(
+            'hash', function () {
+                return new BcryptHasher;
+            }
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Http/Exception/HttpResponseException.php
+++ PHP_CodeSniffer
@@ -17,7 +17,7 @@
     /**
      * Create a new HTTP response exception instance.
      *
-     * @param  \Symfony\Component\HttpFoundation\Response  $response
+     * @param  \Symfony\Component\HttpFoundation\Response $response
      * @return void
      */
     public function __construct(Response $response)

--- vendor/laravel/framework/src/Illuminate/Http/JsonResponse.php
+++ PHP_CodeSniffer
@@ -15,10 +15,10 @@
     /**
      * Constructor.
      *
-     * @param  mixed  $data
-     * @param  int    $status
-     * @param  array  $headers
-     * @param  int    $options
+     * @param mixed $data
+     * @param int   $status
+     * @param array $headers
+     * @param int   $options
      */
     public function __construct($data = null, $status = 200, $headers = [], $options = 0)
     {
@@ -30,8 +30,8 @@
     /**
      * Get the json_decoded data from the response.
      *
-     * @param  bool  $assoc
-     * @param  int   $depth
+     * @param  bool $assoc
+     * @param  int  $depth
      * @return mixed
      */
     public function getData($assoc = false, $depth = 512)
@@ -82,7 +82,7 @@
     /**
      * Set the JSON encoding options.
      *
-     * @param  int  $options
+     * @param  int $options
      * @return mixed
      */
     public function setJsonOptions($options)

--- vendor/laravel/framework/src/Illuminate/Http/Middleware/CheckResponseForModifications.php
+++ PHP_CodeSniffer
@@ -10,8 +10,8 @@
     /**
      * Handle an incoming request.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Closure  $next
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Closure                 $next
      * @return mixed
      */
     public function handle($request, Closure $next)

--- vendor/laravel/framework/src/Illuminate/Http/Middleware/FrameGuard.php
+++ PHP_CodeSniffer
@@ -9,8 +9,8 @@
     /**
      * Handle the given request and get the response.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Closure  $next
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Closure                 $next
      * @return \Illuminate\Http\Response
      */
     public function handle($request, Closure $next)

--- vendor/laravel/framework/src/Illuminate/Http/RedirectResponse.php
+++ PHP_CodeSniffer
@@ -32,8 +32,8 @@
     /**
      * Flash a piece of data to the session.
      *
-     * @param  string|array  $key
-     * @param  mixed  $value
+     * @param  string|array $key
+     * @param  mixed        $value
      * @return \Illuminate\Http\RedirectResponse
      */
     public function with($key, $value = null)
@@ -50,7 +50,7 @@
     /**
      * Add multiple cookies to the response.
      *
-     * @param  array  $cookies
+     * @param  array $cookies
      * @return $this
      */
     public function withCookies(array $cookies)
@@ -65,7 +65,7 @@
     /**
      * Flash an array of input to the session.
      *
-     * @param  array  $input
+     * @param  array $input
      * @return $this
      */
     public function withInput(array $input = null)
@@ -80,7 +80,7 @@
     /**
      * Remove all uploaded files form the given input array.
      *
-     * @param  array  $input
+     * @param  array $input
      * @return array
      */
     protected function removeFilesFromInput(array $input)
@@ -123,8 +123,8 @@
     /**
      * Flash a container of errors to the session.
      *
-     * @param  \Illuminate\Contracts\Support\MessageProvider|array|string  $provider
-     * @param  string  $key
+     * @param  \Illuminate\Contracts\Support\MessageProvider|array|string $provider
+     * @param  string                                                     $key
      * @return $this
      */
     public function withErrors($provider, $key = 'default')
@@ -141,7 +141,7 @@
     /**
      * Parse the given errors into an appropriate value.
      *
-     * @param  \Illuminate\Contracts\Support\MessageProvider|array|string  $provider
+     * @param  \Illuminate\Contracts\Support\MessageProvider|array|string $provider
      * @return \Illuminate\Support\MessageBag
      */
     protected function parseErrors($provider)
@@ -166,7 +166,7 @@
     /**
      * Set the request instance.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return void
      */
     public function setRequest(Request $request)
@@ -187,7 +187,7 @@
     /**
      * Set the session store implementation.
      *
-     * @param  \Illuminate\Session\Store  $session
+     * @param  \Illuminate\Session\Store $session
      * @return void
      */
     public function setSession(SessionStore $session)
@@ -198,7 +198,7 @@
     /**
      * Dynamically bind flash data in the session.
      *
-     * @param  string  $method
+     * @param  string $method
      * @param  array  $parameters
      * @return $this
      *

--- vendor/laravel/framework/src/Illuminate/Http/Request.php
+++ PHP_CodeSniffer
@@ -114,7 +114,7 @@
     /**
      * Get the full URL for the request with the added query string parameters.
      *
-     * @param  array  $query
+     * @param  array $query
      * @return string
      */
     public function fullUrlWithQuery(array $query)
@@ -149,8 +149,8 @@
     /**
      * Get a segment from the URI (1 based index).
      *
-     * @param  int  $index
-     * @param  string|null  $default
+     * @param  int         $index
+     * @param  string|null $default
      * @return string|null
      */
     public function segment($index, $default = null)
@@ -167,9 +167,13 @@
     {
         $segments = explode('/', $this->path());
 
-        return array_values(array_filter($segments, function ($v) {
-            return $v != '';
-        }));
+        return array_values(
+            array_filter(
+                $segments, function ($v) {
+                    return $v != '';
+                }
+            )
+        );
     }
 
     /**
@@ -261,7 +265,7 @@
     /**
      * Determine if the request contains a given input item key.
      *
-     * @param  string|array  $key
+     * @param  string|array $key
      * @return bool
      */
     public function exists($key)
@@ -282,7 +286,7 @@
     /**
      * Determine if the request contains a non-empty value for an input item.
      *
-     * @param  string|array  $key
+     * @param  string|array $key
      * @return bool
      */
     public function has($key)
@@ -301,7 +305,7 @@
     /**
      * Determine if the given input key is an empty string for "has".
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     protected function isEmptyString($key)
@@ -326,8 +330,8 @@
     /**
      * Retrieve an input item from the request.
      *
-     * @param  string  $key
-     * @param  string|array|null  $default
+     * @param  string            $key
+     * @param  string|array|null $default
      * @return string|array
      */
     public function input($key = null, $default = null)
@@ -340,7 +344,7 @@
     /**
      * Get a subset of the items from the input data.
      *
-     * @param  array|mixed  $keys
+     * @param  array|mixed $keys
      * @return array
      */
     public function only($keys)
@@ -361,7 +365,7 @@
     /**
      * Get all of the input except for a specified array of items.
      *
-     * @param  array|mixed  $keys
+     * @param  array|mixed $keys
      * @return array
      */
     public function except($keys)
@@ -378,7 +382,7 @@
     /**
      * Intersect an array of items with the input data.
      *
-     * @param  array|mixed  $keys
+     * @param  array|mixed $keys
      * @return array
      */
     public function intersect($keys)
@@ -389,8 +393,8 @@
     /**
      * Retrieve a query string item from the request.
      *
-     * @param  string  $key
-     * @param  string|array|null  $default
+     * @param  string            $key
+     * @param  string|array|null $default
      * @return string|array
      */
     public function query($key = null, $default = null)
@@ -401,7 +405,7 @@
     /**
      * Determine if a cookie is set on the request.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function hasCookie($key)
@@ -412,8 +416,8 @@
     /**
      * Retrieve a cookie from the request.
      *
-     * @param  string  $key
-     * @param  string|array|null  $default
+     * @param  string            $key
+     * @param  string|array|null $default
      * @return string|array
      */
     public function cookie($key = null, $default = null)
@@ -438,26 +442,28 @@
     /**
      * Convert the given array of Symfony UploadedFiles to custom Laravel UploadedFiles.
      *
-     * @param  array  $files
+     * @param  array $files
      * @return array
      */
     protected function convertUploadedFiles(array $files)
     {
-        return array_map(function ($file) {
-            if (is_null($file) || (is_array($file) && empty(array_filter($file)))) {
-                return $file;
-            }
+        return array_map(
+            function ($file) {
+                if (is_null($file) || (is_array($file) && empty(array_filter($file)))) {
+                    return $file;
+                }
 
-            return is_array($file)
+                return is_array($file)
                         ? $this->convertUploadedFiles($file)
                         : UploadedFile::createFromBase($file);
-        }, $files);
+            }, $files
+        );
     }
 
     /**
      * Retrieve a file from the request.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $default
      * @return \Symfony\Component\HttpFoundation\File\UploadedFile|array|null
      */
@@ -469,7 +475,7 @@
     /**
      * Determine if the uploaded data contains a file.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function hasFile($key)
@@ -490,7 +496,7 @@
     /**
      * Check that the given file is a valid file instance.
      *
-     * @param  mixed  $file
+     * @param  mixed $file
      * @return bool
      */
     protected function isValidFile($file)
@@ -501,7 +507,7 @@
     /**
      * Determine if a header is set on the request.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function hasHeader($key)
@@ -512,8 +518,8 @@
     /**
      * Retrieve a header from the request.
      *
-     * @param  string  $key
-     * @param  string|array|null  $default
+     * @param  string            $key
+     * @param  string|array|null $default
      * @return string|array
      */
     public function header($key = null, $default = null)
@@ -524,8 +530,8 @@
     /**
      * Retrieve a server variable from the request.
      *
-     * @param  string  $key
-     * @param  string|array|null  $default
+     * @param  string            $key
+     * @param  string|array|null $default
      * @return string|array
      */
     public function server($key = null, $default = null)
@@ -536,8 +542,8 @@
     /**
      * Retrieve an old input item.
      *
-     * @param  string  $key
-     * @param  string|array|null  $default
+     * @param  string            $key
+     * @param  string|array|null $default
      * @return string|array
      */
     public function old($key = null, $default = null)
@@ -548,8 +554,8 @@
     /**
      * Flash the input for the current request to the session.
      *
-     * @param  string  $filter
-     * @param  array   $keys
+     * @param  string $filter
+     * @param  array  $keys
      * @return void
      */
     public function flash($filter = null, $keys = [])
@@ -562,7 +568,7 @@
     /**
      * Flash only some of the input to the session.
      *
-     * @param  array|mixed  $keys
+     * @param  array|mixed $keys
      * @return void
      */
     public function flashOnly($keys)
@@ -575,7 +581,7 @@
     /**
      * Flash only some of the input to the session.
      *
-     * @param  array|mixed  $keys
+     * @param  array|mixed $keys
      * @return void
      */
     public function flashExcept($keys)
@@ -598,9 +604,9 @@
     /**
      * Retrieve a parameter item from a given source.
      *
-     * @param  string  $source
-     * @param  string  $key
-     * @param  string|array|null  $default
+     * @param  string            $source
+     * @param  string            $key
+     * @param  string|array|null $default
      * @return string|array
      */
     protected function retrieveItem($source, $key, $default)
@@ -615,7 +621,7 @@
     /**
      * Merge new input into the current request's input array.
      *
-     * @param  array  $input
+     * @param  array $input
      * @return void
      */
     public function merge(array $input)
@@ -626,7 +632,7 @@
     /**
      * Replace the input for the current request.
      *
-     * @param  array  $input
+     * @param  array $input
      * @return void
      */
     public function replace(array $input)
@@ -637,8 +643,8 @@
     /**
      * Get the JSON payload for the request.
      *
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  string $key
+     * @param  mixed  $default
      * @return mixed
      */
     public function json($key = null, $default = null)
@@ -671,8 +677,8 @@
     /**
      * Determine if the given content types match.
      *
-     * @param  string  $actual
-     * @param  string  $type
+     * @param  string $actual
+     * @param  string $type
      * @return bool
      */
     public static function matchesType($actual, $type)
@@ -711,7 +717,7 @@
     /**
      * Determines whether the current requests accepts a given content type.
      *
-     * @param  string|array  $contentTypes
+     * @param  string|array $contentTypes
      * @return bool
      */
     public function accepts($contentTypes)
@@ -742,7 +748,7 @@
     /**
      * Return the most suitable content type from the given array based on content negotiation.
      *
-     * @param  string|array  $contentTypes
+     * @param  string|array $contentTypes
      * @return string|null
      */
     public function prefers($contentTypes)
@@ -793,7 +799,7 @@
     /**
      * Get the data format expected in the response.
      *
-     * @param  string  $default
+     * @param  string $default
      * @return string
      */
     public function format($default = 'html')
@@ -824,7 +830,7 @@
     /**
      * Create an Illuminate request from a Symfony instance.
      *
-     * @param  \Symfony\Component\HttpFoundation\Request  $request
+     * @param  \Symfony\Component\HttpFoundation\Request $request
      * @return \Illuminate\Http\Request
      */
     public static function createFromBase(SymfonyRequest $request)
@@ -838,7 +844,6 @@
         $request = (new static)->duplicate(
 
             $request->query->all(), $request->request->all(), $request->attributes->all(),
-
             $request->cookies->all(), $request->files->all(), $request->server->all()
         );
 
@@ -876,7 +881,7 @@
     /**
      * Get the user making the request.
      *
-     * @param  string|null  $guard
+     * @param  string|null $guard
      * @return mixed
      */
     public function user($guard = null)
@@ -938,7 +943,7 @@
     /**
      * Set the user resolver callback.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return $this
      */
     public function setUserResolver(Closure $callback)
@@ -963,7 +968,7 @@
     /**
      * Set the route resolver callback.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return $this
      */
     public function setRouteResolver(Closure $callback)
@@ -986,7 +991,7 @@
     /**
      * Determine if the given offset exists.
      *
-     * @param  string  $offset
+     * @param  string $offset
      * @return bool
      */
     public function offsetExists($offset)
@@ -997,7 +1002,7 @@
     /**
      * Get the value at the given offset.
      *
-     * @param  string  $offset
+     * @param  string $offset
      * @return mixed
      */
     public function offsetGet($offset)
@@ -1008,7 +1013,7 @@
     /**
      * Set the value at the given offset.
      *
-     * @param  string  $offset
+     * @param  string $offset
      * @param  mixed  $value
      * @return void
      */
@@ -1020,7 +1025,7 @@
     /**
      * Remove the value at the given offset.
      *
-     * @param  string  $offset
+     * @param  string $offset
      * @return void
      */
     public function offsetUnset($offset)
@@ -1031,7 +1036,7 @@
     /**
      * Check if an input element is set on the request.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function __isset($key)
@@ -1042,7 +1047,7 @@
     /**
      * Get an input element from the request.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function __get($key)

--- vendor/laravel/framework/src/Illuminate/Http/Response.php
+++ PHP_CodeSniffer
@@ -30,7 +30,7 @@
     /**
      * Set the content on the response.
      *
-     * @param  mixed  $content
+     * @param  mixed $content
      * @return $this
      */
     public function setContent($content)
@@ -59,7 +59,7 @@
     /**
      * Morph the given content into JSON.
      *
-     * @param  mixed   $content
+     * @param  mixed $content
      * @return string
      */
     protected function morphToJson($content)
@@ -74,7 +74,7 @@
     /**
      * Determine if the given content should be turned into JSON.
      *
-     * @param  mixed  $content
+     * @param  mixed $content
      * @return bool
      */
     protected function shouldBeJson($content)
@@ -98,7 +98,7 @@
     /**
      * Set the exception to attach to the response.
      *
-     * @param  \Exception  $e
+     * @param  \Exception $e
      * @return $this
      */
     public function withException(Exception $e)

--- vendor/laravel/framework/src/Illuminate/Http/ResponseTrait.php
+++ PHP_CodeSniffer
@@ -29,9 +29,9 @@
     /**
      * Set a header on the Response.
      *
-     * @param  string  $key
-     * @param  string  $value
-     * @param  bool    $replace
+     * @param  string $key
+     * @param  string $value
+     * @param  bool   $replace
      * @return $this
      */
     public function header($key, $value, $replace = true)
@@ -44,7 +44,7 @@
     /**
      * Add an array of headers to the response.
      *
-     * @param  array  $headers
+     * @param  array $headers
      * @return $this
      */
     public function withHeaders(array $headers)
@@ -59,7 +59,7 @@
     /**
      * Add a cookie to the response.
      *
-     * @param  \Symfony\Component\HttpFoundation\Cookie|mixed  $cookie
+     * @param  \Symfony\Component\HttpFoundation\Cookie|mixed $cookie
      * @return $this
      */
     public function cookie($cookie)
@@ -70,7 +70,7 @@
     /**
      * Add a cookie to the response.
      *
-     * @param  \Symfony\Component\HttpFoundation\Cookie|mixed  $cookie
+     * @param  \Symfony\Component\HttpFoundation\Cookie|mixed $cookie
      * @return $this
      */
     public function withCookie($cookie)

--- vendor/laravel/framework/src/Illuminate/Http/UploadedFile.php
+++ PHP_CodeSniffer
@@ -42,7 +42,7 @@
     /**
      * Get a filename for the file that is the MD5 hash of the contents.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     public function hashName($path = null)
@@ -57,8 +57,8 @@
     /**
      * Create a new file instance from a base instance.
      *
-     * @param  \Symfony\Component\HttpFoundation\File\UploadedFile  $file
-     * @param  bool $test
+     * @param  \Symfony\Component\HttpFoundation\File\UploadedFile $file
+     * @param  bool                                                $test
      * @return static
      */
     public static function createFromBase(SymfonyUploadedFile $file, $test = false)

--- vendor/laravel/framework/src/Illuminate/Log/Writer.php
+++ PHP_CodeSniffer
@@ -52,8 +52,8 @@
     /**
      * Create a new log writer instance.
      *
-     * @param  \Monolog\Logger  $monolog
-     * @param  \Illuminate\Contracts\Events\Dispatcher  $dispatcher
+     * @param  \Monolog\Logger                         $monolog
+     * @param  \Illuminate\Contracts\Events\Dispatcher $dispatcher
      * @return void
      */
     public function __construct(MonologLogger $monolog, Dispatcher $dispatcher = null)
@@ -68,7 +68,7 @@
     /**
      * Log an emergency message to the logs.
      *
-     * @param  string  $message
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -80,7 +80,7 @@
     /**
      * Log an alert message to the logs.
      *
-     * @param  string  $message
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -92,7 +92,7 @@
     /**
      * Log a critical message to the logs.
      *
-     * @param  string  $message
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -104,7 +104,7 @@
     /**
      * Log an error message to the logs.
      *
-     * @param  string  $message
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -116,7 +116,7 @@
     /**
      * Log a warning message to the logs.
      *
-     * @param  string  $message
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -128,7 +128,7 @@
     /**
      * Log a notice to the logs.
      *
-     * @param  string  $message
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -140,7 +140,7 @@
     /**
      * Log an informational message to the logs.
      *
-     * @param  string  $message
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -152,7 +152,7 @@
     /**
      * Log a debug message to the logs.
      *
-     * @param  string  $message
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -164,8 +164,8 @@
     /**
      * Log a message to the logs.
      *
-     * @param  string  $level
-     * @param  string  $message
+     * @param  string $level
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -177,8 +177,8 @@
     /**
      * Dynamically pass log calls into the writer.
      *
-     * @param  string  $level
-     * @param  string  $message
+     * @param  string $level
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -190,8 +190,8 @@
     /**
      * Write a message to Monolog.
      *
-     * @param  string  $level
-     * @param  string  $message
+     * @param  string $level
+     * @param  string $message
      * @param  array  $context
      * @return void
      */
@@ -205,8 +205,8 @@
     /**
      * Register a file log handler.
      *
-     * @param  string  $path
-     * @param  string  $level
+     * @param  string $path
+     * @param  string $level
      * @return void
      */
     public function useFiles($path, $level = 'debug')
@@ -219,9 +219,9 @@
     /**
      * Register a daily file log handler.
      *
-     * @param  string  $path
-     * @param  int     $days
-     * @param  string  $level
+     * @param  string $path
+     * @param  int    $days
+     * @param  string $level
      * @return void
      */
     public function useDailyFiles($path, $days = 0, $level = 'debug')
@@ -236,8 +236,8 @@
     /**
      * Register a Syslog handler.
      *
-     * @param  string  $name
-     * @param  string  $level
+     * @param  string $name
+     * @param  string $level
      * @return \Psr\Log\LoggerInterface
      */
     public function useSyslog($name = 'laravel', $level = 'debug')
@@ -248,8 +248,8 @@
     /**
      * Register an error_log handler.
      *
-     * @param  string  $level
-     * @param  int  $messageType
+     * @param  string $level
+     * @param  int    $messageType
      * @return void
      */
     public function useErrorLog($level = 'debug', $messageType = ErrorLogHandler::OPERATING_SYSTEM)
@@ -264,7 +264,7 @@
     /**
      * Register a new callback handler for when a log event is triggered.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return void
      *
      * @throws \RuntimeException
@@ -281,9 +281,9 @@
     /**
      * Fires a log event.
      *
-     * @param  string  $level
-     * @param  string  $message
-     * @param  array   $context
+     * @param  string $level
+     * @param  string $message
+     * @param  array  $context
      * @return void
      */
     protected function fireLogEvent($level, $message, array $context = [])
@@ -299,7 +299,7 @@
     /**
      * Format the parameters for the logger.
      *
-     * @param  mixed  $message
+     * @param  mixed $message
      * @return mixed
      */
     protected function formatMessage($message)
@@ -318,7 +318,7 @@
     /**
      * Parse the string level into a Monolog constant.
      *
-     * @param  string  $level
+     * @param  string $level
      * @return int
      *
      * @throws \InvalidArgumentException
@@ -365,7 +365,7 @@
     /**
      * Set the event dispatcher instance.
      *
-     * @param  \Illuminate\Contracts\Events\Dispatcher  $dispatcher
+     * @param  \Illuminate\Contracts\Events\Dispatcher $dispatcher
      * @return void
      */
     public function setEventDispatcher(Dispatcher $dispatcher)

--- vendor/laravel/framework/src/Illuminate/Mail/Events/MessageSending.php
+++ PHP_CodeSniffer
@@ -14,7 +14,7 @@
     /**
      * Create a new event instance.
      *
-     * @param  \Swift_Message  $message
+     * @param  \Swift_Message $message
      * @return void
      */
     public function __construct($message)

--- vendor/laravel/framework/src/Illuminate/Mail/Mailer.php
+++ PHP_CodeSniffer
@@ -77,9 +77,9 @@
     /**
      * Create a new Mailer instance.
      *
-     * @param  \Illuminate\Contracts\View\Factory  $views
-     * @param  \Swift_Mailer  $swift
-     * @param  \Illuminate\Contracts\Events\Dispatcher|null  $events
+     * @param  \Illuminate\Contracts\View\Factory           $views
+     * @param  \Swift_Mailer                                $swift
+     * @param  \Illuminate\Contracts\Events\Dispatcher|null $events
      * @return void
      */
     public function __construct(Factory $views, Swift_Mailer $swift, Dispatcher $events = null)
@@ -92,8 +92,8 @@
     /**
      * Set the global from address and name.
      *
-     * @param  string  $address
-     * @param  string|null  $name
+     * @param  string      $address
+     * @param  string|null $name
      * @return void
      */
     public function alwaysFrom($address, $name = null)
@@ -104,8 +104,8 @@
     /**
      * Set the global to address and name.
      *
-     * @param  string  $address
-     * @param  string|null  $name
+     * @param  string      $address
+     * @param  string|null $name
      * @return void
      */
     public function alwaysTo($address, $name = null)
@@ -116,7 +116,7 @@
     /**
      * Send a new message when only a raw text part.
      *
-     * @param  string  $text
+     * @param  string $text
      * @param  mixed  $callback
      * @return void
      */
@@ -128,7 +128,7 @@
     /**
      * Send a new message when only a plain part.
      *
-     * @param  string  $view
+     * @param  string $view
      * @param  array  $data
      * @param  mixed  $callback
      * @return void
@@ -141,9 +141,9 @@
     /**
      * Send a new message using a view.
      *
-     * @param  string|array  $view
-     * @param  array  $data
-     * @param  \Closure|string  $callback
+     * @param  string|array    $view
+     * @param  array           $data
+     * @param  \Closure|string $callback
      * @return void
      */
     public function send($view, array $data, $callback)
@@ -174,10 +174,10 @@
     /**
      * Queue a new e-mail message for sending.
      *
-     * @param  string|array  $view
-     * @param  array  $data
-     * @param  \Closure|string  $callback
-     * @param  string|null  $queue
+     * @param  string|array    $view
+     * @param  array           $data
+     * @param  \Closure|string $callback
+     * @param  string|null     $queue
      * @return mixed
      */
     public function queue($view, array $data, $callback, $queue = null)
@@ -190,10 +190,10 @@
     /**
      * Queue a new e-mail message for sending on the given queue.
      *
-     * @param  string  $queue
-     * @param  string|array  $view
-     * @param  array  $data
-     * @param  \Closure|string  $callback
+     * @param  string          $queue
+     * @param  string|array    $view
+     * @param  array           $data
+     * @param  \Closure|string $callback
      * @return mixed
      */
     public function onQueue($queue, $view, array $data, $callback)
@@ -206,10 +206,10 @@
      *
      * This method didn't match rest of framework's "onQueue" phrasing. Added "onQueue".
      *
-     * @param  string  $queue
-     * @param  string|array  $view
-     * @param  array  $data
-     * @param  \Closure|string  $callback
+     * @param  string          $queue
+     * @param  string|array    $view
+     * @param  array           $data
+     * @param  \Closure|string $callback
      * @return mixed
      */
     public function queueOn($queue, $view, array $data, $callback)
@@ -220,11 +220,11 @@
     /**
      * Queue a new e-mail message for sending after (n) seconds.
      *
-     * @param  int  $delay
-     * @param  string|array  $view
-     * @param  array  $data
-     * @param  \Closure|string  $callback
-     * @param  string|null  $queue
+     * @param  int             $delay
+     * @param  string|array    $view
+     * @param  array           $data
+     * @param  \Closure|string $callback
+     * @param  string|null     $queue
      * @return mixed
      */
     public function later($delay, $view, array $data, $callback, $queue = null)
@@ -237,11 +237,11 @@
     /**
      * Queue a new e-mail message for sending after (n) seconds on the given queue.
      *
-     * @param  string  $queue
-     * @param  int  $delay
-     * @param  string|array  $view
-     * @param  array  $data
-     * @param  \Closure|string  $callback
+     * @param  string          $queue
+     * @param  int             $delay
+     * @param  string|array    $view
+     * @param  array           $data
+     * @param  \Closure|string $callback
      * @return mixed
      */
     public function laterOn($queue, $delay, $view, array $data, $callback)
@@ -252,7 +252,7 @@
     /**
      * Build the callable for a queued e-mail job.
      *
-     * @param  \Closure|string  $callback
+     * @param  \Closure|string $callback
      * @return string
      */
     protected function buildQueueCallable($callback)
@@ -267,8 +267,8 @@
     /**
      * Handle a queued e-mail message job.
      *
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  array  $data
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  array                           $data
      * @return void
      */
     public function handleQueuedMessage($job, $data)
@@ -281,7 +281,7 @@
     /**
      * Get the true callable for a queued e-mail message.
      *
-     * @param  array  $data
+     * @param  array $data
      * @return \Closure|string
      */
     protected function getQueuedCallable(array $data)
@@ -308,11 +308,11 @@
     /**
      * Add the content to a given message.
      *
-     * @param  \Illuminate\Mail\Message  $message
-     * @param  string  $view
-     * @param  string  $plain
-     * @param  string  $raw
-     * @param  array  $data
+     * @param  \Illuminate\Mail\Message $message
+     * @param  string                   $view
+     * @param  string                   $plain
+     * @param  string                   $raw
+     * @param  array                    $data
      * @return void
      */
     protected function addContent($message, $view, $plain, $raw, $data)
@@ -337,7 +337,7 @@
     /**
      * Parse the given view name or array.
      *
-     * @param  string|array  $view
+     * @param  string|array $view
      * @return array
      *
      * @throws \InvalidArgumentException
@@ -372,7 +372,7 @@
     /**
      * Send a Swift Message instance.
      *
-     * @param  \Swift_Message  $message
+     * @param  \Swift_Message $message
      * @return void
      */
     protected function sendSwiftMessage($message)
@@ -391,8 +391,8 @@
     /**
      * Call the provided message builder.
      *
-     * @param  \Closure|string  $callback
-     * @param  \Illuminate\Mail\Message  $message
+     * @param  \Closure|string          $callback
+     * @param  \Illuminate\Mail\Message $message
      * @return mixed
      *
      * @throws \InvalidArgumentException
@@ -432,7 +432,7 @@
     /**
      * Render the given view.
      *
-     * @param  string  $view
+     * @param  string $view
      * @param  array  $data
      * @return string
      */
@@ -474,7 +474,7 @@
     /**
      * Set the Swift Mailer instance.
      *
-     * @param  \Swift_Mailer  $swift
+     * @param  \Swift_Mailer $swift
      * @return void
      */
     public function setSwiftMailer($swift)
@@ -485,7 +485,7 @@
     /**
      * Set the queue manager instance.
      *
-     * @param  \Illuminate\Contracts\Queue\Queue  $queue
+     * @param  \Illuminate\Contracts\Queue\Queue $queue
      * @return $this
      */
     public function setQueue(QueueContract $queue)
@@ -498,7 +498,7 @@
     /**
      * Set the IoC container instance.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
+     * @param  \Illuminate\Contracts\Container\Container $container
      * @return void
      */
     public function setContainer(Container $container)

--- vendor/laravel/framework/src/Illuminate/Mail/MailServiceProvider.php
+++ PHP_CodeSniffer
@@ -23,40 +23,42 @@
     {
         $this->registerSwiftMailer();
 
-        $this->app->singleton('mailer', function ($app) {
-            // Once we have create the mailer instance, we will set a container instance
-            // on the mailer. This allows us to resolve mailer classes via containers
-            // for maximum testability on said classes instead of passing Closures.
-            $mailer = new Mailer(
-                $app['view'], $app['swift.mailer'], $app['events']
-            );
-
-            $this->setMailerDependencies($mailer, $app);
-
-            // If a "from" address is set, we will set it on the mailer so that all mail
-            // messages sent by the applications will utilize the same "from" address
-            // on each one, which makes the developer's life a lot more convenient.
-            $from = $app['config']['mail.from'];
+        $this->app->singleton(
+            'mailer', function ($app) {
+                // Once we have create the mailer instance, we will set a container instance
+                // on the mailer. This allows us to resolve mailer classes via containers
+                // for maximum testability on said classes instead of passing Closures.
+                $mailer = new Mailer(
+                    $app['view'], $app['swift.mailer'], $app['events']
+                );
+
+                $this->setMailerDependencies($mailer, $app);
+
+                // If a "from" address is set, we will set it on the mailer so that all mail
+                // messages sent by the applications will utilize the same "from" address
+                // on each one, which makes the developer's life a lot more convenient.
+                $from = $app['config']['mail.from'];
+
+                if (is_array($from) && isset($from['address'])) {
+                    $mailer->alwaysFrom($from['address'], $from['name']);
+                }
+
+                $to = $app['config']['mail.to'];
+
+                if (is_array($to) && isset($to['address'])) {
+                    $mailer->alwaysTo($to['address'], $to['name']);
+                }
 
-            if (is_array($from) && isset($from['address'])) {
-                $mailer->alwaysFrom($from['address'], $from['name']);
+                return $mailer;
             }
-
-            $to = $app['config']['mail.to'];
-
-            if (is_array($to) && isset($to['address'])) {
-                $mailer->alwaysTo($to['address'], $to['name']);
-            }
-
-            return $mailer;
-        });
+        );
     }
 
     /**
      * Set a few dependencies on the mailer instance.
      *
-     * @param  \Illuminate\Mail\Mailer  $mailer
-     * @param  \Illuminate\Foundation\Application  $app
+     * @param  \Illuminate\Mail\Mailer            $mailer
+     * @param  \Illuminate\Foundation\Application $app
      * @return void
      */
     protected function setMailerDependencies($mailer, $app)
@@ -80,9 +82,11 @@
         // Once we have the transporter registered, we will register the actual Swift
         // mailer instance, passing in the transport instances, which allows us to
         // override this transporter instances during app start-up if necessary.
-        $this->app['swift.mailer'] = $this->app->share(function ($app) {
-            return new Swift_Mailer($app['swift.transport']->driver());
-        });
+        $this->app['swift.mailer'] = $this->app->share(
+            function ($app) {
+                return new Swift_Mailer($app['swift.transport']->driver());
+            }
+        );
     }
 
     /**
@@ -92,9 +96,11 @@
      */
     protected function registerSwiftTransport()
     {
-        $this->app['swift.transport'] = $this->app->share(function ($app) {
-            return new TransportManager($app);
-        });
+        $this->app['swift.transport'] = $this->app->share(
+            function ($app) {
+                return new TransportManager($app);
+            }
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Mail/Message.php
+++ PHP_CodeSniffer
@@ -17,7 +17,7 @@
     /**
      * Create a new message instance.
      *
-     * @param  \Swift_Message  $swift
+     * @param  \Swift_Message $swift
      * @return void
      */
     public function __construct($swift)
@@ -28,7 +28,7 @@
     /**
      * Add a "from" address to the message.
      *
-     * @param  string|array  $address
+     * @param  string|array $address
      * @param  string|null  $name
      * @return $this
      */
@@ -42,7 +42,7 @@
     /**
      * Set the "sender" of the message.
      *
-     * @param  string|array  $address
+     * @param  string|array $address
      * @param  string|null  $name
      * @return $this
      */
@@ -56,7 +56,7 @@
     /**
      * Set the "return path" of the message.
      *
-     * @param  string  $address
+     * @param  string $address
      * @return $this
      */
     public function returnPath($address)
@@ -69,9 +69,9 @@
     /**
      * Add a recipient to the message.
      *
-     * @param  string|array  $address
+     * @param  string|array $address
      * @param  string|null  $name
-     * @param  bool  $override
+     * @param  bool         $override
      * @return $this
      */
     public function to($address, $name = null, $override = false)
@@ -88,7 +88,7 @@
     /**
      * Add a carbon copy to the message.
      *
-     * @param  string|array  $address
+     * @param  string|array $address
      * @param  string|null  $name
      * @return $this
      */
@@ -100,7 +100,7 @@
     /**
      * Add a blind carbon copy to the message.
      *
-     * @param  string|array  $address
+     * @param  string|array $address
      * @param  string|null  $name
      * @return $this
      */
@@ -112,7 +112,7 @@
     /**
      * Add a reply to address to the message.
      *
-     * @param  string|array  $address
+     * @param  string|array $address
      * @param  string|null  $name
      * @return $this
      */
@@ -124,9 +124,9 @@
     /**
      * Add a recipient to the message.
      *
-     * @param  string|array  $address
-     * @param  string  $name
-     * @param  string  $type
+     * @param  string|array $address
+     * @param  string       $name
+     * @param  string       $type
      * @return $this
      */
     protected function addAddresses($address, $name, $type)
@@ -143,7 +143,7 @@
     /**
      * Set the subject of the message.
      *
-     * @param  string  $subject
+     * @param  string $subject
      * @return $this
      */
     public function subject($subject)
@@ -156,7 +156,7 @@
     /**
      * Set the message priority level.
      *
-     * @param  int  $level
+     * @param  int $level
      * @return $this
      */
     public function priority($level)
@@ -169,7 +169,7 @@
     /**
      * Attach a file to the message.
      *
-     * @param  string  $file
+     * @param  string $file
      * @param  array  $options
      * @return $this
      */
@@ -183,7 +183,7 @@
     /**
      * Create a Swift Attachment instance.
      *
-     * @param  string  $file
+     * @param  string $file
      * @return \Swift_Attachment
      */
     protected function createAttachmentFromPath($file)
@@ -194,8 +194,8 @@
     /**
      * Attach in-memory data as an attachment.
      *
-     * @param  string  $data
-     * @param  string  $name
+     * @param  string $data
+     * @param  string $name
      * @param  array  $options
      * @return $this
      */
@@ -209,8 +209,8 @@
     /**
      * Create a Swift Attachment instance from data.
      *
-     * @param  string  $data
-     * @param  string  $name
+     * @param  string $data
+     * @param  string $name
      * @return \Swift_Attachment
      */
     protected function createAttachmentFromData($data, $name)
@@ -221,7 +221,7 @@
     /**
      * Embed a file in the message and get the CID.
      *
-     * @param  string  $file
+     * @param  string $file
      * @return string
      */
     public function embed($file)
@@ -232,9 +232,9 @@
     /**
      * Embed in-memory data in the message and get the CID.
      *
-     * @param  string  $data
-     * @param  string  $name
-     * @param  string|null  $contentType
+     * @param  string      $data
+     * @param  string      $name
+     * @param  string|null $contentType
      * @return string
      */
     public function embedData($data, $name, $contentType = null)
@@ -247,8 +247,8 @@
     /**
      * Prepare and attach the given attachment.
      *
-     * @param  \Swift_Attachment  $attachment
-     * @param  array  $options
+     * @param  \Swift_Attachment $attachment
+     * @param  array             $options
      * @return $this
      */
     protected function prepAttachment($attachment, $options = [])
@@ -285,7 +285,7 @@
     /**
      * Dynamically pass missing methods to the Swift instance.
      *
-     * @param  string  $method
+     * @param  string $method
      * @param  array  $parameters
      * @return mixed
      */

--- vendor/laravel/framework/src/Illuminate/Mail/Transport/LogTransport.php
+++ PHP_CodeSniffer
@@ -18,7 +18,7 @@
     /**
      * Create a new log transport instance.
      *
-     * @param  \Psr\Log\LoggerInterface  $logger
+     * @param  \Psr\Log\LoggerInterface $logger
      * @return void
      */
     public function __construct(LoggerInterface $logger)

--- vendor/laravel/framework/src/Illuminate/Mail/Transport/MailgunTransport.php
+++ PHP_CodeSniffer
@@ -39,9 +39,9 @@
     /**
      * Create a new Mailgun transport instance.
      *
-     * @param  \GuzzleHttp\ClientInterface  $client
-     * @param  string  $key
-     * @param  string  $domain
+     * @param  \GuzzleHttp\ClientInterface $client
+     * @param  string                      $key
+     * @param  string                      $domain
      * @return void
      */
     public function __construct(ClientInterface $client, $key, $domain)
@@ -82,7 +82,7 @@
     /**
      * Get the "to" payload field for the API request.
      *
-     * @param  \Swift_Mime_Message  $message
+     * @param  \Swift_Mime_Message $message
      * @return array
      */
     protected function getTo(Swift_Mime_Message $message)
@@ -113,7 +113,7 @@
     /**
      * Set the API key being used by the transport.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return string
      */
     public function setKey($key)
@@ -134,7 +134,7 @@
     /**
      * Set the domain being used by the transport.
      *
-     * @param  string  $domain
+     * @param  string $domain
      * @return void
      */
     public function setDomain($domain)

--- vendor/laravel/framework/src/Illuminate/Mail/Transport/MandrillTransport.php
+++ PHP_CodeSniffer
@@ -24,8 +24,8 @@
     /**
      * Create a new Mandrill transport instance.
      *
-     * @param  \GuzzleHttp\ClientInterface  $client
-     * @param  string  $key
+     * @param  \GuzzleHttp\ClientInterface $client
+     * @param  string                      $key
      * @return void
      */
     public function __construct(ClientInterface $client, $key)
@@ -97,7 +97,7 @@
     /**
      * Set the API key being used by the transport.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return string
      */
     public function setKey($key)

--- vendor/laravel/framework/src/Illuminate/Mail/Transport/SesTransport.php
+++ PHP_CodeSniffer
@@ -17,7 +17,7 @@
     /**
      * Create a new SES transport instance.
      *
-     * @param  \Aws\Ses\SesClient  $ses
+     * @param  \Aws\Ses\SesClient $ses
      * @return void
      */
     public function __construct(SesClient $ses)
@@ -32,11 +32,13 @@
     {
         $this->beforeSendPerformed($message);
 
-        return $this->ses->sendRawEmail([
+        return $this->ses->sendRawEmail(
+            [
             'Source' => key($message->getSender() ?: $message->getFrom()),
             'RawMessage' => [
                 'Data' => $message->toString(),
             ],
-        ]);
+            ]
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Mail/Transport/SparkPostTransport.php
+++ PHP_CodeSniffer
@@ -31,9 +31,9 @@
     /**
      * Create a new SparkPost transport instance.
      *
-     * @param  \GuzzleHttp\ClientInterface  $client
-     * @param  string  $key
-     * @param  array  $options
+     * @param  \GuzzleHttp\ClientInterface $client
+     * @param  string                      $key
+     * @param  array                       $options
      * @return void
      */
     public function __construct(ClientInterface $client, $key, $options = [])
@@ -97,9 +97,11 @@
             $to = array_merge($to, array_keys($message->getBcc()));
         }
 
-        $recipients = array_map(function ($address) {
-            return compact('address');
-        }, $to);
+        $recipients = array_map(
+            function ($address) {
+                return compact('address');
+            }, $to
+        );
 
         return $recipients;
     }
@@ -117,7 +119,7 @@
     /**
      * Set the API key being used by the transport.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return string
      */
     public function setKey($key)

--- vendor/laravel/framework/src/Illuminate/Mail/Transport/Transport.php
+++ PHP_CodeSniffer
@@ -43,7 +43,7 @@
     /**
      * Register a plug-in with the transport.
      *
-     * @param  \Swift_Events_EventListener  $plugin
+     * @param  \Swift_Events_EventListener $plugin
      * @return void
      */
     public function registerPlugin(Swift_Events_EventListener $plugin)
@@ -54,7 +54,7 @@
     /**
      * Iterate through registered plugins and execute plugins' methods.
      *
-     * @param  \Swift_Mime_Message  $message
+     * @param  \Swift_Mime_Message $message
      * @return void
      */
     protected function beforeSendPerformed(Swift_Mime_Message $message)

--- vendor/laravel/framework/src/Illuminate/Mail/TransportManager.php
+++ PHP_CodeSniffer
@@ -153,7 +153,7 @@
     /**
      * Get a fresh Guzzle HTTP client instance.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return HttpClient
      */
     protected function getHttpClient($config)
@@ -176,7 +176,7 @@
     /**
      * Set the default mail driver name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function setDefaultDriver($name)

--- vendor/laravel/framework/src/Illuminate/Pagination/AbstractPaginator.php
+++ PHP_CodeSniffer
@@ -83,7 +83,7 @@
     /**
      * Determine if the given value is a valid page number.
      *
-     * @param  int  $page
+     * @param  int $page
      * @return bool
      */
     protected function isValidPageNumber($page)
@@ -94,8 +94,8 @@
     /**
      * Create a range of pagination URLs.
      *
-     * @param  int  $start
-     * @param  int  $end
+     * @param  int $start
+     * @param  int $end
      * @return string
      */
     public function getUrlRange($start, $end)
@@ -112,7 +112,7 @@
     /**
      * Get a URL for a given page number.
      *
-     * @param  int  $page
+     * @param  int $page
      * @return string
      */
     public function url($page)
@@ -151,7 +151,7 @@
     /**
      * Get / set the URL fragment to be appended to URLs.
      *
-     * @param  string|null  $fragment
+     * @param  string|null $fragment
      * @return $this|string|null
      */
     public function fragment($fragment = null)
@@ -168,7 +168,7 @@
     /**
      * Add a set of query string values to the paginator.
      *
-     * @param  array|string  $key
+     * @param  array|string $key
      * @param  string|null  $value
      * @return $this
      */
@@ -184,7 +184,7 @@
     /**
      * Add an array of query string values.
      *
-     * @param  array  $keys
+     * @param  array $keys
      * @return $this
      */
     protected function appendArray(array $keys)
@@ -199,8 +199,8 @@
     /**
      * Add a query string value to the paginator.
      *
-     * @param  string  $key
-     * @param  string  $value
+     * @param  string $key
+     * @param  string $value
      * @return $this
      */
     public function addQuery($key, $value)
@@ -293,7 +293,7 @@
     /**
      * Resolve the current request path or return the default value.
      *
-     * @param  string  $default
+     * @param  string $default
      * @return string
      */
     public static function resolveCurrentPath($default = '/')
@@ -308,7 +308,7 @@
     /**
      * Set the current request path resolver callback.
      *
-     * @param  \Closure  $resolver
+     * @param  \Closure $resolver
      * @return void
      */
     public static function currentPathResolver(Closure $resolver)
@@ -319,8 +319,8 @@
     /**
      * Resolve the current page or return the default value.
      *
-     * @param  string  $pageName
-     * @param  int  $default
+     * @param  string $pageName
+     * @param  int    $default
      * @return int
      */
     public static function resolveCurrentPage($pageName = 'page', $default = 1)
@@ -335,7 +335,7 @@
     /**
      * Set the current page resolver callback.
      *
-     * @param  \Closure  $resolver
+     * @param  \Closure $resolver
      * @return void
      */
     public static function currentPageResolver(Closure $resolver)
@@ -346,7 +346,7 @@
     /**
      * Set the default Presenter resolver.
      *
-     * @param  \Closure  $resolver
+     * @param  \Closure $resolver
      * @return void
      */
     public static function presenter(Closure $resolver)
@@ -367,7 +367,7 @@
     /**
      * Set the query string variable used to store the page.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return $this
      */
     public function setPageName($name)
@@ -380,7 +380,7 @@
     /**
      * Set the base path to assign to all URLs.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return $this
      */
     public function setPath($path)
@@ -433,7 +433,7 @@
     /**
      * Set the paginator's underlying collection.
      *
-     * @param  \Illuminate\Support\Collection  $collection
+     * @param  \Illuminate\Support\Collection $collection
      * @return $this
      */
     public function setCollection(Collection $collection)
@@ -446,7 +446,7 @@
     /**
      * Determine if the given item exists.
      *
-     * @param  mixed  $key
+     * @param  mixed $key
      * @return bool
      */
     public function offsetExists($key)
@@ -457,7 +457,7 @@
     /**
      * Get the item at the given offset.
      *
-     * @param  mixed  $key
+     * @param  mixed $key
      * @return mixed
      */
     public function offsetGet($key)
@@ -468,8 +468,8 @@
     /**
      * Set the item at the given offset.
      *
-     * @param  mixed  $key
-     * @param  mixed  $value
+     * @param  mixed $key
+     * @param  mixed $value
      * @return void
      */
     public function offsetSet($key, $value)
@@ -480,7 +480,7 @@
     /**
      * Unset the item at the given key.
      *
-     * @param  mixed  $key
+     * @param  mixed $key
      * @return void
      */
     public function offsetUnset($key)
@@ -501,7 +501,7 @@
     /**
      * Make dynamic calls into the collection.
      *
-     * @param  string  $method
+     * @param  string $method
      * @param  array  $parameters
      * @return mixed
      */

--- vendor/laravel/framework/src/Illuminate/Pagination/BootstrapFourNextPreviousButtonRendererTrait.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Get the previous page pagination element.
      *
-     * @param  string  $text
+     * @param  string $text
      * @return string
      */
     public function getPreviousButton($text = '&laquo;')
@@ -29,7 +29,7 @@
     /**
      * Get the next page pagination element.
      *
-     * @param  string  $text
+     * @param  string $text
      * @return string
      */
     public function getNextButton($text = '&raquo;')

--- vendor/laravel/framework/src/Illuminate/Pagination/BootstrapFourPresenter.php
+++ PHP_CodeSniffer
@@ -27,8 +27,8 @@
     /**
      * Create a new Bootstrap presenter instance.
      *
-     * @param  \Illuminate\Contracts\Pagination\Paginator  $paginator
-     * @param  \Illuminate\Pagination\UrlWindow|null  $window
+     * @param  \Illuminate\Contracts\Pagination\Paginator $paginator
+     * @param  \Illuminate\Pagination\UrlWindow|null      $window
      * @return void
      */
     public function __construct(PaginatorContract $paginator, UrlWindow $window = null)
@@ -55,12 +55,14 @@
     public function render()
     {
         if ($this->hasPages()) {
-            return new HtmlString(sprintf(
-                '<ul class="pagination">%s %s %s</ul>',
-                $this->getPreviousButton(),
-                $this->getLinks(),
-                $this->getNextButton()
-            ));
+            return new HtmlString(
+                sprintf(
+                    '<ul class="pagination">%s %s %s</ul>',
+                    $this->getPreviousButton(),
+                    $this->getLinks(),
+                    $this->getNextButton()
+                )
+            );
         }
 
         return '';
@@ -69,9 +71,9 @@
     /**
      * Get HTML wrapper for an available page link.
      *
-     * @param  string  $url
-     * @param  int  $page
-     * @param  string|null  $rel
+     * @param  string      $url
+     * @param  int         $page
+     * @param  string|null $rel
      * @return string
      */
     protected function getAvailablePageWrapper($url, $page, $rel = null)
@@ -84,7 +86,7 @@
     /**
      * Get HTML wrapper for disabled text.
      *
-     * @param  string  $text
+     * @param  string $text
      * @return string
      */
     protected function getDisabledTextWrapper($text)
@@ -95,7 +97,7 @@
     /**
      * Get HTML wrapper for active text.
      *
-     * @param  string  $text
+     * @param  string $text
      * @return string
      */
     protected function getActivePageWrapper($text)

--- vendor/laravel/framework/src/Illuminate/Pagination/BootstrapThreeNextPreviousButtonRendererTrait.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Get the previous page pagination element.
      *
-     * @param  string  $text
+     * @param  string $text
      * @return string
      */
     public function getPreviousButton($text = '&laquo;')
@@ -29,7 +29,7 @@
     /**
      * Get the next page pagination element.
      *
-     * @param  string  $text
+     * @param  string $text
      * @return string
      */
     public function getNextButton($text = '&raquo;')

--- vendor/laravel/framework/src/Illuminate/Pagination/BootstrapThreePresenter.php
+++ PHP_CodeSniffer
@@ -27,8 +27,8 @@
     /**
      * Create a new Bootstrap presenter instance.
      *
-     * @param  \Illuminate\Contracts\Pagination\Paginator  $paginator
-     * @param  \Illuminate\Pagination\UrlWindow|null  $window
+     * @param  \Illuminate\Contracts\Pagination\Paginator $paginator
+     * @param  \Illuminate\Pagination\UrlWindow|null      $window
      * @return void
      */
     public function __construct(PaginatorContract $paginator, UrlWindow $window = null)
@@ -55,12 +55,14 @@
     public function render()
     {
         if ($this->hasPages()) {
-            return new HtmlString(sprintf(
-                '<ul class="pagination">%s %s %s</ul>',
-                $this->getPreviousButton(),
-                $this->getLinks(),
-                $this->getNextButton()
-            ));
+            return new HtmlString(
+                sprintf(
+                    '<ul class="pagination">%s %s %s</ul>',
+                    $this->getPreviousButton(),
+                    $this->getLinks(),
+                    $this->getNextButton()
+                )
+            );
         }
 
         return '';
@@ -69,9 +71,9 @@
     /**
      * Get HTML wrapper for an available page link.
      *
-     * @param  string  $url
-     * @param  int  $page
-     * @param  string|null  $rel
+     * @param  string      $url
+     * @param  int         $page
+     * @param  string|null $rel
      * @return string
      */
     protected function getAvailablePageWrapper($url, $page, $rel = null)
@@ -84,7 +86,7 @@
     /**
      * Get HTML wrapper for disabled text.
      *
-     * @param  string  $text
+     * @param  string $text
      * @return string
      */
     protected function getDisabledTextWrapper($text)
@@ -95,7 +97,7 @@
     /**
      * Get HTML wrapper for active text.
      *
-     * @param  string  $text
+     * @param  string $text
      * @return string
      */
     protected function getActivePageWrapper($text)

--- vendor/laravel/framework/src/Illuminate/Pagination/LengthAwarePaginator.php
+++ PHP_CodeSniffer
@@ -31,11 +31,11 @@
     /**
      * Create a new paginator instance.
      *
-     * @param  mixed  $items
-     * @param  int  $total
-     * @param  int  $perPage
-     * @param  int|null  $currentPage
-     * @param  array  $options (path, query, fragment, pageName)
+     * @param  mixed    $items
+     * @param  int      $total
+     * @param  int      $perPage
+     * @param  int|null $currentPage
+     * @param  array    $options     (path, query, fragment, pageName)
      * @return void
      */
     public function __construct($items, $total, $perPage, $currentPage = null, array $options = [])
@@ -55,8 +55,8 @@
     /**
      * Get the current page for the request.
      *
-     * @param  int  $currentPage
-     * @param  int  $lastPage
+     * @param  int $currentPage
+     * @param  int $lastPage
      * @return int
      */
     protected function setCurrentPage($currentPage, $lastPage)
@@ -111,7 +111,7 @@
     /**
      * Render the paginator using the given presenter.
      *
-     * @param  \Illuminate\Contracts\Pagination\Presenter|null  $presenter
+     * @param  \Illuminate\Contracts\Pagination\Presenter|null $presenter
      * @return string
      */
     public function links(Presenter $presenter = null)
@@ -122,7 +122,7 @@
     /**
      * Render the paginator using the given presenter.
      *
-     * @param  \Illuminate\Contracts\Pagination\Presenter|null  $presenter
+     * @param  \Illuminate\Contracts\Pagination\Presenter|null $presenter
      * @return string
      */
     public function render(Presenter $presenter = null)
@@ -169,7 +169,7 @@
     /**
      * Convert the object to its JSON representation.
      *
-     * @param  int  $options
+     * @param  int $options
      * @return string
      */
     public function toJson($options = 0)

--- vendor/laravel/framework/src/Illuminate/Pagination/PaginationServiceProvider.php
+++ PHP_CodeSniffer
@@ -13,18 +13,22 @@
      */
     public function register()
     {
-        Paginator::currentPathResolver(function () {
-            return $this->app['request']->url();
-        });
+        Paginator::currentPathResolver(
+            function () {
+                return $this->app['request']->url();
+            }
+        );
 
-        Paginator::currentPageResolver(function ($pageName = 'page') {
-            $page = $this->app['request']->input($pageName);
+        Paginator::currentPageResolver(
+            function ($pageName = 'page') {
+                $page = $this->app['request']->input($pageName);
 
-            if (filter_var($page, FILTER_VALIDATE_INT) !== false && (int) $page >= 1) {
-                return $page;
-            }
+                if (filter_var($page, FILTER_VALIDATE_INT) !== false && (int) $page >= 1) {
+                    return $page;
+                }
 
-            return 1;
-        });
+                return 1;
+            }
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Pagination/Paginator.php
+++ PHP_CodeSniffer
@@ -24,10 +24,10 @@
     /**
      * Create a new paginator instance.
      *
-     * @param  mixed  $items
-     * @param  int  $perPage
-     * @param  int|null  $currentPage
-     * @param  array  $options (path, query, fragment, pageName)
+     * @param  mixed    $items
+     * @param  int      $perPage
+     * @param  int|null $currentPage
+     * @param  array    $options     (path, query, fragment, pageName)
      * @return void
      */
     public function __construct($items, $perPage, $currentPage = null, array $options = [])
@@ -47,7 +47,7 @@
     /**
      * Get the current page for the request.
      *
-     * @param  int  $currentPage
+     * @param  int $currentPage
      * @return int
      */
     protected function setCurrentPage($currentPage)
@@ -94,7 +94,7 @@
     /**
      * Render the paginator using the given presenter.
      *
-     * @param  \Illuminate\Contracts\Pagination\Presenter|null  $presenter
+     * @param  \Illuminate\Contracts\Pagination\Presenter|null $presenter
      * @return string
      */
     public function links(Presenter $presenter = null)
@@ -105,7 +105,7 @@
     /**
      * Render the paginator using the given presenter.
      *
-     * @param  \Illuminate\Contracts\Pagination\Presenter|null  $presenter
+     * @param  \Illuminate\Contracts\Pagination\Presenter|null $presenter
      * @return string
      */
     public function render(Presenter $presenter = null)
@@ -147,7 +147,7 @@
     /**
      * Convert the object to its JSON representation.
      *
-     * @param  int  $options
+     * @param  int $options
      * @return string
      */
     public function toJson($options = 0)

--- vendor/laravel/framework/src/Illuminate/Pagination/SimpleBootstrapFourPresenter.php
+++ PHP_CodeSniffer
@@ -10,7 +10,7 @@
     /**
      * Create a simple Bootstrap 4 presenter.
      *
-     * @param  \Illuminate\Contracts\Pagination\Paginator  $paginator
+     * @param  \Illuminate\Contracts\Pagination\Paginator $paginator
      * @return void
      */
     public function __construct(PaginatorContract $paginator)
@@ -36,11 +36,13 @@
     public function render()
     {
         if ($this->hasPages()) {
-            return new HtmlString(sprintf(
-                '<ul class="pager">%s %s</ul>',
-                $this->getPreviousButton(),
-                $this->getNextButton()
-            ));
+            return new HtmlString(
+                sprintf(
+                    '<ul class="pager">%s %s</ul>',
+                    $this->getPreviousButton(),
+                    $this->getNextButton()
+                )
+            );
         }
 
         return '';

--- vendor/laravel/framework/src/Illuminate/Pagination/SimpleBootstrapThreePresenter.php
+++ PHP_CodeSniffer
@@ -10,7 +10,7 @@
     /**
      * Create a simple Bootstrap 3 presenter.
      *
-     * @param  \Illuminate\Contracts\Pagination\Paginator  $paginator
+     * @param  \Illuminate\Contracts\Pagination\Paginator $paginator
      * @return void
      */
     public function __construct(PaginatorContract $paginator)
@@ -36,11 +36,13 @@
     public function render()
     {
         if ($this->hasPages()) {
-            return new HtmlString(sprintf(
-                '<ul class="pager">%s %s</ul>',
-                $this->getPreviousButton(),
-                $this->getNextButton()
-            ));
+            return new HtmlString(
+                sprintf(
+                    '<ul class="pager">%s %s</ul>',
+                    $this->getPreviousButton(),
+                    $this->getNextButton()
+                )
+            );
         }
 
         return '';

--- vendor/laravel/framework/src/Illuminate/Pagination/UrlWindow.php
+++ PHP_CodeSniffer
@@ -16,7 +16,7 @@
     /**
      * Create a new URL window instance.
      *
-     * @param  \Illuminate\Contracts\Pagination\LengthAwarePaginator  $paginator
+     * @param  \Illuminate\Contracts\Pagination\LengthAwarePaginator $paginator
      * @return void
      */
     public function __construct(PaginatorContract $paginator)
@@ -27,8 +27,8 @@
     /**
      * Create a new URL window instance.
      *
-     * @param  \Illuminate\Contracts\Pagination\LengthAwarePaginator  $paginator
-     * @param  int  $onEachSide
+     * @param  \Illuminate\Contracts\Pagination\LengthAwarePaginator $paginator
+     * @param  int                                                   $onEachSide
      * @return array
      */
     public static function make(PaginatorContract $paginator, $onEachSide = 3)
@@ -39,7 +39,7 @@
     /**
      * Get the window of URLs to be shown.
      *
-     * @param  int  $onEachSide
+     * @param  int $onEachSide
      * @return array
      */
     public function get($onEachSide = 3)
@@ -68,7 +68,7 @@
     /**
      * Create a URL slider links.
      *
-     * @param  int  $onEachSide
+     * @param  int $onEachSide
      * @return array
      */
     protected function getUrlSlider($onEachSide)
@@ -106,7 +106,7 @@
     /**
      * Get the slider of URLs when too close to beginning of window.
      *
-     * @param  int  $window
+     * @param  int $window
      * @return array
      */
     protected function getSliderTooCloseToBeginning($window)
@@ -121,7 +121,7 @@
     /**
      * Get the slider of URLs when too close to ending of window.
      *
-     * @param  int  $window
+     * @param  int $window
      * @return array
      */
     protected function getSliderTooCloseToEnding($window)
@@ -141,7 +141,7 @@
     /**
      * Get the slider of URLs when a full slider can be made.
      *
-     * @param  int  $onEachSide
+     * @param  int $onEachSide
      * @return array
      */
     protected function getFullSlider($onEachSide)
@@ -156,7 +156,7 @@
     /**
      * Get the page range for the current page window.
      *
-     * @param  int  $onEachSide
+     * @param  int $onEachSide
      * @return array
      */
     public function getAdjacentUrlRange($onEachSide)

--- vendor/laravel/framework/src/Illuminate/Pagination/UrlWindowPresenterTrait.php
+++ PHP_CodeSniffer
@@ -33,7 +33,7 @@
     /**
      * Get the links for the URLs in the given array.
      *
-     * @param  array  $urls
+     * @param  array $urls
      * @return string
      */
     protected function getUrlLinks(array $urls)
@@ -50,9 +50,9 @@
     /**
      * Get HTML wrapper for a page link.
      *
-     * @param  string  $url
-     * @param  int  $page
-     * @param  string|null  $rel
+     * @param  string      $url
+     * @param  int         $page
+     * @param  string|null $rel
      * @return string
      */
     protected function getPageLinkWrapper($url, $page, $rel = null)

--- vendor/laravel/framework/src/Illuminate/Pipeline/Hub.php
+++ PHP_CodeSniffer
@@ -25,7 +25,7 @@
     /**
      * Create a new Hub instance.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
+     * @param  \Illuminate\Contracts\Container\Container $container
      * @return void
      */
     public function __construct(Container $container)
@@ -36,7 +36,7 @@
     /**
      * Define the default named pipeline.
      *
-     * @param  \Closure  $callback
+     * @param  \Closure $callback
      * @return void
      */
     public function defaults(Closure $callback)
@@ -47,8 +47,8 @@
     /**
      * Define a new named pipeline.
      *
-     * @param  string  $name
-     * @param  \Closure  $callback
+     * @param  string   $name
+     * @param  \Closure $callback
      * @return void
      */
     public function pipeline($name, Closure $callback)
@@ -59,8 +59,8 @@
     /**
      * Send an object through one of the available pipelines.
      *
-     * @param  mixed  $object
-     * @param  string|null  $pipeline
+     * @param  mixed       $object
+     * @param  string|null $pipeline
      * @return mixed
      */
     public function pipe($object, $pipeline = null)

--- vendor/laravel/framework/src/Illuminate/Pipeline/Pipeline.php
+++ PHP_CodeSniffer
@@ -39,7 +39,7 @@
     /**
      * Create a new class instance.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
+     * @param  \Illuminate\Contracts\Container\Container $container
      * @return void
      */
     public function __construct(Container $container)
@@ -50,7 +50,7 @@
     /**
      * Set the object being sent through the pipeline.
      *
-     * @param  mixed  $passable
+     * @param  mixed $passable
      * @return $this
      */
     public function send($passable)
@@ -63,7 +63,7 @@
     /**
      * Set the array of pipes.
      *
-     * @param  array|mixed  $pipes
+     * @param  array|mixed $pipes
      * @return $this
      */
     public function through($pipes)
@@ -76,7 +76,7 @@
     /**
      * Set the method to call on the pipes.
      *
-     * @param  string  $method
+     * @param  string $method
      * @return $this
      */
     public function via($method)
@@ -89,7 +89,7 @@
     /**
      * Run the pipeline with a final destination callback.
      *
-     * @param  \Closure  $destination
+     * @param  \Closure $destination
      * @return mixed
      */
     public function then(Closure $destination)
@@ -141,7 +141,7 @@
     /**
      * Get the initial slice to begin the stack call.
      *
-     * @param  \Closure  $destination
+     * @param  \Closure $destination
      * @return \Closure
      */
     protected function getInitialSlice(Closure $destination)

--- vendor/laravel/framework/src/Illuminate/Queue/BeanstalkdQueue.php
+++ PHP_CodeSniffer
@@ -33,9 +33,9 @@
     /**
      * Create a new Beanstalkd queue instance.
      *
-     * @param  \Pheanstalk\Pheanstalk  $pheanstalk
-     * @param  string  $default
-     * @param  int  $timeToRun
+     * @param  \Pheanstalk\Pheanstalk $pheanstalk
+     * @param  string                 $default
+     * @param  int                    $timeToRun
      * @return void
      */
     public function __construct(Pheanstalk $pheanstalk, $default, $timeToRun)
@@ -48,9 +48,9 @@
     /**
      * Push a new job onto the queue.
      *
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  string $job
+     * @param  mixed  $data
+     * @param  string $queue
      * @return mixed
      */
     public function push($job, $data = '', $queue = null)
@@ -61,9 +61,9 @@
     /**
      * Push a raw payload onto the queue.
      *
-     * @param  string  $payload
-     * @param  string  $queue
-     * @param  array   $options
+     * @param  string $payload
+     * @param  string $queue
+     * @param  array  $options
      * @return mixed
      */
     public function pushRaw($payload, $queue = null, array $options = [])
@@ -76,10 +76,10 @@
     /**
      * Push a new job onto the queue after a delay.
      *
-     * @param  \DateTime|int  $delay
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  \DateTime|int $delay
+     * @param  string        $job
+     * @param  mixed         $data
+     * @param  string        $queue
      * @return mixed
      */
     public function later($delay, $job, $data = '', $queue = null)
@@ -94,7 +94,7 @@
     /**
      * Pop the next job off of the queue.
      *
-     * @param  string  $queue
+     * @param  string $queue
      * @return \Illuminate\Contracts\Queue\Job|null
      */
     public function pop($queue = null)
@@ -111,8 +111,8 @@
     /**
      * Delete a message from the Beanstalk queue.
      *
-     * @param  string  $queue
-     * @param  string  $id
+     * @param  string $queue
+     * @param  string $id
      * @return void
      */
     public function deleteMessage($queue, $id)
@@ -123,7 +123,7 @@
     /**
      * Get the queue or return the default.
      *
-     * @param  string|null  $queue
+     * @param  string|null $queue
      * @return string
      */
     public function getQueue($queue)

--- vendor/laravel/framework/src/Illuminate/Queue/CallQueuedHandler.php
+++ PHP_CodeSniffer
@@ -17,7 +17,7 @@
     /**
      * Create a new handler instance.
      *
-     * @param  \Illuminate\Contracts\Bus\Dispatcher  $dispatcher
+     * @param  \Illuminate\Contracts\Bus\Dispatcher $dispatcher
      * @return void
      */
     public function __construct(Dispatcher $dispatcher)
@@ -28,8 +28,8 @@
     /**
      * Handle the queued job.
      *
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  array  $data
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  array                           $data
      * @return void
      */
     public function call(Job $job, array $data)
@@ -48,8 +48,8 @@
     /**
      * Set the job instance of the given class if necessary.
      *
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  mixed  $instance
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  mixed                           $instance
      * @return mixed
      */
     protected function setJobInstanceIfNecessary(Job $job, $instance)
@@ -64,7 +64,7 @@
     /**
      * Call the failed method on the job instance.
      *
-     * @param  array  $data
+     * @param  array $data
      * @return void
      */
     public function failed(array $data)

--- vendor/laravel/framework/src/Illuminate/Queue/Capsule/Manager.php
+++ PHP_CodeSniffer
@@ -21,7 +21,7 @@
     /**
      * Create a new queue capsule manager.
      *
-     * @param  \Illuminate\Container\Container  $container
+     * @param  \Illuminate\Container\Container $container
      * @return void
      */
     public function __construct(Container $container = null)
@@ -73,7 +73,7 @@
     /**
      * Get a connection instance from the global manager.
      *
-     * @param  string  $connection
+     * @param  string $connection
      * @return \Illuminate\Contracts\Queue\Queue
      */
     public static function connection($connection = null)
@@ -84,10 +84,10 @@
     /**
      * Push a new job onto the queue.
      *
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
-     * @param  string  $connection
+     * @param  string $job
+     * @param  mixed  $data
+     * @param  string $queue
+     * @param  string $connection
      * @return mixed
      */
     public static function push($job, $data = '', $queue = null, $connection = null)
@@ -98,10 +98,10 @@
     /**
      * Push a new an array of jobs onto the queue.
      *
-     * @param  array   $jobs
-     * @param  mixed   $data
-     * @param  string  $queue
-     * @param  string  $connection
+     * @param  array  $jobs
+     * @param  mixed  $data
+     * @param  string $queue
+     * @param  string $connection
      * @return mixed
      */
     public static function bulk($jobs, $data = '', $queue = null, $connection = null)
@@ -112,11 +112,11 @@
     /**
      * Push a new job onto the queue after a delay.
      *
-     * @param  \DateTime|int  $delay
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
-     * @param  string  $connection
+     * @param  \DateTime|int $delay
+     * @param  string        $job
+     * @param  mixed         $data
+     * @param  string        $queue
+     * @param  string        $connection
      * @return mixed
      */
     public static function later($delay, $job, $data = '', $queue = null, $connection = null)
@@ -127,7 +127,7 @@
     /**
      * Get a registered connection instance.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Queue\Queue
      */
     public function getConnection($name = null)
@@ -138,8 +138,8 @@
     /**
      * Register a connection with the manager.
      *
-     * @param  array   $config
-     * @param  string  $name
+     * @param  array  $config
+     * @param  string $name
      * @return void
      */
     public function addConnection(array $config, $name = 'default')
@@ -160,7 +160,7 @@
     /**
      * Pass dynamic instance methods to the manager.
      *
-     * @param  string  $method
+     * @param  string $method
      * @param  array  $parameters
      * @return mixed
      */
@@ -172,8 +172,8 @@
     /**
      * Dynamically pass methods to the default connection.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      */
     public static function __callStatic($method, $parameters)

--- vendor/laravel/framework/src/Illuminate/Queue/Connectors/BeanstalkdConnector.php
+++ PHP_CodeSniffer
@@ -12,7 +12,7 @@
     /**
      * Establish a queue connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Contracts\Queue\Queue
      */
     public function connect(array $config)

--- vendor/laravel/framework/src/Illuminate/Queue/Connectors/ConnectorInterface.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Establish a queue connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Contracts\Queue\Queue
      */
     public function connect(array $config);

--- vendor/laravel/framework/src/Illuminate/Queue/Connectors/DatabaseConnector.php
+++ PHP_CodeSniffer
@@ -18,7 +18,7 @@
     /**
      * Create a new connector instance.
      *
-     * @param  \Illuminate\Database\ConnectionResolverInterface  $connections
+     * @param  \Illuminate\Database\ConnectionResolverInterface $connections
      * @return void
      */
     public function __construct(ConnectionResolverInterface $connections)
@@ -29,7 +29,7 @@
     /**
      * Establish a queue connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Contracts\Queue\Queue
      */
     public function connect(array $config)

--- vendor/laravel/framework/src/Illuminate/Queue/Connectors/NullConnector.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Establish a queue connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Contracts\Queue\Queue
      */
     public function connect(array $config)

--- vendor/laravel/framework/src/Illuminate/Queue/Connectors/RedisConnector.php
+++ PHP_CodeSniffer
@@ -25,8 +25,8 @@
     /**
      * Create a new Redis queue connector instance.
      *
-     * @param  \Illuminate\Redis\Database  $redis
-     * @param  string|null  $connection
+     * @param  \Illuminate\Redis\Database $redis
+     * @param  string|null                $connection
      * @return void
      */
     public function __construct(Database $redis, $connection = null)
@@ -38,7 +38,7 @@
     /**
      * Establish a queue connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Contracts\Queue\Queue
      */
     public function connect(array $config)

--- vendor/laravel/framework/src/Illuminate/Queue/Connectors/SqsConnector.php
+++ PHP_CodeSniffer
@@ -11,7 +11,7 @@
     /**
      * Establish a queue connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Contracts\Queue\Queue
      */
     public function connect(array $config)
@@ -30,17 +30,19 @@
     /**
      * Get the default configuration for SQS.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return array
      */
     protected function getDefaultConfiguration(array $config)
     {
-        return array_merge([
+        return array_merge(
+            [
             'version' => 'latest',
             'http' => [
                 'timeout' => 60,
                 'connect_timeout' => 60,
             ],
-        ], $config);
+            ], $config
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Queue/Connectors/SyncConnector.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Establish a queue connection.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return \Illuminate\Contracts\Queue\Queue
      */
     public function connect(array $config)

--- vendor/laravel/framework/src/Illuminate/Queue/Console/FailedTableCommand.php
+++ PHP_CodeSniffer
@@ -38,8 +38,8 @@
     /**
      * Create a new failed queue jobs table command instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
-     * @param  \Illuminate\Support\Composer    $composer
+     * @param  \Illuminate\Filesystem\Filesystem $files
+     * @param  \Illuminate\Support\Composer      $composer
      * @return void
      */
     public function __construct(Filesystem $files, Composer $composer)
@@ -77,7 +77,7 @@
     /**
      * Create a base migration file for the table.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return string
      */
     protected function createBaseMigration($table = 'failed_jobs')

--- vendor/laravel/framework/src/Illuminate/Queue/Console/ListenCommand.php
+++ PHP_CodeSniffer
@@ -33,7 +33,7 @@
     /**
      * Create a new queue listen command.
      *
-     * @param  \Illuminate\Queue\Listener  $listener
+     * @param  \Illuminate\Queue\Listener $listener
      * @return void
      */
     public function __construct(Listener $listener)
@@ -76,7 +76,7 @@
     /**
      * Get the name of the queue connection to listen on.
      *
-     * @param  string  $connection
+     * @param  string $connection
      * @return string
      */
     protected function getQueue($connection)
@@ -103,9 +103,11 @@
 
         $this->listener->setMaxTries($this->option('tries'));
 
-        $this->listener->setOutputHandler(function ($type, $line) {
-            $this->output->write($line);
-        });
+        $this->listener->setOutputHandler(
+            function ($type, $line) {
+                $this->output->write($line);
+            }
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Queue/Console/ListFailedCommand.php
+++ PHP_CodeSniffer
@@ -63,7 +63,7 @@
     /**
      * Parse the failed job row.
      *
-     * @param  array  $failed
+     * @param  array $failed
      * @return array
      */
     protected function parseFailedJob(array $failed)
@@ -78,7 +78,7 @@
     /**
      * Extract the failed job name from payload.
      *
-     * @param  string  $payload
+     * @param  string $payload
      * @return string|null
      */
     private function extractJobName($payload)
@@ -103,7 +103,7 @@
     /**
      * Display the failed jobs in the console.
      *
-     * @param  array  $jobs
+     * @param  array $jobs
      * @return void
      */
     protected function displayFailedJobs(array $jobs)

--- vendor/laravel/framework/src/Illuminate/Queue/Console/RetryCommand.php
+++ PHP_CodeSniffer
@@ -43,7 +43,7 @@
     /**
      * Retry the queue job with the given ID.
      *
-     * @param  string  $id
+     * @param  string $id
      * @return void
      */
     protected function retryJob($id)
@@ -56,7 +56,7 @@
             $failed->payload = $this->resetAttempts($failed->payload);
 
             $this->laravel['queue']->connection($failed->connection)
-                                ->pushRaw($failed->payload, $failed->queue);
+                ->pushRaw($failed->payload, $failed->queue);
 
             $this->laravel['queue.failer']->forget($failed->id);
 
@@ -69,7 +69,7 @@
     /**
      * Reset the payload attempts.
      *
-     * @param  string  $payload
+     * @param  string $payload
      * @return string
      */
     protected function resetAttempts($payload)

--- vendor/laravel/framework/src/Illuminate/Queue/Console/TableCommand.php
+++ PHP_CodeSniffer
@@ -38,8 +38,8 @@
     /**
      * Create a new queue job table command instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
-     * @param  \Illuminate\Support\Composer    $composer
+     * @param  \Illuminate\Filesystem\Filesystem $files
+     * @param  \Illuminate\Support\Composer      $composer
      * @return void
      */
     public function __construct(Filesystem $files, Composer $composer)
@@ -77,7 +77,7 @@
     /**
      * Create a base migration file for the table.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return string
      */
     protected function createBaseMigration($table = 'jobs')

--- vendor/laravel/framework/src/Illuminate/Queue/Console/WorkCommand.php
+++ PHP_CodeSniffer
@@ -37,7 +37,7 @@
     /**
      * Create a new queue listen command.
      *
-     * @param  \Illuminate\Queue\Worker  $worker
+     * @param  \Illuminate\Queue\Worker $worker
      * @return void
      */
     public function __construct(Worker $worker)
@@ -86,23 +86,27 @@
      */
     protected function listenForEvents()
     {
-        $this->laravel['events']->listen(JobProcessed::class, function ($event) {
-            $this->writeOutput($event->job, false);
-        });
-
-        $this->laravel['events']->listen(JobFailed::class, function ($event) {
-            $this->writeOutput($event->job, true);
-        });
+        $this->laravel['events']->listen(
+            JobProcessed::class, function ($event) {
+                $this->writeOutput($event->job, false);
+            }
+        );
+
+        $this->laravel['events']->listen(
+            JobFailed::class, function ($event) {
+                $this->writeOutput($event->job, true);
+            }
+        );
     }
 
     /**
      * Run the worker instance.
      *
-     * @param  string  $connection
-     * @param  string  $queue
-     * @param  int  $delay
-     * @param  int  $memory
-     * @param  bool  $daemon
+     * @param  string $connection
+     * @param  string $queue
+     * @param  int    $delay
+     * @param  int    $memory
+     * @param  bool   $daemon
      * @return array
      */
     protected function runWorker($connection, $queue, $delay, $memory, $daemon = false)
@@ -129,8 +133,8 @@
     /**
      * Write the status output for the queue worker.
      *
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  bool  $failed
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  bool                            $failed
      * @return void
      */
     protected function writeOutput(Job $job, $failed)

--- vendor/laravel/framework/src/Illuminate/Queue/ConsoleServiceProvider.php
+++ PHP_CodeSniffer
@@ -24,21 +24,29 @@
      */
     public function register()
     {
-        $this->app->singleton('command.queue.failed', function () {
-            return new ListFailedCommand;
-        });
+        $this->app->singleton(
+            'command.queue.failed', function () {
+                return new ListFailedCommand;
+            }
+        );
 
-        $this->app->singleton('command.queue.retry', function () {
-            return new RetryCommand;
-        });
+        $this->app->singleton(
+            'command.queue.retry', function () {
+                return new RetryCommand;
+            }
+        );
 
-        $this->app->singleton('command.queue.forget', function () {
-            return new ForgetFailedCommand;
-        });
+        $this->app->singleton(
+            'command.queue.forget', function () {
+                return new ForgetFailedCommand;
+            }
+        );
 
-        $this->app->singleton('command.queue.flush', function () {
-            return new FlushFailedCommand;
-        });
+        $this->app->singleton(
+            'command.queue.flush', function () {
+                return new FlushFailedCommand;
+            }
+        );
 
         $this->commands(
             'command.queue.failed', 'command.queue.retry',

--- vendor/laravel/framework/src/Illuminate/Queue/DatabaseQueue.php
+++ PHP_CodeSniffer
@@ -41,10 +41,10 @@
     /**
      * Create a new database queue instance.
      *
-     * @param  \Illuminate\Database\Connection  $database
-     * @param  string  $table
-     * @param  string  $default
-     * @param  int  $expire
+     * @param  \Illuminate\Database\Connection $database
+     * @param  string                          $table
+     * @param  string                          $default
+     * @param  int                             $expire
      * @return void
      */
     public function __construct(Connection $database, $table, $default = 'default', $expire = 60)
@@ -58,9 +58,9 @@
     /**
      * Push a new job onto the queue.
      *
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  string $job
+     * @param  mixed  $data
+     * @param  string $queue
      * @return mixed
      */
     public function push($job, $data = '', $queue = null)
@@ -71,9 +71,9 @@
     /**
      * Push a raw payload onto the queue.
      *
-     * @param  string  $payload
-     * @param  string  $queue
-     * @param  array   $options
+     * @param  string $payload
+     * @param  string $queue
+     * @param  array  $options
      * @return mixed
      */
     public function pushRaw($payload, $queue = null, array $options = [])
@@ -84,10 +84,10 @@
     /**
      * Push a new job onto the queue after a delay.
      *
-     * @param  \DateTime|int  $delay
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  \DateTime|int $delay
+     * @param  string        $job
+     * @param  mixed         $data
+     * @param  string        $queue
      * @return void
      */
     public function later($delay, $job, $data = '', $queue = null)
@@ -98,9 +98,9 @@
     /**
      * Push an array of jobs onto the queue.
      *
-     * @param  array   $jobs
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  array  $jobs
+     * @param  mixed  $data
+     * @param  string $queue
      * @return mixed
      */
     public function bulk($jobs, $data = '', $queue = null)
@@ -109,11 +109,13 @@
 
         $availableAt = $this->getAvailableAt(0);
 
-        $records = array_map(function ($job) use ($queue, $data, $availableAt) {
-            return $this->buildDatabaseRecord(
-                $queue, $this->createPayload($job, $data), $availableAt
-            );
-        }, (array) $jobs);
+        $records = array_map(
+            function ($job) use ($queue, $data, $availableAt) {
+                return $this->buildDatabaseRecord(
+                    $queue, $this->createPayload($job, $data), $availableAt
+                );
+            }, (array) $jobs
+        );
 
         return $this->database->table($this->table)->insert($records);
     }
@@ -121,9 +123,9 @@
     /**
      * Release a reserved job back onto the queue.
      *
-     * @param  string  $queue
-     * @param  \StdClass  $job
-     * @param  int  $delay
+     * @param  string    $queue
+     * @param  \StdClass $job
+     * @param  int       $delay
      * @return mixed
      */
     public function release($queue, $job, $delay)
@@ -134,10 +136,10 @@
     /**
      * Push a raw payload to the database with a given delay.
      *
-     * @param  \DateTime|int  $delay
-     * @param  string|null  $queue
-     * @param  string  $payload
-     * @param  int  $attempts
+     * @param  \DateTime|int $delay
+     * @param  string|null   $queue
+     * @param  string        $payload
+     * @param  int           $attempts
      * @return mixed
      */
     protected function pushToDatabase($delay, $queue, $payload, $attempts = 0)
@@ -152,7 +154,7 @@
     /**
      * Pop the next job off of the queue.
      *
-     * @param  string  $queue
+     * @param  string $queue
      * @return \Illuminate\Contracts\Queue\Job|null
      */
     public function pop($queue = null)
@@ -177,18 +179,20 @@
     /**
      * Get the next available job for the queue.
      *
-     * @param  string|null  $queue
+     * @param  string|null $queue
      * @return \StdClass|null
      */
     protected function getNextAvailableJob($queue)
     {
         $job = $this->database->table($this->table)
-                    ->lockForUpdate()
-                    ->where('queue', $this->getQueue($queue))
-                    ->where(function ($query) {
-                        $this->isAvailable($query);
-                        $this->isReservedButExpired($query);
-                    })
+            ->lockForUpdate()
+            ->where('queue', $this->getQueue($queue))
+            ->where(
+                function ($query) {
+                            $this->isAvailable($query);
+                            $this->isReservedButExpired($query);
+                }
+            )
                     ->orderBy('id', 'asc')
                     ->first();
 
@@ -198,37 +202,41 @@
     /**
      * Modify the query to check for available jobs.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return void
      */
     protected function isAvailable($query)
     {
-        $query->where(function ($query) {
-            $query->where('reserved', 0);
-            $query->where('available_at', '<=', $this->getTime());
-        });
+        $query->where(
+            function ($query) {
+                $query->where('reserved', 0);
+                $query->where('available_at', '<=', $this->getTime());
+            }
+        );
     }
 
     /**
      * Modify the query to check for jobs that are reserved but have expired.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
+     * @param  \Illuminate\Database\Query\Builder $query
      * @return void
      */
     protected function isReservedButExpired($query)
     {
         $expiration = Carbon::now()->subSeconds($this->expire)->getTimestamp();
 
-        $query->orWhere(function ($query) use ($expiration) {
-            $query->where('reserved', 1);
-            $query->where('reserved_at', '<=', $expiration);
-        });
+        $query->orWhere(
+            function ($query) use ($expiration) {
+                $query->where('reserved', 1);
+                $query->where('reserved_at', '<=', $expiration);
+            }
+        );
     }
 
     /**
      * Mark the given job ID as reserved.
      *
-     * @param \stdClass $job
+     * @param  \stdClass $job
      * @return \stdClass
      */
     protected function markJobAsReserved($job)
@@ -237,11 +245,13 @@
         $job->attempts = $job->attempts + 1;
         $job->reserved_at = $this->getTime();
 
-        $this->database->table($this->table)->where('id', $job->id)->update([
+        $this->database->table($this->table)->where('id', $job->id)->update(
+            [
             'reserved' => $job->reserved,
             'reserved_at' => $job->reserved_at,
             'attempts' => $job->attempts,
-        ]);
+            ]
+        );
 
         return $job;
     }
@@ -249,8 +259,8 @@
     /**
      * Delete a reserved job from the queue.
      *
-     * @param  string  $queue
-     * @param  string  $id
+     * @param  string $queue
+     * @param  string $id
      * @return void
      */
     public function deleteReserved($queue, $id)
@@ -267,7 +277,7 @@
     /**
      * Get the "available at" UNIX timestamp.
      *
-     * @param  \DateTime|int  $delay
+     * @param  \DateTime|int $delay
      * @return int
      */
     protected function getAvailableAt($delay)
@@ -280,10 +290,10 @@
     /**
      * Create an array to insert for the given job.
      *
-     * @param  string|null  $queue
-     * @param  string  $payload
-     * @param  int  $availableAt
-     * @param  int  $attempts
+     * @param  string|null $queue
+     * @param  string      $payload
+     * @param  int         $availableAt
+     * @param  int         $attempts
      * @return array
      */
     protected function buildDatabaseRecord($queue, $payload, $availableAt, $attempts = 0)
@@ -302,7 +312,7 @@
     /**
      * Get the queue or return the default.
      *
-     * @param  string|null  $queue
+     * @param  string|null $queue
      * @return string
      */
     protected function getQueue($queue)
@@ -333,7 +343,7 @@
     /**
      * Set the expiration time in seconds.
      *
-     * @param  int|null  $seconds
+     * @param  int|null $seconds
      * @return void
      */
     public function setExpire($seconds)

--- vendor/laravel/framework/src/Illuminate/Queue/Events/JobExceptionOccurred.php
+++ PHP_CodeSniffer
@@ -35,10 +35,10 @@
     /**
      * Create a new event instance.
      *
-     * @param  string  $connectionName
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  array  $data
-     * @param  \Throwable  $exception
+     * @param  string                          $connectionName
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  array                           $data
+     * @param  \Throwable                      $exception
      * @return void
      */
     public function __construct($connectionName, $job, $data, $exception)

--- vendor/laravel/framework/src/Illuminate/Queue/Events/JobFailed.php
+++ PHP_CodeSniffer
@@ -35,10 +35,10 @@
     /**
      * Create a new event instance.
      *
-     * @param  string  $connectionName
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  array  $data
-     * @param  int|null  $failedId
+     * @param  string                          $connectionName
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  array                           $data
+     * @param  int|null                        $failedId
      * @return void
      */
     public function __construct($connectionName, $job, $data, $failedId = null)

--- vendor/laravel/framework/src/Illuminate/Queue/Events/JobProcessed.php
+++ PHP_CodeSniffer
@@ -28,9 +28,9 @@
     /**
      * Create a new event instance.
      *
-     * @param  string  $connectionName
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  array  $data
+     * @param  string                          $connectionName
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  array                           $data
      * @return void
      */
     public function __construct($connectionName, $job, $data)

--- vendor/laravel/framework/src/Illuminate/Queue/Events/JobProcessing.php
+++ PHP_CodeSniffer
@@ -28,9 +28,9 @@
     /**
      * Create a new event instance.
      *
-     * @param  string  $connectionName
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  array  $data
+     * @param  string                          $connectionName
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  array                           $data
      * @return void
      */
     public function __construct($connectionName, $job, $data)

--- vendor/laravel/framework/src/Illuminate/Queue/Failed/DatabaseFailedJobProvider.php
+++ PHP_CodeSniffer
@@ -31,9 +31,9 @@
     /**
      * Create a new database failed job provider.
      *
-     * @param  \Illuminate\Database\ConnectionResolverInterface  $resolver
-     * @param  string  $database
-     * @param  string  $table
+     * @param  \Illuminate\Database\ConnectionResolverInterface $resolver
+     * @param  string                                           $database
+     * @param  string                                           $table
      * @return void
      */
     public function __construct(ConnectionResolverInterface $resolver, $database, $table)
@@ -46,9 +46,9 @@
     /**
      * Log a failed job into storage.
      *
-     * @param  string  $connection
-     * @param  string  $queue
-     * @param  string  $payload
+     * @param  string $connection
+     * @param  string $queue
+     * @param  string $payload
      * @return int|null
      */
     public function log($connection, $queue, $payload)
@@ -71,7 +71,7 @@
     /**
      * Get a single failed job.
      *
-     * @param  mixed  $id
+     * @param  mixed $id
      * @return array
      */
     public function find($id)
@@ -82,7 +82,7 @@
     /**
      * Delete a single failed job from storage.
      *
-     * @param  mixed  $id
+     * @param  mixed $id
      * @return bool
      */
     public function forget($id)

--- vendor/laravel/framework/src/Illuminate/Queue/Failed/FailedJobProviderInterface.php
+++ PHP_CodeSniffer
@@ -7,9 +7,9 @@
     /**
      * Log a failed job into storage.
      *
-     * @param  string  $connection
-     * @param  string  $queue
-     * @param  string  $payload
+     * @param  string $connection
+     * @param  string $queue
+     * @param  string $payload
      * @return int|null
      */
     public function log($connection, $queue, $payload);
@@ -24,7 +24,7 @@
     /**
      * Get a single failed job.
      *
-     * @param  mixed  $id
+     * @param  mixed $id
      * @return array
      */
     public function find($id);
@@ -32,7 +32,7 @@
     /**
      * Delete a single failed job from storage.
      *
-     * @param  mixed  $id
+     * @param  mixed $id
      * @return bool
      */
     public function forget($id);

--- vendor/laravel/framework/src/Illuminate/Queue/Failed/NullFailedJobProvider.php
+++ PHP_CodeSniffer
@@ -7,9 +7,9 @@
     /**
      * Log a failed job into storage.
      *
-     * @param  string  $connection
-     * @param  string  $queue
-     * @param  string  $payload
+     * @param  string $connection
+     * @param  string $queue
+     * @param  string $payload
      * @return int|null
      */
     public function log($connection, $queue, $payload)
@@ -30,7 +30,7 @@
     /**
      * Get a single failed job.
      *
-     * @param  mixed  $id
+     * @param  mixed $id
      * @return array
      */
     public function find($id)
@@ -41,7 +41,7 @@
     /**
      * Delete a single failed job from storage.
      *
-     * @param  mixed  $id
+     * @param  mixed $id
      * @return bool
      */
     public function forget($id)

--- vendor/laravel/framework/src/Illuminate/Queue/IlluminateQueueClosure.php
+++ PHP_CodeSniffer
@@ -14,7 +14,7 @@
     /**
      * Create a new queued Closure job.
      *
-     * @param  \Illuminate\Contracts\Encryption\Encrypter  $crypt
+     * @param  \Illuminate\Contracts\Encryption\Encrypter $crypt
      * @return void
      */
     public function __construct(EncrypterContract $crypt)
@@ -25,8 +25,8 @@
     /**
      * Fire the Closure based queue job.
      *
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  array  $data
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  array                           $data
      * @return void
      */
     public function fire($job, $data)

--- vendor/laravel/framework/src/Illuminate/Queue/InteractsWithQueue.php
+++ PHP_CodeSniffer
@@ -50,7 +50,7 @@
     /**
      * Release the job back into the queue.
      *
-     * @param  int   $delay
+     * @param  int $delay
      * @return void
      */
     public function release($delay = 0)
@@ -63,7 +63,7 @@
     /**
      * Set the base queue job instance.
      *
-     * @param  \Illuminate\Contracts\Queue\Job  $job
+     * @param  \Illuminate\Contracts\Queue\Job $job
      * @return $this
      */
     public function setJob(JobContract $job)

--- vendor/laravel/framework/src/Illuminate/Queue/Jobs/BeanstalkdJob.php
+++ PHP_CodeSniffer
@@ -26,17 +26,18 @@
     /**
      * Create a new job instance.
      *
-     * @param  \Illuminate\Container\Container  $container
-     * @param  \Pheanstalk\Pheanstalk  $pheanstalk
-     * @param  \Pheanstalk\Job  $job
-     * @param  string  $queue
+     * @param  \Illuminate\Container\Container $container
+     * @param  \Pheanstalk\Pheanstalk          $pheanstalk
+     * @param  \Pheanstalk\Job                 $job
+     * @param  string                          $queue
      * @return void
      */
     public function __construct(Container $container,
-                                Pheanstalk $pheanstalk,
-                                PheanstalkJob $job,
-                                $queue)
-    {
+        Pheanstalk $pheanstalk,
+        PheanstalkJob $job,
+        $queue
+    ) {
+    
         $this->job = $job;
         $this->queue = $queue;
         $this->container = $container;
@@ -78,7 +79,7 @@
     /**
      * Release the job back into the queue.
      *
-     * @param  int   $delay
+     * @param  int $delay
      * @return void
      */
     public function release($delay = 0)

--- vendor/laravel/framework/src/Illuminate/Queue/Jobs/DatabaseJob.php
+++ PHP_CodeSniffer
@@ -25,10 +25,10 @@
     /**
      * Create a new job instance.
      *
-     * @param  \Illuminate\Container\Container  $container
-     * @param  \Illuminate\Queue\DatabaseQueue  $database
-     * @param  \StdClass  $job
-     * @param  string  $queue
+     * @param  \Illuminate\Container\Container $container
+     * @param  \Illuminate\Queue\DatabaseQueue $database
+     * @param  \StdClass                       $job
+     * @param  string                          $queue
      * @return void
      */
     public function __construct(Container $container, DatabaseQueue $database, $job, $queue)
@@ -64,7 +64,7 @@
     /**
      * Release the job back into the queue.
      *
-     * @param  int  $delay
+     * @param  int $delay
      * @return void
      */
     public function release($delay = 0)

--- vendor/laravel/framework/src/Illuminate/Queue/Jobs/Job.php
+++ PHP_CodeSniffer
@@ -73,7 +73,7 @@
     /**
      * Release the job back into the queue.
      *
-     * @param  int   $delay
+     * @param  int $delay
      * @return void
      */
     public function release($delay = 0)
@@ -118,7 +118,7 @@
     /**
      * Resolve and fire the job handler method.
      *
-     * @param  array  $payload
+     * @param  array $payload
      * @return void
      */
     protected function resolveAndFire(array $payload)
@@ -133,7 +133,7 @@
     /**
      * Parse the job declaration into class and method.
      *
-     * @param  string  $job
+     * @param  string $job
      * @return array
      */
     protected function parseJob($job)
@@ -146,7 +146,7 @@
     /**
      * Resolve the given job handler.
      *
-     * @param  string  $class
+     * @param  string $class
      * @return mixed
      */
     protected function resolve($class)
@@ -157,7 +157,7 @@
     /**
      * Resolve all of the queueable entities in the given payload.
      *
-     * @param  mixed  $data
+     * @param  mixed $data
      * @return mixed
      */
     protected function resolveQueueableEntities($data)
@@ -167,13 +167,15 @@
         }
 
         if (is_array($data)) {
-            $data = array_map(function ($d) {
-                if (is_array($d)) {
-                    return $this->resolveQueueableEntities($d);
-                }
-
-                return $this->resolveQueueableEntity($d);
-            }, $data);
+            $data = array_map(
+                function ($d) {
+                    if (is_array($d)) {
+                        return $this->resolveQueueableEntities($d);
+                    }
+
+                    return $this->resolveQueueableEntity($d);
+                }, $data
+            );
         }
 
         return $data;
@@ -182,7 +184,7 @@
     /**
      * Resolve a single queueable entity from the resolver.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return \Illuminate\Contracts\Queue\QueueableEntity
      */
     protected function resolveQueueableEntity($value)
@@ -227,7 +229,7 @@
     /**
      * Calculate the number of seconds with the given delay.
      *
-     * @param  \DateTime|int  $delay
+     * @param  \DateTime|int $delay
      * @return int
      */
     protected function getSeconds($delay)

--- vendor/laravel/framework/src/Illuminate/Queue/Jobs/RedisJob.php
+++ PHP_CodeSniffer
@@ -26,10 +26,10 @@
     /**
      * Create a new job instance.
      *
-     * @param  \Illuminate\Container\Container  $container
-     * @param  \Illuminate\Queue\RedisQueue  $redis
-     * @param  string  $job
-     * @param  string  $queue
+     * @param  \Illuminate\Container\Container $container
+     * @param  \Illuminate\Queue\RedisQueue    $redis
+     * @param  string                          $job
+     * @param  string                          $queue
      * @return void
      */
     public function __construct(Container $container, RedisQueue $redis, $job, $queue)
@@ -75,7 +75,7 @@
     /**
      * Release the job back into the queue.
      *
-     * @param  int   $delay
+     * @param  int $delay
      * @return void
      */
     public function release($delay = 0)

--- vendor/laravel/framework/src/Illuminate/Queue/Jobs/SqsJob.php
+++ PHP_CodeSniffer
@@ -25,17 +25,18 @@
     /**
      * Create a new job instance.
      *
-     * @param  \Illuminate\Container\Container  $container
-     * @param  \Aws\Sqs\SqsClient  $sqs
-     * @param  string  $queue
-     * @param  array   $job
+     * @param  \Illuminate\Container\Container $container
+     * @param  \Aws\Sqs\SqsClient              $sqs
+     * @param  string                          $queue
+     * @param  array                           $job
      * @return void
      */
     public function __construct(Container $container,
-                                SqsClient $sqs,
-                                $queue,
-                                array $job)
-    {
+        SqsClient $sqs,
+        $queue,
+        array $job
+    ) {
+    
         $this->sqs = $sqs;
         $this->job = $job;
         $this->queue = $queue;
@@ -71,28 +72,32 @@
     {
         parent::delete();
 
-        $this->sqs->deleteMessage([
+        $this->sqs->deleteMessage(
+            [
 
             'QueueUrl' => $this->queue, 'ReceiptHandle' => $this->job['ReceiptHandle'],
 
-        ]);
+            ]
+        );
     }
 
     /**
      * Release the job back into the queue.
      *
-     * @param  int   $delay
+     * @param  int $delay
      * @return void
      */
     public function release($delay = 0)
     {
         parent::release($delay);
 
-        $this->sqs->changeMessageVisibility([
+        $this->sqs->changeMessageVisibility(
+            [
             'QueueUrl' => $this->queue,
             'ReceiptHandle' => $this->job['ReceiptHandle'],
             'VisibilityTimeout' => $delay,
-        ]);
+            ]
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Queue/Jobs/SyncJob.php
+++ PHP_CodeSniffer
@@ -24,8 +24,8 @@
     /**
      * Create a new job instance.
      *
-     * @param  \Illuminate\Container\Container  $container
-     * @param  string  $payload
+     * @param  \Illuminate\Container\Container $container
+     * @param  string                          $payload
      * @return void
      */
     public function __construct(Container $container, $payload)
@@ -57,7 +57,7 @@
     /**
      * Release the job back into the queue.
      *
-     * @param  int   $delay
+     * @param  int $delay
      * @return void
      */
     public function release($delay = 0)

--- vendor/laravel/framework/src/Illuminate/Queue/Listener.php
+++ PHP_CodeSniffer
@@ -54,7 +54,7 @@
     /**
      * Create a new queue listener.
      *
-     * @param  string  $commandPath
+     * @param  string $commandPath
      * @return void
      */
     public function __construct($commandPath)
@@ -90,11 +90,11 @@
     /**
      * Listen to the given queue connection.
      *
-     * @param  string  $connection
-     * @param  string  $queue
-     * @param  string  $delay
-     * @param  string  $memory
-     * @param  int     $timeout
+     * @param  string $connection
+     * @param  string $queue
+     * @param  string $delay
+     * @param  string $memory
+     * @param  int    $timeout
      * @return void
      */
     public function listen($connection, $queue, $delay, $memory, $timeout = 60)
@@ -109,15 +109,17 @@
     /**
      * Run the given process.
      *
-     * @param  \Symfony\Component\Process\Process  $process
-     * @param  int  $memory
+     * @param  \Symfony\Component\Process\Process $process
+     * @param  int                                $memory
      * @return void
      */
     public function runProcess(Process $process, $memory)
     {
-        $process->run(function ($type, $line) {
-            $this->handleWorkerOutput($type, $line);
-        });
+        $process->run(
+            function ($type, $line) {
+                $this->handleWorkerOutput($type, $line);
+            }
+        );
 
         // Once we have run the job we'll go check if the memory limit has been
         // exceeded for the script. If it has, we will kill this script so a
@@ -130,11 +132,11 @@
     /**
      * Create a new Symfony process for the worker.
      *
-     * @param  string  $connection
-     * @param  string  $queue
-     * @param  int     $delay
-     * @param  int     $memory
-     * @param  int     $timeout
+     * @param  string $connection
+     * @param  string $queue
+     * @param  int    $delay
+     * @param  int    $memory
+     * @param  int    $timeout
      * @return \Symfony\Component\Process\Process
      */
     public function makeProcess($connection, $queue, $delay, $memory, $timeout)
@@ -167,8 +169,8 @@
     /**
      * Handle output from the worker process.
      *
-     * @param  int  $type
-     * @param  string  $line
+     * @param  int    $type
+     * @param  string $line
      * @return void
      */
     protected function handleWorkerOutput($type, $line)
@@ -181,7 +183,7 @@
     /**
      * Determine if the memory limit has been exceeded.
      *
-     * @param  int  $memoryLimit
+     * @param  int $memoryLimit
      * @return bool
      */
     public function memoryExceeded($memoryLimit)
@@ -202,7 +204,7 @@
     /**
      * Set the output handler callback.
      *
-     * @param  \Closure  $outputHandler
+     * @param  \Closure $outputHandler
      * @return void
      */
     public function setOutputHandler(Closure $outputHandler)
@@ -223,7 +225,7 @@
     /**
      * Set the current environment.
      *
-     * @param  string  $environment
+     * @param  string $environment
      * @return void
      */
     public function setEnvironment($environment)
@@ -244,7 +246,7 @@
     /**
      * Set the amount of seconds to wait before polling the queue.
      *
-     * @param  int  $sleep
+     * @param  int $sleep
      * @return void
      */
     public function setSleep($sleep)
@@ -255,7 +257,7 @@
     /**
      * Set the amount of times to try a job before logging it failed.
      *
-     * @param  int  $tries
+     * @param  int $tries
      * @return void
      */
     public function setMaxTries($tries)

--- vendor/laravel/framework/src/Illuminate/Queue/NullQueue.php
+++ PHP_CodeSniffer
@@ -9,9 +9,9 @@
     /**
      * Push a new job onto the queue.
      *
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  string $job
+     * @param  mixed  $data
+     * @param  string $queue
      * @return mixed
      */
     public function push($job, $data = '', $queue = null)
@@ -22,9 +22,9 @@
     /**
      * Push a raw payload onto the queue.
      *
-     * @param  string  $payload
-     * @param  string  $queue
-     * @param  array   $options
+     * @param  string $payload
+     * @param  string $queue
+     * @param  array  $options
      * @return mixed
      */
     public function pushRaw($payload, $queue = null, array $options = [])
@@ -35,10 +35,10 @@
     /**
      * Push a new job onto the queue after a delay.
      *
-     * @param  \DateTime|int  $delay
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  \DateTime|int $delay
+     * @param  string        $job
+     * @param  mixed         $data
+     * @param  string        $queue
      * @return mixed
      */
     public function later($delay, $job, $data = '', $queue = null)
@@ -49,7 +49,7 @@
     /**
      * Pop the next job off of the queue.
      *
-     * @param  string  $queue
+     * @param  string $queue
      * @return \Illuminate\Contracts\Queue\Job|null
      */
     public function pop($queue = null)

--- vendor/laravel/framework/src/Illuminate/Queue/Queue.php
+++ PHP_CodeSniffer
@@ -30,9 +30,9 @@
     /**
      * Push a new job onto the queue.
      *
-     * @param  string  $queue
-     * @param  string  $job
-     * @param  mixed   $data
+     * @param  string $queue
+     * @param  string $job
+     * @param  mixed  $data
      * @return mixed
      */
     public function pushOn($queue, $job, $data = '')
@@ -43,10 +43,10 @@
     /**
      * Push a new job onto the queue after a delay.
      *
-     * @param  string  $queue
-     * @param  \DateTime|int  $delay
-     * @param  string  $job
-     * @param  mixed   $data
+     * @param  string        $queue
+     * @param  \DateTime|int $delay
+     * @param  string        $job
+     * @param  mixed         $data
      * @return mixed
      */
     public function laterOn($queue, $delay, $job, $data = '')
@@ -57,9 +57,9 @@
     /**
      * Push an array of jobs onto the queue.
      *
-     * @param  array   $jobs
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  array  $jobs
+     * @param  mixed  $data
+     * @param  string $queue
      * @return mixed
      */
     public function bulk($jobs, $data = '', $queue = null)
@@ -72,9 +72,9 @@
     /**
      * Create a payload string from the given job and data.
      *
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  string $job
+     * @param  mixed  $data
+     * @param  string $queue
      * @return string
      */
     protected function createPayload($job, $data = '', $queue = null)
@@ -84,10 +84,12 @@
         }
 
         if (is_object($job)) {
-            return json_encode([
+            return json_encode(
+                [
                 'job' => 'Illuminate\Queue\CallQueuedHandler@call',
                 'data' => ['commandName' => get_class($job), 'command' => serialize(clone $job)],
-            ]);
+                ]
+            );
         }
 
         return json_encode($this->createPlainPayload($job, $data));
@@ -96,7 +98,7 @@
     /**
      * Create a typical, "plain" queue payload array.
      *
-     * @param  string  $job
+     * @param  string $job
      * @param  mixed  $data
      * @return array
      */
@@ -108,7 +110,7 @@
     /**
      * Prepare any queueable entities for storage in the queue.
      *
-     * @param  mixed  $data
+     * @param  mixed $data
      * @return mixed
      */
     protected function prepareQueueableEntities($data)
@@ -118,13 +120,15 @@
         }
 
         if (is_array($data)) {
-            $data = array_map(function ($d) {
-                if (is_array($d)) {
-                    return $this->prepareQueueableEntities($d);
-                }
-
-                return $this->prepareQueueableEntity($d);
-            }, $data);
+            $data = array_map(
+                function ($d) {
+                    if (is_array($d)) {
+                        return $this->prepareQueueableEntities($d);
+                    }
+
+                    return $this->prepareQueueableEntity($d);
+                }, $data
+            );
         }
 
         return $data;
@@ -133,7 +137,7 @@
     /**
      * Prepare a single queueable entity for storage on the queue.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return mixed
      */
     protected function prepareQueueableEntity($value)
@@ -148,8 +152,8 @@
     /**
      * Create a payload string for the given Closure job.
      *
-     * @param  \Closure  $job
-     * @param  mixed     $data
+     * @param  \Closure $job
+     * @param  mixed    $data
      * @return array
      */
     protected function createClosurePayload($job, $data)
@@ -162,9 +166,9 @@
     /**
      * Set additional meta on a payload string.
      *
-     * @param  string  $payload
-     * @param  string  $key
-     * @param  string  $value
+     * @param  string $payload
+     * @param  string $key
+     * @param  string $value
      * @return string
      */
     protected function setMeta($payload, $key, $value)
@@ -177,7 +181,7 @@
     /**
      * Calculate the number of seconds with the given delay.
      *
-     * @param  \DateTime|int  $delay
+     * @param  \DateTime|int $delay
      * @return int
      */
     protected function getSeconds($delay)
@@ -202,7 +206,7 @@
     /**
      * Set the IoC container instance.
      *
-     * @param  \Illuminate\Container\Container  $container
+     * @param  \Illuminate\Container\Container $container
      * @return void
      */
     public function setContainer(Container $container)
@@ -213,7 +217,7 @@
     /**
      * Get the encrypter implementation.
      *
-     * @return  \Illuminate\Contracts\Encryption\Encrypter
+     * @return \Illuminate\Contracts\Encryption\Encrypter
      *
      * @throws \Exception
      */
@@ -229,7 +233,7 @@
     /**
      * Set the encrypter implementation.
      *
-     * @param  \Illuminate\Contracts\Encryption\Encrypter  $encrypter
+     * @param  \Illuminate\Contracts\Encryption\Encrypter $encrypter
      * @return void
      */
     public function setEncrypter(Encrypter $encrypter)

--- vendor/laravel/framework/src/Illuminate/Queue/QueueManager.php
+++ PHP_CodeSniffer
@@ -33,7 +33,7 @@
     /**
      * Create a new queue manager instance.
      *
-     * @param  \Illuminate\Foundation\Application  $app
+     * @param  \Illuminate\Foundation\Application $app
      * @return void
      */
     public function __construct($app)
@@ -44,7 +44,7 @@
     /**
      * Register an event listener for the before job event.
      *
-     * @param  mixed  $callback
+     * @param  mixed $callback
      * @return void
      */
     public function before($callback)
@@ -55,7 +55,7 @@
     /**
      * Register an event listener for the after job event.
      *
-     * @param  mixed  $callback
+     * @param  mixed $callback
      * @return void
      */
     public function after($callback)
@@ -66,7 +66,7 @@
     /**
      * Register an event listener for the exception occurred job event.
      *
-     * @param  mixed  $callback
+     * @param  mixed $callback
      * @return void
      */
     public function exceptionOccurred($callback)
@@ -77,7 +77,7 @@
     /**
      * Register an event listener for the daemon queue loop.
      *
-     * @param  mixed  $callback
+     * @param  mixed $callback
      * @return void
      */
     public function looping($callback)
@@ -88,7 +88,7 @@
     /**
      * Register an event listener for the failed job event.
      *
-     * @param  mixed  $callback
+     * @param  mixed $callback
      * @return void
      */
     public function failing($callback)
@@ -99,7 +99,7 @@
     /**
      * Register an event listener for the daemon queue stopping.
      *
-     * @param  mixed  $callback
+     * @param  mixed $callback
      * @return void
      */
     public function stopping($callback)
@@ -110,7 +110,7 @@
     /**
      * Determine if the driver is connected.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return bool
      */
     public function connected($name = null)
@@ -121,7 +121,7 @@
     /**
      * Resolve a queue connection instance.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Queue\Queue
      */
     public function connection($name = null)
@@ -145,7 +145,7 @@
     /**
      * Resolve a queue connection.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Contracts\Queue\Queue
      */
     protected function resolve($name)
@@ -158,7 +158,7 @@
     /**
      * Get the connector for a given driver.
      *
-     * @param  string  $driver
+     * @param  string $driver
      * @return \Illuminate\Queue\Connectors\ConnectorInterface
      *
      * @throws \InvalidArgumentException
@@ -175,8 +175,8 @@
     /**
      * Add a queue connection resolver.
      *
-     * @param  string    $driver
-     * @param  \Closure  $resolver
+     * @param  string   $driver
+     * @param  \Closure $resolver
      * @return void
      */
     public function extend($driver, Closure $resolver)
@@ -187,8 +187,8 @@
     /**
      * Add a queue connection resolver.
      *
-     * @param  string    $driver
-     * @param  \Closure  $resolver
+     * @param  string   $driver
+     * @param  \Closure $resolver
      * @return void
      */
     public function addConnector($driver, Closure $resolver)
@@ -199,7 +199,7 @@
     /**
      * Get the queue connection configuration.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return array
      */
     protected function getConfig($name)
@@ -224,7 +224,7 @@
     /**
      * Set the name of the default queue connection.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function setDefaultDriver($name)
@@ -235,7 +235,7 @@
     /**
      * Get the full name for the given connection.
      *
-     * @param  string  $connection
+     * @param  string $connection
      * @return string
      */
     public function getName($connection = null)
@@ -256,8 +256,8 @@
     /**
      * Dynamically pass calls to the default connection.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      */
     public function __call($method, $parameters)

--- vendor/laravel/framework/src/Illuminate/Queue/QueueServiceProvider.php
+++ PHP_CodeSniffer
@@ -50,20 +50,24 @@
      */
     protected function registerManager()
     {
-        $this->app->singleton('queue', function ($app) {
-            // Once we have an instance of the queue manager, we will register the various
-            // resolvers for the queue connectors. These connectors are responsible for
-            // creating the classes that accept queue configs and instantiate queues.
-            $manager = new QueueManager($app);
-
-            $this->registerConnectors($manager);
-
-            return $manager;
-        });
-
-        $this->app->singleton('queue.connection', function ($app) {
-            return $app['queue']->connection();
-        });
+        $this->app->singleton(
+            'queue', function ($app) {
+                // Once we have an instance of the queue manager, we will register the various
+                // resolvers for the queue connectors. These connectors are responsible for
+                // creating the classes that accept queue configs and instantiate queues.
+                $manager = new QueueManager($app);
+
+                $this->registerConnectors($manager);
+
+                return $manager;
+            }
+        );
+
+        $this->app->singleton(
+            'queue.connection', function ($app) {
+                return $app['queue']->connection();
+            }
+        );
     }
 
     /**
@@ -77,9 +81,11 @@
 
         $this->registerRestartCommand();
 
-        $this->app->singleton('queue.worker', function ($app) {
-            return new Worker($app['queue'], $app['queue.failer'], $app['events']);
-        });
+        $this->app->singleton(
+            'queue.worker', function ($app) {
+                return new Worker($app['queue'], $app['queue.failer'], $app['events']);
+            }
+        );
     }
 
     /**
@@ -89,9 +95,11 @@
      */
     protected function registerWorkCommand()
     {
-        $this->app->singleton('command.queue.work', function ($app) {
-            return new WorkCommand($app['queue.worker']);
-        });
+        $this->app->singleton(
+            'command.queue.work', function ($app) {
+                return new WorkCommand($app['queue.worker']);
+            }
+        );
 
         $this->commands('command.queue.work');
     }
@@ -105,9 +113,11 @@
     {
         $this->registerListenCommand();
 
-        $this->app->singleton('queue.listener', function ($app) {
-            return new Listener($app->basePath());
-        });
+        $this->app->singleton(
+            'queue.listener', function ($app) {
+                return new Listener($app->basePath());
+            }
+        );
     }
 
     /**
@@ -117,9 +127,11 @@
      */
     protected function registerListenCommand()
     {
-        $this->app->singleton('command.queue.listen', function ($app) {
-            return new ListenCommand($app['queue.listener']);
-        });
+        $this->app->singleton(
+            'command.queue.listen', function ($app) {
+                return new ListenCommand($app['queue.listener']);
+            }
+        );
 
         $this->commands('command.queue.listen');
     }
@@ -131,9 +143,11 @@
      */
     public function registerRestartCommand()
     {
-        $this->app->singleton('command.queue.restart', function () {
-            return new RestartCommand;
-        });
+        $this->app->singleton(
+            'command.queue.restart', function () {
+                return new RestartCommand;
+            }
+        );
 
         $this->commands('command.queue.restart');
     }
@@ -141,7 +155,7 @@
     /**
      * Register the connectors on the queue manager.
      *
-     * @param  \Illuminate\Queue\QueueManager  $manager
+     * @param  \Illuminate\Queue\QueueManager $manager
      * @return void
      */
     public function registerConnectors($manager)
@@ -154,81 +168,93 @@
     /**
      * Register the Null queue connector.
      *
-     * @param  \Illuminate\Queue\QueueManager  $manager
+     * @param  \Illuminate\Queue\QueueManager $manager
      * @return void
      */
     protected function registerNullConnector($manager)
     {
-        $manager->addConnector('null', function () {
-            return new NullConnector;
-        });
+        $manager->addConnector(
+            'null', function () {
+                return new NullConnector;
+            }
+        );
     }
 
     /**
      * Register the Sync queue connector.
      *
-     * @param  \Illuminate\Queue\QueueManager  $manager
+     * @param  \Illuminate\Queue\QueueManager $manager
      * @return void
      */
     protected function registerSyncConnector($manager)
     {
-        $manager->addConnector('sync', function () {
-            return new SyncConnector;
-        });
+        $manager->addConnector(
+            'sync', function () {
+                return new SyncConnector;
+            }
+        );
     }
 
     /**
      * Register the Beanstalkd queue connector.
      *
-     * @param  \Illuminate\Queue\QueueManager  $manager
+     * @param  \Illuminate\Queue\QueueManager $manager
      * @return void
      */
     protected function registerBeanstalkdConnector($manager)
     {
-        $manager->addConnector('beanstalkd', function () {
-            return new BeanstalkdConnector;
-        });
+        $manager->addConnector(
+            'beanstalkd', function () {
+                return new BeanstalkdConnector;
+            }
+        );
     }
 
     /**
      * Register the database queue connector.
      *
-     * @param  \Illuminate\Queue\QueueManager  $manager
+     * @param  \Illuminate\Queue\QueueManager $manager
      * @return void
      */
     protected function registerDatabaseConnector($manager)
     {
-        $manager->addConnector('database', function () {
-            return new DatabaseConnector($this->app['db']);
-        });
+        $manager->addConnector(
+            'database', function () {
+                return new DatabaseConnector($this->app['db']);
+            }
+        );
     }
 
     /**
      * Register the Redis queue connector.
      *
-     * @param  \Illuminate\Queue\QueueManager  $manager
+     * @param  \Illuminate\Queue\QueueManager $manager
      * @return void
      */
     protected function registerRedisConnector($manager)
     {
         $app = $this->app;
 
-        $manager->addConnector('redis', function () use ($app) {
-            return new RedisConnector($app['redis']);
-        });
+        $manager->addConnector(
+            'redis', function () use ($app) {
+                return new RedisConnector($app['redis']);
+            }
+        );
     }
 
     /**
      * Register the Amazon SQS queue connector.
      *
-     * @param  \Illuminate\Queue\QueueManager  $manager
+     * @param  \Illuminate\Queue\QueueManager $manager
      * @return void
      */
     protected function registerSqsConnector($manager)
     {
-        $manager->addConnector('sqs', function () {
-            return new SqsConnector;
-        });
+        $manager->addConnector(
+            'sqs', function () {
+                return new SqsConnector;
+            }
+        );
     }
 
     /**
@@ -238,15 +264,17 @@
      */
     protected function registerFailedJobServices()
     {
-        $this->app->singleton('queue.failer', function ($app) {
-            $config = $app['config']['queue.failed'];
-
-            if (isset($config['table'])) {
-                return new DatabaseFailedJobProvider($app['db'], $config['database'], $config['table']);
-            } else {
-                return new NullFailedJobProvider;
+        $this->app->singleton(
+            'queue.failer', function ($app) {
+                $config = $app['config']['queue.failed'];
+
+                if (isset($config['table'])) {
+                    return new DatabaseFailedJobProvider($app['db'], $config['database'], $config['table']);
+                } else {
+                    return new NullFailedJobProvider;
+                }
             }
-        });
+        );
     }
 
     /**
@@ -256,9 +284,11 @@
      */
     protected function registerQueueClosure()
     {
-        $this->app->singleton('IlluminateQueueClosure', function ($app) {
-            return new IlluminateQueueClosure($app['encrypter']);
-        });
+        $this->app->singleton(
+            'IlluminateQueueClosure', function ($app) {
+                return new IlluminateQueueClosure($app['encrypter']);
+            }
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Queue/RedisQueue.php
+++ PHP_CodeSniffer
@@ -41,9 +41,9 @@
     /**
      * Create a new Redis queue instance.
      *
-     * @param  \Illuminate\Redis\Database  $redis
-     * @param  string  $default
-     * @param  string  $connection
+     * @param  \Illuminate\Redis\Database $redis
+     * @param  string                     $default
+     * @param  string                     $connection
      * @return void
      */
     public function __construct(Database $redis, $default = 'default', $connection = null)
@@ -56,9 +56,9 @@
     /**
      * Push a new job onto the queue.
      *
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  string $job
+     * @param  mixed  $data
+     * @param  string $queue
      * @return mixed
      */
     public function push($job, $data = '', $queue = null)
@@ -69,9 +69,9 @@
     /**
      * Push a raw payload onto the queue.
      *
-     * @param  string  $payload
-     * @param  string  $queue
-     * @param  array   $options
+     * @param  string $payload
+     * @param  string $queue
+     * @param  array  $options
      * @return mixed
      */
     public function pushRaw($payload, $queue = null, array $options = [])
@@ -84,10 +84,10 @@
     /**
      * Push a new job onto the queue after a delay.
      *
-     * @param  \DateTime|int  $delay
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  \DateTime|int $delay
+     * @param  string        $job
+     * @param  mixed         $data
+     * @param  string        $queue
      * @return mixed
      */
     public function later($delay, $job, $data = '', $queue = null)
@@ -104,10 +104,10 @@
     /**
      * Release a reserved job back onto the queue.
      *
-     * @param  string  $queue
-     * @param  string  $payload
-     * @param  int  $delay
-     * @param  int  $attempts
+     * @param  string $queue
+     * @param  string $payload
+     * @param  int    $delay
+     * @param  int    $attempts
      * @return void
      */
     public function release($queue, $payload, $delay, $attempts)
@@ -120,7 +120,7 @@
     /**
      * Pop the next job off of the queue.
      *
-     * @param  string  $queue
+     * @param  string $queue
      * @return \Illuminate\Contracts\Queue\Job|null
      */
     public function pop($queue = null)
@@ -145,8 +145,8 @@
     /**
      * Delete a reserved job from the queue.
      *
-     * @param  string  $queue
-     * @param  string  $job
+     * @param  string $queue
+     * @param  string $job
      * @return void
      */
     public function deleteReserved($queue, $job)
@@ -157,7 +157,7 @@
     /**
      * Migrate all of the waiting jobs in the queue.
      *
-     * @param  string  $queue
+     * @param  string $queue
      * @return void
      */
     protected function migrateAllExpiredJobs($queue)
@@ -170,39 +170,41 @@
     /**
      * Migrate the delayed jobs that are ready to the regular queue.
      *
-     * @param  string  $from
-     * @param  string  $to
+     * @param  string $from
+     * @param  string $to
      * @return void
      */
     public function migrateExpiredJobs($from, $to)
     {
         $options = ['cas' => true, 'watch' => $from, 'retry' => 10];
 
-        $this->getConnection()->transaction($options, function ($transaction) use ($from, $to) {
-            // First we need to get all of jobs that have expired based on the current time
-            // so that we can push them onto the main queue. After we get them we simply
-            // remove them from this "delay" queues. All of this within a transaction.
-            $jobs = $this->getExpiredJobs(
-                $transaction, $from, $time = $this->getTime()
-            );
-
-            // If we actually found any jobs, we will remove them from the old queue and we
-            // will insert them onto the new (ready) "queue". This means they will stand
-            // ready to be processed by the queue worker whenever their turn comes up.
-            if (count($jobs) > 0) {
-                $this->removeExpiredJobs($transaction, $from, $time);
+        $this->getConnection()->transaction(
+            $options, function ($transaction) use ($from, $to) {
+                // First we need to get all of jobs that have expired based on the current time
+                // so that we can push them onto the main queue. After we get them we simply
+                // remove them from this "delay" queues. All of this within a transaction.
+                $jobs = $this->getExpiredJobs(
+                    $transaction, $from, $time = $this->getTime()
+                );
+
+                // If we actually found any jobs, we will remove them from the old queue and we
+                // will insert them onto the new (ready) "queue". This means they will stand
+                // ready to be processed by the queue worker whenever their turn comes up.
+                if (count($jobs) > 0) {
+                    $this->removeExpiredJobs($transaction, $from, $time);
 
-                $this->pushExpiredJobsOntoNewQueue($transaction, $to, $jobs);
+                    $this->pushExpiredJobsOntoNewQueue($transaction, $to, $jobs);
+                }
             }
-        });
+        );
     }
 
     /**
      * Get the expired jobs from a given queue.
      *
-     * @param  \Predis\Transaction\MultiExec  $transaction
-     * @param  string  $from
-     * @param  int  $time
+     * @param  \Predis\Transaction\MultiExec $transaction
+     * @param  string                        $from
+     * @param  int                           $time
      * @return array
      */
     protected function getExpiredJobs($transaction, $from, $time)
@@ -213,9 +215,9 @@
     /**
      * Remove the expired jobs from a given queue.
      *
-     * @param  \Predis\Transaction\MultiExec  $transaction
-     * @param  string  $from
-     * @param  int  $time
+     * @param  \Predis\Transaction\MultiExec $transaction
+     * @param  string                        $from
+     * @param  int                           $time
      * @return void
      */
     protected function removeExpiredJobs($transaction, $from, $time)
@@ -228,9 +230,9 @@
     /**
      * Push all of the given jobs onto another queue.
      *
-     * @param  \Predis\Transaction\MultiExec  $transaction
-     * @param  string  $to
-     * @param  array  $jobs
+     * @param  \Predis\Transaction\MultiExec $transaction
+     * @param  string                        $to
+     * @param  array                         $jobs
      * @return void
      */
     protected function pushExpiredJobsOntoNewQueue($transaction, $to, $jobs)
@@ -241,9 +243,9 @@
     /**
      * Create a payload string from the given job and data.
      *
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  string $job
+     * @param  mixed  $data
+     * @param  string $queue
      * @return string
      */
     protected function createPayload($job, $data = '', $queue = null)
@@ -268,7 +270,7 @@
     /**
      * Get the queue or return the default.
      *
-     * @param  string|null  $queue
+     * @param  string|null $queue
      * @return string
      */
     protected function getQueue($queue)
@@ -309,7 +311,7 @@
     /**
      * Set the expiration time in seconds.
      *
-     * @param  int|null  $seconds
+     * @param  int|null $seconds
      * @return void
      */
     public function setExpire($seconds)

--- vendor/laravel/framework/src/Illuminate/Queue/SerializesModels.php
+++ PHP_CodeSniffer
@@ -20,14 +20,18 @@
         $properties = (new ReflectionClass($this))->getProperties();
 
         foreach ($properties as $property) {
-            $property->setValue($this, $this->getSerializedPropertyValue(
-                $this->getPropertyValue($property)
-            ));
+            $property->setValue(
+                $this, $this->getSerializedPropertyValue(
+                    $this->getPropertyValue($property)
+                )
+            );
         }
 
-        return array_map(function ($p) {
-            return $p->getName();
-        }, $properties);
+        return array_map(
+            function ($p) {
+                return $p->getName();
+            }, $properties
+        );
     }
 
     /**
@@ -38,16 +42,18 @@
     public function __wakeup()
     {
         foreach ((new ReflectionClass($this))->getProperties() as $property) {
-            $property->setValue($this, $this->getRestoredPropertyValue(
-                $this->getPropertyValue($property)
-            ));
+            $property->setValue(
+                $this, $this->getRestoredPropertyValue(
+                    $this->getPropertyValue($property)
+                )
+            );
         }
     }
 
     /**
      * Get the property value prepared for serialization.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return mixed
      */
     protected function getSerializedPropertyValue($value)
@@ -62,7 +68,7 @@
     /**
      * Get the restored property value after deserialization.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return mixed
      */
     protected function getRestoredPropertyValue($value)
@@ -79,7 +85,7 @@
     /**
      * Restore a queueable collection instance.
      *
-     * @param  \Illuminate\Contracts\Database\ModelIdentifier  $value
+     * @param  \Illuminate\Contracts\Database\ModelIdentifier $value
      * @return \Illuminate\Database\Eloquent\Collection
      */
     protected function restoreCollection($value)
@@ -91,13 +97,13 @@
         $model = new $value->class;
 
         return $model->newQuery()->useWritePdo()
-                    ->whereIn($model->getKeyName(), $value->id)->get();
+            ->whereIn($model->getKeyName(), $value->id)->get();
     }
 
     /**
      * Get the property value for the given property.
      *
-     * @param  \ReflectionProperty  $property
+     * @param  \ReflectionProperty $property
      * @return mixed
      */
     protected function getPropertyValue(ReflectionProperty $property)

--- vendor/laravel/framework/src/Illuminate/Queue/SqsQueue.php
+++ PHP_CodeSniffer
@@ -39,9 +39,9 @@
     /**
      * Create a new Amazon SQS queue instance.
      *
-     * @param  \Aws\Sqs\SqsClient  $sqs
-     * @param  string  $default
-     * @param  string  $prefix
+     * @param  \Aws\Sqs\SqsClient $sqs
+     * @param  string             $default
+     * @param  string             $prefix
      * @return void
      */
     public function __construct(SqsClient $sqs, $default, $prefix = '')
@@ -54,9 +54,9 @@
     /**
      * Push a new job onto the queue.
      *
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  string $job
+     * @param  mixed  $data
+     * @param  string $queue
      * @return mixed
      */
     public function push($job, $data = '', $queue = null)
@@ -67,9 +67,9 @@
     /**
      * Push a raw payload onto the queue.
      *
-     * @param  string  $payload
-     * @param  string  $queue
-     * @param  array   $options
+     * @param  string $payload
+     * @param  string $queue
+     * @param  array  $options
      * @return mixed
      */
     public function pushRaw($payload, $queue = null, array $options = [])
@@ -82,10 +82,10 @@
     /**
      * Push a new job onto the queue after a delay.
      *
-     * @param  \DateTime|int  $delay
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  \DateTime|int $delay
+     * @param  string        $job
+     * @param  mixed         $data
+     * @param  string        $queue
      * @return mixed
      */
     public function later($delay, $job, $data = '', $queue = null)
@@ -94,16 +94,18 @@
 
         $delay = $this->getSeconds($delay);
 
-        return $this->sqs->sendMessage([
+        return $this->sqs->sendMessage(
+            [
             'QueueUrl' => $this->getQueue($queue), 'MessageBody' => $payload, 'DelaySeconds' => $delay,
 
-        ])->get('MessageId');
+            ]
+        )->get('MessageId');
     }
 
     /**
      * Pop the next job off of the queue.
      *
-     * @param  string  $queue
+     * @param  string $queue
      * @return \Illuminate\Contracts\Queue\Job|null
      */
     public function pop($queue = null)
@@ -126,7 +128,7 @@
     /**
      * Define the job creator callback for the connection.
      *
-     * @param  callable  $callback
+     * @param  callable $callback
      * @return $this
      */
     public function createJobsUsing(callable $callback)
@@ -139,7 +141,7 @@
     /**
      * Get the queue or return the default.
      *
-     * @param  string|null  $queue
+     * @param  string|null $queue
      * @return string
      */
     public function getQueue($queue)

--- vendor/laravel/framework/src/Illuminate/Queue/SyncQueue.php
+++ PHP_CodeSniffer
@@ -13,9 +13,9 @@
     /**
      * Push a new job onto the queue.
      *
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  string $job
+     * @param  mixed  $data
+     * @param  string $queue
      * @return mixed
      *
      * @throws \Exception|\Throwable
@@ -50,9 +50,9 @@
     /**
      * Push a raw payload onto the queue.
      *
-     * @param  string  $payload
-     * @param  string  $queue
-     * @param  array   $options
+     * @param  string $payload
+     * @param  string $queue
+     * @param  array  $options
      * @return mixed
      */
     public function pushRaw($payload, $queue = null, array $options = [])
@@ -63,10 +63,10 @@
     /**
      * Push a new job onto the queue after a delay.
      *
-     * @param  \DateTime|int  $delay
-     * @param  string  $job
-     * @param  mixed   $data
-     * @param  string  $queue
+     * @param  \DateTime|int $delay
+     * @param  string        $job
+     * @param  mixed         $data
+     * @param  string        $queue
      * @return mixed
      */
     public function later($delay, $job, $data = '', $queue = null)
@@ -77,7 +77,7 @@
     /**
      * Pop the next job off of the queue.
      *
-     * @param  string  $queue
+     * @param  string $queue
      * @return \Illuminate\Contracts\Queue\Job|null
      */
     public function pop($queue = null)
@@ -88,7 +88,7 @@
     /**
      * Resolve a Sync job instance.
      *
-     * @param  string  $payload
+     * @param  string $payload
      * @return \Illuminate\Queue\Jobs\SyncJob
      */
     protected function resolveJob($payload)
@@ -99,7 +99,7 @@
     /**
      * Raise the before queue job event.
      *
-     * @param  \Illuminate\Contracts\Queue\Job  $job
+     * @param  \Illuminate\Contracts\Queue\Job $job
      * @return void
      */
     protected function raiseBeforeJobEvent(Job $job)
@@ -114,7 +114,7 @@
     /**
      * Raise the after queue job event.
      *
-     * @param  \Illuminate\Contracts\Queue\Job  $job
+     * @param  \Illuminate\Contracts\Queue\Job $job
      * @return void
      */
     protected function raiseAfterJobEvent(Job $job)
@@ -129,8 +129,8 @@
     /**
      * Raise the exception occurred queue job event.
      *
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  \Throwable  $exception
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  \Throwable                      $exception
      * @return void
      */
     protected function raiseExceptionOccurredJobEvent(Job $job, $exception)
@@ -145,7 +145,7 @@
     /**
      * Handle the failed job.
      *
-     * @param  \Illuminate\Contracts\Queue\Job  $job
+     * @param  \Illuminate\Contracts\Queue\Job $job
      * @return array
      */
     protected function handleFailedJob(Job $job)
@@ -158,7 +158,7 @@
     /**
      * Raise the failed queue job event.
      *
-     * @param  \Illuminate\Contracts\Queue\Job  $job
+     * @param  \Illuminate\Contracts\Queue\Job $job
      * @return void
      */
     protected function raiseFailedJobEvent(Job $job)

--- vendor/laravel/framework/src/Illuminate/Queue/Worker.php
+++ PHP_CodeSniffer
@@ -51,15 +51,16 @@
     /**
      * Create a new queue worker.
      *
-     * @param  \Illuminate\Queue\QueueManager  $manager
-     * @param  \Illuminate\Queue\Failed\FailedJobProviderInterface  $failer
-     * @param  \Illuminate\Contracts\Events\Dispatcher  $events
+     * @param  \Illuminate\Queue\QueueManager                      $manager
+     * @param  \Illuminate\Queue\Failed\FailedJobProviderInterface $failer
+     * @param  \Illuminate\Contracts\Events\Dispatcher             $events
      * @return void
      */
     public function __construct(QueueManager $manager,
-                                FailedJobProviderInterface $failer = null,
-                                Dispatcher $events = null)
-    {
+        FailedJobProviderInterface $failer = null,
+        Dispatcher $events = null
+    ) {
+    
         $this->failer = $failer;
         $this->events = $events;
         $this->manager = $manager;
@@ -68,12 +69,12 @@
     /**
      * Listen to the given queue in a loop.
      *
-     * @param  string  $connectionName
-     * @param  string  $queue
-     * @param  int     $delay
-     * @param  int     $memory
-     * @param  int     $sleep
-     * @param  int     $maxTries
+     * @param  string $connectionName
+     * @param  string $queue
+     * @param  int    $delay
+     * @param  int    $memory
+     * @param  int    $sleep
+     * @param  int    $maxTries
      * @return array
      */
     public function daemon($connectionName, $queue = null, $delay = 0, $memory = 128, $sleep = 3, $maxTries = 0)
@@ -98,11 +99,11 @@
     /**
      * Run the next job for the daemon worker.
      *
-     * @param  string  $connectionName
-     * @param  string  $queue
-     * @param  int  $delay
-     * @param  int  $sleep
-     * @param  int  $maxTries
+     * @param  string $connectionName
+     * @param  string $queue
+     * @param  int    $delay
+     * @param  int    $sleep
+     * @param  int    $maxTries
      * @return void
      */
     protected function runNextJobForDaemon($connectionName, $queue, $delay, $sleep, $maxTries)
@@ -134,11 +135,11 @@
     /**
      * Listen to the given queue.
      *
-     * @param  string  $connectionName
-     * @param  string  $queue
-     * @param  int     $delay
-     * @param  int     $sleep
-     * @param  int     $maxTries
+     * @param  string $connectionName
+     * @param  string $queue
+     * @param  int    $delay
+     * @param  int    $sleep
+     * @param  int    $maxTries
      * @return array
      */
     public function pop($connectionName, $queue = null, $delay = 0, $sleep = 3, $maxTries = 0)
@@ -170,8 +171,8 @@
     /**
      * Get the next job from the queue connection.
      *
-     * @param  \Illuminate\Contracts\Queue\Queue  $connection
-     * @param  string  $queue
+     * @param  \Illuminate\Contracts\Queue\Queue $connection
+     * @param  string                            $queue
      * @return \Illuminate\Contracts\Queue\Job|null
      */
     protected function getNextJob($connection, $queue)
@@ -190,10 +191,10 @@
     /**
      * Process a given job from the queue.
      *
-     * @param  string  $connection
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  int  $maxTries
-     * @param  int  $delay
+     * @param  string                          $connection
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  int                             $maxTries
+     * @param  int                             $delay
      * @return array|null
      *
      * @throws \Throwable
@@ -225,10 +226,10 @@
     /**
      * Handle an exception that occurred while the job was running.
      *
-     * @param  string  $connection
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  int  $delay
-     * @param  \Throwable  $e
+     * @param  string                          $connection
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  int                             $delay
+     * @param  \Throwable                      $e
      * @return void
      *
      * @throws \Throwable
@@ -254,8 +255,8 @@
     /**
      * Raise the before queue job event.
      *
-     * @param  string  $connection
-     * @param  \Illuminate\Contracts\Queue\Job  $job
+     * @param  string                          $connection
+     * @param  \Illuminate\Contracts\Queue\Job $job
      * @return void
      */
     protected function raiseBeforeJobEvent($connection, Job $job)
@@ -270,8 +271,8 @@
     /**
      * Raise the after queue job event.
      *
-     * @param  string  $connection
-     * @param  \Illuminate\Contracts\Queue\Job  $job
+     * @param  string                          $connection
+     * @param  \Illuminate\Contracts\Queue\Job $job
      * @return void
      */
     protected function raiseAfterJobEvent($connection, Job $job)
@@ -286,9 +287,9 @@
     /**
      * Raise the exception occurred queue job event.
      *
-     * @param  string  $connection
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  \Throwable  $exception
+     * @param  string                          $connection
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  \Throwable                      $exception
      * @return void
      */
     protected function raiseExceptionOccurredJobEvent($connection, Job $job, $exception)
@@ -303,8 +304,8 @@
     /**
      * Log a failed job into storage.
      *
-     * @param  string  $connection
-     * @param  \Illuminate\Contracts\Queue\Job  $job
+     * @param  string                          $connection
+     * @param  \Illuminate\Contracts\Queue\Job $job
      * @return array
      */
     protected function logFailedJob($connection, Job $job)
@@ -325,9 +326,9 @@
     /**
      * Raise the failed queue job event.
      *
-     * @param  string  $connection
-     * @param  \Illuminate\Contracts\Queue\Job  $job
-     * @param  int|null  $failedId
+     * @param  string                          $connection
+     * @param  \Illuminate\Contracts\Queue\Job $job
+     * @param  int|null                        $failedId
      * @return void
      */
     protected function raiseFailedJobEvent($connection, Job $job, $failedId)
@@ -342,7 +343,7 @@
     /**
      * Determine if the memory limit has been exceeded.
      *
-     * @param  int   $memoryLimit
+     * @param  int $memoryLimit
      * @return bool
      */
     public function memoryExceeded($memoryLimit)
@@ -365,7 +366,7 @@
     /**
      * Sleep the script for a given number of seconds.
      *
-     * @param  int   $seconds
+     * @param  int $seconds
      * @return void
      */
     public function sleep($seconds)
@@ -388,7 +389,7 @@
     /**
      * Determine if the queue worker should restart.
      *
-     * @param  int|null  $lastRestart
+     * @param  int|null $lastRestart
      * @return bool
      */
     protected function queueShouldRestart($lastRestart)
@@ -399,7 +400,7 @@
     /**
      * Set the exception handler to use in Daemon mode.
      *
-     * @param  \Illuminate\Contracts\Debug\ExceptionHandler  $handler
+     * @param  \Illuminate\Contracts\Debug\ExceptionHandler $handler
      * @return void
      */
     public function setDaemonExceptionHandler(ExceptionHandler $handler)
@@ -410,7 +411,7 @@
     /**
      * Set the cache repository implementation.
      *
-     * @param  \Illuminate\Contracts\Cache\Repository  $cache
+     * @param  \Illuminate\Contracts\Cache\Repository $cache
      * @return void
      */
     public function setCache(CacheContract $cache)
@@ -431,7 +432,7 @@
     /**
      * Set the queue manager instance.
      *
-     * @param  \Illuminate\Queue\QueueManager  $manager
+     * @param  \Illuminate\Queue\QueueManager $manager
      * @return void
      */
     public function setManager(QueueManager $manager)

--- vendor/laravel/framework/src/Illuminate/Redis/Database.php
+++ PHP_CodeSniffer
@@ -19,7 +19,7 @@
     /**
      * Create a new Redis connection instance.
      *
-     * @param  array  $servers
+     * @param  array $servers
      * @return void
      */
     public function __construct(array $servers = [])
@@ -38,8 +38,8 @@
     /**
      * Create a new aggregate client supporting sharding.
      *
-     * @param  array  $servers
-     * @param  array  $options
+     * @param  array $servers
+     * @param  array $options
      * @return array
      */
     protected function createAggregateClient(array $servers, array $options = [])
@@ -50,8 +50,8 @@
     /**
      * Create an array of single connection clients.
      *
-     * @param  array  $servers
-     * @param  array  $options
+     * @param  array $servers
+     * @param  array $options
      * @return array
      */
     protected function createSingleClients(array $servers, array $options = [])
@@ -68,7 +68,7 @@
     /**
      * Get a specific Redis connection instance.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Predis\ClientInterface|null
      */
     public function connection($name = 'default')
@@ -79,8 +79,8 @@
     /**
      * Run a command against the Redis database.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      */
     public function command($method, array $parameters = [])
@@ -91,10 +91,10 @@
     /**
      * Subscribe to a set of given channels for messages.
      *
-     * @param  array|string  $channels
-     * @param  \Closure  $callback
-     * @param  string  $connection
-     * @param  string  $method
+     * @param  array|string $channels
+     * @param  \Closure     $callback
+     * @param  string       $connection
+     * @param  string       $method
      * @return void
      */
     public function subscribe($channels, Closure $callback, $connection = null, $method = 'subscribe')
@@ -115,9 +115,9 @@
     /**
      * Subscribe to a set of given channels with wildcards.
      *
-     * @param  array|string  $channels
-     * @param  \Closure  $callback
-     * @param  string  $connection
+     * @param  array|string $channels
+     * @param  \Closure     $callback
+     * @param  string       $connection
      * @return void
      */
     public function psubscribe($channels, Closure $callback, $connection = null)
@@ -128,8 +128,8 @@
     /**
      * Dynamically make a Redis command.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      */
     public function __call($method, $parameters)

--- vendor/laravel/framework/src/Illuminate/Redis/RedisServiceProvider.php
+++ PHP_CodeSniffer
@@ -20,9 +20,11 @@
      */
     public function register()
     {
-        $this->app->singleton('redis', function ($app) {
-            return new Database($app['config']['database.redis']);
-        });
+        $this->app->singleton(
+            'redis', function ($app) {
+                return new Database($app['config']['database.redis']);
+            }
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Routing/Console/ControllerMakeCommand.php
+++ PHP_CodeSniffer
@@ -45,7 +45,7 @@
     /**
      * Get the default namespace for the class.
      *
-     * @param  string  $rootNamespace
+     * @param  string $rootNamespace
      * @return string
      */
     protected function getDefaultNamespace($rootNamespace)
@@ -70,7 +70,7 @@
      *
      * Remove the base controller import if we are already in base namespace.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     protected function buildClass($name)

--- vendor/laravel/framework/src/Illuminate/Routing/Console/MiddlewareMakeCommand.php
+++ PHP_CodeSniffer
@@ -40,7 +40,7 @@
     /**
      * Get the default namespace for the class.
      *
-     * @param  string  $rootNamespace
+     * @param  string $rootNamespace
      * @return string
      */
     protected function getDefaultNamespace($rootNamespace)

--- vendor/laravel/framework/src/Illuminate/Routing/Controller.php
+++ PHP_CodeSniffer
@@ -24,8 +24,8 @@
     /**
      * Register middleware on the controller.
      *
-     * @param  array|string  $middleware
-     * @param  array   $options
+     * @param  array|string $middleware
+     * @param  array        $options
      * @return \Illuminate\Routing\ControllerMiddlewareOptions
      */
     public function middleware($middleware, array $options = [])
@@ -60,7 +60,7 @@
     /**
      * Set the router instance.
      *
-     * @param  \Illuminate\Routing\Router  $router
+     * @param  \Illuminate\Routing\Router $router
      * @return void
      */
     public static function setRouter(Router $router)
@@ -71,8 +71,8 @@
     /**
      * Execute an action on the controller.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return \Symfony\Component\HttpFoundation\Response
      */
     public function callAction($method, $parameters)
@@ -83,7 +83,7 @@
     /**
      * Handle calls to missing methods on the controller.
      *
-     * @param  array   $parameters
+     * @param  array $parameters
      * @return mixed
      *
      * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
@@ -96,8 +96,8 @@
     /**
      * Handle calls to missing methods on the controller.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      *
      * @throws \BadMethodCallException

--- vendor/laravel/framework/src/Illuminate/Routing/ControllerDispatcher.php
+++ PHP_CodeSniffer
@@ -27,13 +27,14 @@
     /**
      * Create a new controller dispatcher instance.
      *
-     * @param  \Illuminate\Routing\Router  $router
-     * @param  \Illuminate\Container\Container  $container
+     * @param  \Illuminate\Routing\Router      $router
+     * @param  \Illuminate\Container\Container $container
      * @return void
      */
     public function __construct(Router $router,
-                                Container $container = null)
-    {
+        Container $container = null
+    ) {
+    
         $this->router = $router;
         $this->container = $container;
     }
@@ -41,10 +42,10 @@
     /**
      * Dispatch a request to a given controller and method.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @param  \Illuminate\Http\Request  $request
-     * @param  string  $controller
-     * @param  string  $method
+     * @param  string                    $controller
+     * @param  string                    $method
      * @return mixed
      */
     public function dispatch(Route $route, Request $request, $controller, $method)
@@ -57,7 +58,7 @@
     /**
      * Make a controller instance via the IoC container.
      *
-     * @param  string  $controller
+     * @param  string $controller
      * @return mixed
      */
     protected function makeController($controller)
@@ -70,10 +71,10 @@
     /**
      * Call the given controller instance method.
      *
-     * @param  \Illuminate\Routing\Controller  $instance
-     * @param  \Illuminate\Routing\Route  $route
-     * @param  \Illuminate\Http\Request  $request
-     * @param  string  $method
+     * @param  \Illuminate\Routing\Controller $instance
+     * @param  \Illuminate\Routing\Route      $route
+     * @param  \Illuminate\Http\Request       $request
+     * @param  string                         $method
      * @return mixed
      */
     protected function callWithinStack($instance, $route, $request, $method)
@@ -89,18 +90,20 @@
         return (new Pipeline($this->container))
                     ->send($request)
                     ->through($middleware)
-                    ->then(function ($request) use ($instance, $route, $method) {
-                        return $this->router->prepareResponse(
-                            $request, $this->call($instance, $route, $method)
-                        );
-                    });
+                    ->then(
+                        function ($request) use ($instance, $route, $method) {
+                            return $this->router->prepareResponse(
+                                $request, $this->call($instance, $route, $method)
+                            );
+                        }
+                    );
     }
 
     /**
      * Get the middleware for the controller instance.
      *
-     * @param  \Illuminate\Routing\Controller  $instance
-     * @param  string  $method
+     * @param  \Illuminate\Routing\Controller $instance
+     * @param  string                         $method
      * @return array
      */
     public function getMiddleware($instance, $method)
@@ -119,7 +122,7 @@
     /**
      * Determine if the given options exclude a particular method.
      *
-     * @param  string  $method
+     * @param  string $method
      * @param  array  $options
      * @return bool
      */
@@ -132,9 +135,9 @@
     /**
      * Call the given controller instance method.
      *
-     * @param  \Illuminate\Routing\Controller  $instance
-     * @param  \Illuminate\Routing\Route  $route
-     * @param  string  $method
+     * @param  \Illuminate\Routing\Controller $instance
+     * @param  \Illuminate\Routing\Route      $route
+     * @param  string                         $method
      * @return mixed
      */
     protected function call($instance, $route, $method)

--- vendor/laravel/framework/src/Illuminate/Routing/ControllerInspector.php
+++ PHP_CodeSniffer
@@ -24,8 +24,8 @@
     /**
      * Get the routable methods for a controller.
      *
-     * @param  string  $controller
-     * @param  string  $prefix
+     * @param  string $controller
+     * @param  string $prefix
      * @return array
      */
     public function getRoutable($controller, $prefix)
@@ -60,7 +60,7 @@
     /**
      * Determine if the given controller method is routable.
      *
-     * @param  \ReflectionMethod  $method
+     * @param  \ReflectionMethod $method
      * @return bool
      */
     public function isRoutable(ReflectionMethod $method)
@@ -75,8 +75,8 @@
     /**
      * Get the method data for a given method.
      *
-     * @param  \ReflectionMethod  $method
-     * @param  string  $prefix
+     * @param  \ReflectionMethod $method
+     * @param  string            $prefix
      * @return array
      */
     public function getMethodData(ReflectionMethod $method, $prefix)
@@ -91,8 +91,8 @@
     /**
      * Get the routable data for an index method.
      *
-     * @param  array   $data
-     * @param  string  $prefix
+     * @param  array  $data
+     * @param  string $prefix
      * @return array
      */
     protected function getIndexData($data, $prefix)
@@ -103,7 +103,7 @@
     /**
      * Extract the verb from a controller action.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     public function getVerb($name)
@@ -114,8 +114,8 @@
     /**
      * Determine the URI from the given method name.
      *
-     * @param  string  $name
-     * @param  string  $prefix
+     * @param  string $name
+     * @param  string $prefix
      * @return string
      */
     public function getPlainUri($name, $prefix)
@@ -126,7 +126,7 @@
     /**
      * Add wildcards to the given URI.
      *
-     * @param  string  $uri
+     * @param  string $uri
      * @return string
      */
     public function addUriWildcards($uri)

--- vendor/laravel/framework/src/Illuminate/Routing/ControllerMiddlewareOptions.php
+++ PHP_CodeSniffer
@@ -14,7 +14,7 @@
     /**
      * Create a new middleware option instance.
      *
-     * @param  array  $options
+     * @param  array $options
      * @return void
      */
     public function __construct(array &$options)
@@ -25,7 +25,7 @@
     /**
      * Set the controller methods the middleware should apply to.
      *
-     * @param  array|string|dynamic  $methods
+     * @param  array|string|dynamic $methods
      * @return $this
      */
     public function only($methods)
@@ -38,7 +38,7 @@
     /**
      * Set the controller methods the middleware should exclude.
      *
-     * @param  array|string|dynamic  $methods
+     * @param  array|string|dynamic $methods
      * @return $this
      */
     public function except($methods)

--- vendor/laravel/framework/src/Illuminate/Routing/Events/RouteMatched.php
+++ PHP_CodeSniffer
@@ -21,7 +21,7 @@
     /**
      * Create a new event instance.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @param  \Illuminate\Http\Request  $request
      * @return void
      */

--- vendor/laravel/framework/src/Illuminate/Routing/Exceptions/UrlGenerationException.php
+++ PHP_CodeSniffer
@@ -9,7 +9,7 @@
     /**
      * Create a new exception for missing route parameters.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @return static
      */
     public static function forMissingParameters($route)

--- vendor/laravel/framework/src/Illuminate/Routing/Matching/HostValidator.php
+++ PHP_CodeSniffer
@@ -10,7 +10,7 @@
     /**
      * Validate a given rule against a route and request.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @param  \Illuminate\Http\Request  $request
      * @return bool
      */

--- vendor/laravel/framework/src/Illuminate/Routing/Matching/MethodValidator.php
+++ PHP_CodeSniffer
@@ -10,7 +10,7 @@
     /**
      * Validate a given rule against a route and request.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @param  \Illuminate\Http\Request  $request
      * @return bool
      */

--- vendor/laravel/framework/src/Illuminate/Routing/Matching/SchemeValidator.php
+++ PHP_CodeSniffer
@@ -10,7 +10,7 @@
     /**
      * Validate a given rule against a route and request.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @param  \Illuminate\Http\Request  $request
      * @return bool
      */

--- vendor/laravel/framework/src/Illuminate/Routing/Matching/UriValidator.php
+++ PHP_CodeSniffer
@@ -10,7 +10,7 @@
     /**
      * Validate a given rule against a route and request.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @param  \Illuminate\Http\Request  $request
      * @return bool
      */

--- vendor/laravel/framework/src/Illuminate/Routing/Matching/ValidatorInterface.php
+++ PHP_CodeSniffer
@@ -10,7 +10,7 @@
     /**
      * Validate a given rule against a route and request.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @param  \Illuminate\Http\Request  $request
      * @return bool
      */

--- vendor/laravel/framework/src/Illuminate/Routing/Middleware/ThrottleRequests.php
+++ PHP_CodeSniffer
@@ -18,7 +18,7 @@
     /**
      * Create a new request throttler.
      *
-     * @param  \Illuminate\Cache\RateLimiter  $limiter
+     * @param  \Illuminate\Cache\RateLimiter $limiter
      * @return void
      */
     public function __construct(RateLimiter $limiter)
@@ -29,10 +29,10 @@
     /**
      * Handle an incoming request.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Closure  $next
-     * @param  int  $maxAttempts
-     * @param  int  $decayMinutes
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Closure                 $next
+     * @param  int                      $maxAttempts
+     * @param  int                      $decayMinutes
      * @return mixed
      */
     public function handle($request, Closure $next, $maxAttempts = 60, $decayMinutes = 1)
@@ -56,7 +56,7 @@
     /**
      * Resolve request signature.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return string
      */
     protected function resolveRequestSignature($request)
@@ -67,8 +67,8 @@
     /**
      * Create a 'too many attempts' response.
      *
-     * @param  string  $key
-     * @param  int  $maxAttempts
+     * @param  string $key
+     * @param  int    $maxAttempts
      * @return \Illuminate\Http\Response
      */
     protected function buildResponse($key, $maxAttempts)
@@ -87,10 +87,10 @@
     /**
      * Add the limit header information to the given response.
      *
-     * @param  \Symfony\Component\HttpFoundation\Response  $response
-     * @param  int  $maxAttempts
-     * @param  int  $remainingAttempts
-     * @param  int|null  $retryAfter
+     * @param  \Symfony\Component\HttpFoundation\Response $response
+     * @param  int                                        $maxAttempts
+     * @param  int                                        $remainingAttempts
+     * @param  int|null                                   $retryAfter
      * @return \Illuminate\Http\Response
      */
     protected function addHeaders(Response $response, $maxAttempts, $remainingAttempts, $retryAfter = null)
@@ -112,9 +112,9 @@
     /**
      * Calculate the number of remaining attempts.
      *
-     * @param  string  $key
-     * @param  int  $maxAttempts
-     * @param  int|null  $retryAfter
+     * @param  string   $key
+     * @param  int      $maxAttempts
+     * @param  int|null $retryAfter
      * @return int
      */
     protected function calculateRemainingAttempts($key, $maxAttempts, $retryAfter = null)

--- vendor/laravel/framework/src/Illuminate/Routing/Pipeline.php
+++ PHP_CodeSniffer
@@ -42,7 +42,7 @@
     /**
      * Get the initial slice to begin the stack call.
      *
-     * @param  \Closure  $destination
+     * @param  \Closure $destination
      * @return \Closure
      */
     protected function getInitialSlice(Closure $destination)
@@ -61,8 +61,8 @@
     /**
      * Handle the given exception.
      *
-     * @param  mixed  $passable
-     * @param  \Exception  $e
+     * @param  mixed      $passable
+     * @param  \Exception $e
      * @return mixed
      *
      * @throws \Exception

--- vendor/laravel/framework/src/Illuminate/Routing/Redirector.php
+++ PHP_CodeSniffer
@@ -24,7 +24,7 @@
     /**
      * Create a new Redirector instance.
      *
-     * @param  \Illuminate\Routing\UrlGenerator  $generator
+     * @param  \Illuminate\Routing\UrlGenerator $generator
      * @return void
      */
     public function __construct(UrlGenerator $generator)
@@ -35,7 +35,7 @@
     /**
      * Create a new redirect response to the "home" route.
      *
-     * @param  int  $status
+     * @param  int $status
      * @return \Illuminate\Http\RedirectResponse
      */
     public function home($status = 302)
@@ -46,8 +46,8 @@
     /**
      * Create a new redirect response to the previous location.
      *
-     * @param  int    $status
-     * @param  array  $headers
+     * @param  int   $status
+     * @param  array $headers
      * @return \Illuminate\Http\RedirectResponse
      */
     public function back($status = 302, $headers = [])
@@ -60,8 +60,8 @@
     /**
      * Create a new redirect response to the current URI.
      *
-     * @param  int    $status
-     * @param  array  $headers
+     * @param  int   $status
+     * @param  array $headers
      * @return \Illuminate\Http\RedirectResponse
      */
     public function refresh($status = 302, $headers = [])
@@ -72,10 +72,10 @@
     /**
      * Create a new redirect response, while putting the current URL in the session.
      *
-     * @param  string  $path
-     * @param  int     $status
-     * @param  array   $headers
-     * @param  bool    $secure
+     * @param  string $path
+     * @param  int    $status
+     * @param  array  $headers
+     * @param  bool   $secure
      * @return \Illuminate\Http\RedirectResponse
      */
     public function guest($path, $status = 302, $headers = [], $secure = null)
@@ -88,10 +88,10 @@
     /**
      * Create a new redirect response to the previously intended location.
      *
-     * @param  string  $default
-     * @param  int     $status
-     * @param  array   $headers
-     * @param  bool    $secure
+     * @param  string $default
+     * @param  int    $status
+     * @param  array  $headers
+     * @param  bool   $secure
      * @return \Illuminate\Http\RedirectResponse
      */
     public function intended($default = '/', $status = 302, $headers = [], $secure = null)
@@ -104,10 +104,10 @@
     /**
      * Create a new redirect response to the given path.
      *
-     * @param  string  $path
-     * @param  int     $status
-     * @param  array   $headers
-     * @param  bool    $secure
+     * @param  string $path
+     * @param  int    $status
+     * @param  array  $headers
+     * @param  bool   $secure
      * @return \Illuminate\Http\RedirectResponse
      */
     public function to($path, $status = 302, $headers = [], $secure = null)
@@ -120,9 +120,9 @@
     /**
      * Create a new redirect response to an external URL (no validation).
      *
-     * @param  string  $path
-     * @param  int     $status
-     * @param  array   $headers
+     * @param  string $path
+     * @param  int    $status
+     * @param  array  $headers
      * @return \Illuminate\Http\RedirectResponse
      */
     public function away($path, $status = 302, $headers = [])
@@ -133,9 +133,9 @@
     /**
      * Create a new redirect response to the given HTTPS path.
      *
-     * @param  string  $path
-     * @param  int     $status
-     * @param  array   $headers
+     * @param  string $path
+     * @param  int    $status
+     * @param  array  $headers
      * @return \Illuminate\Http\RedirectResponse
      */
     public function secure($path, $status = 302, $headers = [])
@@ -146,10 +146,10 @@
     /**
      * Create a new redirect response to a named route.
      *
-     * @param  string  $route
-     * @param  array   $parameters
-     * @param  int     $status
-     * @param  array   $headers
+     * @param  string $route
+     * @param  array  $parameters
+     * @param  int    $status
+     * @param  array  $headers
      * @return \Illuminate\Http\RedirectResponse
      */
     public function route($route, $parameters = [], $status = 302, $headers = [])
@@ -162,10 +162,10 @@
     /**
      * Create a new redirect response to a controller action.
      *
-     * @param  string  $action
-     * @param  array   $parameters
-     * @param  int     $status
-     * @param  array   $headers
+     * @param  string $action
+     * @param  array  $parameters
+     * @param  int    $status
+     * @param  array  $headers
      * @return \Illuminate\Http\RedirectResponse
      */
     public function action($action, $parameters = [], $status = 302, $headers = [])
@@ -178,9 +178,9 @@
     /**
      * Create a new redirect response.
      *
-     * @param  string  $path
-     * @param  int     $status
-     * @param  array   $headers
+     * @param  string $path
+     * @param  int    $status
+     * @param  array  $headers
      * @return \Illuminate\Http\RedirectResponse
      */
     protected function createRedirect($path, $status, $headers)
@@ -209,7 +209,7 @@
     /**
      * Set the active session store.
      *
-     * @param  \Illuminate\Session\Store  $session
+     * @param  \Illuminate\Session\Store $session
      * @return void
      */
     public function setSession(SessionStore $session)

--- vendor/laravel/framework/src/Illuminate/Routing/ResourceRegistrar.php
+++ PHP_CodeSniffer
@@ -44,7 +44,7 @@
     /**
      * Create a new resource registrar instance.
      *
-     * @param  \Illuminate\Routing\Router  $router
+     * @param  \Illuminate\Routing\Router $router
      * @return void
      */
     public function __construct(Router $router)
@@ -55,9 +55,9 @@
     /**
      * Route a resource to a controller.
      *
-     * @param  string  $name
-     * @param  string  $controller
-     * @param  array   $options
+     * @param  string $name
+     * @param  string $controller
+     * @param  array  $options
      * @return void
      */
     public function register($name, $controller, array $options = [])
@@ -90,9 +90,9 @@
     /**
      * Build a set of prefixed resource routes.
      *
-     * @param  string  $name
-     * @param  string  $controller
-     * @param  array   $options
+     * @param  string $name
+     * @param  string $controller
+     * @param  array  $options
      * @return void
      */
     protected function prefixedResource($name, $controller, array $options)
@@ -112,7 +112,7 @@
     /**
      * Extract the resource and prefix from a resource name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return array
      */
     protected function getResourcePrefix($name)
@@ -130,8 +130,8 @@
     /**
      * Get the applicable resource methods.
      *
-     * @param  array  $defaults
-     * @param  array  $options
+     * @param  array $defaults
+     * @param  array $options
      * @return array
      */
     protected function getResourceMethods($defaults, $options)
@@ -148,7 +148,7 @@
     /**
      * Get the base resource URI for a given resource.
      *
-     * @param  string  $resource
+     * @param  string $resource
      * @return string
      */
     public function getResourceUri($resource)
@@ -170,7 +170,7 @@
     /**
      * Get the URI for a nested resource segment array.
      *
-     * @param  array   $segments
+     * @param  array $segments
      * @return string
      */
     protected function getNestedResourceUri(array $segments)
@@ -178,18 +178,22 @@
         // We will spin through the segments and create a place-holder for each of the
         // resource segments, as well as the resource itself. Then we should get an
         // entire string for the resource URI that contains all nested resources.
-        return implode('/', array_map(function ($s) {
-            return $s.'/{'.$this->getResourceWildcard($s).'}';
-        }, $segments));
+        return implode(
+            '/', array_map(
+                function ($s) {
+                    return $s.'/{'.$this->getResourceWildcard($s).'}';
+                }, $segments
+            )
+        );
     }
 
     /**
      * Get the action array for a resource route.
      *
-     * @param  string  $resource
-     * @param  string  $controller
-     * @param  string  $method
-     * @param  array   $options
+     * @param  string $resource
+     * @param  string $controller
+     * @param  string $method
+     * @param  array  $options
      * @return array
      */
     protected function getResourceAction($resource, $controller, $method, $options)
@@ -202,9 +206,9 @@
     /**
      * Get the name for a given resource.
      *
-     * @param  string  $resource
-     * @param  string  $method
-     * @param  array   $options
+     * @param  string $resource
+     * @param  string $method
+     * @param  array  $options
      * @return string
      */
     protected function getResourceName($resource, $method, $options)
@@ -228,9 +232,9 @@
     /**
      * Get the resource name for a grouped resource.
      *
-     * @param  string  $prefix
-     * @param  string  $resource
-     * @param  string  $method
+     * @param  string $prefix
+     * @param  string $resource
+     * @param  string $method
      * @return string
      */
     protected function getGroupResourceName($prefix, $resource, $method)
@@ -247,7 +251,7 @@
     /**
      * Format a resource parameter for usage.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     public function getResourceWildcard($value)
@@ -266,10 +270,10 @@
     /**
      * Add the index method for a resourceful route.
      *
-     * @param  string  $name
-     * @param  string  $base
-     * @param  string  $controller
-     * @param  array   $options
+     * @param  string $name
+     * @param  string $base
+     * @param  string $controller
+     * @param  array  $options
      * @return \Illuminate\Routing\Route
      */
     protected function addResourceIndex($name, $base, $controller, $options)
@@ -284,10 +288,10 @@
     /**
      * Add the create method for a resourceful route.
      *
-     * @param  string  $name
-     * @param  string  $base
-     * @param  string  $controller
-     * @param  array   $options
+     * @param  string $name
+     * @param  string $base
+     * @param  string $controller
+     * @param  array  $options
      * @return \Illuminate\Routing\Route
      */
     protected function addResourceCreate($name, $base, $controller, $options)
@@ -302,10 +306,10 @@
     /**
      * Add the store method for a resourceful route.
      *
-     * @param  string  $name
-     * @param  string  $base
-     * @param  string  $controller
-     * @param  array   $options
+     * @param  string $name
+     * @param  string $base
+     * @param  string $controller
+     * @param  array  $options
      * @return \Illuminate\Routing\Route
      */
     protected function addResourceStore($name, $base, $controller, $options)
@@ -320,10 +324,10 @@
     /**
      * Add the show method for a resourceful route.
      *
-     * @param  string  $name
-     * @param  string  $base
-     * @param  string  $controller
-     * @param  array   $options
+     * @param  string $name
+     * @param  string $base
+     * @param  string $controller
+     * @param  array  $options
      * @return \Illuminate\Routing\Route
      */
     protected function addResourceShow($name, $base, $controller, $options)
@@ -338,10 +342,10 @@
     /**
      * Add the edit method for a resourceful route.
      *
-     * @param  string  $name
-     * @param  string  $base
-     * @param  string  $controller
-     * @param  array   $options
+     * @param  string $name
+     * @param  string $base
+     * @param  string $controller
+     * @param  array  $options
      * @return \Illuminate\Routing\Route
      */
     protected function addResourceEdit($name, $base, $controller, $options)
@@ -356,10 +360,10 @@
     /**
      * Add the update method for a resourceful route.
      *
-     * @param  string  $name
-     * @param  string  $base
-     * @param  string  $controller
-     * @param  array   $options
+     * @param  string $name
+     * @param  string $base
+     * @param  string $controller
+     * @param  array  $options
      * @return void
      */
     protected function addResourceUpdate($name, $base, $controller, $options)
@@ -374,10 +378,10 @@
     /**
      * Add the destroy method for a resourceful route.
      *
-     * @param  string  $name
-     * @param  string  $base
-     * @param  string  $controller
-     * @param  array   $options
+     * @param  string $name
+     * @param  string $base
+     * @param  string $controller
+     * @param  array  $options
      * @return \Illuminate\Routing\Route
      */
     protected function addResourceDestroy($name, $base, $controller, $options)

--- vendor/laravel/framework/src/Illuminate/Routing/ResponseFactory.php
+++ PHP_CodeSniffer
@@ -34,8 +34,8 @@
     /**
      * Create a new response factory instance.
      *
-     * @param  \Illuminate\Contracts\View\Factory  $view
-     * @param  \Illuminate\Routing\Redirector  $redirector
+     * @param  \Illuminate\Contracts\View\Factory $view
+     * @param  \Illuminate\Routing\Redirector     $redirector
      * @return void
      */
     public function __construct(ViewFactory $view, Redirector $redirector)
@@ -47,8 +47,8 @@
     /**
      * Return a new response from the application.
      *
-     * @param  string  $content
-     * @param  int  $status
+     * @param  string $content
+     * @param  int    $status
      * @param  array  $headers
      * @return \Illuminate\Http\Response
      */
@@ -60,9 +60,9 @@
     /**
      * Return a new view response from the application.
      *
-     * @param  string  $view
+     * @param  string $view
      * @param  array  $data
-     * @param  int  $status
+     * @param  int    $status
      * @param  array  $headers
      * @return \Illuminate\Http\Response
      */
@@ -74,10 +74,10 @@
     /**
      * Return a new JSON response from the application.
      *
-     * @param  string|array  $data
-     * @param  int  $status
-     * @param  array  $headers
-     * @param  int  $options
+     * @param  string|array $data
+     * @param  int          $status
+     * @param  array        $headers
+     * @param  int          $options
      * @return \Illuminate\Http\JsonResponse
      */
     public function json($data = [], $status = 200, array $headers = [], $options = 0)
@@ -92,11 +92,11 @@
     /**
      * Return a new JSONP response from the application.
      *
-     * @param  string  $callback
-     * @param  string|array  $data
-     * @param  int  $status
-     * @param  array  $headers
-     * @param  int  $options
+     * @param  string       $callback
+     * @param  string|array $data
+     * @param  int          $status
+     * @param  array        $headers
+     * @param  int          $options
      * @return \Illuminate\Http\JsonResponse
      */
     public function jsonp($callback, $data = [], $status = 200, array $headers = [], $options = 0)
@@ -107,9 +107,9 @@
     /**
      * Return a new streamed response from the application.
      *
-     * @param  \Closure  $callback
-     * @param  int  $status
-     * @param  array  $headers
+     * @param  \Closure $callback
+     * @param  int      $status
+     * @param  array    $headers
      * @return \Symfony\Component\HttpFoundation\StreamedResponse
      */
     public function stream($callback, $status = 200, array $headers = [])
@@ -120,10 +120,10 @@
     /**
      * Create a new file download response.
      *
-     * @param  \SplFileInfo|string  $file
-     * @param  string  $name
-     * @param  array  $headers
-     * @param  string|null  $disposition
+     * @param  \SplFileInfo|string $file
+     * @param  string              $name
+     * @param  array               $headers
+     * @param  string|null         $disposition
      * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
      */
     public function download($file, $name = null, array $headers = [], $disposition = 'attachment')
@@ -141,8 +141,8 @@
      * Return the raw contents of a binary file.
      *
      * @param  \SplFileInfo|string $file
-     * @param  array $headers
-     * @return  \Symfony\Component\HttpFoundation\BinaryFileResponse
+     * @param  array               $headers
+     * @return \Symfony\Component\HttpFoundation\BinaryFileResponse
      */
     public function file($file, array $headers = [])
     {
@@ -152,10 +152,10 @@
     /**
      * Create a new redirect response to the given path.
      *
-     * @param  string  $path
-     * @param  int  $status
-     * @param  array  $headers
-     * @param  bool|null  $secure
+     * @param  string    $path
+     * @param  int       $status
+     * @param  array     $headers
+     * @param  bool|null $secure
      * @return \Illuminate\Http\RedirectResponse
      */
     public function redirectTo($path, $status = 302, $headers = [], $secure = null)
@@ -166,9 +166,9 @@
     /**
      * Create a new redirect response to a named route.
      *
-     * @param  string  $route
+     * @param  string $route
      * @param  array  $parameters
-     * @param  int  $status
+     * @param  int    $status
      * @param  array  $headers
      * @return \Illuminate\Http\RedirectResponse
      */
@@ -180,9 +180,9 @@
     /**
      * Create a new redirect response to a controller action.
      *
-     * @param  string  $action
+     * @param  string $action
      * @param  array  $parameters
-     * @param  int  $status
+     * @param  int    $status
      * @param  array  $headers
      * @return \Illuminate\Http\RedirectResponse
      */
@@ -194,10 +194,10 @@
     /**
      * Create a new redirect response, while putting the current URL in the session.
      *
-     * @param  string  $path
-     * @param  int  $status
-     * @param  array  $headers
-     * @param  bool|null  $secure
+     * @param  string    $path
+     * @param  int       $status
+     * @param  array     $headers
+     * @param  bool|null $secure
      * @return \Illuminate\Http\RedirectResponse
      */
     public function redirectGuest($path, $status = 302, $headers = [], $secure = null)
@@ -208,10 +208,10 @@
     /**
      * Create a new redirect response to the previously intended location.
      *
-     * @param  string  $default
-     * @param  int  $status
-     * @param  array  $headers
-     * @param  bool|null  $secure
+     * @param  string    $default
+     * @param  int       $status
+     * @param  array     $headers
+     * @param  bool|null $secure
      * @return \Illuminate\Http\RedirectResponse
      */
     public function redirectToIntended($default = '/', $status = 302, $headers = [], $secure = null)

--- vendor/laravel/framework/src/Illuminate/Routing/Route.php
+++ PHP_CodeSniffer
@@ -102,9 +102,9 @@
     /**
      * Create a new Route instance.
      *
-     * @param  array|string  $methods
-     * @param  string  $uri
-     * @param  \Closure|array  $action
+     * @param  array|string   $methods
+     * @param  string         $uri
+     * @param  \Closure|array $action
      * @return void
      */
     public function __construct($methods, $uri, $action)
@@ -125,7 +125,7 @@
     /**
      * Run the route action and return the response.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return mixed
      */
     public function run(Request $request)
@@ -146,7 +146,7 @@
     /**
      * Run the route action and return the response.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return mixed
      */
     protected function runCallable(Request $request)
@@ -161,7 +161,7 @@
     /**
      * Run the route action and return the response.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return mixed
      *
      * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
@@ -177,8 +177,8 @@
     /**
      * Determine if the route matches given request.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  bool  $includingMethod
+     * @param  \Illuminate\Http\Request $request
+     * @param  bool                     $includingMethod
      * @return bool
      */
     public function matches(Request $request, $includingMethod = true)
@@ -267,7 +267,7 @@
     /**
      * Get the parameters that are listed in the route / controller signature.
      *
-     * @param string|null  $subClass
+     * @param  string|null $subClass
      * @return array
      */
     public function signatureParameters($subClass = null)
@@ -282,9 +282,11 @@
             $parameters = (new ReflectionFunction($action['uses']))->getParameters();
         }
 
-        return is_null($subClass) ? $parameters : array_filter($parameters, function ($p) use ($subClass) {
-            return $p->getClass() && $p->getClass()->isSubclassOf($subClass);
-        });
+        return is_null($subClass) ? $parameters : array_filter(
+            $parameters, function ($p) use ($subClass) {
+                return $p->getClass() && $p->getClass()->isSubclassOf($subClass);
+            }
+        );
     }
 
     /**
@@ -315,8 +317,8 @@
     /**
      * Get a given parameter from the route.
      *
-     * @param  string  $name
-     * @param  mixed   $default
+     * @param  string $name
+     * @param  mixed  $default
      * @return string|object
      */
     public function getParameter($name, $default = null)
@@ -327,8 +329,8 @@
     /**
      * Get a given parameter from the route.
      *
-     * @param  string  $name
-     * @param  mixed   $default
+     * @param  string $name
+     * @param  mixed  $default
      * @return string|object
      */
     public function parameter($name, $default = null)
@@ -339,8 +341,8 @@
     /**
      * Set a parameter to the given value.
      *
-     * @param  string  $name
-     * @param  mixed   $value
+     * @param  string $name
+     * @param  mixed  $value
      * @return void
      */
     public function setParameter($name, $value)
@@ -353,7 +355,7 @@
     /**
      * Unset a parameter on the route if it is set.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function forgetParameter($name)
@@ -386,9 +388,11 @@
      */
     public function parametersWithoutNulls()
     {
-        return array_filter($this->parameters(), function ($p) {
-            return ! is_null($p);
-        });
+        return array_filter(
+            $this->parameters(), function ($p) {
+                return ! is_null($p);
+            }
+        );
     }
 
     /**
@@ -414,15 +418,17 @@
     {
         preg_match_all('/\{(.*?)\}/', $this->domain().$this->uri, $matches);
 
-        return array_map(function ($m) {
-            return trim($m, '?');
-        }, $matches[1]);
+        return array_map(
+            function ($m) {
+                return trim($m, '?');
+            }, $matches[1]
+        );
     }
 
     /**
      * Bind the route to a given request for execution.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return $this
      */
     public function bind(Request $request)
@@ -437,7 +443,7 @@
     /**
      * Extract the parameter list from the request.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return array
      */
     public function bindParameters(Request $request)
@@ -464,7 +470,7 @@
     /**
      * Get the parameter matches for the path portion of the URI.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return array
      */
     protected function bindPathParameters(Request $request)
@@ -477,8 +483,8 @@
     /**
      * Extract the parameter list from the host part of the request.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  array  $parameters
+     * @param  \Illuminate\Http\Request $request
+     * @param  array                    $parameters
      * @return array
      */
     protected function bindHostParameters(Request $request, $parameters)
@@ -491,7 +497,7 @@
     /**
      * Combine a set of parameter matches with the route's keys.
      *
-     * @param  array  $matches
+     * @param  array $matches
      * @return array
      */
     protected function matchToKeys(array $matches)
@@ -502,15 +508,17 @@
 
         $parameters = array_intersect_key($matches, array_flip($parameterNames));
 
-        return array_filter($parameters, function ($value) {
-            return is_string($value) && strlen($value) > 0;
-        });
+        return array_filter(
+            $parameters, function ($value) {
+                return is_string($value) && strlen($value) > 0;
+            }
+        );
     }
 
     /**
      * Replace null parameters with their defaults.
      *
-     * @param  array  $parameters
+     * @param  array $parameters
      * @return array
      */
     protected function replaceDefaults(array $parameters)
@@ -531,7 +539,7 @@
     /**
      * Parse the route action into a standard array.
      *
-     * @param  callable|array|null  $action
+     * @param  callable|array|null $action
      * @return array
      *
      * @throws \UnexpectedValueException
@@ -562,9 +570,11 @@
         }
 
         if (is_string($action['uses']) && ! Str::contains($action['uses'], '@')) {
-            throw new UnexpectedValueException(sprintf(
-                'Invalid route action: [%s]', $action['uses']
-            ));
+            throw new UnexpectedValueException(
+                sprintf(
+                    'Invalid route action: [%s]', $action['uses']
+                )
+            );
         }
 
         return $action;
@@ -573,14 +583,16 @@
     /**
      * Find the callable in an action array.
      *
-     * @param  array  $action
+     * @param  array $action
      * @return callable
      */
     protected function findCallable(array $action)
     {
-        return Arr::first($action, function ($key, $value) {
-            return is_callable($value) && is_numeric($key);
-        });
+        return Arr::first(
+            $action, function ($key, $value) {
+                return is_callable($value) && is_numeric($key);
+            }
+        );
     }
 
     /**
@@ -606,7 +618,7 @@
     /**
      * Set a default value for the route.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
      * @return $this
      */
@@ -620,8 +632,8 @@
     /**
      * Set a regular expression requirement on the route.
      *
-     * @param  array|string  $name
-     * @param  string  $expression
+     * @param  array|string $name
+     * @param  string       $expression
      * @return $this
      */
     public function where($name, $expression = null)
@@ -636,8 +648,8 @@
     /**
      * Parse arguments to the where method into an array.
      *
-     * @param  array|string  $name
-     * @param  string  $expression
+     * @param  array|string $name
+     * @param  string       $expression
      * @return array
      */
     protected function parseWhere($name, $expression)
@@ -648,7 +660,7 @@
     /**
      * Set a list of regular expression requirements on the route.
      *
-     * @param  array  $wheres
+     * @param  array $wheres
      * @return $this
      */
     protected function whereArray(array $wheres)
@@ -663,7 +675,7 @@
     /**
      * Add a prefix to the route URI.
      *
-     * @param  string  $prefix
+     * @param  string $prefix
      * @return $this
      */
     public function prefix($prefix)
@@ -768,7 +780,7 @@
     /**
      * Set the URI that the route responds to.
      *
-     * @param  string  $uri
+     * @param  string $uri
      * @return $this
      */
     public function setUri($uri)
@@ -801,7 +813,7 @@
     /**
      * Add or change the route name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return $this
      */
     public function name($name)
@@ -814,23 +826,29 @@
     /**
      * Set the handler for the route.
      *
-     * @param  \Closure|string  $action
+     * @param  \Closure|string $action
      * @return $this
      */
     public function uses($action)
     {
         $action = is_string($action) ? $this->addGroupNamespaceToStringUses($action) : $action;
 
-        return $this->setAction(array_merge($this->action, $this->parseAction([
-            'uses' => $action,
-            'controller' => $action,
-        ])));
+        return $this->setAction(
+            array_merge(
+                $this->action, $this->parseAction(
+                    [
+                    'uses' => $action,
+                    'controller' => $action,
+                    ]
+                )
+            )
+        );
     }
 
     /**
      * Parse a string based action for the "uses" fluent method.
      *
-     * @param  string  $action
+     * @param  string $action
      * @return string
      */
     protected function addGroupNamespaceToStringUses($action)
@@ -867,7 +885,7 @@
     /**
      * Set the action array for the route.
      *
-     * @param  array  $action
+     * @param  array $action
      * @return $this
      */
     public function setAction(array $action)
@@ -890,7 +908,7 @@
     /**
      * Set the router instance on the route.
      *
-     * @param  \Illuminate\Routing\Router  $router
+     * @param  \Illuminate\Routing\Router $router
      * @return $this
      */
     public function setRouter(Router $router)
@@ -903,7 +921,7 @@
     /**
      * Set the container instance on the route.
      *
-     * @param  \Illuminate\Container\Container  $container
+     * @param  \Illuminate\Container\Container $container
      * @return $this
      */
     public function setContainer(Container $container)
@@ -932,7 +950,7 @@
     /**
      * Dynamically access route parameters.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function __get($key)

--- vendor/laravel/framework/src/Illuminate/Routing/RouteCollection.php
+++ PHP_CodeSniffer
@@ -44,7 +44,7 @@
     /**
      * Add a Route instance to the collection.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @return \Illuminate\Routing\Route
      */
     public function add(Route $route)
@@ -59,7 +59,7 @@
     /**
      * Add the given route to the arrays of routes.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @return void
      */
     protected function addToCollections($route)
@@ -76,7 +76,7 @@
     /**
      * Add the route to any look-up tables if necessary.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @return void
      */
     protected function addLookups($route)
@@ -119,8 +119,8 @@
     /**
      * Add a route to the controller action dictionary.
      *
-     * @param  array  $action
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  array                     $action
+     * @param  \Illuminate\Routing\Route $route
      * @return void
      */
     protected function addToActionList($action, $route)
@@ -131,7 +131,7 @@
     /**
      * Find the first route matching a given request.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Routing\Route
      *
      * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
@@ -164,7 +164,7 @@
     /**
      * Determine if any routes match on another HTTP verb.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return array
      */
     protected function checkForAlternateVerbs($request)
@@ -188,8 +188,8 @@
     /**
      * Get a route (if necessary) that responds when other available methods are present.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  array  $methods
+     * @param  \Illuminate\Http\Request $request
+     * @param  array                    $methods
      * @return \Illuminate\Routing\Route
      *
      * @throws \Symfony\Component\Routing\Exception\MethodNotAllowedHttpException
@@ -197,9 +197,11 @@
     protected function getRouteForMethods($request, array $methods)
     {
         if ($request->method() == 'OPTIONS') {
-            return (new Route('OPTIONS', $request->path(), function () use ($methods) {
-                return new Response('', 200, ['Allow' => implode(',', $methods)]);
-            }))->bind($request);
+            return (new Route(
+                'OPTIONS', $request->path(), function () use ($methods) {
+                    return new Response('', 200, ['Allow' => implode(',', $methods)]);
+                }
+            ))->bind($request);
         }
 
         $this->methodNotAllowed($methods);
@@ -208,7 +210,7 @@
     /**
      * Throw a method not allowed HTTP exception.
      *
-     * @param  array  $others
+     * @param  array $others
      * @return void
      *
      * @throws \Symfony\Component\HttpKernel\Exception\MethodNotAllowedHttpException
@@ -221,22 +223,24 @@
     /**
      * Determine if a route in the array matches the request.
      *
-     * @param  array  $routes
-     * @param  \Illuminate\http\Request  $request
-     * @param  bool  $includingMethod
+     * @param  array                    $routes
+     * @param  \Illuminate\http\Request $request
+     * @param  bool                     $includingMethod
      * @return \Illuminate\Routing\Route|null
      */
     protected function check(array $routes, $request, $includingMethod = true)
     {
-        return Arr::first($routes, function ($key, $value) use ($request, $includingMethod) {
-            return $value->matches($request, $includingMethod);
-        });
+        return Arr::first(
+            $routes, function ($key, $value) use ($request, $includingMethod) {
+                return $value->matches($request, $includingMethod);
+            }
+        );
     }
 
     /**
      * Get all of the routes in the collection.
      *
-     * @param  string|null  $method
+     * @param  string|null $method
      * @return array
      */
     public function get($method = null)
@@ -251,7 +255,7 @@
     /**
      * Determine if the route collection contains a given named route.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return bool
      */
     public function hasNamedRoute($name)
@@ -262,7 +266,7 @@
     /**
      * Get a route instance by its name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Routing\Route|null
      */
     public function getByName($name)
@@ -273,7 +277,7 @@
     /**
      * Get a route instance by its controller action.
      *
-     * @param  string  $action
+     * @param  string $action
      * @return \Illuminate\Routing\Route|null
      */
     public function getByAction($action)

--- vendor/laravel/framework/src/Illuminate/Routing/RouteDependencyResolverTrait.php
+++ PHP_CodeSniffer
@@ -12,8 +12,8 @@
     /**
      * Call a class method with the resolved dependencies.
      *
-     * @param  object  $instance
-     * @param  string  $method
+     * @param  object $instance
+     * @param  string $method
      * @return mixed
      */
     protected function callWithDependencies($instance, $method)
@@ -27,8 +27,8 @@
      * Resolve the object method's type-hinted dependencies.
      *
      * @param  array  $parameters
-     * @param  object  $instance
-     * @param  string  $method
+     * @param  object $instance
+     * @param  string $method
      * @return array
      */
     protected function resolveClassMethodDependencies(array $parameters, $instance, $method)
@@ -45,8 +45,8 @@
     /**
      * Resolve the given method's type-hinted dependencies.
      *
-     * @param  array  $parameters
-     * @param  \ReflectionFunctionAbstract  $reflector
+     * @param  array                       $parameters
+     * @param  \ReflectionFunctionAbstract $reflector
      * @return array
      */
     public function resolveMethodDependencies(array $parameters, ReflectionFunctionAbstract $reflector)
@@ -69,9 +69,9 @@
     /**
      * Attempt to transform the given parameter into a class instance.
      *
-     * @param  \ReflectionParameter  $parameter
-     * @param  array  $parameters
-     * @param  array  $originalParameters
+     * @param  \ReflectionParameter $parameter
+     * @param  array                $parameters
+     * @param  array                $originalParameters
      * @return mixed
      */
     protected function transformDependency(ReflectionParameter $parameter, $parameters, $originalParameters)
@@ -89,22 +89,26 @@
     /**
      * Determine if an object of the given class is in a list of parameters.
      *
-     * @param  string  $class
+     * @param  string $class
      * @param  array  $parameters
      * @return bool
      */
     protected function alreadyInParameters($class, array $parameters)
     {
-        return ! is_null(Arr::first($parameters, function ($key, $value) use ($class) {
-            return $value instanceof $class;
-        }));
+        return ! is_null(
+            Arr::first(
+                $parameters, function ($key, $value) use ($class) {
+                    return $value instanceof $class;
+                }
+            )
+        );
     }
 
     /**
      * Splice the given value into the parameter list.
      *
      * @param  array  $parameters
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $instance
      * @return void
      */

--- vendor/laravel/framework/src/Illuminate/Routing/Router.php
+++ PHP_CodeSniffer
@@ -102,8 +102,8 @@
     /**
      * Create a new Router instance.
      *
-     * @param  \Illuminate\Contracts\Events\Dispatcher  $events
-     * @param  \Illuminate\Container\Container  $container
+     * @param  \Illuminate\Contracts\Events\Dispatcher $events
+     * @param  \Illuminate\Container\Container         $container
      * @return void
      */
     public function __construct(Dispatcher $events, Container $container = null)
@@ -112,16 +112,18 @@
         $this->routes = new RouteCollection;
         $this->container = $container ?: new Container;
 
-        $this->bind('_missing', function ($v) {
-            return explode('/', $v);
-        });
+        $this->bind(
+            '_missing', function ($v) {
+                return explode('/', $v);
+            }
+        );
     }
 
     /**
      * Register a new GET route with the router.
      *
-     * @param  string  $uri
-     * @param  \Closure|array|string|null  $action
+     * @param  string                     $uri
+     * @param  \Closure|array|string|null $action
      * @return \Illuminate\Routing\Route
      */
     public function get($uri, $action = null)
@@ -132,8 +134,8 @@
     /**
      * Register a new POST route with the router.
      *
-     * @param  string  $uri
-     * @param  \Closure|array|string|null  $action
+     * @param  string                     $uri
+     * @param  \Closure|array|string|null $action
      * @return \Illuminate\Routing\Route
      */
     public function post($uri, $action = null)
@@ -144,8 +146,8 @@
     /**
      * Register a new PUT route with the router.
      *
-     * @param  string  $uri
-     * @param  \Closure|array|string|null  $action
+     * @param  string                     $uri
+     * @param  \Closure|array|string|null $action
      * @return \Illuminate\Routing\Route
      */
     public function put($uri, $action = null)
@@ -156,8 +158,8 @@
     /**
      * Register a new PATCH route with the router.
      *
-     * @param  string  $uri
-     * @param  \Closure|array|string|null  $action
+     * @param  string                     $uri
+     * @param  \Closure|array|string|null $action
      * @return \Illuminate\Routing\Route
      */
     public function patch($uri, $action = null)
@@ -168,8 +170,8 @@
     /**
      * Register a new DELETE route with the router.
      *
-     * @param  string  $uri
-     * @param  \Closure|array|string|null  $action
+     * @param  string                     $uri
+     * @param  \Closure|array|string|null $action
      * @return \Illuminate\Routing\Route
      */
     public function delete($uri, $action = null)
@@ -180,8 +182,8 @@
     /**
      * Register a new OPTIONS route with the router.
      *
-     * @param  string  $uri
-     * @param  \Closure|array|string|null  $action
+     * @param  string                     $uri
+     * @param  \Closure|array|string|null $action
      * @return \Illuminate\Routing\Route
      */
     public function options($uri, $action = null)
@@ -192,8 +194,8 @@
     /**
      * Register a new route responding to all verbs.
      *
-     * @param  string  $uri
-     * @param  \Closure|array|string|null  $action
+     * @param  string                     $uri
+     * @param  \Closure|array|string|null $action
      * @return \Illuminate\Routing\Route
      */
     public function any($uri, $action = null)
@@ -206,9 +208,9 @@
     /**
      * Register a new route with the given verbs.
      *
-     * @param  array|string  $methods
-     * @param  string  $uri
-     * @param  \Closure|array|string|null  $action
+     * @param  array|string               $methods
+     * @param  string                     $uri
+     * @param  \Closure|array|string|null $action
      * @return \Illuminate\Routing\Route
      */
     public function match($methods, $uri, $action = null)
@@ -219,7 +221,7 @@
     /**
      * Register an array of controllers with wildcard routing.
      *
-     * @param  array  $controllers
+     * @param  array $controllers
      * @return void
      *
      * @deprecated since version 5.2.
@@ -234,8 +236,8 @@
     /**
      * Route a controller to a URI with wildcard routing.
      *
-     * @param  string  $uri
-     * @param  string  $controller
+     * @param  string $uri
+     * @param  string $controller
      * @param  array  $names
      * @return void
      *
@@ -270,9 +272,9 @@
     /**
      * Register an inspected controller route.
      *
-     * @param  array   $route
-     * @param  string  $controller
-     * @param  string  $method
+     * @param  array  $route
+     * @param  string $controller
+     * @param  string $method
      * @param  array  $names
      * @return void
      *
@@ -293,8 +295,8 @@
     /**
      * Add a fallthrough route for a controller.
      *
-     * @param  string  $controller
-     * @param  string  $uri
+     * @param  string $controller
+     * @param  string $uri
      * @return void
      *
      * @deprecated since version 5.2.
@@ -319,7 +321,7 @@
     /**
      * Set the global resource parameter mapping.
      *
-     * @param  array  $parameters
+     * @param  array $parameters
      * @return void
      */
     public function resourceParameters(array $parameters = [])
@@ -330,7 +332,7 @@
     /**
      * Register an array of resource controllers.
      *
-     * @param  array  $resources
+     * @param  array $resources
      * @return void
      */
     public function resources(array $resources)
@@ -343,8 +345,8 @@
     /**
      * Route a resource to a controller.
      *
-     * @param  string  $name
-     * @param  string  $controller
+     * @param  string $name
+     * @param  string $controller
      * @param  array  $options
      * @return void
      */
@@ -384,8 +386,8 @@
     /**
      * Create a route group with shared attributes.
      *
-     * @param  array  $attributes
-     * @param  \Closure  $callback
+     * @param  array    $attributes
+     * @param  \Closure $callback
      * @return void
      */
     public function group(array $attributes, Closure $callback)
@@ -403,7 +405,7 @@
     /**
      * Update the group stack with the given attributes.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return void
      */
     protected function updateGroupStack(array $attributes)
@@ -418,7 +420,7 @@
     /**
      * Merge the given array with the last group stack.
      *
-     * @param  array  $new
+     * @param  array $new
      * @return array
      */
     public function mergeWithLastGroup($new)
@@ -429,8 +431,8 @@
     /**
      * Merge the given group attributes.
      *
-     * @param  array  $new
-     * @param  array  $old
+     * @param  array $new
+     * @param  array $old
      * @return array
      */
     public static function mergeGroup($new, $old)
@@ -458,8 +460,8 @@
     /**
      * Format the uses prefix for the new group attributes.
      *
-     * @param  array  $new
-     * @param  array  $old
+     * @param  array $new
+     * @param  array $old
      * @return string|null
      */
     protected static function formatUsesPrefix($new, $old)
@@ -476,8 +478,8 @@
     /**
      * Format the prefix for the new group attributes.
      *
-     * @param  array  $new
-     * @param  array  $old
+     * @param  array $new
+     * @param  array $old
      * @return string|null
      */
     protected static function formatGroupPrefix($new, $old)
@@ -510,9 +512,9 @@
     /**
      * Add a route to the underlying route collection.
      *
-     * @param  array|string  $methods
-     * @param  string  $uri
-     * @param  \Closure|array|string|null  $action
+     * @param  array|string               $methods
+     * @param  string                     $uri
+     * @param  \Closure|array|string|null $action
      * @return \Illuminate\Routing\Route
      */
     protected function addRoute($methods, $uri, $action)
@@ -523,9 +525,9 @@
     /**
      * Create a new route instance.
      *
-     * @param  array|string  $methods
-     * @param  string  $uri
-     * @param  mixed  $action
+     * @param  array|string $methods
+     * @param  string       $uri
+     * @param  mixed        $action
      * @return \Illuminate\Routing\Route
      */
     protected function createRoute($methods, $uri, $action)
@@ -556,9 +558,9 @@
     /**
      * Create a new Route object.
      *
-     * @param  array|string  $methods
-     * @param  string  $uri
-     * @param  mixed  $action
+     * @param  array|string $methods
+     * @param  string       $uri
+     * @param  mixed        $action
      * @return \Illuminate\Routing\Route
      */
     protected function newRoute($methods, $uri, $action)
@@ -571,7 +573,7 @@
     /**
      * Prefix the given URI with the last prefix.
      *
-     * @param  string  $uri
+     * @param  string $uri
      * @return string
      */
     protected function prefix($uri)
@@ -582,7 +584,7 @@
     /**
      * Add the necessary where clauses to the route based on its initial registration.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @return \Illuminate\Routing\Route
      */
     protected function addWhereClausesToRoute($route)
@@ -597,7 +599,7 @@
     /**
      * Merge the group stack with the controller action.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @return void
      */
     protected function mergeGroupAttributesIntoRoute($route)
@@ -610,7 +612,7 @@
     /**
      * Determine if the action is routing to a controller.
      *
-     * @param  array  $action
+     * @param  array $action
      * @return bool
      */
     protected function actionReferencesController($action)
@@ -625,7 +627,7 @@
     /**
      * Add a controller based route action to the action array.
      *
-     * @param  array|string  $action
+     * @param  array|string $action
      * @return array
      */
     protected function convertToControllerAction($action)
@@ -652,7 +654,7 @@
     /**
      * Prepend the last group uses onto the use clause.
      *
-     * @param  string  $uses
+     * @param  string $uses
      * @return string
      */
     protected function prependGroupUses($uses)
@@ -665,7 +667,7 @@
     /**
      * Dispatch the request to the application.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Http\Response
      */
     public function dispatch(Request $request)
@@ -680,7 +682,7 @@
     /**
      * Dispatch the request to a route and return the response.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return mixed
      */
     public function dispatchToRoute(Request $request)
@@ -690,9 +692,11 @@
         // receive access to this route instance for checking of the parameters.
         $route = $this->findRoute($request);
 
-        $request->setRouteResolver(function () use ($route) {
-            return $route;
-        });
+        $request->setRouteResolver(
+            function () use ($route) {
+                return $route;
+            }
+        );
 
         $this->events->fire(new Events\RouteMatched($route, $request));
 
@@ -704,7 +708,7 @@
     /**
      * Run the given route within a Stack "onion" instance.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @param  \Illuminate\Http\Request  $request
      * @return mixed
      */
@@ -718,32 +722,36 @@
         return (new Pipeline($this->container))
                         ->send($request)
                         ->through($middleware)
-                        ->then(function ($request) use ($route) {
-                            return $this->prepareResponse(
-                                $request,
-                                $route->run($request)
-                            );
-                        });
+                        ->then(
+                            function ($request) use ($route) {
+                                return $this->prepareResponse(
+                                    $request,
+                                    $route->run($request)
+                                );
+                            }
+                        );
     }
 
     /**
      * Gather the middleware for the given route.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @return array
      */
     public function gatherRouteMiddlewares(Route $route)
     {
-        return Collection::make($route->middleware())->map(function ($name) {
-            return Collection::make($this->resolveMiddlewareClassName($name));
-        })
+        return Collection::make($route->middleware())->map(
+            function ($name) {
+                return Collection::make($this->resolveMiddlewareClassName($name));
+            }
+        )
         ->flatten()->all();
     }
 
     /**
      * Resolve the middleware name to a class name(s) preserving passed parameters.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string|array
      */
     public function resolveMiddlewareClassName($name)
@@ -755,14 +763,14 @@
         // set of middleware under single keys that can be conveniently referenced.
         if (isset($this->middlewareGroups[$name])) {
             return $this->parseMiddlewareGroup($name);
-        // When the middleware is simply a Closure, we will return this Closure instance
-        // directly so that Closures can be registered as middleware inline, which is
-        // convenient on occasions when the developers are experimenting with them.
+            // When the middleware is simply a Closure, we will return this Closure instance
+            // directly so that Closures can be registered as middleware inline, which is
+            // convenient on occasions when the developers are experimenting with them.
         } elseif (isset($map[$name]) && $map[$name] instanceof Closure) {
             return $map[$name];
-        // Finally, when the middleware is simply a string mapped to a class name the
-        // middleware name will get parsed into the full class name and parameters
-        // which may be run using the Pipeline which accepts this string format.
+            // Finally, when the middleware is simply a string mapped to a class name the
+            // middleware name will get parsed into the full class name and parameters
+            // which may be run using the Pipeline which accepts this string format.
         } else {
             list($name, $parameters) = array_pad(explode(':', $name, 2), 2, null);
 
@@ -774,7 +782,7 @@
     /**
      * Parse the middleware group and format it for usage.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return array
      */
     protected function parseMiddlewareGroup($name)
@@ -813,7 +821,7 @@
     /**
      * Find the route matching a given request.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Routing\Route
      */
     protected function findRoute($request)
@@ -828,7 +836,7 @@
     /**
      * Substitute the route bindings onto the route.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @return \Illuminate\Routing\Route
      */
     protected function substituteBindings($route)
@@ -847,7 +855,7 @@
     /**
      * Substitute the implicit Eloquent model bindings for the route.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @return void
      */
     protected function substituteImplicitBindings($route)
@@ -857,8 +865,9 @@
         foreach ($route->signatureParameters(Model::class) as $parameter) {
             $class = $parameter->getClass();
 
-            if (array_key_exists($parameter->name, $parameters) &&
-                ! $route->getParameter($parameter->name) instanceof Model) {
+            if (array_key_exists($parameter->name, $parameters) 
+                && ! $route->getParameter($parameter->name) instanceof Model
+            ) {
                 $method = $parameter->isDefaultValueAvailable() ? 'first' : 'firstOrFail';
 
                 $model = $class->newInstance();
@@ -875,9 +884,9 @@
     /**
      * Call the binding callback for the given key.
      *
-     * @param  string  $key
-     * @param  string  $value
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  string                    $key
+     * @param  string                    $value
+     * @param  \Illuminate\Routing\Route $route
      * @return mixed
      */
     protected function performBinding($key, $value, $route)
@@ -888,7 +897,7 @@
     /**
      * Register a route matched event listener.
      *
-     * @param  string|callable  $callback
+     * @param  string|callable $callback
      * @return void
      */
     public function matched($callback)
@@ -909,8 +918,8 @@
     /**
      * Register a short-hand name for a middleware.
      *
-     * @param  string  $name
-     * @param  string  $class
+     * @param  string $name
+     * @param  string $class
      * @return $this
      */
     public function middleware($name, $class)
@@ -923,7 +932,7 @@
     /**
      * Register a group of middleware.
      *
-     * @param  string  $name
+     * @param  string $name
      * @param  array  $middleware
      * @return $this
      */
@@ -939,8 +948,8 @@
      *
      * If the middleware is already in the group, it will not be added again.
      *
-     * @param  string  $group
-     * @param  string  $middleware
+     * @param  string $group
+     * @param  string $middleware
      * @return $this
      */
     public function prependMiddlewareToGroup($group, $middleware)
@@ -957,8 +966,8 @@
      *
      * If the middleware is already in the group, it will not be added again.
      *
-     * @param  string  $group
-     * @param  string  $middleware
+     * @param  string $group
+     * @param  string $middleware
      * @return $this
      */
     public function pushMiddlewareToGroup($group, $middleware)
@@ -973,45 +982,47 @@
     /**
      * Register a model binder for a wildcard.
      *
-     * @param  string  $key
-     * @param  string  $class
-     * @param  \Closure|null  $callback
+     * @param  string        $key
+     * @param  string        $class
+     * @param  \Closure|null $callback
      * @return void
      *
      * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
      */
     public function model($key, $class, Closure $callback = null)
     {
-        $this->bind($key, function ($value) use ($class, $callback) {
-            if (is_null($value)) {
-                return;
-            }
+        $this->bind(
+            $key, function ($value) use ($class, $callback) {
+                if (is_null($value)) {
+                    return;
+                }
+
+                // For model binders, we will attempt to retrieve the models using the first
+                // method on the model instance. If we cannot retrieve the models we'll
+                // throw a not found exception otherwise we will return the instance.
+                $instance = $this->container->make($class);
+
+                if ($model = $instance->where($instance->getRouteKeyName(), $value)->first()) {
+                    return $model;
+                }
+
+                // If a callback was supplied to the method we will call that to determine
+                // what we should do when the model is not found. This just gives these
+                // developer a little greater flexibility to decide what will happen.
+                if ($callback instanceof Closure) {
+                    return call_user_func($callback, $value);
+                }
 
-            // For model binders, we will attempt to retrieve the models using the first
-            // method on the model instance. If we cannot retrieve the models we'll
-            // throw a not found exception otherwise we will return the instance.
-            $instance = $this->container->make($class);
-
-            if ($model = $instance->where($instance->getRouteKeyName(), $value)->first()) {
-                return $model;
+                throw new NotFoundHttpException;
             }
-
-            // If a callback was supplied to the method we will call that to determine
-            // what we should do when the model is not found. This just gives these
-            // developer a little greater flexibility to decide what will happen.
-            if ($callback instanceof Closure) {
-                return call_user_func($callback, $value);
-            }
-
-            throw new NotFoundHttpException;
-        });
+        );
     }
 
     /**
      * Add a new route parameter binder.
      *
-     * @param  string  $key
-     * @param  string|callable  $binder
+     * @param  string          $key
+     * @param  string|callable $binder
      * @return void
      */
     public function bind($key, $binder)
@@ -1026,7 +1037,7 @@
     /**
      * Create a class based binding using the IoC container.
      *
-     * @param  string  $binding
+     * @param  string $binding
      * @return \Closure
      */
     public function createClassBinding($binding)
@@ -1048,8 +1059,8 @@
     /**
      * Set a global where pattern on all routes.
      *
-     * @param  string  $key
-     * @param  string  $pattern
+     * @param  string $key
+     * @param  string $pattern
      * @return void
      */
     public function pattern($key, $pattern)
@@ -1060,7 +1071,7 @@
     /**
      * Set a group of global where patterns on all routes.
      *
-     * @param  array  $patterns
+     * @param  array $patterns
      * @return void
      */
     public function patterns($patterns)
@@ -1073,8 +1084,8 @@
     /**
      * Create a response instance from the given value.
      *
-     * @param  \Symfony\Component\HttpFoundation\Request  $request
-     * @param  mixed  $response
+     * @param  \Symfony\Component\HttpFoundation\Request $request
+     * @param  mixed                                     $response
      * @return \Illuminate\Http\Response
      */
     public function prepareResponse($request, $response)
@@ -1111,8 +1122,8 @@
     /**
      * Get a route parameter for the current route.
      *
-     * @param  string  $key
-     * @param  string  $default
+     * @param  string $key
+     * @param  string $default
      * @return mixed
      */
     public function input($key, $default = null)
@@ -1143,7 +1154,7 @@
     /**
      * Check if a route with the given name exists.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return bool
      */
     public function has($name)
@@ -1181,7 +1192,7 @@
     /**
      * Determine if the current route matches a given name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return bool
      */
     public function currentRouteNamed($name)
@@ -1225,7 +1236,7 @@
     /**
      * Determine if the current route action matches a given action.
      *
-     * @param  string  $action
+     * @param  string $action
      * @return bool
      */
     public function currentRouteUses($action)
@@ -1256,7 +1267,7 @@
     /**
      * Set the route collection instance.
      *
-     * @param  \Illuminate\Routing\RouteCollection  $routes
+     * @param  \Illuminate\Routing\RouteCollection $routes
      * @return void
      */
     public function setRoutes(RouteCollection $routes)

--- vendor/laravel/framework/src/Illuminate/Routing/RoutingServiceProvider.php
+++ PHP_CodeSniffer
@@ -35,9 +35,11 @@
      */
     protected function registerRouter()
     {
-        $this->app['router'] = $this->app->share(function ($app) {
-            return new Router($app['events'], $app);
-        });
+        $this->app['router'] = $this->app->share(
+            function ($app) {
+                return new Router($app['events'], $app);
+            }
+        );
     }
 
     /**
@@ -47,33 +49,39 @@
      */
     protected function registerUrlGenerator()
     {
-        $this->app['url'] = $this->app->share(function ($app) {
-            $routes = $app['router']->getRoutes();
-
-            // The URL generator needs the route collection that exists on the router.
-            // Keep in mind this is an object, so we're passing by references here
-            // and all the registered routes will be available to the generator.
-            $app->instance('routes', $routes);
-
-            $url = new UrlGenerator(
-                $routes, $app->rebinding(
-                    'request', $this->requestRebinder()
-                )
-            );
-
-            $url->setSessionResolver(function () {
-                return $this->app['session'];
-            });
-
-            // If the route collection is "rebound", for example, when the routes stay
-            // cached for the application, we will need to rebind the routes on the
-            // URL generator instance so it has the latest version of the routes.
-            $app->rebinding('routes', function ($app, $routes) {
-                $app['url']->setRoutes($routes);
-            });
+        $this->app['url'] = $this->app->share(
+            function ($app) {
+                $routes = $app['router']->getRoutes();
+
+                // The URL generator needs the route collection that exists on the router.
+                // Keep in mind this is an object, so we're passing by references here
+                // and all the registered routes will be available to the generator.
+                $app->instance('routes', $routes);
+
+                $url = new UrlGenerator(
+                    $routes, $app->rebinding(
+                        'request', $this->requestRebinder()
+                    )
+                );
+
+                $url->setSessionResolver(
+                    function () {
+                        return $this->app['session'];
+                    }
+                );
+
+                // If the route collection is "rebound", for example, when the routes stay
+                // cached for the application, we will need to rebind the routes on the
+                // URL generator instance so it has the latest version of the routes.
+                $app->rebinding(
+                    'routes', function ($app, $routes) {
+                        $app['url']->setRoutes($routes);
+                    }
+                );
 
-            return $url;
-        });
+                return $url;
+            }
+        );
     }
 
     /**
@@ -95,18 +103,20 @@
      */
     protected function registerRedirector()
     {
-        $this->app['redirect'] = $this->app->share(function ($app) {
-            $redirector = new Redirector($app['url']);
+        $this->app['redirect'] = $this->app->share(
+            function ($app) {
+                $redirector = new Redirector($app['url']);
+
+                // If the session is set on the application instance, we'll inject it into
+                // the redirector instance. This allows the redirect responses to allow
+                // for the quite convenient "with" methods that flash to the session.
+                if (isset($app['session.store'])) {
+                    $redirector->setSession($app['session.store']);
+                }
 
-            // If the session is set on the application instance, we'll inject it into
-            // the redirector instance. This allows the redirect responses to allow
-            // for the quite convenient "with" methods that flash to the session.
-            if (isset($app['session.store'])) {
-                $redirector->setSession($app['session.store']);
+                return $redirector;
             }
-
-            return $redirector;
-        });
+        );
     }
 
     /**
@@ -116,9 +126,11 @@
      */
     protected function registerPsrRequest()
     {
-        $this->app->bind('Psr\Http\Message\ServerRequestInterface', function ($app) {
-            return (new DiactorosFactory)->createRequest($app->make('request'));
-        });
+        $this->app->bind(
+            'Psr\Http\Message\ServerRequestInterface', function ($app) {
+                return (new DiactorosFactory)->createRequest($app->make('request'));
+            }
+        );
     }
 
     /**
@@ -128,9 +140,11 @@
      */
     protected function registerPsrResponse()
     {
-        $this->app->bind('Psr\Http\Message\ResponseInterface', function ($app) {
-            return new PsrResponse();
-        });
+        $this->app->bind(
+            'Psr\Http\Message\ResponseInterface', function ($app) {
+                return new PsrResponse();
+            }
+        );
     }
 
     /**
@@ -140,8 +154,10 @@
      */
     protected function registerResponseFactory()
     {
-        $this->app->singleton('Illuminate\Contracts\Routing\ResponseFactory', function ($app) {
-            return new ResponseFactory($app['Illuminate\Contracts\View\Factory'], $app['redirect']);
-        });
+        $this->app->singleton(
+            'Illuminate\Contracts\Routing\ResponseFactory', function ($app) {
+                return new ResponseFactory($app['Illuminate\Contracts\View\Factory'], $app['redirect']);
+            }
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Routing/UrlGenerator.php
+++ PHP_CodeSniffer
@@ -96,8 +96,8 @@
     /**
      * Create a new URL Generator instance.
      *
-     * @param  \Illuminate\Routing\RouteCollection  $routes
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Routing\RouteCollection $routes
+     * @param  \Illuminate\Http\Request            $request
      * @return void
      */
     public function __construct(RouteCollection $routes, Request $request)
@@ -130,7 +130,7 @@
     /**
      * Get the URL for the previous request.
      *
-     * @param  mixed  $fallback
+     * @param  mixed $fallback
      * @return string
      */
     public function previous($fallback = false)
@@ -151,9 +151,9 @@
     /**
      * Generate an absolute URL to the given path.
      *
-     * @param  string  $path
-     * @param  mixed  $extra
-     * @param  bool|null  $secure
+     * @param  string    $path
+     * @param  mixed     $extra
+     * @param  bool|null $secure
      * @return string
      */
     public function to($path, $extra = [], $secure = null)
@@ -169,8 +169,10 @@
 
         $extra = $this->formatParameters($extra);
 
-        $tail = implode('/', array_map(
-            'rawurlencode', (array) $extra)
+        $tail = implode(
+            '/', array_map(
+                'rawurlencode', (array) $extra
+            )
         );
 
         // Once we have the scheme we will compile the "tail" by collapsing the values
@@ -191,8 +193,8 @@
     /**
      * Generate a secure, absolute URL to the given path.
      *
-     * @param  string  $path
-     * @param  array   $parameters
+     * @param  string $path
+     * @param  array  $parameters
      * @return string
      */
     public function secure($path, $parameters = [])
@@ -203,8 +205,8 @@
     /**
      * Generate a URL to an application asset.
      *
-     * @param  string  $path
-     * @param  bool|null  $secure
+     * @param  string    $path
+     * @param  bool|null $secure
      * @return string
      */
     public function asset($path, $secure = null)
@@ -224,9 +226,9 @@
     /**
      * Generate a URL to an asset from a custom root domain such as CDN, etc.
      *
-     * @param  string  $root
-     * @param  string  $path
-     * @param  bool|null  $secure
+     * @param  string    $root
+     * @param  string    $path
+     * @param  bool|null $secure
      * @return string
      */
     public function assetFrom($root, $path, $secure = null)
@@ -242,7 +244,7 @@
     /**
      * Remove the index.php file from a path.
      *
-     * @param  string  $root
+     * @param  string $root
      * @return string
      */
     protected function removeIndex($root)
@@ -255,7 +257,7 @@
     /**
      * Generate a URL to a secure asset.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     public function secureAsset($path)
@@ -266,7 +268,7 @@
     /**
      * Get the scheme for a raw URL.
      *
-     * @param  bool|null  $secure
+     * @param  bool|null $secure
      * @return string
      */
     protected function getScheme($secure)
@@ -285,7 +287,7 @@
     /**
      * Force the schema for URLs.
      *
-     * @param  string  $schema
+     * @param  string $schema
      * @return void
      */
     public function forceSchema($schema)
@@ -298,9 +300,9 @@
     /**
      * Get the URL to a named route.
      *
-     * @param  string  $name
-     * @param  mixed   $parameters
-     * @param  bool  $absolute
+     * @param  string $name
+     * @param  mixed  $parameters
+     * @param  bool   $absolute
      * @return string
      *
      * @throws \InvalidArgumentException
@@ -317,9 +319,9 @@
     /**
      * Get the URL for a given route instance.
      *
-     * @param  \Illuminate\Routing\Route  $route
-     * @param  mixed  $parameters
-     * @param  bool   $absolute
+     * @param  \Illuminate\Routing\Route $route
+     * @param  mixed                     $parameters
+     * @param  bool                      $absolute
      * @return string
      *
      * @throws \Illuminate\Routing\Exceptions\UrlGenerationException
@@ -330,10 +332,12 @@
 
         $domain = $this->getRouteDomain($route, $parameters);
 
-        $uri = $this->addQueryString($this->trimUrl(
-            $root = $this->replaceRoot($route, $domain, $parameters),
-            $this->replaceRouteParameters($route->uri(), $parameters)
-        ), $parameters);
+        $uri = $this->addQueryString(
+            $this->trimUrl(
+                $root = $this->replaceRoot($route, $domain, $parameters),
+                $this->replaceRouteParameters($route->uri(), $parameters)
+            ), $parameters
+        );
 
         if (preg_match('/\{.*?\}/', $uri)) {
             throw UrlGenerationException::forMissingParameters($route);
@@ -347,9 +351,9 @@
     /**
      * Replace the parameters on the root path.
      *
-     * @param  \Illuminate\Routing\Route  $route
-     * @param  string  $domain
-     * @param  array  $parameters
+     * @param  \Illuminate\Routing\Route $route
+     * @param  string                    $domain
+     * @param  array                     $parameters
      * @return string
      */
     protected function replaceRoot($route, $domain, &$parameters)
@@ -362,7 +366,7 @@
     /**
      * Replace all of the wildcard parameters for a route path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @param  array  $parameters
      * @return string
      */
@@ -370,11 +374,13 @@
     {
         $path = $this->replaceNamedParameters($path, $parameters);
 
-        $path = preg_replace_callback('/\{.*?\}/', function ($match) use (&$parameters) {
-            return (empty($parameters) && ! Str::endsWith($match[0], '?}'))
+        $path = preg_replace_callback(
+            '/\{.*?\}/', function ($match) use (&$parameters) {
+                return (empty($parameters) && ! Str::endsWith($match[0], '?}'))
                         ? $match[0]
                         : array_shift($parameters);
-        }, $path);
+            }, $path
+        );
 
         return trim(preg_replace('/\{.*?\?\}/', '', $path), '/');
     }
@@ -382,21 +388,23 @@
     /**
      * Replace all of the named parameters in the path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @param  array  $parameters
      * @return string
      */
     protected function replaceNamedParameters($path, &$parameters)
     {
-        return preg_replace_callback('/\{(.*?)\??\}/', function ($m) use (&$parameters) {
-            return isset($parameters[$m[1]]) ? Arr::pull($parameters, $m[1]) : $m[0];
-        }, $path);
+        return preg_replace_callback(
+            '/\{(.*?)\??\}/', function ($m) use (&$parameters) {
+                return isset($parameters[$m[1]]) ? Arr::pull($parameters, $m[1]) : $m[0];
+            }, $path
+        );
     }
 
     /**
      * Add a query string to the URI.
      *
-     * @param  string  $uri
+     * @param  string $uri
      * @param  array  $parameters
      * @return mixed|string
      */
@@ -417,7 +425,7 @@
     /**
      * Format the array of URL parameters.
      *
-     * @param  mixed|array  $parameters
+     * @param  mixed|array $parameters
      * @return array
      */
     protected function formatParameters($parameters)
@@ -428,7 +436,7 @@
     /**
      * Replace UrlRoutable parameters with their route parameter.
      *
-     * @param  array  $parameters
+     * @param  array $parameters
      * @return array
      */
     protected function replaceRoutableParameters($parameters = [])
@@ -447,7 +455,7 @@
     /**
      * Get the query string for a given route.
      *
-     * @param  array  $parameters
+     * @param  array $parameters
      * @return string
      */
     protected function getRouteQueryString(array $parameters)
@@ -478,34 +486,38 @@
     /**
      * Get the string parameters from a given list.
      *
-     * @param  array  $parameters
+     * @param  array $parameters
      * @return array
      */
     protected function getStringParameters(array $parameters)
     {
-        return Arr::where($parameters, function ($k) {
-            return is_string($k);
-        });
+        return Arr::where(
+            $parameters, function ($k) {
+                return is_string($k);
+            }
+        );
     }
 
     /**
      * Get the numeric parameters from a given list.
      *
-     * @param  array  $parameters
+     * @param  array $parameters
      * @return array
      */
     protected function getNumericParameters(array $parameters)
     {
-        return Arr::where($parameters, function ($k) {
-            return is_numeric($k);
-        });
+        return Arr::where(
+            $parameters, function ($k) {
+                return is_numeric($k);
+            }
+        );
     }
 
     /**
      * Get the formatted domain for a given route.
      *
-     * @param  \Illuminate\Routing\Route  $route
-     * @param  array  $parameters
+     * @param  \Illuminate\Routing\Route $route
+     * @param  array                     $parameters
      * @return string
      */
     protected function getRouteDomain($route, &$parameters)
@@ -516,8 +528,8 @@
     /**
      * Format the domain and port for the route and request.
      *
-     * @param  \Illuminate\Routing\Route  $route
-     * @param  array  $parameters
+     * @param  \Illuminate\Routing\Route $route
+     * @param  array                     $parameters
      * @return string
      */
     protected function formatDomain($route, &$parameters)
@@ -528,7 +540,7 @@
     /**
      * Get the domain and scheme for the route.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @return string
      */
     protected function getDomainAndScheme($route)
@@ -539,7 +551,7 @@
     /**
      * Add the port to the domain if necessary.
      *
-     * @param  string  $domain
+     * @param  string $domain
      * @return string
      */
     protected function addPortToDomain($domain)
@@ -558,8 +570,8 @@
     /**
      * Get the root of the route URL.
      *
-     * @param  \Illuminate\Routing\Route  $route
-     * @param  string  $domain
+     * @param  \Illuminate\Routing\Route $route
+     * @param  string                    $domain
      * @return string
      */
     protected function getRouteRoot($route, $domain)
@@ -570,7 +582,7 @@
     /**
      * Get the scheme for the given route.
      *
-     * @param  \Illuminate\Routing\Route  $route
+     * @param  \Illuminate\Routing\Route $route
      * @return string
      */
     protected function getRouteScheme($route)
@@ -587,9 +599,9 @@
     /**
      * Get the URL to a controller action.
      *
-     * @param  string  $action
-     * @param  mixed   $parameters
-     * @param  bool    $absolute
+     * @param  string $action
+     * @param  mixed  $parameters
+     * @param  bool   $absolute
      * @return string
      *
      * @throws \InvalidArgumentException
@@ -612,8 +624,8 @@
     /**
      * Get the base URL for the request.
      *
-     * @param  string  $scheme
-     * @param  string  $root
+     * @param  string $scheme
+     * @param  string $root
      * @return string
      */
     protected function getRootUrl($scheme, $root = null)
@@ -634,7 +646,7 @@
     /**
      * Set the forced root URL.
      *
-     * @param  string  $root
+     * @param  string $root
      * @return void
      */
     public function forceRootUrl($root)
@@ -646,7 +658,7 @@
     /**
      * Determine if the given path is a valid URL.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return bool
      */
     public function isValidUrl($path)
@@ -661,9 +673,9 @@
     /**
      * Format the given URL segments into a single URL.
      *
-     * @param  string  $root
-     * @param  string  $path
-     * @param  string  $tail
+     * @param  string $root
+     * @param  string $path
+     * @param  string $tail
      * @return string
      */
     protected function trimUrl($root, $path, $tail = '')
@@ -684,7 +696,7 @@
     /**
      * Set the current request instance.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return void
      */
     public function setRequest(Request $request)
@@ -698,7 +710,7 @@
     /**
      * Set the route collection.
      *
-     * @param  \Illuminate\Routing\RouteCollection  $routes
+     * @param  \Illuminate\Routing\RouteCollection $routes
      * @return $this
      */
     public function setRoutes(RouteCollection $routes)
@@ -735,7 +747,7 @@
     /**
      * Set the session resolver for the generator.
      *
-     * @param  callable  $sessionResolver
+     * @param  callable $sessionResolver
      * @return $this
      */
     public function setSessionResolver(callable $sessionResolver)
@@ -748,7 +760,7 @@
     /**
      * Set the root controller namespace.
      *
-     * @param  string  $rootNamespace
+     * @param  string $rootNamespace
      * @return $this
      */
     public function setRootControllerNamespace($rootNamespace)

--- vendor/laravel/framework/src/Illuminate/Session/CacheBasedSessionHandler.php
+++ PHP_CodeSniffer
@@ -24,8 +24,8 @@
     /**
      * Create a new cache driven handler instance.
      *
-     * @param  \Illuminate\Contracts\Cache\Repository  $cache
-     * @param  int  $minutes
+     * @param  \Illuminate\Contracts\Cache\Repository $cache
+     * @param  int                                    $minutes
      * @return void
      */
     public function __construct(CacheContract $cache, $minutes)

--- vendor/laravel/framework/src/Illuminate/Session/Console/SessionTableCommand.php
+++ PHP_CodeSniffer
@@ -37,8 +37,8 @@
     /**
      * Create a new session table command instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
-     * @param  \Illuminate\Support\Composer  $composer
+     * @param  \Illuminate\Filesystem\Filesystem $files
+     * @param  \Illuminate\Support\Composer      $composer
      * @return void
      */
     public function __construct(Filesystem $files, Composer $composer)

--- vendor/laravel/framework/src/Illuminate/Session/CookieSessionHandler.php
+++ PHP_CodeSniffer
@@ -26,8 +26,8 @@
     /**
      * Create a new cookie driven handler instance.
      *
-     * @param  \Illuminate\Contracts\Cookie\QueueingFactory  $cookie
-     * @param  int  $minutes
+     * @param  \Illuminate\Contracts\Cookie\QueueingFactory $cookie
+     * @param  int                                          $minutes
      * @return void
      */
     public function __construct(CookieJar $cookie, $minutes)
@@ -73,10 +73,14 @@
      */
     public function write($sessionId, $data)
     {
-        $this->cookie->queue($sessionId, json_encode([
-            'data' => $data,
-            'expires' => Carbon::now()->addMinutes($this->minutes)->getTimestamp(),
-        ]), $this->minutes);
+        $this->cookie->queue(
+            $sessionId, json_encode(
+                [
+                'data' => $data,
+                'expires' => Carbon::now()->addMinutes($this->minutes)->getTimestamp(),
+                ]
+            ), $this->minutes
+        );
     }
 
     /**
@@ -98,7 +102,7 @@
     /**
      * Set the request instance.
      *
-     * @param  \Symfony\Component\HttpFoundation\Request  $request
+     * @param  \Symfony\Component\HttpFoundation\Request $request
      * @return void
      */
     public function setRequest(Request $request)

--- vendor/laravel/framework/src/Illuminate/Session/DatabaseSessionHandler.php
+++ PHP_CodeSniffer
@@ -48,10 +48,10 @@
     /**
      * Create a new database session handler instance.
      *
-     * @param  \Illuminate\Database\ConnectionInterface  $connection
-     * @param  string  $table
-     * @param  string  $minutes
-     * @param  \Illuminate\Contracts\Container\Container|null  $container
+     * @param  \Illuminate\Database\ConnectionInterface       $connection
+     * @param  string                                         $table
+     * @param  string                                         $minutes
+     * @param  \Illuminate\Contracts\Container\Container|null $container
      * @return void
      */
     public function __construct(ConnectionInterface $connection, $table, $minutes, Container $container = null)
@@ -125,7 +125,7 @@
     /**
      * Get the default payload for the session.
      *
-     * @param  string  $data
+     * @param  string $data
      * @return array
      */
     protected function getDefaultPayload($data)
@@ -180,7 +180,7 @@
     /**
      * Set the existence state for the session.
      *
-     * @param  bool  $value
+     * @param  bool $value
      * @return $this
      */
     public function setExists($value)

--- vendor/laravel/framework/src/Illuminate/Session/EncryptedStore.php
+++ PHP_CodeSniffer
@@ -18,10 +18,10 @@
     /**
      * Create a new session instance.
      *
-     * @param  string $name
-     * @param  \SessionHandlerInterface $handler
+     * @param  string                                     $name
+     * @param  \SessionHandlerInterface                   $handler
      * @param  \Illuminate\Contracts\Encryption\Encrypter $encrypter
-     * @param  string|null $id
+     * @param  string|null                                $id
      * @return void
      */
     public function __construct($name, SessionHandlerInterface $handler, EncrypterContract $encrypter, $id = null)
@@ -34,7 +34,7 @@
     /**
      * Prepare the raw string data from the session for unserialization.
      *
-     * @param  string  $data
+     * @param  string $data
      * @return string
      */
     protected function prepareForUnserialize($data)
@@ -49,7 +49,7 @@
     /**
      * Prepare the serialized session data for storage.
      *
-     * @param  string  $data
+     * @param  string $data
      * @return string
      */
     protected function prepareForStorage($data)

--- vendor/laravel/framework/src/Illuminate/Session/ExistenceAwareInterface.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Set the existence state for the session.
      *
-     * @param  bool  $value
+     * @param  bool $value
      * @return \SessionHandlerInterface
      */
     public function setExists($value);

--- vendor/laravel/framework/src/Illuminate/Session/FileSessionHandler.php
+++ PHP_CodeSniffer
@@ -33,9 +33,9 @@
     /**
      * Create a new file driven handler instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
-     * @param  string  $path
-     * @param  int  $minutes
+     * @param  \Illuminate\Filesystem\Filesystem $files
+     * @param  string                            $path
+     * @param  int                               $minutes
      * @return void
      */
     public function __construct(Filesystem $files, $path, $minutes)

--- vendor/laravel/framework/src/Illuminate/Session/LegacyDatabaseSessionHandler.php
+++ PHP_CodeSniffer
@@ -42,9 +42,9 @@
     /**
      * Create a new database session handler instance.
      *
-     * @param  \Illuminate\Database\ConnectionInterface  $connection
-     * @param  string  $table
-     * @param  int  $minutes
+     * @param  \Illuminate\Database\ConnectionInterface $connection
+     * @param  string                                   $table
+     * @param  int                                      $minutes
      * @return void
      */
     public function __construct(ConnectionInterface $connection, $table, $minutes)
@@ -98,13 +98,17 @@
     public function write($sessionId, $data)
     {
         if ($this->exists) {
-            $this->getQuery()->where('id', $sessionId)->update([
+            $this->getQuery()->where('id', $sessionId)->update(
+                [
                 'payload' => base64_encode($data), 'last_activity' => time(),
-            ]);
+                ]
+            );
         } else {
-            $this->getQuery()->insert([
+            $this->getQuery()->insert(
+                [
                 'id' => $sessionId, 'payload' => base64_encode($data), 'last_activity' => time(),
-            ]);
+                ]
+            );
         }
 
         $this->exists = true;
@@ -139,7 +143,7 @@
     /**
      * Set the existence state for the session.
      *
-     * @param  bool  $value
+     * @param  bool $value
      * @return $this
      */
     public function setExists($value)

--- vendor/laravel/framework/src/Illuminate/Session/Middleware/StartSession.php
+++ PHP_CodeSniffer
@@ -31,7 +31,7 @@
     /**
      * Create a new session middleware.
      *
-     * @param  \Illuminate\Session\SessionManager  $manager
+     * @param  \Illuminate\Session\SessionManager $manager
      * @return void
      */
     public function __construct(SessionManager $manager)
@@ -42,8 +42,8 @@
     /**
      * Handle an incoming request.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Closure  $next
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Closure                 $next
      * @return mixed
      */
     public function handle($request, Closure $next)
@@ -78,8 +78,8 @@
     /**
      * Perform any final actions for the request lifecycle.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Symfony\Component\HttpFoundation\Response  $response
+     * @param  \Illuminate\Http\Request                   $request
+     * @param  \Symfony\Component\HttpFoundation\Response $response
      * @return void
      */
     public function terminate($request, $response)
@@ -92,7 +92,7 @@
     /**
      * Start the session for the given request.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Session\SessionInterface
      */
     protected function startSession(Request $request)
@@ -109,7 +109,7 @@
     /**
      * Get the session implementation from the manager.
      *
-     * @param  \Illuminate\Http\Request  $request
+     * @param  \Illuminate\Http\Request $request
      * @return \Illuminate\Session\SessionInterface
      */
     public function getSession(Request $request)
@@ -124,8 +124,8 @@
     /**
      * Store the current URL for the request if necessary.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Illuminate\Session\SessionInterface  $session
+     * @param  \Illuminate\Http\Request             $request
+     * @param  \Illuminate\Session\SessionInterface $session
      * @return void
      */
     protected function storeCurrentUrl(Request $request, $session)
@@ -138,7 +138,7 @@
     /**
      * Remove the garbage from the session if necessary.
      *
-     * @param  \Illuminate\Session\SessionInterface  $session
+     * @param  \Illuminate\Session\SessionInterface $session
      * @return void
      */
     protected function collectGarbage(SessionInterface $session)
@@ -156,7 +156,7 @@
     /**
      * Determine if the configuration odds hit the lottery.
      *
-     * @param  array  $config
+     * @param  array $config
      * @return bool
      */
     protected function configHitsLottery(array $config)
@@ -167,8 +167,8 @@
     /**
      * Add the session cookie to the application response.
      *
-     * @param  \Symfony\Component\HttpFoundation\Response  $response
-     * @param  \Illuminate\Session\SessionInterface  $session
+     * @param  \Symfony\Component\HttpFoundation\Response $response
+     * @param  \Illuminate\Session\SessionInterface       $session
      * @return void
      */
     protected function addCookieToResponse(Response $response, SessionInterface $session)
@@ -178,11 +178,13 @@
         }
 
         if ($this->sessionIsPersistent($config = $this->manager->getSessionConfig())) {
-            $response->headers->setCookie(new Cookie(
-                $session->getName(), $session->getId(), $this->getCookieExpirationDate(),
-                $config['path'], $config['domain'], Arr::get($config, 'secure', false),
-                Arr::get($config, 'http_only', true)
-            ));
+            $response->headers->setCookie(
+                new Cookie(
+                    $session->getName(), $session->getId(), $this->getCookieExpirationDate(),
+                    $config['path'], $config['domain'], Arr::get($config, 'secure', false),
+                    Arr::get($config, 'http_only', true)
+                )
+            );
         }
     }
 
@@ -221,7 +223,7 @@
     /**
      * Determine if the configured session driver is persistent.
      *
-     * @param  array|null  $config
+     * @param  array|null $config
      * @return bool
      */
     protected function sessionIsPersistent(array $config = null)

--- vendor/laravel/framework/src/Illuminate/Session/SessionInterface.php
+++ PHP_CodeSniffer
@@ -24,7 +24,7 @@
     /**
      * Set the request on the handler instance.
      *
-     * @param  \Symfony\Component\HttpFoundation\Request  $request
+     * @param  \Symfony\Component\HttpFoundation\Request $request
      * @return void
      */
     public function setRequestOnHandler(Request $request);

--- vendor/laravel/framework/src/Illuminate/Session/SessionManager.php
+++ PHP_CodeSniffer
@@ -10,7 +10,7 @@
     /**
      * Call a custom driver creator.
      *
-     * @param  string  $driver
+     * @param  string $driver
      * @return mixed
      */
     protected function callCustomCreator($driver)
@@ -157,7 +157,7 @@
     /**
      * Create an instance of a cache driven driver.
      *
-     * @param  string  $driver
+     * @param  string $driver
      * @return \Illuminate\Session\Store
      */
     protected function createCacheBased($driver)
@@ -168,7 +168,7 @@
     /**
      * Create the cache based session handler instance.
      *
-     * @param  string  $driver
+     * @param  string $driver
      * @return \Illuminate\Session\CacheBasedSessionHandler
      */
     protected function createCacheHandler($driver)
@@ -181,7 +181,7 @@
     /**
      * Build the session instance.
      *
-     * @param  \SessionHandlerInterface  $handler
+     * @param  \SessionHandlerInterface $handler
      * @return \Illuminate\Session\Store
      */
     protected function buildSession($handler)
@@ -218,7 +218,7 @@
     /**
      * Set the default session driver name.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public function setDefaultDriver($name)

--- vendor/laravel/framework/src/Illuminate/Session/SessionServiceProvider.php
+++ PHP_CodeSniffer
@@ -27,9 +27,11 @@
      */
     protected function registerSessionManager()
     {
-        $this->app->singleton('session', function ($app) {
-            return new SessionManager($app);
-        });
+        $this->app->singleton(
+            'session', function ($app) {
+                return new SessionManager($app);
+            }
+        );
     }
 
     /**
@@ -39,13 +41,15 @@
      */
     protected function registerSessionDriver()
     {
-        $this->app->singleton('session.store', function ($app) {
-            // First, we will create the session manager which is responsible for the
-            // creation of the various session drivers when they are needed by the
-            // application instance, and will resolve them on a lazy load basis.
-            $manager = $app['session'];
+        $this->app->singleton(
+            'session.store', function ($app) {
+                // First, we will create the session manager which is responsible for the
+                // creation of the various session drivers when they are needed by the
+                // application instance, and will resolve them on a lazy load basis.
+                $manager = $app['session'];
 
-            return $manager->driver();
-        });
+                return $manager->driver();
+            }
+        );
     }
 }

--- vendor/laravel/framework/src/Illuminate/Session/Store.php
+++ PHP_CodeSniffer
@@ -71,9 +71,9 @@
     /**
      * Create a new session instance.
      *
-     * @param  string $name
+     * @param  string                   $name
      * @param  \SessionHandlerInterface $handler
-     * @param  string|null $id
+     * @param  string|null              $id
      * @return void
      */
     public function __construct($name, SessionHandlerInterface $handler, $id = null)
@@ -137,7 +137,7 @@
     /**
      * Prepare the raw string data from the session for unserialization.
      *
-     * @param  string  $data
+     * @param  string $data
      * @return string
      */
     protected function prepareForUnserialize($data)
@@ -148,7 +148,7 @@
     /**
      * Initialize a bag in storage if it doesn't exist.
      *
-     * @param  \Symfony\Component\HttpFoundation\Session\SessionBagInterface  $bag
+     * @param  \Symfony\Component\HttpFoundation\Session\SessionBagInterface $bag
      * @return void
      */
     protected function initializeLocalBag($bag)
@@ -179,7 +179,7 @@
     /**
      * Determine if this is a valid session ID.
      *
-     * @param  string  $id
+     * @param  string $id
      * @return bool
      */
     public function isValidId($id)
@@ -242,7 +242,7 @@
     /**
      * Generate a new session identifier.
      *
-     * @param  bool  $destroy
+     * @param  bool $destroy
      * @return bool
      */
     public function regenerate($destroy = false)
@@ -267,7 +267,7 @@
     /**
      * Prepare the serialized session data for storage.
      *
-     * @param  string  $data
+     * @param  string $data
      * @return string
      */
     protected function prepareForStorage($data)
@@ -332,8 +332,8 @@
     /**
      * Get the value of a given key and then forget it.
      *
-     * @param  string  $key
-     * @param  string  $default
+     * @param  string $key
+     * @param  string $default
      * @return mixed
      */
     public function pull($key, $default = null)
@@ -344,7 +344,7 @@
     /**
      * Determine if the session contains old input.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function hasOldInput($key = null)
@@ -357,8 +357,8 @@
     /**
      * Get the requested item from the flashed input array.
      *
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  string $key
+     * @param  mixed  $default
      * @return mixed
      */
     public function getOldInput($key = null, $default = null)
@@ -382,8 +382,8 @@
     /**
      * Put a key / value pair or array of key / value pairs in the session.
      *
-     * @param  string|array  $key
-     * @param  mixed       $value
+     * @param  string|array $key
+     * @param  mixed        $value
      * @return void
      */
     public function put($key, $value = null)
@@ -400,8 +400,8 @@
     /**
      * Push a value onto a session array.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function push($key, $value)
@@ -416,8 +416,8 @@
     /**
      * Increment the value of an item in the session.
      *
-     * @param  string  $key
-     * @param  int  $amount
+     * @param  string $key
+     * @param  int    $amount
      * @return mixed
      */
     public function increment($key, $amount = 1)
@@ -432,8 +432,8 @@
     /**
      * Decrement the value of an item in the session.
      *
-     * @param  string  $key
-     * @param  int  $amount
+     * @param  string $key
+     * @param  int    $amount
      * @return int
      */
     public function decrement($key, $amount = 1)
@@ -444,8 +444,8 @@
     /**
      * Flash a key / value pair to the session.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function flash($key, $value)
@@ -462,7 +462,7 @@
      * for immediate use.
      *
      * @param  string $key
-     * @param  mixed $value
+     * @param  mixed  $value
      * @return void
      */
     public function now($key, $value)
@@ -475,7 +475,7 @@
     /**
      * Flash an input array to the session.
      *
-     * @param  array  $value
+     * @param  array $value
      * @return void
      */
     public function flashInput(array $value)
@@ -498,7 +498,7 @@
     /**
      * Reflash a subset of the current flash data.
      *
-     * @param  array|mixed  $keys
+     * @param  array|mixed $keys
      * @return void
      */
     public function keep($keys = null)
@@ -513,7 +513,7 @@
     /**
      * Merge new flash keys into the new flash array.
      *
-     * @param  array  $keys
+     * @param  array $keys
      * @return void
      */
     protected function mergeNewFlashes(array $keys)
@@ -526,7 +526,7 @@
     /**
      * Remove the given keys from the old flash data.
      *
-     * @param  array  $keys
+     * @param  array $keys
      * @return void
      */
     protected function removeFromOldFlashData(array $keys)
@@ -561,7 +561,7 @@
     /**
      * Remove one or many items from the session.
      *
-     * @param  string|array  $keys
+     * @param  string|array $keys
      * @return void
      */
     public function forget($keys)
@@ -612,9 +612,11 @@
      */
     public function getBag($name)
     {
-        return Arr::get($this->bags, $name, function () {
-            throw new InvalidArgumentException('Bag not registered.');
-        });
+        return Arr::get(
+            $this->bags, $name, function () {
+                throw new InvalidArgumentException('Bag not registered.');
+            }
+        );
     }
 
     /**
@@ -628,7 +630,7 @@
     /**
      * Get the raw bag data array for a given bag.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return array
      */
     public function getBagData($name)
@@ -679,7 +681,7 @@
     /**
      * Set the "previous" URL in the session.
      *
-     * @param  string  $url
+     * @param  string $url
      * @return void
      */
     public function setPreviousUrl($url)
@@ -690,7 +692,7 @@
     /**
      * Set the existence of the session on the handler if applicable.
      *
-     * @param  bool  $value
+     * @param  bool $value
      * @return void
      */
     public function setExists($value)
@@ -723,7 +725,7 @@
     /**
      * Set the request on the handler instance.
      *
-     * @param  \Symfony\Component\HttpFoundation\Request  $request
+     * @param  \Symfony\Component\HttpFoundation\Request $request
      * @return void
      */
     public function setRequestOnHandler(Request $request)

--- vendor/laravel/framework/src/Illuminate/Support/Arr.php
+++ PHP_CodeSniffer
@@ -12,7 +12,7 @@
     /**
      * Determine whether the given value is array accessible.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return bool
      */
     public static function accessible($value)
@@ -23,9 +23,9 @@
     /**
      * Add an element to an array using "dot" notation if it doesn't exist.
      *
-     * @param  array   $array
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  array  $array
+     * @param  string $key
+     * @param  mixed  $value
      * @return array
      */
     public static function add($array, $key, $value)
@@ -40,8 +40,8 @@
     /**
      * Build a new array using a callback.
      *
-     * @param  array  $array
-     * @param  callable  $callback
+     * @param  array    $array
+     * @param  callable $callback
      * @return array
      *
      * @deprecated since version 5.2.
@@ -62,7 +62,7 @@
     /**
      * Collapse an array of arrays into a single array.
      *
-     * @param  array  $array
+     * @param  array $array
      * @return array
      */
     public static function collapse($array)
@@ -85,7 +85,7 @@
     /**
      * Divide an array into two arrays. One with keys and the other with values.
      *
-     * @param  array  $array
+     * @param  array $array
      * @return array
      */
     public static function divide($array)
@@ -96,8 +96,8 @@
     /**
      * Flatten a multi-dimensional associative array with dots.
      *
-     * @param  array   $array
-     * @param  string  $prepend
+     * @param  array  $array
+     * @param  string $prepend
      * @return array
      */
     public static function dot($array, $prepend = '')
@@ -118,8 +118,8 @@
     /**
      * Get all of the given array except for a specified array of items.
      *
-     * @param  array  $array
-     * @param  array|string  $keys
+     * @param  array        $array
+     * @param  array|string $keys
      * @return array
      */
     public static function except($array, $keys)
@@ -132,8 +132,8 @@
     /**
      * Determine if the given key exists in the provided array.
      *
-     * @param  \ArrayAccess|array  $array
-     * @param  string|int  $key
+     * @param  \ArrayAccess|array $array
+     * @param  string|int         $key
      * @return bool
      */
     public static function exists($array, $key)
@@ -148,9 +148,9 @@
     /**
      * Return the first element in an array passing a given truth test.
      *
-     * @param  array  $array
-     * @param  callable|null  $callback
-     * @param  mixed  $default
+     * @param  array         $array
+     * @param  callable|null $callback
+     * @param  mixed         $default
      * @return mixed
      */
     public static function first($array, callable $callback = null, $default = null)
@@ -171,9 +171,9 @@
     /**
      * Return the last element in an array passing a given truth test.
      *
-     * @param  array  $array
-     * @param  callable|null  $callback
-     * @param  mixed  $default
+     * @param  array         $array
+     * @param  callable|null $callback
+     * @param  mixed         $default
      * @return mixed
      */
     public static function last($array, callable $callback = null, $default = null)
@@ -188,8 +188,8 @@
     /**
      * Flatten a multi-dimensional array into a single level.
      *
-     * @param  array  $array
-     * @param  int  $depth
+     * @param  array $array
+     * @param  int   $depth
      * @return array
      */
     public static function flatten($array, $depth = INF)
@@ -218,8 +218,8 @@
     /**
      * Remove one or many array items from a given array using "dot" notation.
      *
-     * @param  array  $array
-     * @param  array|string  $keys
+     * @param  array        $array
+     * @param  array|string $keys
      * @return void
      */
     public static function forget(&$array, $keys)
@@ -262,9 +262,9 @@
     /**
      * Get an item from an array using "dot" notation.
      *
-     * @param  \ArrayAccess|array  $array
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  \ArrayAccess|array $array
+     * @param  string             $key
+     * @param  mixed              $default
      * @return mixed
      */
     public static function get($array, $key, $default = null)
@@ -295,8 +295,8 @@
     /**
      * Check if an item exists in an array using "dot" notation.
      *
-     * @param  \ArrayAccess|array  $array
-     * @param  string  $key
+     * @param  \ArrayAccess|array $array
+     * @param  string             $key
      * @return bool
      */
     public static function has($array, $key)
@@ -329,7 +329,7 @@
      *
      * An array is "associative" if it doesn't have sequential numerical keys beginning with zero.
      *
-     * @param  array  $array
+     * @param  array $array
      * @return bool
      */
     public static function isAssoc(array $array)
@@ -342,8 +342,8 @@
     /**
      * Get a subset of the items from the given array.
      *
-     * @param  array  $array
-     * @param  array|string  $keys
+     * @param  array        $array
+     * @param  array|string $keys
      * @return array
      */
     public static function only($array, $keys)
@@ -354,9 +354,9 @@
     /**
      * Pluck an array of values from an array.
      *
-     * @param  array  $array
-     * @param  string|array  $value
-     * @param  string|array|null  $key
+     * @param  array             $array
+     * @param  string|array      $value
+     * @param  string|array|null $key
      * @return array
      */
     public static function pluck($array, $value, $key = null)
@@ -386,8 +386,8 @@
     /**
      * Explode the "value" and "key" arguments passed to "pluck".
      *
-     * @param  string|array  $value
-     * @param  string|array|null  $key
+     * @param  string|array      $value
+     * @param  string|array|null $key
      * @return array
      */
     protected static function explodePluckParameters($value, $key)
@@ -402,9 +402,9 @@
     /**
      * Push an item onto the beginning of an array.
      *
-     * @param  array  $array
-     * @param  mixed  $value
-     * @param  mixed  $key
+     * @param  array $array
+     * @param  mixed $value
+     * @param  mixed $key
      * @return array
      */
     public static function prepend($array, $value, $key = null)
@@ -421,9 +421,9 @@
     /**
      * Get a value from the array, and remove it.
      *
-     * @param  array   $array
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  array  $array
+     * @param  string $key
+     * @param  mixed  $default
      * @return mixed
      */
     public static function pull(&$array, $key, $default = null)
@@ -440,9 +440,9 @@
      *
      * If no key is given to the method, the entire array will be replaced.
      *
-     * @param  array   $array
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  array  $array
+     * @param  string $key
+     * @param  mixed  $value
      * @return array
      */
     public static function set(&$array, $key, $value)
@@ -474,8 +474,8 @@
     /**
      * Sort the array using the given callback.
      *
-     * @param  array  $array
-     * @param  callable  $callback
+     * @param  array    $array
+     * @param  callable $callback
      * @return array
      */
     public static function sort($array, callable $callback)
@@ -486,7 +486,7 @@
     /**
      * Recursively sort an array by keys and values.
      *
-     * @param  array  $array
+     * @param  array $array
      * @return array
      */
     public static function sortRecursive($array)
@@ -509,8 +509,8 @@
     /**
      * Filter the array using the given callback.
      *
-     * @param  array  $array
-     * @param  callable  $callback
+     * @param  array    $array
+     * @param  callable $callback
      * @return array
      */
     public static function where($array, callable $callback)

--- vendor/laravel/framework/src/Illuminate/Support/ClassLoader.php
+++ PHP_CodeSniffer
@@ -21,7 +21,7 @@
     /**
      * Load the given class file.
      *
-     * @param  string  $class
+     * @param  string $class
      * @return bool
      */
     public static function load($class)
@@ -30,7 +30,7 @@
 
         foreach (static::$directories as $directory) {
             if (file_exists($path = $directory.DIRECTORY_SEPARATOR.$class)) {
-                require_once $path;
+                include_once $path;
 
                 return true;
             }
@@ -42,7 +42,7 @@
     /**
      * Get the normal file name for a class.
      *
-     * @param  string  $class
+     * @param  string $class
      * @return string
      */
     public static function normalizeClass($class)
@@ -69,7 +69,7 @@
     /**
      * Add directories to the class loader.
      *
-     * @param  string|array  $directories
+     * @param  string|array $directories
      * @return void
      */
     public static function addDirectories($directories)
@@ -80,7 +80,7 @@
     /**
      * Remove directories from the class loader.
      *
-     * @param  string|array  $directories
+     * @param  string|array $directories
      * @return void
      */
     public static function removeDirectories($directories = null)

--- vendor/laravel/framework/src/Illuminate/Support/Collection.php
+++ PHP_CodeSniffer
@@ -27,7 +27,7 @@
     /**
      * Create a new collection.
      *
-     * @param  mixed  $items
+     * @param  mixed $items
      * @return void
      */
     public function __construct($items = [])
@@ -38,7 +38,7 @@
     /**
      * Create a new collection instance if the value isn't one already.
      *
-     * @param  mixed  $items
+     * @param  mixed $items
      * @return static
      */
     public static function make($items = [])
@@ -59,7 +59,7 @@
     /**
      * Get the average value of a given key.
      *
-     * @param  string|null  $key
+     * @param  string|null $key
      * @return mixed
      */
     public function avg($key = null)
@@ -72,7 +72,7 @@
     /**
      * Alias for the "avg" method.
      *
-     * @param  string|null  $key
+     * @param  string|null $key
      * @return mixed
      */
     public function average($key = null)
@@ -126,17 +126,21 @@
 
         $counts = new self;
 
-        $collection->each(function ($value) use ($counts) {
-            $counts[$value] = isset($counts[$value]) ? $counts[$value] + 1 : 1;
-        });
+        $collection->each(
+            function ($value) use ($counts) {
+                $counts[$value] = isset($counts[$value]) ? $counts[$value] + 1 : 1;
+            }
+        );
 
         $sorted = $counts->sort();
 
         $highestValue = $sorted->last();
 
-        return $sorted->filter(function ($value) use ($highestValue) {
-            return $value == $highestValue;
-        })->sort()->keys()->all();
+        return $sorted->filter(
+            function ($value) use ($highestValue) {
+                return $value == $highestValue;
+            }
+        )->sort()->keys()->all();
     }
 
     /**
@@ -152,16 +156,18 @@
     /**
      * Determine if an item exists in the collection.
      *
-     * @param  mixed  $key
-     * @param  mixed  $value
+     * @param  mixed $key
+     * @param  mixed $value
      * @return bool
      */
     public function contains($key, $value = null)
     {
         if (func_num_args() == 2) {
-            return $this->contains(function ($k, $item) use ($key, $value) {
-                return data_get($item, $key) == $value;
-            });
+            return $this->contains(
+                function ($k, $item) use ($key, $value) {
+                    return data_get($item, $key) == $value;
+                }
+            );
         }
 
         if ($this->useAsCallable($key)) {
@@ -174,7 +180,7 @@
     /**
      * Get the items in the collection that are not present in the given items.
      *
-     * @param  mixed  $items
+     * @param  mixed $items
      * @return static
      */
     public function diff($items)
@@ -185,7 +191,7 @@
     /**
      * Get the items in the collection whose keys are not present in the given items.
      *
-     * @param  mixed  $items
+     * @param  mixed $items
      * @return static
      */
     public function diffKeys($items)
@@ -196,7 +202,7 @@
     /**
      * Execute a callback over each item.
      *
-     * @param  callable  $callback
+     * @param  callable $callback
      * @return $this
      */
     public function each(callable $callback)
@@ -213,8 +219,8 @@
     /**
      * Create a new collection consisting of every n-th element.
      *
-     * @param  int  $step
-     * @param  int  $offset
+     * @param  int $step
+     * @param  int $offset
      * @return static
      */
     public function every($step, $offset = 0)
@@ -237,7 +243,7 @@
     /**
      * Get all items except for those with the specified keys.
      *
-     * @param  mixed  $keys
+     * @param  mixed $keys
      * @return static
      */
     public function except($keys)
@@ -250,7 +256,7 @@
     /**
      * Run a filter over each of the items.
      *
-     * @param  callable|null  $callback
+     * @param  callable|null $callback
      * @return static
      */
     public function filter(callable $callback = null)
@@ -273,23 +279,25 @@
     /**
      * Filter items by the given key value pair.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
-     * @param  bool  $strict
+     * @param  bool   $strict
      * @return static
      */
     public function where($key, $value, $strict = true)
     {
-        return $this->filter(function ($item) use ($key, $value, $strict) {
-            return $strict ? data_get($item, $key) === $value
+        return $this->filter(
+            function ($item) use ($key, $value, $strict) {
+                return $strict ? data_get($item, $key) === $value
                            : data_get($item, $key) == $value;
-        });
+            }
+        );
     }
 
     /**
      * Filter items by the given key value pair using loose comparison.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  mixed  $value
      * @return static
      */
@@ -301,22 +309,24 @@
     /**
      * Filter items by the given key value pair.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  array  $values
-     * @param  bool  $strict
+     * @param  bool   $strict
      * @return static
      */
     public function whereIn($key, array $values, $strict = true)
     {
-        return $this->filter(function ($item) use ($key, $values, $strict) {
-            return in_array(data_get($item, $key), $values, $strict);
-        });
+        return $this->filter(
+            function ($item) use ($key, $values, $strict) {
+                return in_array(data_get($item, $key), $values, $strict);
+            }
+        );
     }
 
     /**
      * Filter items by the given key value pair using loose comparison.
      *
-     * @param  string  $key
+     * @param  string $key
      * @param  array  $values
      * @return static
      */
@@ -328,8 +338,8 @@
     /**
      * Get the first item from the collection.
      *
-     * @param  callable|null  $callback
-     * @param  mixed  $default
+     * @param  callable|null $callback
+     * @param  mixed         $default
      * @return mixed
      */
     public function first(callable $callback = null, $default = null)
@@ -340,7 +350,7 @@
     /**
      * Get a flattened array of the items in the collection.
      *
-     * @param  int  $depth
+     * @param  int $depth
      * @return static
      */
     public function flatten($depth = INF)
@@ -361,7 +371,7 @@
     /**
      * Remove an item from the collection by key.
      *
-     * @param  string|array  $keys
+     * @param  string|array $keys
      * @return $this
      */
     public function forget($keys)
@@ -376,8 +386,8 @@
     /**
      * Get an item from the collection by key.
      *
-     * @param  mixed  $key
-     * @param  mixed  $default
+     * @param  mixed $key
+     * @param  mixed $default
      * @return mixed
      */
     public function get($key, $default = null)
@@ -392,8 +402,8 @@
     /**
      * Group an associative array by a field or using a callback.
      *
-     * @param  callable|string  $groupBy
-     * @param  bool  $preserveKeys
+     * @param  callable|string $groupBy
+     * @param  bool            $preserveKeys
      * @return static
      */
     public function groupBy($groupBy, $preserveKeys = false)
@@ -424,7 +434,7 @@
     /**
      * Key an associative array by a field or using a callback.
      *
-     * @param  callable|string  $keyBy
+     * @param  callable|string $keyBy
      * @return static
      */
     public function keyBy($keyBy)
@@ -443,7 +453,7 @@
     /**
      * Determine if an item exists in the collection by key.
      *
-     * @param  mixed  $key
+     * @param  mixed $key
      * @return bool
      */
     public function has($key)
@@ -454,8 +464,8 @@
     /**
      * Concatenate values of a given key as a string.
      *
-     * @param  string  $value
-     * @param  string  $glue
+     * @param  string $value
+     * @param  string $glue
      * @return string
      */
     public function implode($value, $glue = null)
@@ -472,7 +482,7 @@
     /**
      * Intersect the collection with the given items.
      *
-     * @param  mixed  $items
+     * @param  mixed $items
      * @return static
      */
     public function intersect($items)
@@ -493,7 +503,7 @@
     /**
      * Determine if the given value is callable, but not a string.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return bool
      */
     protected function useAsCallable($value)
@@ -514,8 +524,8 @@
     /**
      * Get the last item from the collection.
      *
-     * @param  callable|null  $callback
-     * @param  mixed  $default
+     * @param  callable|null $callback
+     * @param  mixed         $default
      * @return mixed
      */
     public function last(callable $callback = null, $default = null)
@@ -526,8 +536,8 @@
     /**
      * Get the values of a given key.
      *
-     * @param  string  $value
-     * @param  string|null  $key
+     * @param  string      $value
+     * @param  string|null $key
      * @return static
      */
     public function pluck($value, $key = null)
@@ -538,8 +548,8 @@
     /**
      * Alias for the "pluck" method.
      *
-     * @param  string  $value
-     * @param  string|null  $key
+     * @param  string      $value
+     * @param  string|null $key
      * @return static
      *
      * @deprecated since version 5.2. Use the "pluck" method directly.
@@ -552,7 +562,7 @@
     /**
      * Run a map over each of the items.
      *
-     * @param  callable  $callback
+     * @param  callable $callback
      * @return static
      */
     public function map(callable $callback)
@@ -567,7 +577,7 @@
     /**
      * Map a collection and flatten the result by a single level.
      *
-     * @param  callable  $callback
+     * @param  callable $callback
      * @return static
      */
     public function flatMap(callable $callback)
@@ -578,22 +588,24 @@
     /**
      * Get the max value of a given key.
      *
-     * @param  string|null  $key
+     * @param  string|null $key
      * @return mixed
      */
     public function max($key = null)
     {
-        return $this->reduce(function ($result, $item) use ($key) {
-            $value = data_get($item, $key);
+        return $this->reduce(
+            function ($result, $item) use ($key) {
+                $value = data_get($item, $key);
 
-            return is_null($result) || $value > $result ? $value : $result;
-        });
+                return is_null($result) || $value > $result ? $value : $result;
+            }
+        );
     }
 
     /**
      * Merge the collection with the given items.
      *
-     * @param  mixed  $items
+     * @param  mixed $items
      * @return static
      */
     public function merge($items)
@@ -604,7 +616,7 @@
     /**
      * Create a collection by using this collection for keys and another for its values.
      *
-     * @param  mixed  $values
+     * @param  mixed $values
      * @return static
      */
     public function combine($values)
@@ -615,7 +627,7 @@
     /**
      * Union the collection with the given items.
      *
-     * @param  mixed  $items
+     * @param  mixed $items
      * @return static
      */
     public function union($items)
@@ -626,22 +638,24 @@
     /**
      * Get the min value of a given key.
      *
-     * @param  string|null  $key
+     * @param  string|null $key
      * @return mixed
      */
     public function min($key = null)
     {
-        return $this->reduce(function ($result, $item) use ($key) {
-            $value = data_get($item, $key);
+        return $this->reduce(
+            function ($result, $item) use ($key) {
+                $value = data_get($item, $key);
 
-            return is_null($result) || $value < $result ? $value : $result;
-        });
+                return is_null($result) || $value < $result ? $value : $result;
+            }
+        );
     }
 
     /**
      * Get the items with the specified keys.
      *
-     * @param  mixed  $keys
+     * @param  mixed $keys
      * @return static
      */
     public function only($keys)
@@ -654,8 +668,8 @@
     /**
      * "Paginate" the collection by slicing it into a smaller collection.
      *
-     * @param  int  $page
-     * @param  int  $perPage
+     * @param  int $page
+     * @param  int $perPage
      * @return static
      */
     public function forPage($page, $perPage)
@@ -687,8 +701,8 @@
     /**
      * Push an item onto the beginning of the collection.
      *
-     * @param  mixed  $value
-     * @param  mixed  $key
+     * @param  mixed $value
+     * @param  mixed $key
      * @return $this
      */
     public function prepend($value, $key = null)
@@ -701,7 +715,7 @@
     /**
      * Push an item onto the end of the collection.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return $this
      */
     public function push($value)
@@ -714,8 +728,8 @@
     /**
      * Get and remove an item from the collection.
      *
-     * @param  mixed  $key
-     * @param  mixed  $default
+     * @param  mixed $key
+     * @param  mixed $default
      * @return mixed
      */
     public function pull($key, $default = null)
@@ -726,8 +740,8 @@
     /**
      * Put an item in the collection by key.
      *
-     * @param  mixed  $key
-     * @param  mixed  $value
+     * @param  mixed $key
+     * @param  mixed $value
      * @return $this
      */
     public function put($key, $value)
@@ -740,7 +754,7 @@
     /**
      * Get one or more items randomly from the collection.
      *
-     * @param  int  $amount
+     * @param  int $amount
      * @return mixed
      *
      * @throws \InvalidArgumentException
@@ -763,8 +777,8 @@
     /**
      * Reduce the collection to a single value.
      *
-     * @param  callable  $callback
-     * @param  mixed     $initial
+     * @param  callable $callback
+     * @param  mixed    $initial
      * @return mixed
      */
     public function reduce(callable $callback, $initial = null)
@@ -775,20 +789,24 @@
     /**
      * Create a collection of all elements that do not pass a given truth test.
      *
-     * @param  callable|mixed  $callback
+     * @param  callable|mixed $callback
      * @return static
      */
     public function reject($callback)
     {
         if ($this->useAsCallable($callback)) {
-            return $this->filter(function ($value, $key) use ($callback) {
-                return ! $callback($value, $key);
-            });
+            return $this->filter(
+                function ($value, $key) use ($callback) {
+                    return ! $callback($value, $key);
+                }
+            );
         }
 
-        return $this->filter(function ($item) use ($callback) {
-            return $item != $callback;
-        });
+        return $this->filter(
+            function ($item) use ($callback) {
+                return $item != $callback;
+            }
+        );
     }
 
     /**
@@ -804,8 +822,8 @@
     /**
      * Search the collection for a given value and return the corresponding key if successful.
      *
-     * @param  mixed  $value
-     * @param  bool   $strict
+     * @param  mixed $value
+     * @param  bool  $strict
      * @return mixed
      */
     public function search($value, $strict = false)
@@ -836,7 +854,7 @@
     /**
      * Shuffle the items in the collection.
      *
-     * @param int $seed
+     * @param  int $seed
      * @return static
      */
     public function shuffle($seed = null)
@@ -848,9 +866,11 @@
         } else {
             srand($seed);
 
-            usort($items, function () {
-                return rand(-1, 1);
-            });
+            usort(
+                $items, function () {
+                    return rand(-1, 1);
+                }
+            );
         }
 
         return new static($items);
@@ -859,8 +879,8 @@
     /**
      * Slice the underlying collection array.
      *
-     * @param  int   $offset
-     * @param  int   $length
+     * @param  int $offset
+     * @param  int $length
      * @return static
      */
     public function slice($offset, $length = null)
@@ -871,7 +891,7 @@
     /**
      * Chunk the underlying collection array.
      *
-     * @param  int   $size
+     * @param  int $size
      * @return static
      */
     public function chunk($size)
@@ -888,20 +908,22 @@
     /**
      * Sort through each item with a callback.
      *
-     * @param  callable|null  $callback
+     * @param  callable|null $callback
      * @return static
      */
     public function sort(callable $callback = null)
     {
         $items = $this->items;
 
-        $callback ? uasort($items, $callback) : uasort($items, function ($a, $b) {
-            if ($a == $b) {
-                return 0;
-            }
+        $callback ? uasort($items, $callback) : uasort(
+            $items, function ($a, $b) {
+                if ($a == $b) {
+                    return 0;
+                }
 
-            return ($a < $b) ? -1 : 1;
-        });
+                return ($a < $b) ? -1 : 1;
+            }
+        );
 
         return new static($items);
     }
@@ -909,9 +931,9 @@
     /**
      * Sort the collection using the given callback.
      *
-     * @param  callable|string  $callback
-     * @param  int   $options
-     * @param  bool  $descending
+     * @param  callable|string $callback
+     * @param  int             $options
+     * @param  bool            $descending
      * @return static
      */
     public function sortBy($callback, $options = SORT_REGULAR, $descending = false)
@@ -943,8 +965,8 @@
     /**
      * Sort the collection in descending order using the given callback.
      *
-     * @param  callable|string  $callback
-     * @param  int  $options
+     * @param  callable|string $callback
+     * @param  int             $options
      * @return static
      */
     public function sortByDesc($callback, $options = SORT_REGULAR)
@@ -955,9 +977,9 @@
     /**
      * Splice a portion of the underlying collection array.
      *
-     * @param  int  $offset
-     * @param  int|null  $length
-     * @param  mixed  $replacement
+     * @param  int      $offset
+     * @param  int|null $length
+     * @param  mixed    $replacement
      * @return static
      */
     public function splice($offset, $length = null, $replacement = [])
@@ -972,7 +994,7 @@
     /**
      * Get the sum of the given values.
      *
-     * @param  callable|string|null  $callback
+     * @param  callable|string|null $callback
      * @return mixed
      */
     public function sum($callback = null)
@@ -983,15 +1005,17 @@
 
         $callback = $this->valueRetriever($callback);
 
-        return $this->reduce(function ($result, $item) use ($callback) {
-            return $result += $callback($item);
-        }, 0);
+        return $this->reduce(
+            function ($result, $item) use ($callback) {
+                return $result += $callback($item);
+            }, 0
+        );
     }
 
     /**
      * Take the first or last {$limit} items.
      *
-     * @param  int  $limit
+     * @param  int $limit
      * @return static
      */
     public function take($limit)
@@ -1006,7 +1030,7 @@
     /**
      * Transform each item in the collection using a callback.
      *
-     * @param  callable  $callback
+     * @param  callable $callback
      * @return $this
      */
     public function transform(callable $callback)
@@ -1019,7 +1043,7 @@
     /**
      * Return only unique items from the collection array.
      *
-     * @param  string|callable|null  $key
+     * @param  string|callable|null $key
      * @return static
      */
     public function unique($key = null)
@@ -1032,13 +1056,15 @@
 
         $exists = [];
 
-        return $this->reject(function ($item) use ($key, &$exists) {
-            if (in_array($id = $key($item), $exists)) {
-                return true;
-            }
+        return $this->reject(
+            function ($item) use ($key, &$exists) {
+                if (in_array($id = $key($item), $exists)) {
+                    return true;
+                }
 
-            $exists[] = $id;
-        });
+                $exists[] = $id;
+            }
+        );
     }
 
     /**
@@ -1054,7 +1080,7 @@
     /**
      * Get a value retrieving callback.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return callable
      */
     protected function valueRetriever($value)
@@ -1079,13 +1105,17 @@
      */
     public function zip($items)
     {
-        $arrayableItems = array_map(function ($items) {
-            return $this->getArrayableItems($items);
-        }, func_get_args());
-
-        $params = array_merge([function () {
-            return new static(func_get_args());
-        }, $this->items], $arrayableItems);
+        $arrayableItems = array_map(
+            function ($items) {
+                return $this->getArrayableItems($items);
+            }, func_get_args()
+        );
+
+        $params = array_merge(
+            [function () {
+                return new static(func_get_args());
+            }, $this->items], $arrayableItems
+        );
 
         return new static(call_user_func_array('array_map', $params));
     }
@@ -1097,9 +1127,11 @@
      */
     public function toArray()
     {
-        return array_map(function ($value) {
-            return $value instanceof Arrayable ? $value->toArray() : $value;
-        }, $this->items);
+        return array_map(
+            function ($value) {
+                return $value instanceof Arrayable ? $value->toArray() : $value;
+            }, $this->items
+        );
     }
 
     /**
@@ -1109,23 +1141,25 @@
      */
     public function jsonSerialize()
     {
-        return array_map(function ($value) {
-            if ($value instanceof JsonSerializable) {
-                return $value->jsonSerialize();
-            } elseif ($value instanceof Jsonable) {
-                return json_decode($value->toJson(), true);
-            } elseif ($value instanceof Arrayable) {
-                return $value->toArray();
-            } else {
-                return $value;
-            }
-        }, $this->items);
+        return array_map(
+            function ($value) {
+                if ($value instanceof JsonSerializable) {
+                    return $value->jsonSerialize();
+                } elseif ($value instanceof Jsonable) {
+                    return json_decode($value->toJson(), true);
+                } elseif ($value instanceof Arrayable) {
+                    return $value->toArray();
+                } else {
+                    return $value;
+                }
+            }, $this->items
+        );
     }
 
     /**
      * Get the collection of items as JSON.
      *
-     * @param  int  $options
+     * @param  int $options
      * @return string
      */
     public function toJson($options = 0)
@@ -1146,7 +1180,7 @@
     /**
      * Get a CachingIterator instance.
      *
-     * @param  int  $flags
+     * @param  int $flags
      * @return \CachingIterator
      */
     public function getCachingIterator($flags = CachingIterator::CALL_TOSTRING)
@@ -1167,7 +1201,7 @@
     /**
      * Determine if an item exists at an offset.
      *
-     * @param  mixed  $key
+     * @param  mixed $key
      * @return bool
      */
     public function offsetExists($key)
@@ -1178,7 +1212,7 @@
     /**
      * Get an item at a given offset.
      *
-     * @param  mixed  $key
+     * @param  mixed $key
      * @return mixed
      */
     public function offsetGet($key)
@@ -1189,8 +1223,8 @@
     /**
      * Set the item at a given offset.
      *
-     * @param  mixed  $key
-     * @param  mixed  $value
+     * @param  mixed $key
+     * @param  mixed $value
      * @return void
      */
     public function offsetSet($key, $value)
@@ -1205,7 +1239,7 @@
     /**
      * Unset the item at a given offset.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return void
      */
     public function offsetUnset($key)
@@ -1226,7 +1260,7 @@
     /**
      * Results array of items from Collection or Arrayable.
      *
-     * @param  mixed  $items
+     * @param  mixed $items
      * @return array
      */
     protected function getArrayableItems($items)

--- vendor/laravel/framework/src/Illuminate/Support/Composer.php
+++ PHP_CodeSniffer
@@ -26,8 +26,8 @@
     /**
      * Create a new Composer manager instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
-     * @param  string|null  $workingPath
+     * @param  \Illuminate\Filesystem\Filesystem $files
+     * @param  string|null                       $workingPath
      * @return void
      */
     public function __construct(Filesystem $files, $workingPath = null)
@@ -39,7 +39,7 @@
     /**
      * Regenerate the Composer autoloader files.
      *
-     * @param  string  $extra
+     * @param  string $extra
      * @return void
      */
     public function dumpAutoloads($extra = '')
@@ -94,7 +94,7 @@
     /**
      * Set the working path used by the class.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return $this
      */
     public function setWorkingPath($path)

--- vendor/laravel/framework/src/Illuminate/Support/Debug/Dumper.php
+++ PHP_CodeSniffer
@@ -10,7 +10,7 @@
     /**
      * Dump a value with elegance.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return void
      */
     public function dump($value)

--- vendor/laravel/framework/src/Illuminate/Support/Facades/Cookie.php
+++ PHP_CodeSniffer
@@ -10,7 +10,7 @@
     /**
      * Determine if a cookie exists on the request.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public static function has($key)
@@ -21,8 +21,8 @@
     /**
      * Retrieve a cookie from the request.
      *
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  string $key
+     * @param  mixed  $default
      * @return string
      */
     public static function get($key = null, $default = null)

--- vendor/laravel/framework/src/Illuminate/Support/Facades/Facade.php
+++ PHP_CodeSniffer
@@ -25,7 +25,7 @@
     /**
      * Hotswap the underlying instance behind the facade.
      *
-     * @param  mixed  $instance
+     * @param  mixed $instance
      * @return void
      */
     public static function swap($instance)
@@ -57,7 +57,7 @@
     /**
      * Create a fresh mock instance for the given class.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Mockery\Expectation
      */
     protected static function createFreshMockInstance($name)
@@ -76,7 +76,7 @@
     /**
      * Create a fresh mock instance for the given class.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Mockery\Expectation
      */
     protected static function createMockByName($name)
@@ -135,7 +135,7 @@
     /**
      * Resolve the facade root instance from the container.
      *
-     * @param  string|object  $name
+     * @param  string|object $name
      * @return mixed
      */
     protected static function resolveFacadeInstance($name)
@@ -154,7 +154,7 @@
     /**
      * Clear a resolved facade instance.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return void
      */
     public static function clearResolvedInstance($name)
@@ -185,7 +185,7 @@
     /**
      * Set the application instance.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return void
      */
     public static function setFacadeApplication($app)
@@ -196,8 +196,8 @@
     /**
      * Handle dynamic, static calls to the object.
      *
-     * @param  string  $method
-     * @param  array   $args
+     * @param  string $method
+     * @param  array  $args
      * @return mixed
      *
      * @throws \RuntimeException
@@ -211,18 +211,18 @@
         }
 
         switch (count($args)) {
-            case 0:
-                return $instance->$method();
-            case 1:
-                return $instance->$method($args[0]);
-            case 2:
-                return $instance->$method($args[0], $args[1]);
-            case 3:
-                return $instance->$method($args[0], $args[1], $args[2]);
-            case 4:
-                return $instance->$method($args[0], $args[1], $args[2], $args[3]);
-            default:
-                return call_user_func_array([$instance, $method], $args);
+        case 0:
+            return $instance->$method();
+        case 1:
+            return $instance->$method($args[0]);
+        case 2:
+            return $instance->$method($args[0], $args[1]);
+        case 3:
+            return $instance->$method($args[0], $args[1], $args[2]);
+        case 4:
+            return $instance->$method($args[0], $args[1], $args[2], $args[3]);
+        default:
+            return call_user_func_array([$instance, $method], $args);
         }
     }
 }

--- vendor/laravel/framework/src/Illuminate/Support/Facades/Input.php
+++ PHP_CodeSniffer
@@ -12,8 +12,8 @@
      *
      * This method is used for all request verbs (GET, POST, PUT, and DELETE)
      *
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  string $key
+     * @param  mixed  $default
      * @return mixed
      */
     public static function get($key = null, $default = null)

--- vendor/laravel/framework/src/Illuminate/Support/Facades/Schema.php
+++ PHP_CodeSniffer
@@ -10,7 +10,7 @@
     /**
      * Get a schema builder instance for a connection.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return \Illuminate\Database\Schema\Builder
      */
     public static function connection($name)

--- vendor/laravel/framework/src/Illuminate/Support/Fluent.php
+++ PHP_CodeSniffer
@@ -19,7 +19,7 @@
     /**
      * Create a new fluent container instance.
      *
-     * @param  array|object    $attributes
+     * @param  array|object $attributes
      * @return void
      */
     public function __construct($attributes = [])
@@ -32,8 +32,8 @@
     /**
      * Get an attribute from the container.
      *
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  string $key
+     * @param  mixed  $default
      * @return mixed
      */
     public function get($key, $default = null)
@@ -78,7 +78,7 @@
     /**
      * Convert the Fluent instance to JSON.
      *
-     * @param  int  $options
+     * @param  int $options
      * @return string
      */
     public function toJson($options = 0)
@@ -89,7 +89,7 @@
     /**
      * Determine if the given offset exists.
      *
-     * @param  string  $offset
+     * @param  string $offset
      * @return bool
      */
     public function offsetExists($offset)
@@ -100,7 +100,7 @@
     /**
      * Get the value for a given offset.
      *
-     * @param  string  $offset
+     * @param  string $offset
      * @return mixed
      */
     public function offsetGet($offset)
@@ -111,8 +111,8 @@
     /**
      * Set the value at the given offset.
      *
-     * @param  string  $offset
-     * @param  mixed   $value
+     * @param  string $offset
+     * @param  mixed  $value
      * @return void
      */
     public function offsetSet($offset, $value)
@@ -123,7 +123,7 @@
     /**
      * Unset the value at the given offset.
      *
-     * @param  string  $offset
+     * @param  string $offset
      * @return void
      */
     public function offsetUnset($offset)
@@ -134,8 +134,8 @@
     /**
      * Handle dynamic calls to the container to set attributes.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return $this
      */
     public function __call($method, $parameters)
@@ -148,7 +148,7 @@
     /**
      * Dynamically retrieve the value of an attribute.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function __get($key)
@@ -159,8 +159,8 @@
     /**
      * Dynamically set the value of an attribute.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function __set($key, $value)
@@ -171,7 +171,7 @@
     /**
      * Dynamically check if an attribute is set.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function __isset($key)
@@ -182,7 +182,7 @@
     /**
      * Dynamically unset an attribute.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return void
      */
     public function __unset($key)

--- vendor/laravel/framework/src/Illuminate/Support/helpers.php
+++ PHP_CodeSniffer
@@ -10,7 +10,7 @@
     /**
      * Assign high numeric IDs to a config item to force appending.
      *
-     * @param  array  $array
+     * @param  array $array
      * @return array
      */
     function append_config(array $array)
@@ -33,9 +33,9 @@
     /**
      * Add an element to an array using "dot" notation if it doesn't exist.
      *
-     * @param  array   $array
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  array  $array
+     * @param  string $key
+     * @param  mixed  $value
      * @return array
      */
     function array_add($array, $key, $value)
@@ -48,8 +48,8 @@
     /**
      * Build a new array using a callback.
      *
-     * @param  array  $array
-     * @param  callable  $callback
+     * @param  array    $array
+     * @param  callable $callback
      * @return array
      *
      * @deprecated since version 5.2.
@@ -64,7 +64,7 @@
     /**
      * Collapse an array of arrays into a single array.
      *
-     * @param  array  $array
+     * @param  array $array
      * @return array
      */
     function array_collapse($array)
@@ -77,7 +77,7 @@
     /**
      * Divide an array into two arrays. One with keys and the other with values.
      *
-     * @param  array  $array
+     * @param  array $array
      * @return array
      */
     function array_divide($array)
@@ -90,8 +90,8 @@
     /**
      * Flatten a multi-dimensional associative array with dots.
      *
-     * @param  array   $array
-     * @param  string  $prepend
+     * @param  array  $array
+     * @param  string $prepend
      * @return array
      */
     function array_dot($array, $prepend = '')
@@ -104,8 +104,8 @@
     /**
      * Get all of the given array except for a specified array of items.
      *
-     * @param  array  $array
-     * @param  array|string  $keys
+     * @param  array        $array
+     * @param  array|string $keys
      * @return array
      */
     function array_except($array, $keys)
@@ -118,9 +118,9 @@
     /**
      * Return the first element in an array passing a given truth test.
      *
-     * @param  array  $array
-     * @param  callable|null  $callback
-     * @param  mixed  $default
+     * @param  array         $array
+     * @param  callable|null $callback
+     * @param  mixed         $default
      * @return mixed
      */
     function array_first($array, callable $callback = null, $default = null)
@@ -133,8 +133,8 @@
     /**
      * Flatten a multi-dimensional array into a single level.
      *
-     * @param  array  $array
-     * @param  int  $depth
+     * @param  array $array
+     * @param  int   $depth
      * @return array
      */
     function array_flatten($array, $depth = INF)
@@ -147,8 +147,8 @@
     /**
      * Remove one or many array items from a given array using "dot" notation.
      *
-     * @param  array  $array
-     * @param  array|string  $keys
+     * @param  array        $array
+     * @param  array|string $keys
      * @return void
      */
     function array_forget(&$array, $keys)
@@ -161,9 +161,9 @@
     /**
      * Get an item from an array using "dot" notation.
      *
-     * @param  \ArrayAccess|array  $array
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  \ArrayAccess|array $array
+     * @param  string             $key
+     * @param  mixed              $default
      * @return mixed
      */
     function array_get($array, $key, $default = null)
@@ -176,8 +176,8 @@
     /**
      * Check if an item exists in an array using "dot" notation.
      *
-     * @param  \ArrayAccess|array  $array
-     * @param  string  $key
+     * @param  \ArrayAccess|array $array
+     * @param  string             $key
      * @return bool
      */
     function array_has($array, $key)
@@ -190,9 +190,9 @@
     /**
      * Return the last element in an array passing a given truth test.
      *
-     * @param  array  $array
-     * @param  callable|null  $callback
-     * @param  mixed  $default
+     * @param  array         $array
+     * @param  callable|null $callback
+     * @param  mixed         $default
      * @return mixed
      */
     function array_last($array, callable $callback = null, $default = null)
@@ -205,8 +205,8 @@
     /**
      * Get a subset of the items from the given array.
      *
-     * @param  array  $array
-     * @param  array|string  $keys
+     * @param  array        $array
+     * @param  array|string $keys
      * @return array
      */
     function array_only($array, $keys)
@@ -219,9 +219,9 @@
     /**
      * Pluck an array of values from an array.
      *
-     * @param  array   $array
-     * @param  string|array  $value
-     * @param  string|array|null  $key
+     * @param  array             $array
+     * @param  string|array      $value
+     * @param  string|array|null $key
      * @return array
      */
     function array_pluck($array, $value, $key = null)
@@ -234,9 +234,9 @@
     /**
      * Push an item onto the beginning of an array.
      *
-     * @param  array  $array
-     * @param  mixed  $value
-     * @param  mixed  $key
+     * @param  array $array
+     * @param  mixed $value
+     * @param  mixed $key
      * @return array
      */
     function array_prepend($array, $value, $key = null)
@@ -249,9 +249,9 @@
     /**
      * Get a value from the array, and remove it.
      *
-     * @param  array   $array
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  array  $array
+     * @param  string $key
+     * @param  mixed  $default
      * @return mixed
      */
     function array_pull(&$array, $key, $default = null)
@@ -266,9 +266,9 @@
      *
      * If no key is given to the method, the entire array will be replaced.
      *
-     * @param  array   $array
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  array  $array
+     * @param  string $key
+     * @param  mixed  $value
      * @return array
      */
     function array_set(&$array, $key, $value)
@@ -281,8 +281,8 @@
     /**
      * Sort the array using the given callback.
      *
-     * @param  array  $array
-     * @param  callable  $callback
+     * @param  array    $array
+     * @param  callable $callback
      * @return array
      */
     function array_sort($array, callable $callback)
@@ -295,7 +295,7 @@
     /**
      * Recursively sort an array by keys and values.
      *
-     * @param  array  $array
+     * @param  array $array
      * @return array
      */
     function array_sort_recursive($array)
@@ -308,8 +308,8 @@
     /**
      * Filter the array using the given callback.
      *
-     * @param  array  $array
-     * @param  callable  $callback
+     * @param  array    $array
+     * @param  callable $callback
      * @return array
      */
     function array_where($array, callable $callback)
@@ -322,7 +322,7 @@
     /**
      * Convert a value to camel case.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     function camel_case($value)
@@ -335,7 +335,7 @@
     /**
      * Get the class "basename" of the given object / class.
      *
-     * @param  string|object  $class
+     * @param  string|object $class
      * @return string
      */
     function class_basename($class)
@@ -350,7 +350,7 @@
     /**
      * Returns all traits used by a class, its subclasses and trait of their traits.
      *
-     * @param  string  $class
+     * @param  string $class
      * @return array
      */
     function class_uses_recursive($class)
@@ -369,7 +369,7 @@
     /**
      * Create a collection from the given value.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return \Illuminate\Support\Collection
      */
     function collect($value = null)
@@ -382,9 +382,9 @@
     /**
      * Fill in data where it's missing.
      *
-     * @param  mixed   $target
-     * @param  string|array  $key
-     * @param  mixed  $value
+     * @param  mixed        $target
+     * @param  string|array $key
+     * @param  mixed        $value
      * @return mixed
      */
     function data_fill(&$target, $key, $value)
@@ -397,9 +397,9 @@
     /**
      * Get an item from an array or object using "dot" notation.
      *
-     * @param  mixed   $target
-     * @param  string|array  $key
-     * @param  mixed   $default
+     * @param  mixed        $target
+     * @param  string|array $key
+     * @param  mixed        $default
      * @return mixed
      */
     function data_get($target, $key, $default = null)
@@ -440,10 +440,10 @@
     /**
      * Set an item on an array or object using dot notation.
      *
-     * @param  mixed  $target
-     * @param  string|array  $key
-     * @param  mixed  $value
-     * @param  bool  $overwrite
+     * @param  mixed        $target
+     * @param  string|array $key
+     * @param  mixed        $value
+     * @param  bool         $overwrite
      * @return mixed
      */
     function data_set(&$target, $key, $value, $overwrite = true)
@@ -507,9 +507,11 @@
      */
     function dd()
     {
-        array_map(function ($x) {
-            (new Dumper)->dump($x);
-        }, func_get_args());
+        array_map(
+            function ($x) {
+                (new Dumper)->dump($x);
+            }, func_get_args()
+        );
 
         die(1);
     }
@@ -519,7 +521,7 @@
     /**
      * Escape HTML entities in a string.
      *
-     * @param  \Illuminate\Contracts\Support\Htmlable|string  $value
+     * @param  \Illuminate\Contracts\Support\Htmlable|string $value
      * @return string
      */
     function e($value)
@@ -536,8 +538,8 @@
     /**
      * Determine if a given string ends with a given substring.
      *
-     * @param  string  $haystack
-     * @param  string|array  $needles
+     * @param  string       $haystack
+     * @param  string|array $needles
      * @return bool
      */
     function ends_with($haystack, $needles)
@@ -550,7 +552,7 @@
     /**
      * Get the first element of an array. Useful for method chaining.
      *
-     * @param  array  $array
+     * @param  array $array
      * @return mixed
      */
     function head($array)
@@ -563,7 +565,7 @@
     /**
      * Get the last element from an array.
      *
-     * @param  array  $array
+     * @param  array $array
      * @return mixed
      */
     function last($array)
@@ -576,9 +578,9 @@
     /**
      * Get an item from an object using "dot" notation.
      *
-     * @param  object  $object
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  object $object
+     * @param  string $key
+     * @param  mixed  $default
      * @return mixed
      */
     function object_get($object, $key, $default = null)
@@ -603,18 +605,20 @@
     /**
      * Replace a given pattern with each value in the array in sequentially.
      *
-     * @param  string  $pattern
-     * @param  array   $replacements
-     * @param  string  $subject
+     * @param  string $pattern
+     * @param  array  $replacements
+     * @param  string $subject
      * @return string
      */
     function preg_replace_sub($pattern, &$replacements, $subject)
     {
-        return preg_replace_callback($pattern, function ($match) use (&$replacements) {
-            foreach ($replacements as $key => $value) {
-                return array_shift($replacements);
-            }
-        }, $subject);
+        return preg_replace_callback(
+            $pattern, function ($match) use (&$replacements) {
+                foreach ($replacements as $key => $value) {
+                    return array_shift($replacements);
+                }
+            }, $subject
+        );
     }
 }
 
@@ -622,8 +626,8 @@
     /**
      * Convert a string to snake case.
      *
-     * @param  string  $value
-     * @param  string  $delimiter
+     * @param  string $value
+     * @param  string $delimiter
      * @return string
      */
     function snake_case($value, $delimiter = '_')
@@ -636,8 +640,8 @@
     /**
      * Determine if a given string starts with a given substring.
      *
-     * @param  string  $haystack
-     * @param  string|array  $needles
+     * @param  string       $haystack
+     * @param  string|array $needles
      * @return bool
      */
     function starts_with($haystack, $needles)
@@ -650,8 +654,8 @@
     /**
      * Determine if a given string contains a given substring.
      *
-     * @param  string  $haystack
-     * @param  string|array  $needles
+     * @param  string       $haystack
+     * @param  string|array $needles
      * @return bool
      */
     function str_contains($haystack, $needles)
@@ -664,8 +668,8 @@
     /**
      * Cap a string with a single instance of a given value.
      *
-     * @param  string  $value
-     * @param  string  $cap
+     * @param  string $value
+     * @param  string $cap
      * @return string
      */
     function str_finish($value, $cap)
@@ -678,8 +682,8 @@
     /**
      * Determine if a given string matches a given pattern.
      *
-     * @param  string  $pattern
-     * @param  string  $value
+     * @param  string $pattern
+     * @param  string $value
      * @return bool
      */
     function str_is($pattern, $value)
@@ -692,9 +696,9 @@
     /**
      * Limit the number of characters in a string.
      *
-     * @param  string  $value
-     * @param  int     $limit
-     * @param  string  $end
+     * @param  string $value
+     * @param  int    $limit
+     * @param  string $end
      * @return string
      */
     function str_limit($value, $limit = 100, $end = '...')
@@ -707,8 +711,8 @@
     /**
      * Get the plural form of an English word.
      *
-     * @param  string  $value
-     * @param  int     $count
+     * @param  string $value
+     * @param  int    $count
      * @return string
      */
     function str_plural($value, $count = 2)
@@ -721,7 +725,7 @@
     /**
      * Generate a more truly "random" alpha-numeric string.
      *
-     * @param  int  $length
+     * @param  int $length
      * @return string
      *
      * @throws \RuntimeException
@@ -736,9 +740,9 @@
     /**
      * Replace a given value in the string sequentially with an array.
      *
-     * @param  string  $search
-     * @param  array   $replace
-     * @param  string  $subject
+     * @param  string $search
+     * @param  array  $replace
+     * @param  string $subject
      * @return string
      */
     function str_replace_array($search, array $replace, $subject)
@@ -755,9 +759,9 @@
     /**
      * Replace the first occurrence of a given value in the string.
      *
-     * @param  string  $search
-     * @param  string  $replace
-     * @param  string  $subject
+     * @param  string $search
+     * @param  string $replace
+     * @param  string $subject
      * @return string
      */
     function str_replace_first($search, $replace, $subject)
@@ -770,9 +774,9 @@
     /**
      * Replace the last occurrence of a given value in the string.
      *
-     * @param  string  $search
-     * @param  string  $replace
-     * @param  string  $subject
+     * @param  string $search
+     * @param  string $replace
+     * @param  string $subject
      * @return string
      */
     function str_replace_last($search, $replace, $subject)
@@ -785,7 +789,7 @@
     /**
      * Get the singular form of an English word.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     function str_singular($value)
@@ -798,8 +802,8 @@
     /**
      * Generate a URL friendly "slug" from a given string.
      *
-     * @param  string  $title
-     * @param  string  $separator
+     * @param  string $title
+     * @param  string $separator
      * @return string
      */
     function str_slug($title, $separator = '-')
@@ -812,7 +816,7 @@
     /**
      * Convert a value to studly caps case.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     function studly_case($value)
@@ -825,7 +829,7 @@
     /**
      * Convert a value to title case.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     function title_case($value)
@@ -838,7 +842,7 @@
     /**
      * Returns all traits used by a trait and its traits.
      *
-     * @param  string  $trait
+     * @param  string $trait
      * @return array
      */
     function trait_uses_recursive($trait)
@@ -857,7 +861,7 @@
     /**
      * Return the default value of the given value.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return mixed
      */
     function value($value)
@@ -882,7 +886,7 @@
     /**
      * Return the given object. Useful for chaining.
      *
-     * @param  mixed  $object
+     * @param  mixed $object
      * @return mixed
      */
     function with($object)

--- vendor/laravel/framework/src/Illuminate/Support/HtmlString.php
+++ PHP_CodeSniffer
@@ -16,7 +16,7 @@
     /**
      * Create a new HTML string instance.
      *
-     * @param  string  $html
+     * @param  string $html
      * @return void
      */
     public function __construct($html)

--- vendor/laravel/framework/src/Illuminate/Support/Manager.php
+++ PHP_CodeSniffer
@@ -31,7 +31,7 @@
     /**
      * Create a new manager instance.
      *
-     * @param  \Illuminate\Foundation\Application  $app
+     * @param  \Illuminate\Foundation\Application $app
      * @return void
      */
     public function __construct($app)
@@ -49,7 +49,7 @@
     /**
      * Get a driver instance.
      *
-     * @param  string  $driver
+     * @param  string $driver
      * @return mixed
      */
     public function driver($driver = null)
@@ -69,7 +69,7 @@
     /**
      * Create a new driver instance.
      *
-     * @param  string  $driver
+     * @param  string $driver
      * @return mixed
      *
      * @throws \InvalidArgumentException
@@ -93,7 +93,7 @@
     /**
      * Call a custom driver creator.
      *
-     * @param  string  $driver
+     * @param  string $driver
      * @return mixed
      */
     protected function callCustomCreator($driver)
@@ -104,8 +104,8 @@
     /**
      * Register a custom driver creator Closure.
      *
-     * @param  string    $driver
-     * @param  \Closure  $callback
+     * @param  string   $driver
+     * @param  \Closure $callback
      * @return $this
      */
     public function extend($driver, Closure $callback)
@@ -128,8 +128,8 @@
     /**
      * Dynamically call the default driver instance.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      */
     public function __call($method, $parameters)

--- vendor/laravel/framework/src/Illuminate/Support/MessageBag.php
+++ PHP_CodeSniffer
@@ -28,7 +28,7 @@
     /**
      * Create a new message bag instance.
      *
-     * @param  array  $messages
+     * @param  array $messages
      * @return void
      */
     public function __construct(array $messages = [])
@@ -51,8 +51,8 @@
     /**
      * Add a message to the bag.
      *
-     * @param  string  $key
-     * @param  string  $message
+     * @param  string $key
+     * @param  string $message
      * @return $this
      */
     public function add($key, $message)
@@ -67,7 +67,7 @@
     /**
      * Merge a new array of messages into the bag.
      *
-     * @param  \Illuminate\Contracts\Support\MessageProvider|array  $messages
+     * @param  \Illuminate\Contracts\Support\MessageProvider|array $messages
      * @return $this
      */
     public function merge($messages)
@@ -84,8 +84,8 @@
     /**
      * Determine if a key and message combination already exists.
      *
-     * @param  string  $key
-     * @param  string  $message
+     * @param  string $key
+     * @param  string $message
      * @return bool
      */
     protected function isUnique($key, $message)
@@ -98,7 +98,7 @@
     /**
      * Determine if messages exist for all of the given keys.
      *
-     * @param  array|string  $key
+     * @param  array|string $key
      * @return bool
      */
     public function has($key = null)
@@ -117,7 +117,7 @@
     /**
      * Determine if messages exist for any of the given keys.
      *
-     * @param  array  $keys
+     * @param  array $keys
      * @return bool
      */
     public function hasAny($keys = [])
@@ -134,8 +134,8 @@
     /**
      * Get the first message from the bag for a given key.
      *
-     * @param  string  $key
-     * @param  string  $format
+     * @param  string $key
+     * @param  string $format
      * @return string
      */
     public function first($key = null, $format = null)
@@ -148,8 +148,8 @@
     /**
      * Get all of the messages from the bag for a given key.
      *
-     * @param  string  $key
-     * @param  string  $format
+     * @param  string $key
+     * @param  string $format
      * @return array
      */
     public function get($key, $format = null)
@@ -167,7 +167,7 @@
     /**
      * Get all of the messages for every key in the bag.
      *
-     * @param  string  $format
+     * @param  string $format
      * @return array
      */
     public function all($format = null)
@@ -186,7 +186,7 @@
     /**
      * Get all of the unique messages for every key in the bag.
      *
-     * @param  string  $format
+     * @param  string $format
      * @return array
      */
     public function unique($format = null)
@@ -197,9 +197,9 @@
     /**
      * Format an array of messages.
      *
-     * @param  array   $messages
-     * @param  string  $format
-     * @param  string  $messageKey
+     * @param  array  $messages
+     * @param  string $format
+     * @param  string $messageKey
      * @return array
      */
     protected function transform($messages, $format, $messageKey)
@@ -221,7 +221,7 @@
     /**
      * Get the appropriate format based on the given format.
      *
-     * @param  string  $format
+     * @param  string $format
      * @return string
      */
     protected function checkFormat($format)
@@ -272,7 +272,7 @@
     /**
      * Set the default message format.
      *
-     * @param  string  $format
+     * @param  string $format
      * @return \Illuminate\Support\MessageBag
      */
     public function setFormat($format = ':message')
@@ -335,7 +335,7 @@
     /**
      * Convert the object to its JSON representation.
      *
-     * @param  int  $options
+     * @param  int $options
      * @return string
      */
     public function toJson($options = 0)

--- vendor/laravel/framework/src/Illuminate/Support/NamespacedItemResolver.php
+++ PHP_CodeSniffer
@@ -14,7 +14,7 @@
     /**
      * Parse a key into namespace, group, and item.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return array
      */
     public function parseKey($key)
@@ -46,7 +46,7 @@
     /**
      * Parse an array of basic segments.
      *
-     * @param  array  $segments
+     * @param  array $segments
      * @return array
      */
     protected function parseBasicSegments(array $segments)
@@ -73,7 +73,7 @@
     /**
      * Parse an array of namespaced segments.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return array
      */
     protected function parseNamespacedSegments($key)
@@ -93,8 +93,8 @@
     /**
      * Set the parsed value of a key.
      *
-     * @param  string  $key
-     * @param  array   $parsed
+     * @param  string $key
+     * @param  array  $parsed
      * @return void
      */
     public function setParsedKey($key, $parsed)

--- vendor/laravel/framework/src/Illuminate/Support/Pluralizer.php
+++ PHP_CodeSniffer
@@ -44,8 +44,8 @@
     /**
      * Get the plural form of an English word.
      *
-     * @param  string  $value
-     * @param  int     $count
+     * @param  string $value
+     * @param  int    $count
      * @return string
      */
     public static function plural($value, $count = 2)
@@ -62,7 +62,7 @@
     /**
      * Get the singular form of an English word.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     public static function singular($value)
@@ -75,7 +75,7 @@
     /**
      * Determine if the given value is uncountable.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return bool
      */
     protected static function uncountable($value)
@@ -86,8 +86,8 @@
     /**
      * Attempt to match the case on two strings.
      *
-     * @param  string  $value
-     * @param  string  $comparison
+     * @param  string $value
+     * @param  string $comparison
      * @return string
      */
     protected static function matchCase($value, $comparison)

--- vendor/laravel/framework/src/Illuminate/Support/ServiceProvider.php
+++ PHP_CodeSniffer
@@ -38,7 +38,7 @@
     /**
      * Create a new service provider instance.
      *
-     * @param  \Illuminate\Contracts\Foundation\Application  $app
+     * @param  \Illuminate\Contracts\Foundation\Application $app
      * @return void
      */
     public function __construct($app)
@@ -56,22 +56,22 @@
     /**
      * Merge the given configuration with the existing configuration.
      *
-     * @param  string  $path
-     * @param  string  $key
+     * @param  string $path
+     * @param  string $key
      * @return void
      */
     protected function mergeConfigFrom($path, $key)
     {
         $config = $this->app['config']->get($key, []);
 
-        $this->app['config']->set($key, array_merge(require $path, $config));
+        $this->app['config']->set($key, array_merge(include $path, $config));
     }
 
     /**
      * Register a view file namespace.
      *
-     * @param  string  $path
-     * @param  string  $namespace
+     * @param  string $path
+     * @param  string $namespace
      * @return void
      */
     protected function loadViewsFrom($path, $namespace)
@@ -86,8 +86,8 @@
     /**
      * Register a translation file namespace.
      *
-     * @param  string  $path
-     * @param  string  $namespace
+     * @param  string $path
+     * @param  string $namespace
      * @return void
      */
     protected function loadTranslationsFrom($path, $namespace)
@@ -99,7 +99,7 @@
      * Register paths to be published by the publish command.
      *
      * @param  array  $paths
-     * @param  string  $group
+     * @param  string $group
      * @return void
      */
     protected function publishes(array $paths, $group = null)
@@ -124,8 +124,8 @@
     /**
      * Get the paths to publish.
      *
-     * @param  string  $provider
-     * @param  string  $group
+     * @param  string $provider
+     * @param  string $group
      * @return array
      */
     public static function pathsToPublish($provider = null, $group = null)
@@ -162,7 +162,7 @@
     /**
      * Register the package's custom Artisan commands.
      *
-     * @param  array|mixed  $commands
+     * @param  array|mixed $commands
      * @return void
      */
     public function commands($commands)
@@ -174,9 +174,11 @@
         // give us the Artisan console instance which we will give commands to.
         $events = $this->app['events'];
 
-        $events->listen(ArtisanStarting::class, function ($event) use ($commands) {
-            $event->artisan->resolveCommands($commands);
-        });
+        $events->listen(
+            ArtisanStarting::class, function ($event) use ($commands) {
+                $event->artisan->resolveCommands($commands);
+            }
+        );
     }
 
     /**
@@ -222,7 +224,7 @@
     /**
      * Dynamically handle missing method calls.
      *
-     * @param  string  $method
+     * @param  string $method
      * @param  array  $parameters
      * @return mixed
      *

--- vendor/laravel/framework/src/Illuminate/Support/Str.php
+++ PHP_CodeSniffer
@@ -32,7 +32,7 @@
     /**
      * Transliterate a UTF-8 value to ASCII.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     public static function ascii($value)
@@ -47,7 +47,7 @@
     /**
      * Convert a value to camel case.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     public static function camel($value)
@@ -62,8 +62,8 @@
     /**
      * Determine if a given string contains a given substring.
      *
-     * @param  string  $haystack
-     * @param  string|array  $needles
+     * @param  string       $haystack
+     * @param  string|array $needles
      * @return bool
      */
     public static function contains($haystack, $needles)
@@ -80,8 +80,8 @@
     /**
      * Determine if a given string ends with a given substring.
      *
-     * @param  string  $haystack
-     * @param  string|array  $needles
+     * @param  string       $haystack
+     * @param  string|array $needles
      * @return bool
      */
     public static function endsWith($haystack, $needles)
@@ -98,8 +98,8 @@
     /**
      * Cap a string with a single instance of a given value.
      *
-     * @param  string  $value
-     * @param  string  $cap
+     * @param  string $value
+     * @param  string $cap
      * @return string
      */
     public static function finish($value, $cap)
@@ -112,8 +112,8 @@
     /**
      * Determine if a given string matches a given pattern.
      *
-     * @param  string  $pattern
-     * @param  string  $value
+     * @param  string $pattern
+     * @param  string $value
      * @return bool
      */
     public static function is($pattern, $value)
@@ -135,7 +135,7 @@
     /**
      * Return the length of the given string.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return int
      */
     public static function length($value)
@@ -146,9 +146,9 @@
     /**
      * Limit the number of characters in a string.
      *
-     * @param  string  $value
-     * @param  int     $limit
-     * @param  string  $end
+     * @param  string $value
+     * @param  int    $limit
+     * @param  string $end
      * @return string
      */
     public static function limit($value, $limit = 100, $end = '...')
@@ -163,7 +163,7 @@
     /**
      * Convert the given string to lower-case.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     public static function lower($value)
@@ -174,9 +174,9 @@
     /**
      * Limit the number of words in a string.
      *
-     * @param  string  $value
-     * @param  int     $words
-     * @param  string  $end
+     * @param  string $value
+     * @param  int    $words
+     * @param  string $end
      * @return string
      */
     public static function words($value, $words = 100, $end = '...')
@@ -193,8 +193,8 @@
     /**
      * Parse a Class@method style callback into class and method.
      *
-     * @param  string  $callback
-     * @param  string  $default
+     * @param  string $callback
+     * @param  string $default
      * @return array
      */
     public static function parseCallback($callback, $default)
@@ -205,8 +205,8 @@
     /**
      * Get the plural form of an English word.
      *
-     * @param  string  $value
-     * @param  int     $count
+     * @param  string $value
+     * @param  int    $count
      * @return string
      */
     public static function plural($value, $count = 2)
@@ -217,7 +217,7 @@
     /**
      * Generate a more truly "random" alpha-numeric string.
      *
-     * @param  int  $length
+     * @param  int $length
      * @return string
      */
     public static function random($length = 16)
@@ -238,7 +238,7 @@
     /**
      * Generate a more truly "random" bytes.
      *
-     * @param  int  $length
+     * @param  int $length
      * @return string
      *
      * @deprecated since version 5.2. Use random_bytes instead.
@@ -253,7 +253,7 @@
      *
      * Should not be considered sufficient for cryptography, etc.
      *
-     * @param  int  $length
+     * @param  int $length
      * @return string
      */
     public static function quickRandom($length = 16)
@@ -270,8 +270,8 @@
      *
      * Note: Adapted from Symfony\Component\Security\Core\Util\StringUtils.
      *
-     * @param  string  $knownString
-     * @param  string  $userInput
+     * @param  string $knownString
+     * @param  string $userInput
      * @return bool
      *
      * @deprecated since version 5.2. Use hash_equals instead.
@@ -284,9 +284,9 @@
     /**
      * Replace the first occurrence of a given value in the string.
      *
-     * @param  string  $search
-     * @param  string  $replace
-     * @param  string  $subject
+     * @param  string $search
+     * @param  string $replace
+     * @param  string $subject
      * @return string
      */
     public static function replaceFirst($search, $replace, $subject)
@@ -303,9 +303,9 @@
     /**
      * Replace the last occurrence of a given value in the string.
      *
-     * @param  string  $search
-     * @param  string  $replace
-     * @param  string  $subject
+     * @param  string $search
+     * @param  string $replace
+     * @param  string $subject
      * @return string
      */
     public static function replaceLast($search, $replace, $subject)
@@ -322,7 +322,7 @@
     /**
      * Convert the given string to upper-case.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     public static function upper($value)
@@ -333,7 +333,7 @@
     /**
      * Convert the given string to title case.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     public static function title($value)
@@ -344,7 +344,7 @@
     /**
      * Get the singular form of an English word.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     public static function singular($value)
@@ -355,8 +355,8 @@
     /**
      * Generate a URL friendly "slug" from a given string.
      *
-     * @param  string  $title
-     * @param  string  $separator
+     * @param  string $title
+     * @param  string $separator
      * @return string
      */
     public static function slug($title, $separator = '-')
@@ -380,8 +380,8 @@
     /**
      * Convert a string to snake case.
      *
-     * @param  string  $value
-     * @param  string  $delimiter
+     * @param  string $value
+     * @param  string $delimiter
      * @return string
      */
     public static function snake($value, $delimiter = '_')
@@ -404,8 +404,8 @@
     /**
      * Determine if a given string starts with a given substring.
      *
-     * @param  string  $haystack
-     * @param  string|array  $needles
+     * @param  string       $haystack
+     * @param  string|array $needles
      * @return bool
      */
     public static function startsWith($haystack, $needles)
@@ -422,7 +422,7 @@
     /**
      * Convert a value to studly caps case.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     public static function studly($value)
@@ -441,9 +441,9 @@
     /**
      * Returns the portion of string specified by the start and length parameters.
      *
-     * @param  string  $string
-     * @param  int  $start
-     * @param  int|null  $length
+     * @param  string   $string
+     * @param  int      $start
+     * @param  int|null $length
      * @return string
      */
     public static function substr($string, $start, $length = null)
@@ -454,7 +454,7 @@
     /**
      * Make a string's first character uppercase.
      *
-     * @param  string  $string
+     * @param  string $string
      * @return string
      */
     public static function ucfirst($string)

--- vendor/laravel/framework/src/Illuminate/Support/Traits/CapsuleManagerTrait.php
+++ PHP_CodeSniffer
@@ -24,7 +24,7 @@
     /**
      * Setup the IoC container instance.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
+     * @param  \Illuminate\Contracts\Container\Container $container
      * @return void
      */
     protected function setupContainer(Container $container)
@@ -59,7 +59,7 @@
     /**
      * Set the IoC container instance.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
+     * @param  \Illuminate\Contracts\Container\Container $container
      * @return void
      */
     public function setContainer(Container $container)

--- vendor/laravel/framework/src/Illuminate/Support/Traits/Macroable.php
+++ PHP_CodeSniffer
@@ -17,8 +17,8 @@
     /**
      * Register a custom macro.
      *
-     * @param  string    $name
-     * @param  callable  $macro
+     * @param  string   $name
+     * @param  callable $macro
      * @return void
      */
     public static function macro($name, callable $macro)
@@ -29,7 +29,7 @@
     /**
      * Checks if macro is registered.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return bool
      */
     public static function hasMacro($name)
@@ -40,8 +40,8 @@
     /**
      * Dynamically handle calls to the class.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      *
      * @throws \BadMethodCallException
@@ -62,8 +62,8 @@
     /**
      * Dynamically handle calls to the class.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      *
      * @throws \BadMethodCallException

--- vendor/laravel/framework/src/Illuminate/Support/ViewErrorBag.php
+++ PHP_CodeSniffer
@@ -17,7 +17,7 @@
     /**
      * Checks if a named MessageBag exists in the bags.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function hasBag($key = 'default')
@@ -28,7 +28,7 @@
     /**
      * Get a MessageBag instance from the bags.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return \Illuminate\Contracts\Support\MessageBag
      */
     public function getBag($key)
@@ -49,8 +49,8 @@
     /**
      * Add a new MessageBag instance to the bags.
      *
-     * @param  string  $key
-     * @param  \Illuminate\Contracts\Support\MessageBag  $bag
+     * @param  string                                   $key
+     * @param  \Illuminate\Contracts\Support\MessageBag $bag
      * @return $this
      */
     public function put($key, MessageBagContract $bag)
@@ -73,7 +73,7 @@
     /**
      * Dynamically call methods on the default bag.
      *
-     * @param  string  $method
+     * @param  string $method
      * @param  array  $parameters
      * @return mixed
      */
@@ -85,7 +85,7 @@
     /**
      * Dynamically access a view error bag.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return \Illuminate\Contracts\Support\MessageBag
      */
     public function __get($key)
@@ -96,8 +96,8 @@
     /**
      * Dynamically set a view error bag.
      *
-     * @param  string  $key
-     * @param  \Illuminate\Contracts\Support\MessageBag  $value
+     * @param  string                                   $key
+     * @param  \Illuminate\Contracts\Support\MessageBag $value
      * @return void
      */
     public function __set($key, $value)

--- vendor/laravel/framework/src/Illuminate/Translation/ArrayLoader.php
+++ PHP_CodeSniffer
@@ -14,9 +14,9 @@
     /**
      * Load the messages for the given locale.
      *
-     * @param  string  $locale
-     * @param  string  $group
-     * @param  string  $namespace
+     * @param  string $locale
+     * @param  string $group
+     * @param  string $namespace
      * @return array
      */
     public function load($locale, $group, $namespace = null)
@@ -33,8 +33,8 @@
     /**
      * Add a new namespace to the loader.
      *
-     * @param  string  $namespace
-     * @param  string  $hint
+     * @param  string $namespace
+     * @param  string $hint
      * @return void
      */
     public function addNamespace($namespace, $hint)
@@ -45,10 +45,10 @@
     /**
      * Add messages to the loader.
      *
-     * @param  string  $locale
-     * @param  string  $group
-     * @param  array  $messages
-     * @param  string|null  $namespace
+     * @param  string      $locale
+     * @param  string      $group
+     * @param  array       $messages
+     * @param  string|null $namespace
      * @return $this
      */
     public function addMessages($locale, $group, array $messages, $namespace = null)

--- vendor/laravel/framework/src/Illuminate/Translation/FileLoader.php
+++ PHP_CodeSniffer
@@ -30,8 +30,8 @@
     /**
      * Create a new file loader instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
-     * @param  string  $path
+     * @param  \Illuminate\Filesystem\Filesystem $files
+     * @param  string                            $path
      * @return void
      */
     public function __construct(Filesystem $files, $path)
@@ -43,9 +43,9 @@
     /**
      * Load the messages for the given locale.
      *
-     * @param  string  $locale
-     * @param  string  $group
-     * @param  string  $namespace
+     * @param  string $locale
+     * @param  string $group
+     * @param  string $namespace
      * @return array
      */
     public function load($locale, $group, $namespace = null)
@@ -60,9 +60,9 @@
     /**
      * Load a namespaced translation group.
      *
-     * @param  string  $locale
-     * @param  string  $group
-     * @param  string  $namespace
+     * @param  string $locale
+     * @param  string $group
+     * @param  string $namespace
      * @return array
      */
     protected function loadNamespaced($locale, $group, $namespace)
@@ -80,9 +80,9 @@
      * Load a local namespaced translation group for overrides.
      *
      * @param  array  $lines
-     * @param  string  $locale
-     * @param  string  $group
-     * @param  string  $namespace
+     * @param  string $locale
+     * @param  string $group
+     * @param  string $namespace
      * @return array
      */
     protected function loadNamespaceOverrides(array $lines, $locale, $group, $namespace)
@@ -99,9 +99,9 @@
     /**
      * Load a locale from a given path.
      *
-     * @param  string  $path
-     * @param  string  $locale
-     * @param  string  $group
+     * @param  string $path
+     * @param  string $locale
+     * @param  string $group
      * @return array
      */
     protected function loadPath($path, $locale, $group)
@@ -116,8 +116,8 @@
     /**
      * Add a new namespace to the loader.
      *
-     * @param  string  $namespace
-     * @param  string  $hint
+     * @param  string $namespace
+     * @param  string $hint
      * @return void
      */
     public function addNamespace($namespace, $hint)

--- vendor/laravel/framework/src/Illuminate/Translation/LoaderInterface.php
+++ PHP_CodeSniffer
@@ -7,9 +7,9 @@
     /**
      * Load the messages for the given locale.
      *
-     * @param  string  $locale
-     * @param  string  $group
-     * @param  string  $namespace
+     * @param  string $locale
+     * @param  string $group
+     * @param  string $namespace
      * @return array
      */
     public function load($locale, $group, $namespace = null);
@@ -17,8 +17,8 @@
     /**
      * Add a new namespace to the loader.
      *
-     * @param  string  $namespace
-     * @param  string  $hint
+     * @param  string $namespace
+     * @param  string $hint
      * @return void
      */
     public function addNamespace($namespace, $hint);

--- vendor/laravel/framework/src/Illuminate/Translation/TranslationServiceProvider.php
+++ PHP_CodeSniffer
@@ -22,20 +22,22 @@
     {
         $this->registerLoader();
 
-        $this->app->singleton('translator', function ($app) {
-            $loader = $app['translation.loader'];
-
-            // When registering the translator component, we'll need to set the default
-            // locale as well as the fallback locale. So, we'll grab the application
-            // configuration so we can easily get both of these values from there.
-            $locale = $app['config']['app.locale'];
-
-            $trans = new Translator($loader, $locale);
-
-            $trans->setFallback($app['config']['app.fallback_locale']);
-
-            return $trans;
-        });
+        $this->app->singleton(
+            'translator', function ($app) {
+                $loader = $app['translation.loader'];
+
+                // When registering the translator component, we'll need to set the default
+                // locale as well as the fallback locale. So, we'll grab the application
+                // configuration so we can easily get both of these values from there.
+                $locale = $app['config']['app.locale'];
+
+                $trans = new Translator($loader, $locale);
+
+                $trans->setFallback($app['config']['app.fallback_locale']);
+
+                return $trans;
+            }
+        );
     }
 
     /**
@@ -45,9 +47,11 @@
      */
     protected function registerLoader()
     {
-        $this->app->singleton('translation.loader', function ($app) {
-            return new FileLoader($app['files'], $app['path.lang']);
-        });
+        $this->app->singleton(
+            'translation.loader', function ($app) {
+                return new FileLoader($app['files'], $app['path.lang']);
+            }
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Translation/Translator.php
+++ PHP_CodeSniffer
@@ -49,8 +49,8 @@
     /**
      * Create a new translator instance.
      *
-     * @param  \Illuminate\Translation\LoaderInterface  $loader
-     * @param  string  $locale
+     * @param  \Illuminate\Translation\LoaderInterface $loader
+     * @param  string                                  $locale
      * @return void
      */
     public function __construct(LoaderInterface $loader, $locale)
@@ -62,8 +62,8 @@
     /**
      * Determine if a translation exists for a given locale.
      *
-     * @param  string  $key
-     * @param  string|null  $locale
+     * @param  string      $key
+     * @param  string|null $locale
      * @return bool
      */
     public function hasForLocale($key, $locale = null)
@@ -74,9 +74,9 @@
     /**
      * Determine if a translation exists.
      *
-     * @param  string  $key
-     * @param  string|null  $locale
-     * @param  bool  $fallback
+     * @param  string      $key
+     * @param  string|null $locale
+     * @param  bool        $fallback
      * @return bool
      */
     public function has($key, $locale = null, $fallback = true)
@@ -87,10 +87,10 @@
     /**
      * Get the translation for the given key.
      *
-     * @param  string  $key
-     * @param  array   $replace
-     * @param  string|null  $locale
-     * @param  bool  $fallback
+     * @param  string      $key
+     * @param  array       $replace
+     * @param  string|null $locale
+     * @param  bool        $fallback
      * @return string|array|null
      */
     public function get($key, array $replace = [], $locale = null, $fallback = true)
@@ -127,11 +127,11 @@
     /**
      * Retrieve a language line out the loaded array.
      *
-     * @param  string  $namespace
-     * @param  string  $group
-     * @param  string  $locale
-     * @param  string  $item
-     * @param  array   $replace
+     * @param  string $namespace
+     * @param  string $group
+     * @param  string $locale
+     * @param  string $item
+     * @param  array  $replace
      * @return string|array|null
      */
     protected function getLine($namespace, $group, $locale, $item, array $replace)
@@ -148,8 +148,8 @@
     /**
      * Make the place-holder replacements on a line.
      *
-     * @param  string  $line
-     * @param  array   $replace
+     * @param  string $line
+     * @param  array  $replace
      * @return string
      */
     protected function makeReplacements($line, array $replace)
@@ -170,23 +170,25 @@
     /**
      * Sort the replacements array.
      *
-     * @param  array  $replace
+     * @param  array $replace
      * @return array
      */
     protected function sortReplacements(array $replace)
     {
-        return (new Collection($replace))->sortBy(function ($value, $key) {
-            return mb_strlen($key) * -1;
-        });
+        return (new Collection($replace))->sortBy(
+            function ($value, $key) {
+                return mb_strlen($key) * -1;
+            }
+        );
     }
 
     /**
      * Get a translation according to an integer value.
      *
-     * @param  string  $key
-     * @param  int|array|\Countable  $number
-     * @param  array   $replace
-     * @param  string  $locale
+     * @param  string               $key
+     * @param  int|array|\Countable $number
+     * @param  array                $replace
+     * @param  string               $locale
      * @return string
      */
     public function choice($key, $number, array $replace = [], $locale = null)
@@ -205,10 +207,10 @@
     /**
      * Get the translation for a given key.
      *
-     * @param  string  $id
-     * @param  array   $parameters
-     * @param  string  $domain
-     * @param  string  $locale
+     * @param  string $id
+     * @param  array  $parameters
+     * @param  string $domain
+     * @param  string $locale
      * @return string|array|null
      */
     public function trans($id, array $parameters = [], $domain = 'messages', $locale = null)
@@ -219,11 +221,11 @@
     /**
      * Get a translation according to an integer value.
      *
-     * @param  string  $id
-     * @param  int|array|\Countable  $number
-     * @param  array   $parameters
-     * @param  string  $domain
-     * @param  string  $locale
+     * @param  string               $id
+     * @param  int|array|\Countable $number
+     * @param  array                $parameters
+     * @param  string               $domain
+     * @param  string               $locale
      * @return string
      */
     public function transChoice($id, $number, array $parameters = [], $domain = 'messages', $locale = null)
@@ -234,9 +236,9 @@
     /**
      * Load the specified language group.
      *
-     * @param  string  $namespace
-     * @param  string  $group
-     * @param  string  $locale
+     * @param  string $namespace
+     * @param  string $group
+     * @param  string $locale
      * @return void
      */
     public function load($namespace, $group, $locale)
@@ -256,9 +258,9 @@
     /**
      * Determine if the given group has been loaded.
      *
-     * @param  string  $namespace
-     * @param  string  $group
-     * @param  string  $locale
+     * @param  string $namespace
+     * @param  string $group
+     * @param  string $locale
      * @return bool
      */
     protected function isLoaded($namespace, $group, $locale)
@@ -269,8 +271,8 @@
     /**
      * Add a new namespace to the loader.
      *
-     * @param  string  $namespace
-     * @param  string  $hint
+     * @param  string $namespace
+     * @param  string $hint
      * @return void
      */
     public function addNamespace($namespace, $hint)
@@ -281,7 +283,7 @@
     /**
      * Parse a key into namespace, group, and item.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return array
      */
     public function parseKey($key)
@@ -298,7 +300,7 @@
     /**
      * Get the array of locales to be checked.
      *
-     * @param  string|null  $locale
+     * @param  string|null $locale
      * @return array
      */
     protected function parseLocale($locale)
@@ -323,7 +325,7 @@
     /**
      * Set the message selector instance.
      *
-     * @param  \Symfony\Component\Translation\MessageSelector  $selector
+     * @param  \Symfony\Component\Translation\MessageSelector $selector
      * @return void
      */
     public function setSelector(MessageSelector $selector)
@@ -364,7 +366,7 @@
     /**
      * Set the default locale.
      *
-     * @param  string  $locale
+     * @param  string $locale
      * @return void
      */
     public function setLocale($locale)
@@ -385,7 +387,7 @@
     /**
      * Set the fallback locale being used.
      *
-     * @param  string  $fallback
+     * @param  string $fallback
      * @return void
      */
     public function setFallback($fallback)

--- vendor/laravel/framework/src/Illuminate/Validation/DatabasePresenceVerifier.php
+++ PHP_CodeSniffer
@@ -24,7 +24,7 @@
     /**
      * Create a new database presence verifier.
      *
-     * @param  \Illuminate\Database\ConnectionResolverInterface  $db
+     * @param  \Illuminate\Database\ConnectionResolverInterface $db
      * @return void
      */
     public function __construct(ConnectionResolverInterface $db)
@@ -35,12 +35,12 @@
     /**
      * Count the number of objects in a collection having the given value.
      *
-     * @param  string  $collection
-     * @param  string  $column
-     * @param  string  $value
-     * @param  int     $excludeId
-     * @param  string  $idColumn
-     * @param  array   $extra
+     * @param  string $collection
+     * @param  string $column
+     * @param  string $value
+     * @param  int    $excludeId
+     * @param  string $idColumn
+     * @param  array  $extra
      * @return int
      */
     public function getCount($collection, $column, $value, $excludeId = null, $idColumn = null, array $extra = [])
@@ -61,10 +61,10 @@
     /**
      * Count the number of objects in a collection with the given values.
      *
-     * @param  string  $collection
-     * @param  string  $column
-     * @param  array   $values
-     * @param  array   $extra
+     * @param  string $collection
+     * @param  string $column
+     * @param  array  $values
+     * @param  array  $extra
      * @return int
      */
     public function getMultiCount($collection, $column, array $values, array $extra = [])
@@ -81,9 +81,9 @@
     /**
      * Add a "where" clause to the given query.
      *
-     * @param  \Illuminate\Database\Query\Builder  $query
-     * @param  string  $key
-     * @param  string  $extraValue
+     * @param  \Illuminate\Database\Query\Builder $query
+     * @param  string                             $key
+     * @param  string                             $extraValue
      * @return void
      */
     protected function addWhere($query, $key, $extraValue)
@@ -102,7 +102,7 @@
     /**
      * Get a query builder for the given table.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return \Illuminate\Database\Query\Builder
      */
     protected function table($table)
@@ -113,7 +113,7 @@
     /**
      * Set the connection to be used.
      *
-     * @param  string  $connection
+     * @param  string $connection
      * @return void
      */
     public function setConnection($connection)

--- vendor/laravel/framework/src/Illuminate/Validation/Factory.php
+++ PHP_CodeSniffer
@@ -69,8 +69,8 @@
     /**
      * Create a new Validator factory instance.
      *
-     * @param  \Symfony\Component\Translation\TranslatorInterface  $translator
-     * @param  \Illuminate\Contracts\Container\Container  $container
+     * @param  \Symfony\Component\Translation\TranslatorInterface $translator
+     * @param  \Illuminate\Contracts\Container\Container          $container
      * @return void
      */
     public function __construct(TranslatorInterface $translator, Container $container = null)
@@ -82,10 +82,10 @@
     /**
      * Create a new Validator instance.
      *
-     * @param  array  $data
-     * @param  array  $rules
-     * @param  array  $messages
-     * @param  array  $customAttributes
+     * @param  array $data
+     * @param  array $rules
+     * @param  array $messages
+     * @param  array $customAttributes
      * @return \Illuminate\Validation\Validator
      */
     public function make(array $data, array $rules, array $messages = [], array $customAttributes = [])
@@ -114,7 +114,7 @@
     /**
      * Add the extensions to a validator instance.
      *
-     * @param  \Illuminate\Validation\Validator  $validator
+     * @param  \Illuminate\Validation\Validator $validator
      * @return void
      */
     protected function addExtensions(Validator $validator)
@@ -136,10 +136,10 @@
     /**
      * Resolve a new Validator instance.
      *
-     * @param  array  $data
-     * @param  array  $rules
-     * @param  array  $messages
-     * @param  array  $customAttributes
+     * @param  array $data
+     * @param  array $rules
+     * @param  array $messages
+     * @param  array $customAttributes
      * @return \Illuminate\Validation\Validator
      */
     protected function resolve(array $data, array $rules, array $messages, array $customAttributes)
@@ -154,9 +154,9 @@
     /**
      * Register a custom validator extension.
      *
-     * @param  string  $rule
-     * @param  \Closure|string  $extension
-     * @param  string  $message
+     * @param  string          $rule
+     * @param  \Closure|string $extension
+     * @param  string          $message
      * @return void
      */
     public function extend($rule, $extension, $message = null)
@@ -171,9 +171,9 @@
     /**
      * Register a custom implicit validator extension.
      *
-     * @param  string   $rule
-     * @param  \Closure|string  $extension
-     * @param  string  $message
+     * @param  string          $rule
+     * @param  \Closure|string $extension
+     * @param  string          $message
      * @return void
      */
     public function extendImplicit($rule, $extension, $message = null)
@@ -188,8 +188,8 @@
     /**
      * Register a custom implicit validator message replacer.
      *
-     * @param  string   $rule
-     * @param  \Closure|string  $replacer
+     * @param  string          $rule
+     * @param  \Closure|string $replacer
      * @return void
      */
     public function replacer($rule, $replacer)
@@ -200,7 +200,7 @@
     /**
      * Set the Validator instance resolver.
      *
-     * @param  \Closure  $resolver
+     * @param  \Closure $resolver
      * @return void
      */
     public function resolver(Closure $resolver)
@@ -231,7 +231,7 @@
     /**
      * Set the Presence Verifier implementation.
      *
-     * @param  \Illuminate\Validation\PresenceVerifierInterface  $presenceVerifier
+     * @param  \Illuminate\Validation\PresenceVerifierInterface $presenceVerifier
      * @return void
      */
     public function setPresenceVerifier(PresenceVerifierInterface $presenceVerifier)

--- vendor/laravel/framework/src/Illuminate/Validation/PresenceVerifierInterface.php
+++ PHP_CodeSniffer
@@ -7,12 +7,12 @@
     /**
      * Count the number of objects in a collection having the given value.
      *
-     * @param  string  $collection
-     * @param  string  $column
-     * @param  string  $value
-     * @param  int     $excludeId
-     * @param  string  $idColumn
-     * @param  array   $extra
+     * @param  string $collection
+     * @param  string $column
+     * @param  string $value
+     * @param  int    $excludeId
+     * @param  string $idColumn
+     * @param  array  $extra
      * @return int
      */
     public function getCount($collection, $column, $value, $excludeId = null, $idColumn = null, array $extra = []);
@@ -20,10 +20,10 @@
     /**
      * Count the number of objects in a collection with the given values.
      *
-     * @param  string  $collection
-     * @param  string  $column
-     * @param  array   $values
-     * @param  array   $extra
+     * @param  string $collection
+     * @param  string $column
+     * @param  array  $values
+     * @param  array  $extra
      * @return int
      */
     public function getMultiCount($collection, $column, array $values, array $extra = []);

--- vendor/laravel/framework/src/Illuminate/Validation/ValidatesWhenResolvedTrait.php
+++ PHP_CodeSniffer
@@ -39,7 +39,7 @@
     /**
      * Handle a failed validation attempt.
      *
-     * @param  \Illuminate\Validation\Validator  $validator
+     * @param  \Illuminate\Validation\Validator $validator
      * @return void
      *
      * @throws \Illuminate\Contracts\Validation\ValidationException

--- vendor/laravel/framework/src/Illuminate/Validation/ValidationException.php
+++ PHP_CodeSniffer
@@ -23,8 +23,8 @@
     /**
      * Create a new exception instance.
      *
-     * @param  \Illuminate\Validation\Validator  $validator
-     * @param  \Illuminate\Http\Response  $response
+     * @param  \Illuminate\Validation\Validator $validator
+     * @param  \Illuminate\Http\Response        $response
      * @return void
      */
     public function __construct($validator, $response = null)

--- vendor/laravel/framework/src/Illuminate/Validation/ValidationServiceProvider.php
+++ PHP_CodeSniffer
@@ -32,18 +32,20 @@
      */
     protected function registerValidationFactory()
     {
-        $this->app->singleton('validator', function ($app) {
-            $validator = new Factory($app['translator'], $app);
+        $this->app->singleton(
+            'validator', function ($app) {
+                $validator = new Factory($app['translator'], $app);
 
-            // The validation presence verifier is responsible for determining the existence
-            // of values in a given data collection, typically a relational database or
-            // other persistent data stores. And it is used to check for uniqueness.
-            if (isset($app['validation.presence'])) {
-                $validator->setPresenceVerifier($app['validation.presence']);
-            }
+                // The validation presence verifier is responsible for determining the existence
+                // of values in a given data collection, typically a relational database or
+                // other persistent data stores. And it is used to check for uniqueness.
+                if (isset($app['validation.presence'])) {
+                    $validator->setPresenceVerifier($app['validation.presence']);
+                }
 
-            return $validator;
-        });
+                return $validator;
+            }
+        );
     }
 
     /**
@@ -53,9 +55,11 @@
      */
     protected function registerPresenceVerifier()
     {
-        $this->app->singleton('validation.presence', function ($app) {
-            return new DatabasePresenceVerifier($app['db']);
-        });
+        $this->app->singleton(
+            'validation.presence', function ($app) {
+                return new DatabasePresenceVerifier($app['db']);
+            }
+        );
     }
 
     /**

--- vendor/laravel/framework/src/Illuminate/Validation/Validator.php
+++ PHP_CodeSniffer
@@ -181,11 +181,11 @@
     /**
      * Create a new Validator instance.
      *
-     * @param  \Symfony\Component\Translation\TranslatorInterface  $translator
-     * @param  array  $data
-     * @param  array  $rules
-     * @param  array  $messages
-     * @param  array  $customAttributes
+     * @param  \Symfony\Component\Translation\TranslatorInterface $translator
+     * @param  array                                              $data
+     * @param  array                                              $rules
+     * @param  array                                              $messages
+     * @param  array                                              $customAttributes
      * @return void
      */
     public function __construct(TranslatorInterface $translator, array $data, array $rules, array $messages = [], array $customAttributes = [])
@@ -202,8 +202,8 @@
     /**
      * Parse the data and hydrate the files array.
      *
-     * @param  array   $data
-     * @param  string  $arrayKey
+     * @param  array  $data
+     * @param  string $arrayKey
      * @return array
      */
     protected function parseData(array $data, $arrayKey = null)
@@ -233,7 +233,7 @@
     /**
      * Explode the rules into an array of rules.
      *
-     * @param  string|array  $rules
+     * @param  string|array $rules
      * @return array
      */
     protected function explodeRules($rules)
@@ -254,7 +254,7 @@
     /**
      * After an after validation callback.
      *
-     * @param  callable|string  $callback
+     * @param  callable|string $callback
      * @return $this
      */
     public function after($callback)
@@ -269,9 +269,9 @@
     /**
      * Add conditions to a given field based on a Closure.
      *
-     * @param  string  $attribute
-     * @param  string|array  $rules
-     * @param  callable  $callback
+     * @param  string       $attribute
+     * @param  string|array $rules
+     * @param  callable     $callback
      * @return void
      */
     public function sometimes($attribute, $rules, callable $callback)
@@ -292,8 +292,8 @@
     /**
      * Define a set of rules that apply to each element in an array attribute.
      *
-     * @param  string  $attribute
-     * @param  string|array  $rules
+     * @param  string       $attribute
+     * @param  string|array $rules
      * @return void
      *
      * @throws \InvalidArgumentException
@@ -304,9 +304,11 @@
 
         $pattern = str_replace('\*', '[^\.]+', preg_quote($attribute));
 
-        $data = array_merge($data, $this->extractValuesForWildcards(
-            $data, $attribute
-        ));
+        $data = array_merge(
+            $data, $this->extractValuesForWildcards(
+                $data, $attribute
+            )
+        );
 
         foreach ($data as $key => $value) {
             if (Str::startsWith($key, $attribute) || (bool) preg_match('/^'.$pattern.'\z/', $key)) {
@@ -324,7 +326,7 @@
     /**
      * Gather a copy of the attribute data filled with any missing attributes.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @return array
      */
     protected function initializeAttributeOnData($attribute)
@@ -344,7 +346,7 @@
      * Get all of the exact attribute values for a given wildcard attribute.
      *
      * @param  array  $data
-     * @param  string  $attribute
+     * @param  string $attribute
      * @return array
      */
     public function extractValuesForWildcards($data, $attribute)
@@ -373,8 +375,8 @@
     /**
      * Merge additional rules into a given attribute(s).
      *
-     * @param  string  $attribute
-     * @param  string|array  $rules
+     * @param  string       $attribute
+     * @param  string|array $rules
      * @return $this
      */
     public function mergeRules($attribute, $rules = [])
@@ -393,8 +395,8 @@
     /**
      * Merge additional rules into a given attribute.
      *
-     * @param  string  $attribute
-     * @param  string|array  $rules
+     * @param  string       $attribute
+     * @param  string|array $rules
      * @return $this
      */
     protected function mergeRulesForAttribute($attribute, $rules)
@@ -453,8 +455,8 @@
     /**
      * Validate a given attribute against a rule.
      *
-     * @param  string  $attribute
-     * @param  string  $rule
+     * @param  string $attribute
+     * @param  string $rule
      * @return void
      */
     protected function validate($attribute, $rule)
@@ -468,8 +470,9 @@
         // First we will get the correct keys for the given attribute in case the field is nested in
         // an array. Then we determine if the given rule accepts other field names as parameters.
         // If so, we will replace any asterisks found in the parameters with the correct keys.
-        if (($keys = $this->getExplicitKeys($attribute)) &&
-            $this->dependsOnOtherFields($rule)) {
+        if (($keys = $this->getExplicitKeys($attribute)) 
+            && $this->dependsOnOtherFields($rule)
+        ) {
             $parameters = $this->replaceAsterisksInParameters($parameters, $keys);
         }
 
@@ -518,7 +521,7 @@
     /**
      * Get the value of a given attribute.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @return mixed
      */
     protected function getValue($attribute)
@@ -533,9 +536,9 @@
     /**
      * Determine if the attribute is validatable.
      *
-     * @param  string  $rule
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $rule
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function isValidatable($rule, $attribute, $value)
@@ -548,9 +551,9 @@
     /**
      * Determine if the field is present, or the rule implies required.
      *
-     * @param  string  $rule
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $rule
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function presentOrRuleIsImplicit($rule, $attribute, $value)
@@ -561,7 +564,7 @@
     /**
      * Determine if the attribute passes any optional check.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @return bool
      */
     protected function passesOptionalCheck($attribute)
@@ -578,7 +581,7 @@
     /**
      * Determine if a given rule implies the attribute is required.
      *
-     * @param  string  $rule
+     * @param  string $rule
      * @return bool
      */
     protected function isImplicit($rule)
@@ -591,8 +594,8 @@
      *
      * This is to avoid possible database type comparison errors.
      *
-     * @param  string  $rule
-     * @param  string  $attribute
+     * @param  string $rule
+     * @param  string $attribute
      * @return bool
      */
     protected function hasNotFailedPreviousRuleIfPresenceRule($rule, $attribute)
@@ -604,9 +607,9 @@
     /**
      * Add a failed rule and error message to the collection.
      *
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return void
      */
     protected function addFailure($attribute, $rule, $parameters)
@@ -619,9 +622,9 @@
     /**
      * Add an error message to the validator's collection of messages.
      *
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return void
      */
     protected function addError($attribute, $rule, $parameters)
@@ -660,7 +663,7 @@
     /**
      * Stop on error if "bail" rule is assigned and attribute has a message.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @return bool
      */
     protected function shouldStopValidating($attribute)
@@ -675,8 +678,8 @@
     /**
      * Validate that a required attribute exists.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateRequired($attribute, $value)
@@ -697,8 +700,8 @@
     /**
      * Validate that an attribute exists even if not filled.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validatePresent($attribute, $value)
@@ -709,8 +712,8 @@
     /**
      * Validate the given attribute is filled if it is present.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateFilled($attribute, $value)
@@ -725,7 +728,7 @@
     /**
      * Determine if any of the given attributes fail the required test.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return bool
      */
     protected function anyFailingRequired(array $attributes)
@@ -742,7 +745,7 @@
     /**
      * Determine if all of the given attributes fail the required test.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return bool
      */
     protected function allFailingRequired(array $attributes)
@@ -759,9 +762,9 @@
     /**
      * Validate that an attribute exists when any other attribute exists.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  mixed   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  mixed  $parameters
      * @return bool
      */
     protected function validateRequiredWith($attribute, $value, $parameters)
@@ -776,9 +779,9 @@
     /**
      * Validate that an attribute exists when all other attributes exists.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  mixed   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  mixed  $parameters
      * @return bool
      */
     protected function validateRequiredWithAll($attribute, $value, $parameters)
@@ -793,9 +796,9 @@
     /**
      * Validate that an attribute exists when another attribute does not.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  mixed   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  mixed  $parameters
      * @return bool
      */
     protected function validateRequiredWithout($attribute, $value, $parameters)
@@ -810,9 +813,9 @@
     /**
      * Validate that an attribute exists when all other attributes do not.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  mixed   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  mixed  $parameters
      * @return bool
      */
     protected function validateRequiredWithoutAll($attribute, $value, $parameters)
@@ -827,9 +830,9 @@
     /**
      * Validate that an attribute exists when another attribute has a given value.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  mixed   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  mixed  $parameters
      * @return bool
      */
     protected function validateRequiredIf($attribute, $value, $parameters)
@@ -841,13 +844,15 @@
         $values = array_slice($parameters, 1);
 
         if (is_bool($data)) {
-            array_walk($values, function (&$value) {
-                if ($value === 'true') {
-                    $value = true;
-                } elseif ($value === 'false') {
-                    $value = false;
+            array_walk(
+                $values, function (&$value) {
+                    if ($value === 'true') {
+                        $value = true;
+                    } elseif ($value === 'false') {
+                        $value = false;
+                    }
                 }
-            });
+            );
         }
 
         if (in_array($data, $values)) {
@@ -860,7 +865,7 @@
     /**
      * Validate that an attribute exists when another attribute does not have a given value.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @param  mixed  $value
      * @param  mixed  $parameters
      * @return bool
@@ -883,7 +888,7 @@
     /**
      * Get the number of attributes in a list that are present.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return int
      */
     protected function getPresentCount($attributes)
@@ -902,9 +907,9 @@
     /**
      * Validate that the values of an attribute is in another attribute.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateInArray($attribute, $value, $parameters)
@@ -915,9 +920,11 @@
 
         $attributeData = $this->extractDataFromPath($explicitPath);
 
-        $otherValues = Arr::where(Arr::dot($attributeData), function ($key) use ($parameters) {
-            return Str::is($parameters[0], $key);
-        });
+        $otherValues = Arr::where(
+            Arr::dot($attributeData), function ($key) use ($parameters) {
+                return Str::is($parameters[0], $key);
+            }
+        );
 
         return in_array($value, $otherValues);
     }
@@ -925,8 +932,8 @@
     /**
      * Validate that an attribute has a matching confirmation.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateConfirmed($attribute, $value)
@@ -937,9 +944,9 @@
     /**
      * Validate that two attributes match.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateSame($attribute, $value, $parameters)
@@ -954,9 +961,9 @@
     /**
      * Validate that an attribute is different from another attribute.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateDifferent($attribute, $value, $parameters)
@@ -973,8 +980,8 @@
      *
      * This validation rule implies the attribute is "required".
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateAccepted($attribute, $value)
@@ -987,8 +994,8 @@
     /**
      * Validate that an attribute is an array.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateArray($attribute, $value)
@@ -1003,8 +1010,8 @@
     /**
      * Validate that an attribute is a boolean.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateBoolean($attribute, $value)
@@ -1021,8 +1028,8 @@
     /**
      * Validate that an attribute is an integer.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateInteger($attribute, $value)
@@ -1037,8 +1044,8 @@
     /**
      * Validate that an attribute is numeric.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateNumeric($attribute, $value)
@@ -1053,8 +1060,8 @@
     /**
      * Validate that an attribute is a string.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateString($attribute, $value)
@@ -1069,8 +1076,8 @@
     /**
      * Validate the attribute is a valid JSON string.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateJson($attribute, $value)
@@ -1087,9 +1094,9 @@
     /**
      * Validate that an attribute has a given number of digits.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateDigits($attribute, $value, $parameters)
@@ -1103,9 +1110,9 @@
     /**
      * Validate that an attribute is between a given number of digits.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateDigitsBetween($attribute, $value, $parameters)
@@ -1121,9 +1128,9 @@
     /**
      * Validate the size of an attribute.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateSize($attribute, $value, $parameters)
@@ -1136,9 +1143,9 @@
     /**
      * Validate the size of an attribute is between a set of values.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateBetween($attribute, $value, $parameters)
@@ -1153,9 +1160,9 @@
     /**
      * Validate the size of an attribute is greater than a minimum value.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateMin($attribute, $value, $parameters)
@@ -1168,9 +1175,9 @@
     /**
      * Validate the size of an attribute is less than a maximum value.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateMax($attribute, $value, $parameters)
@@ -1187,8 +1194,8 @@
     /**
      * Get the size of an attribute.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return mixed
      */
     protected function getSize($attribute, $value)
@@ -1213,9 +1220,9 @@
     /**
      * Validate an attribute is contained within a list of values.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateIn($attribute, $value, $parameters)
@@ -1230,9 +1237,9 @@
     /**
      * Validate an attribute is not contained within a list of values.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateNotIn($attribute, $value, $parameters)
@@ -1243,9 +1250,9 @@
     /**
      * Validate an attribute is unique among other values.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateDistinct($attribute, $value, $parameters)
@@ -1256,9 +1263,11 @@
 
         $attributeData = $this->extractDataFromPath($explicitPath);
 
-        $data = Arr::where(Arr::dot($attributeData), function ($key) use ($attribute, $attributeName) {
-            return $key != $attribute && Str::is($attributeName, $key);
-        });
+        $data = Arr::where(
+            Arr::dot($attributeData), function ($key) use ($attribute, $attributeName) {
+                return $key != $attribute && Str::is($attributeName, $key);
+            }
+        );
 
         return ! in_array($value, array_values($data));
     }
@@ -1268,9 +1277,9 @@
      *
      * If a database column is not specified, the attribute will be used.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateUnique($attribute, $value, $parameters)
@@ -1313,14 +1322,13 @@
 
         return $verifier->getCount(
             $table, $column, $value, $id, $idColumn, $extra
-
         ) == 0;
     }
 
     /**
      * Parse the connection / table for the unique / exists rules.
      *
-     * @param  string  $table
+     * @param  string $table
      * @return array
      */
     protected function parseTable($table)
@@ -1331,7 +1339,7 @@
     /**
      * Get the excluded ID column and value for the unique rule.
      *
-     * @param  array  $parameters
+     * @param  array $parameters
      * @return array
      */
     protected function getUniqueIds($parameters)
@@ -1344,7 +1352,7 @@
     /**
      * Get the extra conditions for a unique rule.
      *
-     * @param  array  $parameters
+     * @param  array $parameters
      * @return array
      */
     protected function getUniqueExtra($parameters)
@@ -1359,9 +1367,9 @@
     /**
      * Validate the existence of an attribute value in a database table.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateExists($attribute, $value, $parameters)
@@ -1386,11 +1394,11 @@
     /**
      * Get the number of records that exist in storage.
      *
-     * @param  mixed   $connection
-     * @param  string  $table
-     * @param  string  $column
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  mixed  $connection
+     * @param  string $table
+     * @param  string $column
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return int
      */
     protected function getExistCount($connection, $table, $column, $value, $parameters)
@@ -1411,7 +1419,7 @@
     /**
      * Get the extra exist conditions.
      *
-     * @param  array  $parameters
+     * @param  array $parameters
      * @return array
      */
     protected function getExtraExistConditions(array $parameters)
@@ -1422,7 +1430,7 @@
     /**
      * Get the extra conditions for a unique / exists rule.
      *
-     * @param  array  $segments
+     * @param  array $segments
      * @return array
      */
     protected function getExtraConditions(array $segments)
@@ -1441,13 +1449,14 @@
     /**
      * Guess the database column from the given attribute name.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @return string
      */
     public function guessColumnForQuery($attribute)
     {
         if (in_array($attribute, array_collapse($this->implicitAttributes))
-                && ! is_numeric($last = last(explode('.', $attribute)))) {
+            && ! is_numeric($last = last(explode('.', $attribute)))
+        ) {
             return $last;
         }
 
@@ -1457,8 +1466,8 @@
     /**
      * Validate that an attribute is a valid IP.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateIp($attribute, $value)
@@ -1469,8 +1478,8 @@
     /**
      * Validate that an attribute is a valid e-mail address.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateEmail($attribute, $value)
@@ -1481,8 +1490,8 @@
     /**
      * Validate that an attribute is a valid URL.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateUrl($attribute, $value)
@@ -1514,8 +1523,8 @@
     /**
      * Validate that an attribute is an active URL.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateActiveUrl($attribute, $value)
@@ -1534,8 +1543,8 @@
     /**
      * Validate the given value is a valid file.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateFile($attribute, $value)
@@ -1546,8 +1555,8 @@
     /**
      * Validate the MIME type of a file is an image MIME type.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateImage($attribute, $value)
@@ -1559,8 +1568,8 @@
      * Validate the dimensions of an image matches the given values.
      *
      * @param  string $attribute
-     * @param  mixed $value
-     * @param  array $parameters
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateDimensions($attribute, $value, $parameters)
@@ -1575,13 +1584,12 @@
 
         $parameters = $this->parseNamedParameters($parameters);
 
-        if (
-            isset($parameters['width']) && $parameters['width'] != $width ||
-            isset($parameters['min_width']) && $parameters['min_width'] > $width ||
-            isset($parameters['max_width']) && $parameters['max_width'] < $width ||
-            isset($parameters['height']) && $parameters['height'] != $height ||
-            isset($parameters['min_height']) && $parameters['min_height'] > $height ||
-            isset($parameters['max_height']) && $parameters['max_height'] < $height
+        if (isset($parameters['width']) && $parameters['width'] != $width 
+            || isset($parameters['min_width']) && $parameters['min_width'] > $width 
+            || isset($parameters['max_width']) && $parameters['max_width'] < $width 
+            || isset($parameters['height']) && $parameters['height'] != $height 
+            || isset($parameters['min_height']) && $parameters['min_height'] > $height 
+            || isset($parameters['max_height']) && $parameters['max_height'] < $height
         ) {
             return false;
         }
@@ -1598,9 +1606,9 @@
     /**
      * Validate the guessed extension of a file upload is in a set of file extensions.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @param  mixed  $value
-     * @param  array   $parameters
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateMimes($attribute, $value, $parameters)
@@ -1615,7 +1623,7 @@
     /**
      * Validate the MIME type of a file upload attribute is in a set of MIME types.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @param  mixed  $value
      * @param  array  $parameters
      * @return bool
@@ -1632,7 +1640,7 @@
     /**
      * Check that the given value is a valid file instance.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return bool
      */
     public function isAValidFileInstance($value)
@@ -1647,8 +1655,8 @@
     /**
      * Validate that an attribute contains only alphabetic characters.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateAlpha($attribute, $value)
@@ -1659,8 +1667,8 @@
     /**
      * Validate that an attribute contains only alpha-numeric characters.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateAlphaNum($attribute, $value)
@@ -1675,8 +1683,8 @@
     /**
      * Validate that an attribute contains only alpha-numeric characters, dashes, and underscores.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateAlphaDash($attribute, $value)
@@ -1691,9 +1699,9 @@
     /**
      * Validate that an attribute passes a regular expression check.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateRegex($attribute, $value, $parameters)
@@ -1710,8 +1718,8 @@
     /**
      * Validate that an attribute is a valid date.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateDate($attribute, $value)
@@ -1732,9 +1740,9 @@
     /**
      * Validate that an attribute matches a date format.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateDateFormat($attribute, $value, $parameters)
@@ -1753,9 +1761,9 @@
     /**
      * Validate the date is before a given date.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateBefore($attribute, $value, $parameters)
@@ -1780,9 +1788,9 @@
     /**
      * Validate the date is before a given date with a given format.
      *
-     * @param  string  $format
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $format
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateBeforeWithFormat($format, $value, $parameters)
@@ -1795,9 +1803,9 @@
     /**
      * Validate the date is after a given date.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $attribute
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateAfter($attribute, $value, $parameters)
@@ -1822,9 +1830,9 @@
     /**
      * Validate the date is after a given date with a given format.
      *
-     * @param  string  $format
-     * @param  mixed   $value
-     * @param  array   $parameters
+     * @param  string $format
+     * @param  mixed  $value
+     * @param  array  $parameters
      * @return bool
      */
     protected function validateAfterWithFormat($format, $value, $parameters)
@@ -1837,9 +1845,9 @@
     /**
      * Given two date/time strings, check that one is after the other.
      *
-     * @param  string  $format
-     * @param  string  $before
-     * @param  string  $after
+     * @param  string $format
+     * @param  string $before
+     * @param  string $after
      * @return bool
      */
     protected function checkDateTimeOrder($format, $before, $after)
@@ -1854,8 +1862,8 @@
     /**
      * Get a DateTime instance from a string.
      *
-     * @param  string  $format
-     * @param  string  $value
+     * @param  string $format
+     * @param  string $value
      * @return \DateTime|null
      */
     protected function getDateTimeWithOptionalFormat($format, $value)
@@ -1876,8 +1884,8 @@
     /**
      * Validate that an attribute is a valid timezone.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return bool
      */
     protected function validateTimezone($attribute, $value)
@@ -1894,7 +1902,7 @@
     /**
      * Get the date format for an attribute if it has one.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @return string|null
      */
     protected function getDateFormat($attribute)
@@ -1907,7 +1915,7 @@
     /**
      * Get the date timestamp.
      *
-     * @param  mixed  $value
+     * @param  mixed $value
      * @return int
      */
     protected function getDateTimestamp($value)
@@ -1918,8 +1926,8 @@
     /**
      * Get the validation message for an attribute and rule.
      *
-     * @param  string  $attribute
-     * @param  string  $rule
+     * @param  string $attribute
+     * @param  string $rule
      * @return string
      */
     protected function getMessage($attribute, $rule)
@@ -1970,9 +1978,9 @@
     /**
      * Get the inline message for a rule if it exists.
      *
-     * @param  string  $attribute
-     * @param  string  $lowerRule
-     * @param  array   $source
+     * @param  string $attribute
+     * @param  string $lowerRule
+     * @param  array  $source
      * @return string|null
      */
     protected function getInlineMessage($attribute, $lowerRule, $source = null)
@@ -1996,7 +2004,7 @@
     /**
      * Get the custom error message from translator.
      *
-     * @param  string  $customKey
+     * @param  string $customKey
      * @return string
      */
     protected function getCustomMessageFromTranslator($customKey)
@@ -2023,8 +2031,8 @@
     /**
      * Get the proper error message for an attribute and size rule.
      *
-     * @param  string  $attribute
-     * @param  string  $rule
+     * @param  string $attribute
+     * @param  string $rule
      * @return string
      */
     protected function getSizeMessage($attribute, $rule)
@@ -2044,7 +2052,7 @@
     /**
      * Get the data type of the given attribute.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @return string
      */
     protected function getAttributeType($attribute)
@@ -2066,10 +2074,10 @@
     /**
      * Replace all error message place-holders with actual values.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function doReplacements($message, $attribute, $rule, $parameters)
@@ -2094,7 +2102,7 @@
     /**
      * Transform an array of attributes to their displayable form.
      *
-     * @param  array  $values
+     * @param  array $values
      * @return array
      */
     protected function getAttributeList(array $values)
@@ -2114,7 +2122,7 @@
     /**
      * Get the displayable name of the attribute.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @return string
      */
     protected function getAttribute($attribute)
@@ -2156,7 +2164,7 @@
      *
      * For example, if "name.0" is given, "name.*" will be returned.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @return string
      */
     protected function getPrimaryAttribute($attribute)
@@ -2173,8 +2181,8 @@
     /**
      * Get the displayable name of the value.
      *
-     * @param  string  $attribute
-     * @param  mixed   $value
+     * @param  string $attribute
+     * @param  mixed  $value
      * @return string
      */
     public function getDisplayableValue($attribute, $value)
@@ -2195,10 +2203,10 @@
     /**
      * Replace all place-holders for the between rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceBetween($message, $attribute, $rule, $parameters)
@@ -2209,10 +2217,10 @@
     /**
      * Replace all place-holders for the date_format rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceDateFormat($message, $attribute, $rule, $parameters)
@@ -2223,10 +2231,10 @@
     /**
      * Replace all place-holders for the different rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceDifferent($message, $attribute, $rule, $parameters)
@@ -2237,10 +2245,10 @@
     /**
      * Replace all place-holders for the digits rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceDigits($message, $attribute, $rule, $parameters)
@@ -2251,10 +2259,10 @@
     /**
      * Replace all place-holders for the digits (between) rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceDigitsBetween($message, $attribute, $rule, $parameters)
@@ -2265,10 +2273,10 @@
     /**
      * Replace all place-holders for the min rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceMin($message, $attribute, $rule, $parameters)
@@ -2279,10 +2287,10 @@
     /**
      * Replace all place-holders for the max rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceMax($message, $attribute, $rule, $parameters)
@@ -2293,10 +2301,10 @@
     /**
      * Replace all place-holders for the in rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceIn($message, $attribute, $rule, $parameters)
@@ -2311,10 +2319,10 @@
     /**
      * Replace all place-holders for the not_in rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceNotIn($message, $attribute, $rule, $parameters)
@@ -2325,10 +2333,10 @@
     /**
      * Replace all place-holders for the in_array rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceInArray($message, $attribute, $rule, $parameters)
@@ -2339,10 +2347,10 @@
     /**
      * Replace all place-holders for the mimes rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceMimes($message, $attribute, $rule, $parameters)
@@ -2353,10 +2361,10 @@
     /**
      * Replace all place-holders for the required_with rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceRequiredWith($message, $attribute, $rule, $parameters)
@@ -2369,10 +2377,10 @@
     /**
      * Replace all place-holders for the required_with_all rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceRequiredWithAll($message, $attribute, $rule, $parameters)
@@ -2383,10 +2391,10 @@
     /**
      * Replace all place-holders for the required_without rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceRequiredWithout($message, $attribute, $rule, $parameters)
@@ -2397,10 +2405,10 @@
     /**
      * Replace all place-holders for the required_without_all rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceRequiredWithoutAll($message, $attribute, $rule, $parameters)
@@ -2411,10 +2419,10 @@
     /**
      * Replace all place-holders for the size rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceSize($message, $attribute, $rule, $parameters)
@@ -2425,10 +2433,10 @@
     /**
      * Replace all place-holders for the required_if rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceRequiredIf($message, $attribute, $rule, $parameters)
@@ -2443,10 +2451,10 @@
     /**
      * Replace all place-holders for the required_unless rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceRequiredUnless($message, $attribute, $rule, $parameters)
@@ -2459,10 +2467,10 @@
     /**
      * Replace all place-holders for the same rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceSame($message, $attribute, $rule, $parameters)
@@ -2473,10 +2481,10 @@
     /**
      * Replace all place-holders for the before rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceBefore($message, $attribute, $rule, $parameters)
@@ -2491,10 +2499,10 @@
     /**
      * Replace all place-holders for the after rule.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function replaceAfter($message, $attribute, $rule, $parameters)
@@ -2515,7 +2523,7 @@
     /**
      * Checks if an attribute exists.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @return bool
      */
     public function hasAttribute($attribute)
@@ -2526,8 +2534,8 @@
     /**
      * Determine if the given attribute has a rule in the given set.
      *
-     * @param  string  $attribute
-     * @param  string|array  $rules
+     * @param  string       $attribute
+     * @param  string|array $rules
      * @return bool
      */
     protected function hasRule($attribute, $rules)
@@ -2538,8 +2546,8 @@
     /**
      * Get a rule and its parameters for a given attribute.
      *
-     * @param  string  $attribute
-     * @param  string|array  $rules
+     * @param  string       $attribute
+     * @param  string|array $rules
      * @return array|null
      */
     protected function getRule($attribute, $rules)
@@ -2562,7 +2570,7 @@
     /**
      * Extract the rule name and parameters from a rule.
      *
-     * @param  array|string  $rules
+     * @param  array|string $rules
      * @return array
      */
     protected function parseRule($rules)
@@ -2581,7 +2589,7 @@
     /**
      * Parse an array based rule.
      *
-     * @param  array  $rules
+     * @param  array $rules
      * @return array
      */
     protected function parseArrayRule(array $rules)
@@ -2592,7 +2600,7 @@
     /**
      * Parse a string based rule.
      *
-     * @param  string  $rules
+     * @param  string $rules
      * @return array
      */
     protected function parseStringRule($rules)
@@ -2614,8 +2622,8 @@
     /**
      * Parse a parameter list.
      *
-     * @param  string  $rule
-     * @param  string  $parameter
+     * @param  string $rule
+     * @param  string $parameter
      * @return array
      */
     protected function parseParameters($rule, $parameter)
@@ -2630,42 +2638,44 @@
     /**
      * Parse named parameters to $key => $value items.
      *
-     * @param  array  $parameters
+     * @param  array $parameters
      * @return array
      */
     protected function parseNamedParameters($parameters)
     {
-        return array_reduce($parameters, function ($result, $item) {
-            list($key, $value) = array_pad(explode('=', $item, 2), 2, null);
+        return array_reduce(
+            $parameters, function ($result, $item) {
+                list($key, $value) = array_pad(explode('=', $item, 2), 2, null);
 
-            $result[$key] = $value;
+                $result[$key] = $value;
 
-            return $result;
-        });
+                return $result;
+            }
+        );
     }
 
     /**
      * Normalizes a rule so that we can accept short types.
      *
-     * @param  string  $rule
+     * @param  string $rule
      * @return string
      */
     protected function normalizeRule($rule)
     {
         switch ($rule) {
-            case 'Int':
-                return 'Integer';
-            case 'Bool':
-                return 'Boolean';
-            default:
-                return $rule;
+        case 'Int':
+            return 'Integer';
+        case 'Bool':
+            return 'Boolean';
+        default:
+            return $rule;
         }
     }
 
     /**
      * Determine if the given rule depends on other fields.
      *
-     * @param  string  $rule
+     * @param  string $rule
      * @return bool
      */
     protected function dependsOnOtherFields($rule)
@@ -2678,7 +2688,7 @@
      *
      * E.g. 'foo.1.bar.spark.baz' -> [1, 'spark'] for 'foo.*.bar.*.baz'
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @return array
      */
     protected function getExplicitKeys($attribute)
@@ -2701,7 +2711,7 @@
      *
      * Allows us to not spin through all of the flattened data for some operations.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @return string
      */
     protected function getLeadingExplicitAttributePath($attribute)
@@ -2714,7 +2724,7 @@
      *
      * Used to extract a sub-section of the data for faster iteration.
      *
-     * @param  string  $attribute
+     * @param  string $attribute
      * @return array
      */
     protected function extractDataFromPath($attribute)
@@ -2733,15 +2743,17 @@
     /**
      * Replace each field parameter which has asterisks with the given keys.
      *
-     * @param  array  $parameters
-     * @param  array  $keys
+     * @param  array $parameters
+     * @param  array $keys
      * @return array
      */
     protected function replaceAsterisksInParameters(array $parameters, array $keys)
     {
-        return array_map(function ($field) use ($keys) {
-            return $this->replaceAsterisksWithKeys($field, $keys);
-        }, $parameters);
+        return array_map(
+            function ($field) use ($keys) {
+                return $this->replaceAsterisksWithKeys($field, $keys);
+            }, $parameters
+        );
     }
 
     /**
@@ -2749,7 +2761,7 @@
      *
      * E.g. 'foo.*.bar.*.baz', [1, 'spark'] -> foo.1.bar.spark.baz
      *
-     * @param  string  $field
+     * @param  string $field
      * @param  array  $keys
      * @return string
      */
@@ -2771,7 +2783,7 @@
     /**
      * Register an array of custom validator extensions.
      *
-     * @param  array  $extensions
+     * @param  array $extensions
      * @return void
      */
     public function addExtensions(array $extensions)
@@ -2788,7 +2800,7 @@
     /**
      * Register an array of custom implicit validator extensions.
      *
-     * @param  array  $extensions
+     * @param  array $extensions
      * @return void
      */
     public function addImplicitExtensions(array $extensions)
@@ -2803,8 +2815,8 @@
     /**
      * Register a custom validator extension.
      *
-     * @param  string  $rule
-     * @param  \Closure|string  $extension
+     * @param  string          $rule
+     * @param  \Closure|string $extension
      * @return void
      */
     public function addExtension($rule, $extension)
@@ -2815,8 +2827,8 @@
     /**
      * Register a custom implicit validator extension.
      *
-     * @param  string   $rule
-     * @param  \Closure|string  $extension
+     * @param  string          $rule
+     * @param  \Closure|string $extension
      * @return void
      */
     public function addImplicitExtension($rule, $extension)
@@ -2839,7 +2851,7 @@
     /**
      * Register an array of custom validator message replacers.
      *
-     * @param  array  $replacers
+     * @param  array $replacers
      * @return void
      */
     public function addReplacers(array $replacers)
@@ -2856,8 +2868,8 @@
     /**
      * Register a custom validator message replacer.
      *
-     * @param  string  $rule
-     * @param  \Closure|string  $replacer
+     * @param  string          $rule
+     * @param  \Closure|string $replacer
      * @return void
      */
     public function addReplacer($rule, $replacer)
@@ -2878,7 +2890,7 @@
     /**
      * Set the data under validation.
      *
-     * @param  array  $data
+     * @param  array $data
      * @return $this
      */
     public function setData(array $data)
@@ -2903,7 +2915,7 @@
     /**
      * Set the validation rules.
      *
-     * @param  array  $rules
+     * @param  array $rules
      * @return $this
      */
     public function setRules(array $rules)
@@ -2922,7 +2934,7 @@
     /**
      * Set the custom attributes on the validator.
      *
-     * @param  array  $attributes
+     * @param  array $attributes
      * @return $this
      */
     public function setAttributeNames(array $attributes)
@@ -2935,7 +2947,7 @@
     /**
      * Set the custom values on the validator.
      *
-     * @param  array  $values
+     * @param  array $values
      * @return $this
      */
     public function setValueNames(array $values)
@@ -2958,7 +2970,7 @@
     /**
      * Set the files under validation.
      *
-     * @param  array  $files
+     * @param  array $files
      * @return $this
      */
     public function setFiles(array $files)
@@ -2987,7 +2999,7 @@
     /**
      * Set the Presence Verifier implementation.
      *
-     * @param  \Illuminate\Validation\PresenceVerifierInterface  $presenceVerifier
+     * @param  \Illuminate\Validation\PresenceVerifierInterface $presenceVerifier
      * @return void
      */
     public function setPresenceVerifier(PresenceVerifierInterface $presenceVerifier)
@@ -3008,7 +3020,7 @@
     /**
      * Set the Translator implementation.
      *
-     * @param  \Symfony\Component\Translation\TranslatorInterface  $translator
+     * @param  \Symfony\Component\Translation\TranslatorInterface $translator
      * @return void
      */
     public function setTranslator(TranslatorInterface $translator)
@@ -3029,7 +3041,7 @@
     /**
      * Set the custom messages for the validator.
      *
-     * @param  array  $messages
+     * @param  array $messages
      * @return void
      */
     public function setCustomMessages(array $messages)
@@ -3050,7 +3062,7 @@
     /**
      * Add custom attributes to the validator.
      *
-     * @param  array  $customAttributes
+     * @param  array $customAttributes
      * @return $this
      */
     public function addCustomAttributes(array $customAttributes)
@@ -3073,7 +3085,7 @@
     /**
      * Add the custom values for the validator.
      *
-     * @param  array  $customValues
+     * @param  array $customValues
      * @return $this
      */
     public function addCustomValues(array $customValues)
@@ -3096,7 +3108,7 @@
     /**
      * Set the fallback messages for the validator.
      *
-     * @param  array  $messages
+     * @param  array $messages
      * @return void
      */
     public function setFallbackMessages(array $messages)
@@ -3151,7 +3163,7 @@
     /**
      * Set the IoC container instance.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
+     * @param  \Illuminate\Contracts\Container\Container $container
      * @return void
      */
     public function setContainer(Container $container)
@@ -3162,8 +3174,8 @@
     /**
      * Call a custom validator extension.
      *
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $rule
+     * @param  array  $parameters
      * @return bool|null
      */
     protected function callExtension($rule, $parameters)
@@ -3180,8 +3192,8 @@
     /**
      * Call a class based validator extension.
      *
-     * @param  string  $callback
-     * @param  array   $parameters
+     * @param  string $callback
+     * @param  array  $parameters
      * @return bool
      */
     protected function callClassBasedExtension($callback, $parameters)
@@ -3198,10 +3210,10 @@
     /**
      * Call a custom validator message replacer.
      *
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string|null
      */
     protected function callReplacer($message, $attribute, $rule, $parameters)
@@ -3218,11 +3230,11 @@
     /**
      * Call a class based validator message replacer.
      *
-     * @param  string  $callback
-     * @param  string  $message
-     * @param  string  $attribute
-     * @param  string  $rule
-     * @param  array   $parameters
+     * @param  string $callback
+     * @param  string $message
+     * @param  string $attribute
+     * @param  string $rule
+     * @param  array  $parameters
      * @return string
      */
     protected function callClassBasedReplacer($callback, $message, $attribute, $rule, $parameters)
@@ -3237,7 +3249,7 @@
      *
      * @param  int    $count
      * @param  array  $parameters
-     * @param  string  $rule
+     * @param  string $rule
      * @return void
      *
      * @throws \InvalidArgumentException
@@ -3252,8 +3264,8 @@
     /**
      * Handle dynamic calls to class methods.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return mixed
      *
      * @throws \BadMethodCallException

--- vendor/laravel/framework/src/Illuminate/View/Compilers/BladeCompiler.php
+++ PHP_CodeSniffer
@@ -101,7 +101,7 @@
     /**
      * Compile the view at the given path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return void
      */
     public function compile($path = null)
@@ -130,7 +130,7 @@
     /**
      * Set the path currently being compiled.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return void
      */
     public function setPath($path)
@@ -141,7 +141,7 @@
     /**
      * Compile the given Blade template contents.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     public function compileString($value)
@@ -179,29 +179,33 @@
     /**
      * Store the verbatim blocks and replace them with a temporary placeholder.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function storeVerbatimBlocks($value)
     {
-        return preg_replace_callback('/(?<!@)@verbatim(.*?)@endverbatim/s', function ($matches) {
-            $this->verbatimBlocks[] = $matches[1];
-
-            return $this->verbatimPlaceholder;
-        }, $value);
+        return preg_replace_callback(
+            '/(?<!@)@verbatim(.*?)@endverbatim/s', function ($matches) {
+                $this->verbatimBlocks[] = $matches[1];
+
+                return $this->verbatimPlaceholder;
+            }, $value
+        );
     }
 
     /**
      * Replace the raw placeholders with the original code stored in the raw blocks.
      *
-     * @param  string  $result
+     * @param  string $result
      * @return string
      */
     protected function restoreVerbatimBlocks($result)
     {
-        $result = preg_replace_callback('/'.preg_quote($this->verbatimPlaceholder).'/', function () {
-            return array_shift($this->verbatimBlocks);
-        }, $result);
+        $result = preg_replace_callback(
+            '/'.preg_quote($this->verbatimPlaceholder).'/', function () {
+                return array_shift($this->verbatimBlocks);
+            }, $result
+        );
 
         $this->verbatimBlocks = [];
 
@@ -211,7 +215,7 @@
     /**
      * Parse the tokens from the template.
      *
-     * @param  array  $token
+     * @param  array $token
      * @return string
      */
     protected function parseToken($token)
@@ -230,7 +234,7 @@
     /**
      * Execute the user defined extensions.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function compileExtensions($value)
@@ -245,7 +249,7 @@
     /**
      * Compile Blade comments into valid PHP.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function compileComments($value)
@@ -258,7 +262,7 @@
     /**
      * Compile Blade echos into valid PHP.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function compileEchos($value)
@@ -283,30 +287,32 @@
             'compileRegularEchos' => strlen(stripcslashes($this->contentTags[0])),
         ];
 
-        uksort($methods, function ($method1, $method2) use ($methods) {
-            // Ensure the longest tags are processed first
-            if ($methods[$method1] > $methods[$method2]) {
-                return -1;
-            }
-            if ($methods[$method1] < $methods[$method2]) {
-                return 1;
-            }
-
-            // Otherwise give preference to raw tags (assuming they've overridden)
-            if ($method1 === 'compileRawEchos') {
-                return -1;
-            }
-            if ($method2 === 'compileRawEchos') {
-                return 1;
-            }
-
-            if ($method1 === 'compileEscapedEchos') {
-                return -1;
-            }
-            if ($method2 === 'compileEscapedEchos') {
-                return 1;
+        uksort(
+            $methods, function ($method1, $method2) use ($methods) {
+                // Ensure the longest tags are processed first
+                if ($methods[$method1] > $methods[$method2]) {
+                    return -1;
+                }
+                if ($methods[$method1] < $methods[$method2]) {
+                    return 1;
+                }
+
+                // Otherwise give preference to raw tags (assuming they've overridden)
+                if ($method1 === 'compileRawEchos') {
+                    return -1;
+                }
+                if ($method2 === 'compileRawEchos') {
+                    return 1;
+                }
+
+                if ($method1 === 'compileEscapedEchos') {
+                    return -1;
+                }
+                if ($method2 === 'compileEscapedEchos') {
+                    return 1;
+                }
             }
-        });
+        );
 
         return $methods;
     }
@@ -314,7 +320,7 @@
     /**
      * Compile Blade statements that start with "@".
      *
-     * @param  string  $value
+     * @param  string $value
      * @return mixed
      */
     protected function compileStatements($value)
@@ -337,7 +343,7 @@
     /**
      * Compile the "raw" echo statements.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function compileRawEchos($value)
@@ -356,7 +362,7 @@
     /**
      * Compile the "regular" echo statements.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function compileRegularEchos($value)
@@ -377,7 +383,7 @@
     /**
      * Compile the escaped echo statements.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     protected function compileEscapedEchos($value)
@@ -396,7 +402,7 @@
     /**
      * Compile the default values for the echo statement.
      *
-     * @param  string  $value
+     * @param  string $value
      * @return string
      */
     public function compileEchoDefaults($value)
@@ -407,7 +413,7 @@
     /**
      * Compile the each statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileEach($expression)
@@ -418,7 +424,7 @@
     /**
      * Compile the inject statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileInject($expression)
@@ -431,7 +437,7 @@
     /**
      * Compile the yield statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileYield($expression)
@@ -442,7 +448,7 @@
     /**
      * Compile the show statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileShow($expression)
@@ -453,7 +459,7 @@
     /**
      * Compile the section statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileSection($expression)
@@ -464,7 +470,7 @@
     /**
      * Compile the append statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileAppend($expression)
@@ -475,7 +481,7 @@
     /**
      * Compile the end-section statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileEndsection($expression)
@@ -486,7 +492,7 @@
     /**
      * Compile the stop statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileStop($expression)
@@ -497,7 +503,7 @@
     /**
      * Compile the overwrite statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileOverwrite($expression)
@@ -508,7 +514,7 @@
     /**
      * Compile the unless statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileUnless($expression)
@@ -519,7 +525,7 @@
     /**
      * Compile the end unless statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileEndunless($expression)
@@ -530,7 +536,7 @@
     /**
      * Compile the lang statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileLang($expression)
@@ -541,7 +547,7 @@
     /**
      * Compile the choice statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileChoice($expression)
@@ -552,7 +558,7 @@
     /**
      * Compile the else statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileElse($expression)
@@ -563,7 +569,7 @@
     /**
      * Compile the for statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileFor($expression)
@@ -574,7 +580,7 @@
     /**
      * Compile the foreach statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileForeach($expression)
@@ -585,7 +591,7 @@
     /**
      * Compile the break statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileBreak($expression)
@@ -596,7 +602,7 @@
     /**
      * Compile the continue statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileContinue($expression)
@@ -607,7 +613,7 @@
     /**
      * Compile the forelse statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileForelse($expression)
@@ -620,7 +626,7 @@
     /**
      * Compile the can statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileCan($expression)
@@ -631,7 +637,7 @@
     /**
      * Compile the else-can statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileElsecan($expression)
@@ -642,7 +648,7 @@
     /**
      * Compile the cannot statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileCannot($expression)
@@ -653,7 +659,7 @@
     /**
      * Compile the else-can statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileElsecannot($expression)
@@ -664,7 +670,7 @@
     /**
      * Compile the if statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileIf($expression)
@@ -675,7 +681,7 @@
     /**
      * Compile the else-if statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileElseif($expression)
@@ -686,7 +692,7 @@
     /**
      * Compile the forelse statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileEmpty($expression)
@@ -699,7 +705,7 @@
     /**
      * Compile the has section statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileHasSection($expression)
@@ -710,7 +716,7 @@
     /**
      * Compile the while statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileWhile($expression)
@@ -721,7 +727,7 @@
     /**
      * Compile the end-while statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileEndwhile($expression)
@@ -732,7 +738,7 @@
     /**
      * Compile the end-for statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileEndfor($expression)
@@ -743,7 +749,7 @@
     /**
      * Compile the end-for-each statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileEndforeach($expression)
@@ -754,7 +760,7 @@
     /**
      * Compile the end-can statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileEndcan($expression)
@@ -765,7 +771,7 @@
     /**
      * Compile the end-cannot statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileEndcannot($expression)
@@ -776,7 +782,7 @@
     /**
      * Compile the end-if statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileEndif($expression)
@@ -787,7 +793,7 @@
     /**
      * Compile the end-for-else statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileEndforelse($expression)
@@ -798,7 +804,7 @@
     /**
      * Compile the raw PHP statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compilePhp($expression)
@@ -809,7 +815,7 @@
     /**
      * Compile end-php statement into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileEndphp($expression)
@@ -820,7 +826,7 @@
     /**
      * Compile the unset statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileUnset($expression)
@@ -831,7 +837,7 @@
     /**
      * Compile the extends statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileExtends($expression)
@@ -848,7 +854,7 @@
     /**
      * Compile the include statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileInclude($expression)
@@ -861,7 +867,7 @@
     /**
      * Compile the include statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileIncludeIf($expression)
@@ -874,7 +880,7 @@
     /**
      * Compile the stack statements into the content.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileStack($expression)
@@ -885,7 +891,7 @@
     /**
      * Compile the push statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compilePush($expression)
@@ -896,7 +902,7 @@
     /**
      * Compile the endpush statements into valid PHP.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function compileEndpush($expression)
@@ -907,7 +913,7 @@
     /**
      * Strip the parentheses from the given expression.
      *
-     * @param  string  $expression
+     * @param  string $expression
      * @return string
      */
     protected function stripParentheses($expression)
@@ -932,7 +938,7 @@
     /**
      * Register a custom Blade compiler.
      *
-     * @param  callable  $compiler
+     * @param  callable $compiler
      * @return void
      */
     public function extend(callable $compiler)
@@ -943,8 +949,8 @@
     /**
      * Register a handler for custom directives.
      *
-     * @param  string  $name
-     * @param  callable  $handler
+     * @param  string   $name
+     * @param  callable $handler
      * @return void
      */
     public function directive($name, callable $handler)
@@ -975,8 +981,8 @@
     /**
      * Sets the raw tags used for the compiler.
      *
-     * @param  string  $openTag
-     * @param  string  $closeTag
+     * @param  string $openTag
+     * @param  string $closeTag
      * @return void
      */
     public function setRawTags($openTag, $closeTag)
@@ -987,9 +993,9 @@
     /**
      * Sets the content tags used for the compiler.
      *
-     * @param  string  $openTag
-     * @param  string  $closeTag
-     * @param  bool    $escaped
+     * @param  string $openTag
+     * @param  string $closeTag
+     * @param  bool   $escaped
      * @return void
      */
     public function setContentTags($openTag, $closeTag, $escaped = false)
@@ -1002,8 +1008,8 @@
     /**
      * Sets the escaped content tags used for the compiler.
      *
-     * @param  string  $openTag
-     * @param  string  $closeTag
+     * @param  string $openTag
+     * @param  string $closeTag
      * @return void
      */
     public function setEscapedContentTags($openTag, $closeTag)
@@ -1034,7 +1040,7 @@
     /**
      * Gets the tags used for the compiler.
      *
-     * @param  bool  $escaped
+     * @param  bool $escaped
      * @return array
      */
     protected function getTags($escaped = false)
@@ -1047,7 +1053,7 @@
     /**
      * Set the echo format to be used by the compiler.
      *
-     * @param  string  $format
+     * @param  string $format
      * @return void
      */
     public function setEchoFormat($format)

--- vendor/laravel/framework/src/Illuminate/View/Compilers/Compiler.php
+++ PHP_CodeSniffer
@@ -24,8 +24,8 @@
     /**
      * Create a new compiler instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
-     * @param  string  $cachePath
+     * @param  \Illuminate\Filesystem\Filesystem $files
+     * @param  string                            $cachePath
      * @return void
      *
      * @throws \InvalidArgumentException
@@ -43,7 +43,7 @@
     /**
      * Get the path to the compiled version of a view.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     public function getCompiledPath($path)
@@ -54,7 +54,7 @@
     /**
      * Determine if the view at the given path is expired.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return bool
      */
     public function isExpired($path)

--- vendor/laravel/framework/src/Illuminate/View/Compilers/CompilerInterface.php
+++ PHP_CodeSniffer
@@ -7,7 +7,7 @@
     /**
      * Get the path to the compiled version of a view.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     public function getCompiledPath($path);
@@ -15,7 +15,7 @@
     /**
      * Determine if the given view is expired.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return bool
      */
     public function isExpired($path);
@@ -23,7 +23,7 @@
     /**
      * Compile the view at the given path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return void
      */
     public function compile($path);

--- vendor/laravel/framework/src/Illuminate/View/Engines/CompilerEngine.php
+++ PHP_CodeSniffer
@@ -25,7 +25,7 @@
     /**
      * Create a new Blade view engine instance.
      *
-     * @param  \Illuminate\View\Compilers\CompilerInterface  $compiler
+     * @param  \Illuminate\View\Compilers\CompilerInterface $compiler
      * @return void
      */
     public function __construct(CompilerInterface $compiler)
@@ -36,8 +36,8 @@
     /**
      * Get the evaluated contents of the view.
      *
-     * @param  string  $path
-     * @param  array   $data
+     * @param  string $path
+     * @param  array  $data
      * @return string
      */
     public function get($path, array $data = [])
@@ -66,8 +66,8 @@
     /**
      * Handle a view exception.
      *
-     * @param  \Exception  $e
-     * @param  int  $obLevel
+     * @param  \Exception $e
+     * @param  int        $obLevel
      * @return void
      *
      * @throws $e
@@ -82,7 +82,7 @@
     /**
      * Get the exception message for an exception.
      *
-     * @param  \Exception  $e
+     * @param  \Exception $e
      * @return string
      */
     protected function getMessage(Exception $e)

--- vendor/laravel/framework/src/Illuminate/View/Engines/EngineInterface.php
+++ PHP_CodeSniffer
@@ -7,8 +7,8 @@
     /**
      * Get the evaluated contents of the view.
      *
-     * @param  string  $path
-     * @param  array   $data
+     * @param  string $path
+     * @param  array  $data
      * @return string
      */
     public function get($path, array $data = []);

--- vendor/laravel/framework/src/Illuminate/View/Engines/EngineResolver.php
+++ PHP_CodeSniffer
@@ -27,7 +27,7 @@
      * The engine string typically corresponds to a file extension.
      *
      * @param  string   $engine
-     * @param  \Closure  $resolver
+     * @param  \Closure $resolver
      * @return void
      */
     public function register($engine, Closure $resolver)
@@ -40,7 +40,7 @@
     /**
      * Resolver an engine instance by name.
      *
-     * @param  string  $engine
+     * @param  string $engine
      * @return \Illuminate\View\Engines\EngineInterface
      * @throws \InvalidArgumentException
      */

--- vendor/laravel/framework/src/Illuminate/View/Engines/PhpEngine.php
+++ PHP_CodeSniffer
@@ -11,8 +11,8 @@
     /**
      * Get the evaluated contents of the view.
      *
-     * @param  string  $path
-     * @param  array   $data
+     * @param  string $path
+     * @param  array  $data
      * @return string
      */
     public function get($path, array $data = [])
@@ -23,8 +23,8 @@
     /**
      * Get the evaluated contents of the view at the given path.
      *
-     * @param  string  $__path
-     * @param  array   $__data
+     * @param  string $__path
+     * @param  array  $__data
      * @return string
      */
     protected function evaluatePath($__path, $__data)
@@ -52,8 +52,8 @@
     /**
      * Handle a view exception.
      *
-     * @param  \Exception  $e
-     * @param  int  $obLevel
+     * @param  \Exception $e
+     * @param  int        $obLevel
      * @return void
      *
      * @throws $e

--- vendor/laravel/framework/src/Illuminate/View/Factory.php
+++ PHP_CodeSniffer
@@ -115,9 +115,9 @@
     /**
      * Create a new view factory instance.
      *
-     * @param  \Illuminate\View\Engines\EngineResolver  $engines
-     * @param  \Illuminate\View\ViewFinderInterface  $finder
-     * @param  \Illuminate\Contracts\Events\Dispatcher  $events
+     * @param  \Illuminate\View\Engines\EngineResolver $engines
+     * @param  \Illuminate\View\ViewFinderInterface    $finder
+     * @param  \Illuminate\Contracts\Events\Dispatcher $events
      * @return void
      */
     public function __construct(EngineResolver $engines, ViewFinderInterface $finder, Dispatcher $events)
@@ -132,9 +132,9 @@
     /**
      * Get the evaluated view contents for the given view.
      *
-     * @param  string  $path
-     * @param  array   $data
-     * @param  array   $mergeData
+     * @param  string $path
+     * @param  array  $data
+     * @param  array  $mergeData
      * @return \Illuminate\Contracts\View\View
      */
     public function file($path, $data = [], $mergeData = [])
@@ -149,9 +149,9 @@
     /**
      * Get the evaluated view contents for the given view.
      *
-     * @param  string  $view
-     * @param  array   $data
-     * @param  array   $mergeData
+     * @param  string $view
+     * @param  array  $data
+     * @param  array  $mergeData
      * @return \Illuminate\Contracts\View\View
      */
     public function make($view, $data = [], $mergeData = [])
@@ -193,7 +193,7 @@
     /**
      * Parse the given data into a raw array.
      *
-     * @param  mixed  $data
+     * @param  mixed $data
      * @return array
      */
     protected function parseData($data)
@@ -204,8 +204,8 @@
     /**
      * Get the evaluated view contents for a named view.
      *
-     * @param  string  $view
-     * @param  mixed   $data
+     * @param  string $view
+     * @param  mixed  $data
      * @return \Illuminate\Contracts\View\View
      */
     public function of($view, $data = [])
@@ -216,8 +216,8 @@
     /**
      * Register a named view.
      *
-     * @param  string  $view
-     * @param  string  $name
+     * @param  string $view
+     * @param  string $name
      * @return void
      */
     public function name($view, $name)
@@ -228,8 +228,8 @@
     /**
      * Add an alias for a view.
      *
-     * @param  string  $view
-     * @param  string  $alias
+     * @param  string $view
+     * @param  string $alias
      * @return void
      */
     public function alias($view, $alias)
@@ -240,7 +240,7 @@
     /**
      * Determine if a given view exists.
      *
-     * @param  string  $view
+     * @param  string $view
      * @return bool
      */
     public function exists($view)
@@ -257,10 +257,10 @@
     /**
      * Get the rendered contents of a partial from a loop.
      *
-     * @param  string  $view
-     * @param  array   $data
-     * @param  string  $iterator
-     * @param  string  $empty
+     * @param  string $view
+     * @param  array  $data
+     * @param  string $iterator
+     * @param  string $empty
      * @return string
      */
     public function renderEach($view, $data, $iterator, $empty = 'raw|')
@@ -295,7 +295,7 @@
     /**
      * Get the appropriate view engine for the given path.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return \Illuminate\View\Engines\EngineInterface
      *
      * @throws \InvalidArgumentException
@@ -314,23 +314,25 @@
     /**
      * Get the extension used by the view file.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return string
      */
     protected function getExtension($path)
     {
         $extensions = array_keys($this->extensions);
 
-        return Arr::first($extensions, function ($key, $value) use ($path) {
-            return Str::endsWith($path, '.'.$value);
-        });
+        return Arr::first(
+            $extensions, function ($key, $value) use ($path) {
+                return Str::endsWith($path, '.'.$value);
+            }
+        );
     }
 
     /**
      * Add a piece of shared data to the environment.
      *
-     * @param  array|string  $key
-     * @param  mixed  $value
+     * @param  array|string $key
+     * @param  mixed        $value
      * @return mixed
      */
     public function share($key, $value = null)
@@ -347,8 +349,8 @@
     /**
      * Register a view creator event.
      *
-     * @param  array|string     $views
-     * @param  \Closure|string  $callback
+     * @param  array|string    $views
+     * @param  \Closure|string $callback
      * @return array
      */
     public function creator($views, $callback)
@@ -365,7 +367,7 @@
     /**
      * Register multiple view composers via an array.
      *
-     * @param  array  $composers
+     * @param  array $composers
      * @return array
      */
     public function composers(array $composers)
@@ -382,9 +384,9 @@
     /**
      * Register a view composer event.
      *
-     * @param  array|string  $views
-     * @param  \Closure|string  $callback
-     * @param  int|null  $priority
+     * @param  array|string    $views
+     * @param  \Closure|string $callback
+     * @param  int|null        $priority
      * @return array
      */
     public function composer($views, $callback, $priority = null)
@@ -401,10 +403,10 @@
     /**
      * Add an event for a given view.
      *
-     * @param  string  $view
-     * @param  \Closure|string  $callback
-     * @param  string  $prefix
-     * @param  int|null  $priority
+     * @param  string          $view
+     * @param  \Closure|string $callback
+     * @param  string          $prefix
+     * @param  int|null        $priority
      * @return \Closure|null
      */
     protected function addViewEvent($view, $callback, $prefix = 'composing: ', $priority = null)
@@ -423,10 +425,10 @@
     /**
      * Register a class based view composer.
      *
-     * @param  string    $view
-     * @param  string    $class
-     * @param  string    $prefix
-     * @param  int|null  $priority
+     * @param  string   $view
+     * @param  string   $class
+     * @param  string   $prefix
+     * @param  int|null $priority
      * @return \Closure
      */
     protected function addClassEvent($view, $class, $prefix, $priority = null)
@@ -446,9 +448,9 @@
     /**
      * Add a listener to the event dispatcher.
      *
-     * @param  string    $name
-     * @param  \Closure  $callback
-     * @param  int|null  $priority
+     * @param  string   $name
+     * @param  \Closure $callback
+     * @param  int|null $priority
      * @return void
      */
     protected function addEventListener($name, $callback, $priority = null)
@@ -463,8 +465,8 @@
     /**
      * Build a class based container callback Closure.
      *
-     * @param  string  $class
-     * @param  string  $prefix
+     * @param  string $class
+     * @param  string $prefix
      * @return \Closure
      */
     protected function buildClassEventCallback($class, $prefix)
@@ -484,8 +486,8 @@
     /**
      * Parse a class based composer name.
      *
-     * @param  string  $class
-     * @param  string  $prefix
+     * @param  string $class
+     * @param  string $prefix
      * @return array
      */
     protected function parseClassEvent($class, $prefix)
@@ -502,7 +504,7 @@
     /**
      * Call the composer for a given view.
      *
-     * @param  \Illuminate\Contracts\View\View  $view
+     * @param  \Illuminate\Contracts\View\View $view
      * @return void
      */
     public function callComposer(View $view)
@@ -513,7 +515,7 @@
     /**
      * Call the creator for a given view.
      *
-     * @param  \Illuminate\Contracts\View\View  $view
+     * @param  \Illuminate\Contracts\View\View $view
      * @return void
      */
     public function callCreator(View $view)
@@ -524,8 +526,8 @@
     /**
      * Start injecting content into a section.
      *
-     * @param  string  $section
-     * @param  string  $content
+     * @param  string $section
+     * @param  string $content
      * @return void
      */
     public function startSection($section, $content = '')
@@ -542,8 +544,8 @@
     /**
      * Inject inline content into a section.
      *
-     * @param  string  $section
-     * @param  string  $content
+     * @param  string $section
+     * @param  string $content
      * @return void
      */
     public function inject($section, $content)
@@ -568,7 +570,7 @@
     /**
      * Stop injecting content into a section.
      *
-     * @param  bool  $overwrite
+     * @param  bool $overwrite
      * @return string
      * @throws \InvalidArgumentException
      */
@@ -615,8 +617,8 @@
     /**
      * Append content to a given section.
      *
-     * @param  string  $section
-     * @param  string  $content
+     * @param  string $section
+     * @param  string $content
      * @return void
      */
     protected function extendSection($section, $content)
@@ -631,8 +633,8 @@
     /**
      * Get the string contents of a section.
      *
-     * @param  string  $section
-     * @param  string  $default
+     * @param  string $section
+     * @param  string $default
      * @return string
      */
     public function yieldContent($section, $default = '')
@@ -653,8 +655,8 @@
     /**
      * Start injecting content into a push section.
      *
-     * @param  string  $section
-     * @param  string  $content
+     * @param  string $section
+     * @param  string $content
      * @return void
      */
     public function startPush($section, $content = '')
@@ -690,8 +692,8 @@
     /**
      * Append content to a given push section.
      *
-     * @param  string  $section
-     * @param  string  $content
+     * @param  string $section
+     * @param  string $content
      * @return void
      */
     protected function extendPush($section, $content)
@@ -709,8 +711,8 @@
     /**
      * Get the string contents of a push section.
      *
-     * @param  string  $section
-     * @param  string  $default
+     * @param  string $section
+     * @param  string $default
      * @return string
      */
     public function yieldPushContent($section, $default = '')
@@ -783,7 +785,7 @@
     /**
      * Add a location to the array of view locations.
      *
-     * @param  string  $location
+     * @param  string $location
      * @return void
      */
     public function addLocation($location)
@@ -794,8 +796,8 @@
     /**
      * Add a new namespace to the loader.
      *
-     * @param  string  $namespace
-     * @param  string|array  $hints
+     * @param  string       $namespace
+     * @param  string|array $hints
      * @return void
      */
     public function addNamespace($namespace, $hints)
@@ -806,8 +808,8 @@
     /**
      * Prepend a new namespace to the loader.
      *
-     * @param  string  $namespace
-     * @param  string|array  $hints
+     * @param  string       $namespace
+     * @param  string|array $hints
      * @return void
      */
     public function prependNamespace($namespace, $hints)
@@ -818,9 +820,9 @@
     /**
      * Register a valid view extension and its engine.
      *
-     * @param  string    $extension
-     * @param  string    $engine
-     * @param  \Closure  $resolver
+     * @param  string   $extension
+     * @param  string   $engine
+     * @param  \Closure $resolver
      * @return void
      */
     public function addExtension($extension, $engine, $resolver = null)
@@ -869,7 +871,7 @@
     /**
      * Set the view finder instance.
      *
-     * @param  \Illuminate\View\ViewFinderInterface  $finder
+     * @param  \Illuminate\View\ViewFinderInterface $finder
      * @return void
      */
     public function setFinder(ViewFinderInterface $finder)
@@ -890,7 +892,7 @@
     /**
      * Set the event dispatcher instance.
      *
-     * @param  \Illuminate\Contracts\Events\Dispatcher  $events
+     * @param  \Illuminate\Contracts\Events\Dispatcher $events
      * @return void
      */
     public function setDispatcher(Dispatcher $events)
@@ -911,7 +913,7 @@
     /**
      * Set the IoC container instance.
      *
-     * @param  \Illuminate\Contracts\Container\Container  $container
+     * @param  \Illuminate\Contracts\Container\Container $container
      * @return void
      */
     public function setContainer(Container $container)
@@ -922,8 +924,8 @@
     /**
      * Get an item from the shared data.
      *
-     * @param  string  $key
-     * @param  mixed   $default
+     * @param  string $key
+     * @param  mixed  $default
      * @return mixed
      */
     public function shared($key, $default = null)
@@ -944,7 +946,7 @@
     /**
      * Check if section exists.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return bool
      */
     public function hasSection($name)

--- vendor/laravel/framework/src/Illuminate/View/FileViewFinder.php
+++ PHP_CodeSniffer
@@ -45,9 +45,9 @@
     /**
      * Create a new file view loader instance.
      *
-     * @param  \Illuminate\Filesystem\Filesystem  $files
-     * @param  array  $paths
-     * @param  array  $extensions
+     * @param  \Illuminate\Filesystem\Filesystem $files
+     * @param  array                             $paths
+     * @param  array                             $extensions
      * @return void
      */
     public function __construct(Filesystem $files, array $paths, array $extensions = null)
@@ -63,7 +63,7 @@
     /**
      * Get the fully qualified location of the view.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     public function find($name)
@@ -82,7 +82,7 @@
     /**
      * Get the path to a template with a named path.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return string
      */
     protected function findNamedPathView($name)
@@ -95,7 +95,7 @@
     /**
      * Get the segments of a template with a named path.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return array
      *
      * @throws \InvalidArgumentException
@@ -118,8 +118,8 @@
     /**
      * Find the given view in the list of paths.
      *
-     * @param  string  $name
-     * @param  array   $paths
+     * @param  string $name
+     * @param  array  $paths
      * @return string
      *
      * @throws \InvalidArgumentException
@@ -140,20 +140,22 @@
     /**
      * Get an array of possible view files.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return array
      */
     protected function getPossibleViewFiles($name)
     {
-        return array_map(function ($extension) use ($name) {
-            return str_replace('.', '/', $name).'.'.$extension;
-        }, $this->extensions);
+        return array_map(
+            function ($extension) use ($name) {
+                return str_replace('.', '/', $name).'.'.$extension;
+            }, $this->extensions
+        );
     }
 
     /**
      * Add a location to the finder.
      *
-     * @param  string  $location
+     * @param  string $location
      * @return void
      */
     public function addLocation($location)
@@ -164,8 +166,8 @@
     /**
      * Add a namespace hint to the finder.
      *
-     * @param  string  $namespace
-     * @param  string|array  $hints
+     * @param  string       $namespace
+     * @param  string|array $hints
      * @return void
      */
     public function addNamespace($namespace, $hints)
@@ -182,8 +184,8 @@
     /**
      * Prepend a namespace hint to the finder.
      *
-     * @param  string  $namespace
-     * @param  string|array  $hints
+     * @param  string       $namespace
+     * @param  string|array $hints
      * @return void
      */
     public function prependNamespace($namespace, $hints)
@@ -200,7 +202,7 @@
     /**
      * Register an extension with the view finder.
      *
-     * @param  string  $extension
+     * @param  string $extension
      * @return void
      */
     public function addExtension($extension)
@@ -215,7 +217,7 @@
     /**
      * Returns whether or not the view specify a hint information.
      *
-     * @param  string  $name
+     * @param  string $name
      * @return bool
      */
     public function hasHintInformation($name)

--- vendor/laravel/framework/src/Illuminate/View/Middleware/ShareErrorsFromSession.php
+++ PHP_CodeSniffer
@@ -18,7 +18,7 @@
     /**
      * Create a new error binder instance.
      *
-     * @param  \Illuminate\Contracts\View\Factory  $view
+     * @param  \Illuminate\Contracts\View\Factory $view
      * @return void
      */
     public function __construct(ViewFactory $view)
@@ -29,8 +29,8 @@
     /**
      * Handle an incoming request.
      *
-     * @param  \Illuminate\Http\Request  $request
-     * @param  \Closure  $next
+     * @param  \Illuminate\Http\Request $request
+     * @param  \Closure                 $next
      * @return mixed
      */
     public function handle($request, Closure $next)

--- vendor/laravel/framework/src/Illuminate/View/View.php
+++ PHP_CodeSniffer
@@ -54,11 +54,11 @@
     /**
      * Create a new view instance.
      *
-     * @param  \Illuminate\View\Factory  $factory
-     * @param  \Illuminate\View\Engines\EngineInterface  $engine
-     * @param  string  $view
-     * @param  string  $path
-     * @param  mixed  $data
+     * @param  \Illuminate\View\Factory                 $factory
+     * @param  \Illuminate\View\Engines\EngineInterface $engine
+     * @param  string                                   $view
+     * @param  string                                   $path
+     * @param  mixed                                    $data
      * @return void
      */
     public function __construct(Factory $factory, EngineInterface $engine, $view, $path, $data = [])
@@ -74,7 +74,7 @@
     /**
      * Get the string contents of the view.
      *
-     * @param  callable|null  $callback
+     * @param  callable|null $callback
      * @return string
      *
      * @throws \Throwable
@@ -134,9 +134,11 @@
      */
     public function renderSections()
     {
-        return $this->render(function () {
-            return $this->factory->getSections();
-        });
+        return $this->render(
+            function () {
+                return $this->factory->getSections();
+            }
+        );
     }
 
     /**
@@ -170,8 +172,8 @@
     /**
      * Add a piece of data to the view.
      *
-     * @param  string|array  $key
-     * @param  mixed   $value
+     * @param  string|array $key
+     * @param  mixed        $value
      * @return $this
      */
     public function with($key, $value = null)
@@ -188,9 +190,9 @@
     /**
      * Add a view instance to the view data.
      *
-     * @param  string  $key
-     * @param  string  $view
-     * @param  array   $data
+     * @param  string $key
+     * @param  string $view
+     * @param  array  $data
      * @return $this
      */
     public function nest($key, $view, array $data = [])
@@ -201,7 +203,7 @@
     /**
      * Add validation errors to the view.
      *
-     * @param  \Illuminate\Contracts\Support\MessageProvider|array  $provider
+     * @param  \Illuminate\Contracts\Support\MessageProvider|array $provider
      * @return $this
      */
     public function withErrors($provider)
@@ -278,7 +280,7 @@
     /**
      * Set the path to the view.
      *
-     * @param  string  $path
+     * @param  string $path
      * @return void
      */
     public function setPath($path)
@@ -289,7 +291,7 @@
     /**
      * Determine if a piece of data is bound.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function offsetExists($key)
@@ -300,7 +302,7 @@
     /**
      * Get a piece of bound data to the view.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function offsetGet($key)
@@ -311,8 +313,8 @@
     /**
      * Set a piece of data on the view.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function offsetSet($key, $value)
@@ -323,7 +325,7 @@
     /**
      * Unset a piece of data from the view.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return void
      */
     public function offsetUnset($key)
@@ -334,7 +336,7 @@
     /**
      * Get a piece of data from the view.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return mixed
      */
     public function &__get($key)
@@ -345,8 +347,8 @@
     /**
      * Set a piece of data on the view.
      *
-     * @param  string  $key
-     * @param  mixed   $value
+     * @param  string $key
+     * @param  mixed  $value
      * @return void
      */
     public function __set($key, $value)
@@ -357,7 +359,7 @@
     /**
      * Check if a piece of data is bound to the view.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function __isset($key)
@@ -368,7 +370,7 @@
     /**
      * Remove a piece of bound data from the view.
      *
-     * @param  string  $key
+     * @param  string $key
      * @return bool
      */
     public function __unset($key)
@@ -379,8 +381,8 @@
     /**
      * Dynamically bind parameters to the view.
      *
-     * @param  string  $method
-     * @param  array   $parameters
+     * @param  string $method
+     * @param  array  $parameters
      * @return \Illuminate\View\View
      *
      * @throws \BadMethodCallException

--- vendor/laravel/framework/src/Illuminate/View/ViewFinderInterface.php
+++ PHP_CodeSniffer
@@ -14,7 +14,7 @@
     /**
      * Get the fully qualified location of the view.
      *
-     * @param  string  $view
+     * @param  string $view
      * @return string
      */
     public function find($view);
@@ -22,7 +22,7 @@
     /**
      * Add a location to the finder.
      *
-     * @param  string  $location
+     * @param  string $location
      * @return void
      */
     public function addLocation($location);
@@ -30,8 +30,8 @@
     /**
      * Add a namespace hint to the finder.
      *
-     * @param  string  $namespace
-     * @param  string|array  $hints
+     * @param  string       $namespace
+     * @param  string|array $hints
      * @return void
      */
     public function addNamespace($namespace, $hints);
@@ -39,8 +39,8 @@
     /**
      * Prepend a namespace hint to the finder.
      *
-     * @param  string  $namespace
-     * @param  string|array  $hints
+     * @param  string       $namespace
+     * @param  string|array $hints
      * @return void
      */
     public function prependNamespace($namespace, $hints);
@@ -48,7 +48,7 @@
     /**
      * Add a valid view extension to the finder.
      *
-     * @param  string  $extension
+     * @param  string $extension
      * @return void
      */
     public function addExtension($extension);

--- vendor/laravel/framework/src/Illuminate/View/ViewServiceProvider.php
+++ PHP_CodeSniffer
@@ -31,37 +31,41 @@
      */
     public function registerEngineResolver()
     {
-        $this->app->singleton('view.engine.resolver', function () {
-            $resolver = new EngineResolver;
+        $this->app->singleton(
+            'view.engine.resolver', function () {
+                $resolver = new EngineResolver;
+
+                // Next we will register the various engines with the resolver so that the
+                // environment can resolve the engines it needs for various views based
+                // on the extension of view files. We call a method for each engines.
+                foreach (['php', 'blade'] as $engine) {
+                    $this->{'register'.ucfirst($engine).'Engine'}($resolver);
+                }
 
-            // Next we will register the various engines with the resolver so that the
-            // environment can resolve the engines it needs for various views based
-            // on the extension of view files. We call a method for each engines.
-            foreach (['php', 'blade'] as $engine) {
-                $this->{'register'.ucfirst($engine).'Engine'}($resolver);
+                return $resolver;
             }
-
-            return $resolver;
-        });
+        );
     }
 
     /**
      * Register the PHP engine implementation.
      *
-     * @param  \Illuminate\View\Engines\EngineResolver  $resolver
+     * @param  \Illuminate\View\Engines\EngineResolver $resolver
      * @return void
      */
     public function registerPhpEngine($resolver)
     {
-        $resolver->register('php', function () {
-            return new PhpEngine;
-        });
+        $resolver->register(
+            'php', function () {
+                return new PhpEngine;
+            }
+        );
     }
 
     /**
      * Register the Blade engine implementation.
      *
-     * @param  \Illuminate\View\Engines\EngineResolver  $resolver
+     * @param  \Illuminate\View\Engines\EngineResolver $resolver
      * @return void
      */
     public function registerBladeEngine($resolver)
@@ -71,15 +75,19 @@
         // The Compiler engine requires an instance of the CompilerInterface, which in
         // this case will be the Blade compiler, so we'll first create the compiler
         // instance to pass into the engine so it can compile the views properly.
-        $app->singleton('blade.compiler', function ($app) {
-            $cache = $app['config']['view.compiled'];
+        $app->singleton(
+            'blade.compiler', function ($app) {
+                $cache = $app['config']['view.compiled'];
 
-            return new BladeCompiler($app['files'], $cache);
-        });
+                return new BladeCompiler($app['files'], $cache);
+            }
+        );
 
-        $resolver->register('blade', function () use ($app) {
-            return new CompilerEngine($app['blade.compiler']);
-        });
+        $resolver->register(
+            'blade', function () use ($app) {
+                return new CompilerEngine($app['blade.compiler']);
+            }
+        );
     }
 
     /**
@@ -89,11 +97,13 @@
      */
     public function registerViewFinder()
     {
-        $this->app->bind('view.finder', function ($app) {
-            $paths = $app['config']['view.paths'];
+        $this->app->bind(
+            'view.finder', function ($app) {
+                $paths = $app['config']['view.paths'];
 
-            return new FileViewFinder($app['files'], $paths);
-        });
+                return new FileViewFinder($app['files'], $paths);
+            }
+        );
     }
 
     /**
@@ -103,24 +113,26 @@
      */
     public function registerFactory()
     {
-        $this->app->singleton('view', function ($app) {
-            // Next we need to grab the engine resolver instance that will be used by the
-            // environment. The resolver will be used by an environment to get each of
-            // the various engine implementations such as plain PHP or Blade engine.
-            $resolver = $app['view.engine.resolver'];
+        $this->app->singleton(
+            'view', function ($app) {
+                // Next we need to grab the engine resolver instance that will be used by the
+                // environment. The resolver will be used by an environment to get each of
+                // the various engine implementations such as plain PHP or Blade engine.
+                $resolver = $app['view.engine.resolver'];
 
-            $finder = $app['view.finder'];
+                $finder = $app['view.finder'];
 
-            $env = new Factory($resolver, $finder, $app['events']);
+                $env = new Factory($resolver, $finder, $app['events']);
 
-            // We will also set the container instance on this view environment since the
-            // view composers may be classes registered in the container, which allows
-            // for great testable, flexible composers for the application developer.
-            $env->setContainer($app);
+                // We will also set the container instance on this view environment since the
+                // view composers may be classes registered in the container, which allows
+                // for great testable, flexible composers for the application developer.
+                $env->setContainer($app);
 
-            $env->share('app', $app);
+                $env->share('app', $app);
 
-            return $env;
-        });
+                return $env;
+            }
+        );
     }
 }

--- vendor/league/flysystem/src/Adapter/AbstractAdapter.php
+++ PHP_CodeSniffer
@@ -27,7 +27,7 @@
     {
         $is_empty = empty($prefix);
 
-        if ( ! $is_empty) {
+        if (! $is_empty) {
             $prefix = rtrim($prefix, $this->pathSeparator) . $this->pathSeparator;
         }
 

--- vendor/league/flysystem/src/Adapter/AbstractFtpAdapter.php
+++ PHP_CodeSniffer
@@ -105,7 +105,7 @@
     public function setConfig(array $config)
     {
         foreach ($this->configurable as $setting) {
-            if ( ! isset($config[$setting])) {
+            if (! isset($config[$setting])) {
                 continue;
             }
 
@@ -522,7 +522,7 @@
     public function removeDotDirectories(array $list)
     {
         $filter = function ($line) {
-            if ( ! empty($line) && ! preg_match('#.* \.(\.)?$|^total#', $line)) {
+            if (! empty($line) && ! preg_match('#.* \.(\.)?$|^total#', $line)) {
                 return true;
             }
 
@@ -563,7 +563,7 @@
      */
     public function ensureDirectory($dirname)
     {
-        if ( ! empty($dirname) && ! $this->has($dirname)) {
+        if (! empty($dirname) && ! $this->has($dirname)) {
             $this->createDir($dirname, new Config());
         }
     }
@@ -573,7 +573,7 @@
      */
     public function getConnection()
     {
-        if ( ! $this->isConnected()) {
+        if (! $this->isConnected()) {
             $this->disconnect();
             $this->connect();
         }

--- vendor/league/flysystem/src/Adapter/Ftp.php
+++ PHP_CodeSniffer
@@ -114,7 +114,7 @@
             $this->connection = ftp_connect($this->getHost(), $this->getPort(), $this->getTimeout());
         }
 
-        if ( ! $this->connection) {
+        if (! $this->connection) {
             throw new RuntimeException('Could not connect to host: ' . $this->getHost() . ', port:' . $this->getPort());
         }
 
@@ -134,7 +134,7 @@
             ftp_set_option($this->connection, FTP_USEPASVADDRESS, ! $this->ignorePassiveAddress);
         }
 
-        if ( ! ftp_pasv($this->connection, $this->passive)) {
+        if (! ftp_pasv($this->connection, $this->passive)) {
             throw new RuntimeException(
                 'Could not set passive mode for connection: ' . $this->getHost() . '::' . $this->getPort()
             );
@@ -174,7 +174,7 @@
         $isLoggedIn = ftp_login($this->connection, $this->getUsername(), $this->getPassword());
         restore_error_handler();
 
-        if ( ! $isLoggedIn) {
+        if (! $isLoggedIn) {
             $this->disconnect();
             throw new RuntimeException(
                 'Could not login with connection: ' . $this->getHost() . '::' . $this->getPort(
@@ -223,7 +223,7 @@
     {
         $this->ensureDirectory(Util::dirname($path));
 
-        if ( ! ftp_fput($this->getConnection(), $path, $resource, $this->transferMode)) {
+        if (! ftp_fput($this->getConnection(), $path, $resource, $this->transferMode)) {
             return false;
         }
 
@@ -276,10 +276,10 @@
 
         foreach ($contents as $object) {
             if ($object['type'] === 'file') {
-                if ( ! ftp_delete($connection, $object['path'])) {
+                if (! ftp_delete($connection, $object['path'])) {
                     return false;
                 }
-            } elseif ( ! ftp_rmdir($connection, $object['path'])) {
+            } elseif (! ftp_rmdir($connection, $object['path'])) {
                 return false;
             }
         }
@@ -375,7 +375,7 @@
      */
     public function getMimetype($path)
     {
-        if ( ! $metadata = $this->getMetadata($path)) {
+        if (! $metadata = $this->getMetadata($path)) {
             return false;
         }
 
@@ -399,7 +399,7 @@
      */
     public function read($path)
     {
-        if ( ! $object = $this->readStream($path)) {
+        if (! $object = $this->readStream($path)) {
             return false;
         }
 
@@ -419,7 +419,7 @@
         $result = ftp_fget($this->getConnection(), $stream, $path, $this->transferMode);
         rewind($stream);
 
-        if ( ! $result) {
+        if (! $result) {
             fclose($stream);
 
             return false;
@@ -435,7 +435,7 @@
     {
         $mode = $visibility === AdapterInterface::VISIBILITY_PUBLIC ? $this->getPermPublic() : $this->getPermPrivate();
 
-        if ( ! ftp_chmod($this->getConnection(), $mode, $path)) {
+        if (! ftp_chmod($this->getConnection(), $mode, $path)) {
             return false;
         }
 
@@ -473,7 +473,8 @@
 
         foreach ($listing as $directory) {
             $output[] = $directory;
-            if ($directory['type'] !== 'dir') continue;
+            if ($directory['type'] !== 'dir') { continue; 
+            }
 
             $output = array_merge($output, $this->listDirectoryContentsRecursive($directory['path']));
         }

--- vendor/league/flysystem/src/Adapter/Local.php
+++ PHP_CodeSniffer
@@ -75,7 +75,7 @@
         $this->permissionMap = array_replace_recursive(static::$permissions, $permissions);
         $realRoot = $this->ensureDirectory($root);
 
-        if ( ! is_dir($realRoot) || ! is_readable($realRoot)) {
+        if (! is_dir($realRoot) || ! is_readable($realRoot)) {
             throw new LogicException('The root path ' . $root . ' is not readable.');
         }
 
@@ -95,12 +95,12 @@
      */
     protected function ensureDirectory($root)
     {
-        if ( ! is_dir($root)) {
+        if (! is_dir($root)) {
             $umask = umask(0);
             @mkdir($root, $this->permissionMap['dir']['public'], true);
             umask($umask);
 
-            if ( ! is_dir($root)) {
+            if (! is_dir($root)) {
                 throw new Exception(sprintf('Impossible to create the root directory "%s".', $root));
             }
         }
@@ -150,13 +150,13 @@
         $this->ensureDirectory(dirname($location));
         $stream = fopen($location, 'w+b');
 
-        if ( ! $stream) {
+        if (! $stream) {
             return false;
         }
 
         stream_copy_to_stream($resource, $stream);
 
-        if ( ! fclose($stream)) {
+        if (! fclose($stream)) {
             return false;
         }
 
@@ -260,7 +260,7 @@
         $result = [];
         $location = $this->applyPathPrefix($directory) . $this->pathSeparator;
 
-        if ( ! is_dir($location)) {
+        if (! is_dir($location)) {
             return [];
         }
 
@@ -355,7 +355,7 @@
         $umask = umask(0);
         $visibility = $config->get('visibility', 'public');
 
-        if ( ! is_dir($location) && ! mkdir($location, $this->permissionMap['dir'][$visibility], true)) {
+        if (! is_dir($location) && ! mkdir($location, $this->permissionMap['dir'][$visibility], true)) {
             $return = false;
         } else {
             $return = ['path' => $dirname, 'type' => 'dir'];
@@ -373,13 +373,15 @@
     {
         $location = $this->applyPathPrefix($dirname);
 
-        if ( ! is_dir($location)) {
+        if (! is_dir($location)) {
             return false;
         }
 
         $contents = $this->getRecursiveDirectoryIterator($location, RecursiveIteratorIterator::CHILD_FIRST);
 
-        /** @var SplFileInfo $file */
+        /**
+ * @var SplFileInfo $file 
+*/
         foreach ($contents as $file) {
             $this->guardAgainstUnreadableFileInfo($file);
             $this->deleteFileInfoObject($file);
@@ -394,14 +396,14 @@
     protected function deleteFileInfoObject(SplFileInfo $file)
     {
         switch ($file->getType()) {
-            case 'dir':
-                rmdir($file->getRealPath());
-                break;
-            case 'link':
-                unlink($file->getPathname());
-                break;
-            default:
-                unlink($file->getRealPath());
+        case 'dir':
+            rmdir($file->getRealPath());
+            break;
+        case 'link':
+            unlink($file->getPathname());
+            break;
+        default:
+            unlink($file->getRealPath());
         }
     }
 
@@ -414,7 +416,7 @@
      */
     protected function normalizeFileInfo(SplFileInfo $file)
     {
-        if ( ! $file->isLink()) {
+        if (! $file->isLink()) {
             return $this->mapFileInfo($file);
         }
 
@@ -502,7 +504,7 @@
      */
     protected function guardAgainstUnreadableFileInfo(SplFileInfo $file)
     {
-        if ( ! $file->isReadable()) {
+        if (! $file->isReadable()) {
             throw UnreadableFileException::forFileInfo($file);
         }
     }

--- vendor/league/flysystem/src/Adapter/Polyfill/StreamedReadingTrait.php
+++ PHP_CodeSniffer
@@ -18,7 +18,7 @@
      */
     public function readStream($path)
     {
-        if ( ! $data = $this->read($path)) {
+        if (! $data = $this->read($path)) {
             return false;
         }
 

--- vendor/league/flysystem/src/Config.php
+++ PHP_CodeSniffer
@@ -34,7 +34,7 @@
      */
     public function get($key, $default = null)
     {
-        if ( ! array_key_exists($key, $this->settings)) {
+        if (! array_key_exists($key, $this->settings)) {
             return $this->getDefault($key, $default);
         }
 
@@ -63,7 +63,7 @@
      */
     protected function getDefault($key, $default)
     {
-        if ( ! $this->fallback) {
+        if (! $this->fallback) {
             return $default;
         }
 

--- vendor/league/flysystem/src/Filesystem.php
+++ PHP_CodeSniffer
@@ -73,7 +73,7 @@
      */
     public function writeStream($path, $resource, array $config = [])
     {
-        if ( ! is_resource($resource)) {
+        if (! is_resource($resource)) {
             throw new InvalidArgumentException(__METHOD__ . ' expects argument #2 to be a valid resource.');
         }
 
@@ -106,7 +106,7 @@
      */
     public function putStream($path, $resource, array $config = [])
     {
-        if ( ! is_resource($resource)) {
+        if (! is_resource($resource)) {
             throw new InvalidArgumentException(__METHOD__ . ' expects argument #2 to be a valid resource.');
         }
 
@@ -157,7 +157,7 @@
      */
     public function updateStream($path, $resource, array $config = [])
     {
-        if ( ! is_resource($resource)) {
+        if (! is_resource($resource)) {
             throw new InvalidArgumentException(__METHOD__ . ' expects argument #2 to be a valid resource.');
         }
 
@@ -177,7 +177,7 @@
         $path = Util::normalizePath($path);
         $this->assertPresent($path);
 
-        if ( ! ($object = $this->getAdapter()->read($path))) {
+        if (! ($object = $this->getAdapter()->read($path))) {
             return false;
         }
 
@@ -192,7 +192,7 @@
         $path = Util::normalizePath($path);
         $this->assertPresent($path);
 
-        if ( ! $object = $this->getAdapter()->readStream($path)) {
+        if (! $object = $this->getAdapter()->readStream($path)) {
             return false;
         }
 
@@ -280,7 +280,7 @@
         $path = Util::normalizePath($path);
         $this->assertPresent($path);
 
-        if ( ! $object = $this->getAdapter()->getMimetype($path)) {
+        if (! $object = $this->getAdapter()->getMimetype($path)) {
             return false;
         }
 
@@ -295,7 +295,7 @@
         $path = Util::normalizePath($path);
         $this->assertPresent($path);
 
-        if ( ! $object = $this->getAdapter()->getTimestamp($path)) {
+        if (! $object = $this->getAdapter()->getTimestamp($path)) {
             return false;
         }
 
@@ -359,7 +359,7 @@
     {
         $path = Util::normalizePath($path);
 
-        if ( ! $handler) {
+        if (! $handler) {
             $metadata = $this->getMetadata($path);
             $handler = $metadata['type'] === 'file' ? new File($this, $path) : new Directory($this, $path);
         }
@@ -379,7 +379,7 @@
      */
     public function assertPresent($path)
     {
-        if ( ! $this->has($path)) {
+        if (! $this->has($path)) {
             throw new FileNotFoundException($path);
         }
     }

--- vendor/league/flysystem/src/MountManager.php
+++ PHP_CodeSniffer
@@ -88,7 +88,7 @@
      */
     public function mountFilesystem($prefix, FilesystemInterface $filesystem)
     {
-        if ( ! is_string($prefix)) {
+        if (! is_string($prefix)) {
             throw new InvalidArgumentException(__METHOD__ . ' expects argument #1 to be a string.');
         }
 
@@ -108,7 +108,7 @@
      */
     public function getFilesystem($prefix)
     {
-        if ( ! isset($this->filesystems[$prefix])) {
+        if (! isset($this->filesystems[$prefix])) {
             throw new LogicException('No filesystem mounted with prefix ' . $prefix);
         }
 
@@ -130,11 +130,11 @@
 
         $path = array_shift($arguments);
 
-        if ( ! is_string($path)) {
+        if (! is_string($path)) {
             throw new InvalidArgumentException('First argument should be a string');
         }
 
-        if ( ! preg_match('#^.+\:\/\/.*#', $path)) {
+        if (! preg_match('#^.+\:\/\/.*#', $path)) {
             throw new InvalidArgumentException('No prefix detected in path: ' . $path);
         }
 

--- vendor/league/flysystem/src/Plugin/GetWithMetadata.php
+++ PHP_CodeSniffer
@@ -30,14 +30,14 @@
     {
         $object = $this->filesystem->getMetadata($path);
 
-        if ( ! $object) {
+        if (! $object) {
             return false;
         }
 
         $keys = array_diff($metadata, array_keys($object));
 
         foreach ($keys as $key) {
-            if ( ! method_exists($this->filesystem, $method = 'get' . ucfirst($key))) {
+            if (! method_exists($this->filesystem, $method = 'get' . ucfirst($key))) {
                 throw new InvalidArgumentException('Could not fetch metadata: ' . $key);
             }
 

--- vendor/league/flysystem/src/Plugin/ListWith.php
+++ PHP_CodeSniffer
@@ -41,7 +41,7 @@
      * Get a meta-data value by key name.
      *
      * @param array $object
-     * @param       $key
+     * @param $key
      *
      * @return array
      */
@@ -49,7 +49,7 @@
     {
         $method = 'get' . ucfirst($key);
 
-        if ( ! method_exists($this->filesystem, $method)) {
+        if (! method_exists($this->filesystem, $method)) {
             throw new \InvalidArgumentException('Could not get meta-data for key: ' . $key);
         }
 

--- vendor/league/flysystem/src/Plugin/PluggableTrait.php
+++ PHP_CodeSniffer
@@ -39,11 +39,11 @@
      */
     protected function findPlugin($method)
     {
-        if ( ! isset($this->plugins[$method])) {
+        if (! isset($this->plugins[$method])) {
             throw new PluginNotFoundException('Plugin not found for method: ' . $method);
         }
 
-        if ( ! method_exists($this->plugins[$method], 'handle')) {
+        if (! method_exists($this->plugins[$method], 'handle')) {
             throw new LogicException(get_class($this->plugins[$method]) . ' does not have a handle method.');
         }
 

--- vendor/league/flysystem/src/Util/MimeType.php
+++ PHP_CodeSniffer
@@ -18,7 +18,7 @@
      */
     public static function detectByContent($content)
     {
-        if ( ! class_exists('Finfo') || ! is_string($content)) {
+        if (! class_exists('Finfo') || ! is_string($content)) {
             return;
         }
 

--- vendor/league/flysystem/src/Util.php
+++ PHP_CodeSniffer
@@ -60,7 +60,7 @@
         $result = [];
 
         foreach ($map as $from => $to) {
-            if ( ! isset($object[$from])) {
+            if (! isset($object[$from])) {
                 continue;
             }
 
@@ -147,7 +147,7 @@
     /**
      * Guess MIME Type based on the path of the file and it's content.
      *
-     * @param string $path
+     * @param string          $path
      * @param string|resource $content
      *
      * @return string|null MIME Type or NULL if no extension detected
@@ -156,7 +156,7 @@
     {
         $mimeType = MimeType::detectByContent($content);
 
-        if ( ! (empty($mimeType) || in_array($mimeType, ['application/x-empty', 'text/plain', 'text/x-asm']))) {
+        if (! (empty($mimeType) || in_array($mimeType, ['application/x-empty', 'text/plain', 'text/x-asm']))) {
             return $mimeType;
         }
 
@@ -199,7 +199,7 @@
      *
      * @return Config config instance
      *
-     * @throw  LogicException
+     * @throw LogicException
      */
     public static function ensureConfig($config)
     {

--- vendor/mockery/mockery/library/Mockery/Adapter/Phpunit/TestListener.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Adapter\Phpunit;
@@ -27,8 +27,8 @@
      * After each test, perform Mockery verification tasks and cleanup the
      * statically stored Mockery container for the next test.
      *
-     * @param  PHPUnit_Framework_Test $test
-     * @param  float                  $time
+     * @param PHPUnit_Framework_Test $test
+     * @param float                  $time
      */
     public function endTest(\PHPUnit_Framework_Test $test, $time)
     {
@@ -52,9 +52,10 @@
     public function startTestSuite(\PHPUnit_Framework_TestSuite $suite)
     {
         if (class_exists('\\PHP_CodeCoverage_Filter')
-        && method_exists('\\PHP_CodeCoverage_Filter', 'getInstance')) {
+            && method_exists('\\PHP_CodeCoverage_Filter', 'getInstance')
+        ) {
             \PHP_CodeCoverage_Filter::getInstance()->addDirectoryToBlacklist(
-                 __DIR__.'/../../../Mockery/', '.php', '', 'PHPUNIT'
+                __DIR__.'/../../../Mockery/', '.php', '', 'PHPUNIT'
             );
 
             \PHP_CodeCoverage_Filter::getInstance()->addFileToBlacklist(__DIR__.'/../../../Mockery.php', 'PHPUNIT');

--- vendor/mockery/mockery/library/Mockery/CompositeExpectation.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery;
@@ -33,7 +33,7 @@
     /**
      * Add an expectation to the composite
      *
-     * @param \Mockery\Expectation|\Mockery\CompositeExpectation $expectation
+     * @param  \Mockery\Expectation|\Mockery\CompositeExpectation $expectation
      * @return void
      */
     public function add($expectation)
@@ -52,8 +52,8 @@
     /**
      * Intercept any expectation calls and direct against all expectations
      *
-     * @param string $method
-     * @param array $args
+     * @param  string $method
+     * @param  array  $args
      * @return self
      */
     public function __call($method, array $args)
@@ -102,7 +102,7 @@
      * Starts a new expectation addition on the first mock which is the primary
      * target outside of a demeter chain
      *
-     * @param mixed ...
+     * @param  mixed ...
      * @return \Mockery\Expectation
      */
     public function shouldReceive()

--- vendor/mockery/mockery/library/Mockery/Configuration.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery;
@@ -94,7 +94,7 @@
      *
      * @param string $class
      * @param string $method
-     * @param array $map
+     * @param array  $map
      */
     public function setInternalClassMethodParamMap($class, $method, array $map)
     {

--- vendor/mockery/mockery/library/Mockery/Container.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery;
@@ -152,8 +152,10 @@
             } elseif (is_string($arg) && substr($arg, strlen($arg)-1, 1) == ']') {
                 $parts = explode('[', $arg);
                 if (!class_exists($parts[0], true) && !interface_exists($parts[0], true)) {
-                    throw new \Mockery\Exception('Can only create a partial mock from'
-                    . ' an existing class or interface');
+                    throw new \Mockery\Exception(
+                        'Can only create a partial mock from'
+                        . ' an existing class or interface'
+                    );
                 }
                 $class = $parts[0];
                 $parts[1] = str_replace(' ', '', $parts[1]);
@@ -326,7 +328,7 @@
      * Set ordering for a group
      *
      * @param mixed $group
-     * @param int $order
+     * @param int   $order
      */
     public function mockery_setGroup($group, $order)
     {
@@ -346,7 +348,7 @@
     /**
      * Set current ordered number
      *
-     * @param int $order
+     * @param  int $order
      * @return int The current order number that was set
      */
     public function mockery_setCurrentOrder($order)
@@ -368,8 +370,8 @@
     /**
      * Validate the current mock's ordering
      *
-     * @param string $method
-     * @param int $order
+     * @param  string $method
+     * @param  int    $order
      * @throws \Mockery\Exception
      * @return void
      */
@@ -406,7 +408,7 @@
     /**
      * Store a mock and set its container reference
      *
-     * @param \Mockery\Mock
+     * @param  \Mockery\Mock
      * @return \Mockery\Mock
      */
     public function rememberMock(\Mockery\MockInterface $mock)
@@ -465,9 +467,11 @@
             $internalMockName = $mockName . '_Internal';
 
             if (!class_exists($internalMockName)) {
-                eval("class $internalMockName extends $mockName {" .
+                eval(
+                    "class $internalMockName extends $mockName {" .
                         'public function __construct() {}' .
-                    '}');
+                    '}'
+                );
             }
 
             $instance = new $internalMockName();
@@ -490,9 +494,11 @@
             );
         }
         if (false !== strpos($fqcn, "\\")) {
-            $parts = array_filter(explode("\\", $fqcn), function ($part) {
-                return $part !== "";
-            });
+            $parts = array_filter(
+                explode("\\", $fqcn), function ($part) {
+                    return $part !== "";
+                }
+            );
             $cl = array_pop($parts);
             $ns = implode("\\", $parts);
             eval(" namespace $ns { class $cl {} }");

--- vendor/mockery/mockery/library/Mockery/CountValidator/AtLeast.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\CountValidator;
@@ -28,7 +28,7 @@
     /**
      * Checks if the validator can accept an additional nth call
      *
-     * @param int $n
+     * @param  int $n
      * @return bool
      */
     public function isEligible($n)
@@ -39,7 +39,7 @@
     /**
      * Validate the call count against this validator
      *
-     * @param int $n
+     * @param  int $n
      * @return bool
      */
     public function validate($n)

--- vendor/mockery/mockery/library/Mockery/CountValidator/AtMost.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\CountValidator;
@@ -28,7 +28,7 @@
     /**
      * Validate the call count against this validator
      *
-     * @param int $n
+     * @param  int $n
      * @return bool
      */
     public function validate($n)

--- vendor/mockery/mockery/library/Mockery/CountValidator/CountValidatorAbstract.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\CountValidator;
@@ -41,7 +41,7 @@
      * Set Expectation object and upper call limit
      *
      * @param \Mockery\Expectation $expectation
-     * @param int $limit
+     * @param int                  $limit
      */
     public function __construct(\Mockery\Expectation $expectation, $limit)
     {
@@ -52,7 +52,7 @@
     /**
      * Checks if the validator can accept an additional nth call
      *
-     * @param int $n
+     * @param  int $n
      * @return bool
      */
     public function isEligible($n)
@@ -63,7 +63,7 @@
     /**
      * Validate the call count against this validator
      *
-     * @param int $n
+     * @param  int $n
      * @return bool
      */
     abstract public function validate($n);

--- vendor/mockery/mockery/library/Mockery/CountValidator/Exact.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\CountValidator;
@@ -28,7 +28,7 @@
     /**
      * Validate the call count against this validator
      *
-     * @param int $n
+     * @param  int $n
      * @return bool
      */
     public function validate($n)

--- vendor/mockery/mockery/library/Mockery/CountValidator/Exception.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\CountValidator;

--- vendor/mockery/mockery/library/Mockery/Exception/InvalidCountException.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Exception;

--- vendor/mockery/mockery/library/Mockery/Exception/InvalidOrderException.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Exception;

--- vendor/mockery/mockery/library/Mockery/Exception/NoMatchingExpectationException.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Exception;

--- vendor/mockery/mockery/library/Mockery/Exception/RuntimeException.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Exception;

--- vendor/mockery/mockery/library/Mockery/Exception.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery;

--- vendor/mockery/mockery/library/Mockery/Expectation.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery;
@@ -142,7 +142,7 @@
      * Constructor
      *
      * @param \Mockery\MockInterface $mock
-     * @param string $name
+     * @param string                 $name
      */
     public function __construct(\Mockery\MockInterface $mock, $name)
     {
@@ -153,8 +153,8 @@
     /**
      * Return a string with the method name and arguments formatted
      *
-     * @param string $name Name of the expected method
-     * @param array $args List of arguments to the method
+     * @param  string $name Name of the expected method
+     * @param  array  $args List of arguments to the method
      * @return string
      */
     public function __toString()
@@ -166,7 +166,7 @@
      * Verify the current call, i.e. that the given arguments match those
      * of this expectation
      *
-     * @param array $args
+     * @param  array $args
      * @return mixed
      */
     public function verifyCall(array $args)
@@ -187,7 +187,7 @@
     /**
      * Sets public properties with queued values to the mock object
      *
-     * @param array $args
+     * @param  array $args
      * @return mixed
      */
     protected function _setValues()
@@ -203,7 +203,7 @@
     /**
      * Fetch the return value for the matching args
      *
-     * @param array $args
+     * @param  array $args
      * @return mixed
      */
     protected function _getReturnValue(array $args)
@@ -222,16 +222,23 @@
         if ($rm && version_compare(PHP_VERSION, '7.0.0-dev') >= 0 && $rm->hasReturnType()) {
             $type = (string) $rm->getReturnType();
             switch ($type) {
-                case '':       return;
-                case 'string': return '';
-                case 'int':    return 0;
-                case 'float':  return 0.0;
-                case 'bool':   return false;
-                case 'array':  return array();
-
-                case 'callable':
-                case 'Closure':
-                    return function () {};
+            case '':       
+                return;
+            case 'string': 
+                return '';
+            case 'int':    
+                return 0;
+            case 'float':  
+                return 0.0;
+            case 'bool':   
+                return false;
+            case 'array':  
+                return array();
+
+            case 'callable':
+            case 'Closure':
+                return function () {
+                };
 
                 case 'Traversable':
                 case 'Generator':
@@ -301,7 +308,7 @@
     /**
      * Check if passed arguments match an argument expectation
      *
-     * @param array $args
+     * @param  array $args
      * @return bool
      */
     public function matchArgs(array $args)
@@ -326,7 +333,7 @@
     /**
      * Check if passed argument matches an argument expectation
      *
-     * @param array $args
+     * @param  array $args
      * @return bool
      */
     protected function _matchArg($expected, &$actual)
@@ -338,8 +345,11 @@
             return true;
         }
         if (is_string($expected) && !is_array($actual) && !is_object($actual)) {
-            # push/pop an error handler here to to make sure no error/exception thrown if $expected is not a regex
-            set_error_handler(function () {});
+            // push/pop an error handler here to to make sure no error/exception thrown if $expected is not a regex
+            set_error_handler(
+                function () {
+                }
+            );
             $result = preg_match($expected, (string) $actual);
             restore_error_handler();
 
@@ -365,7 +375,7 @@
     /**
      * Expected argument setter for the expectation
      *
-     * @param mixed ...
+     * @param  mixed ...
      * @return self
      */
     public function with()
@@ -376,7 +386,7 @@
     /**
      * Expected arguments for the expectation passed as an array
      *
-     * @param array $args
+     * @param  array $args
      * @return self
      */
     public function withArgs(array $args)
@@ -415,7 +425,7 @@
     /**
      * Set a return value, or sequential queue of return values
      *
-     * @param mixed ...
+     * @param  mixed ...
      * @return self
      */
     public function andReturn()
@@ -437,7 +447,7 @@
     /**
      * Set a sequential queue of return values with an array
      *
-     * @param array $values
+     * @param  array $values
      * @return self
      */
     public function andReturnValues(array $values)
@@ -451,7 +461,7 @@
      * values. The arguments passed to the expected method are passed to the
      * closures as parameters.
      *
-     * @param callable ...
+     * @param  callable ...
      * @return self
      */
     public function andReturnUsing()
@@ -484,10 +494,10 @@
     /**
      * Set Exception class and arguments to that class to be thrown
      *
-     * @param string $exception
-     * @param string $message
-     * @param int $code
-     * @param Exception $previous
+     * @param  string    $exception
+     * @param  string    $message
+     * @param  int       $code
+     * @param  Exception $previous
      * @return self
      */
     public function andThrow($exception, $message = '', $code = 0, \Exception $previous = null)
@@ -504,7 +514,7 @@
     /**
      * Set Exception classes to be thrown
      *
-     * @param array $exceptions
+     * @param  array $exceptions
      * @return self
      */
     public function andThrowExceptions(array $exceptions)
@@ -521,8 +531,8 @@
     /**
      * Register values to be set to a public property each time this expectation occurs
      *
-     * @param string $name
-     * @param mixed $value
+     * @param  string $name
+     * @param  mixed  $value
      * @return self
      */
     public function andSet($name, $value)
@@ -537,8 +547,8 @@
      * Alias to andSet(). Allows the natural English construct
      * - set('foo', 'bar')->andReturn('bar')
      *
-     * @param string $name
-     * @param mixed $value
+     * @param  string $name
+     * @param  mixed  $value
      * @return self
      */
     public function set($name, $value)
@@ -559,7 +569,7 @@
     /**
      * Indicates the number of times this expectation should occur
      *
-     * @param int $limit
+     * @param  int $limit
      * @return self
      */
     public function times($limit = null)
@@ -638,7 +648,7 @@
     /**
      * Indicates that this expectation must be called in a specific given order
      *
-     * @param string $group Name of the ordered group
+     * @param  string $group Name of the ordered group
      * @return self
      */
     public function ordered($group = null)
@@ -666,8 +676,8 @@
     /**
      * Setup the ordering tracking on the mock or mock container
      *
-     * @param string $group
-     * @param object $ordering
+     * @param  string $group
+     * @param  object $ordering
      * @return int
      */
     protected function _defineOrdered($group, $ordering)
@@ -738,7 +748,6 @@
 
     /**
      * Cloning logic
-     *
      */
     public function __clone()
     {

--- vendor/mockery/mockery/library/Mockery/ExpectationDirector.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery;
@@ -61,7 +61,7 @@
     /**
      * Constructor
      *
-     * @param string $name
+     * @param string                 $name
      * @param \Mockery\MockInterface $mock
      */
     public function __construct($name, \Mockery\MockInterface $mock)
@@ -83,7 +83,7 @@
     /**
      * Handle a method call being directed by this instance
      *
-     * @param array $args
+     * @param  array $args
      * @return mixed
      */
     public function call(array $args)
@@ -129,7 +129,7 @@
     /**
      * Attempt to locate an expectation matching the provided args
      *
-     * @param array $args
+     * @param  array $args
      * @return mixed
      */
     public function findExpectation(array $args)
@@ -163,8 +163,8 @@
     /**
      * Search current array of expectations for a match
      *
-     * @param array $expectations
-     * @param array $args
+     * @param  array $expectations
+     * @param  array $args
      * @return mixed
      */
     protected function _findExpectationIn(array $expectations, array $args)

--- vendor/mockery/mockery/library/Mockery/ExpectationInterface.php
+++ PHP_CodeSniffer
@@ -13,10 +13,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 namespace Mockery;
 

--- vendor/mockery/mockery/library/Mockery/Generator/DefinedTargetClass.php
+++ PHP_CodeSniffer
@@ -33,17 +33,21 @@
 
     public function getMethods()
     {
-        return array_map(function ($method) {
-            return new Method($method);
-        }, $this->rfc->getMethods());
+        return array_map(
+            function ($method) {
+                return new Method($method);
+            }, $this->rfc->getMethods()
+        );
     }
 
     public function getInterfaces()
     {
         $class = __CLASS__;
-        return array_map(function ($interface) use ($class) {
-            return new $class($interface);
-        }, $this->rfc->getInterfaces());
+        return array_map(
+            function ($interface) use ($class) {
+                return new $class($interface);
+            }, $this->rfc->getInterfaces()
+        );
     }
 
     public function __toString()

--- vendor/mockery/mockery/library/Mockery/Generator/Generator.php
+++ PHP_CodeSniffer
@@ -4,6 +4,8 @@
 
 interface Generator
 {
-    /** @returns MockDefinition */
+    /**
+ * @returns MockDefinition 
+*/
     public function generate(MockConfiguration $config);
 }

--- vendor/mockery/mockery/library/Mockery/Generator/Method.php
+++ PHP_CodeSniffer
@@ -18,9 +18,11 @@
 
     public function getParameters()
     {
-        return array_map(function ($parameter) {
-            return new Parameter($parameter);
-        }, $this->method->getParameters());
+        return array_map(
+            function ($parameter) {
+                return new Parameter($parameter);
+            }, $this->method->getParameters()
+        );
     }
 
     public function getReturnType()

--- vendor/mockery/mockery/library/Mockery/Generator/MockConfiguration.php
+++ PHP_CodeSniffer
@@ -114,9 +114,11 @@
          */
         if (count($this->getWhiteListedMethods())) {
             $whitelist = array_map('strtolower', $this->getWhiteListedMethods());
-            $methods = array_filter($methods, function ($method) use ($whitelist) {
-                return $method->isAbstract() || in_array(strtolower($method->getName()), $whitelist);
-            });
+            $methods = array_filter(
+                $methods, function ($method) use ($whitelist) {
+                    return $method->isAbstract() || in_array(strtolower($method->getName()), $whitelist);
+                }
+            );
 
             return $methods;
         }
@@ -126,9 +128,11 @@
          */
         if (count($this->getBlackListedMethods())) {
             $blacklist = array_map('strtolower', $this->getBlackListedMethods());
-            $methods = array_filter($methods, function ($method) use ($blacklist) {
-                return !in_array(strtolower($method->getName()), $blacklist);
-            });
+            $methods = array_filter(
+                $methods, function ($method) use ($blacklist) {
+                    return !in_array(strtolower($method->getName()), $blacklist);
+                }
+            );
         }
 
         /**
@@ -139,10 +143,13 @@
          */
         if ($this->getTargetClass()
             && $this->getTargetClass()->implementsInterface("Serializable")
-            && $this->getTargetClass()->hasInternalAncestor()) {
-            $methods = array_filter($methods, function ($method) {
-                return $method->getName() !== "unserialize";
-            });
+            && $this->getTargetClass()->hasInternalAncestor()
+        ) {
+            $methods = array_filter(
+                $methods, function ($method) {
+                    return $method->getName() !== "unserialize";
+                }
+            );
         }
 
         return array_values($methods);
@@ -360,10 +367,12 @@
         }
 
         if ($this->getTargetInterfaces()) {
-            $name .= array_reduce($this->getTargetInterfaces(), function ($tmpname, $i) {
-                $tmpname .= '_' . str_replace("\\", "_", $i->getName());
-                return $tmpname;
-            }, '');
+            $name .= array_reduce(
+                $this->getTargetInterfaces(), function ($tmpname, $i) {
+                    $tmpname .= '_' . str_replace("\\", "_", $i->getName());
+                    return $tmpname;
+                }, ''
+            );
         }
 
         return $name;
@@ -430,14 +439,16 @@
         }
 
         $names = array();
-        $methods = array_filter($methods, function ($method) use (&$names) {
-            if (in_array($method->getName(), $names)) {
-                return false;
-            }
+        $methods = array_filter(
+            $methods, function ($method) use (&$names) {
+                if (in_array($method->getName(), $names)) {
+                    return false;
+                }
 
-            $names[] = $method->getName();
-            return true;
-        });
+                $names[] = $method->getName();
+                return true;
+            }
+        );
 
         return $this->allMethods = $methods;
     }

--- vendor/mockery/mockery/library/Mockery/Generator/StringManipulation/Pass/ClassPass.php
+++ PHP_CodeSniffer
@@ -35,7 +35,7 @@
              */
             $tmpfname = tempnam(sys_get_temp_dir(), "Mockery");
             file_put_contents($tmpfname, $targetCode);
-            require $tmpfname;
+            include $tmpfname;
         }
 
         $code = str_replace(

--- vendor/mockery/mockery/library/Mockery/Generator/StringManipulation/Pass/InterfacePass.php
+++ PHP_CodeSniffer
@@ -8,9 +8,11 @@
 {
     public function apply($code, MockConfiguration $config)
     {
-        $interfaces = array_reduce((array) $config->getTargetInterfaces(), function ($code, $i) {
-            return $code . ", \\" . $i->getName();
-        }, "");
+        $interfaces = array_reduce(
+            (array) $config->getTargetInterfaces(), function ($code, $i) {
+                return $code . ", \\" . $i->getName();
+            }, ""
+        );
 
         $code = str_replace(
             "implements MockInterface",

--- vendor/mockery/mockery/library/Mockery/Generator/TargetClass.php
+++ PHP_CodeSniffer
@@ -4,30 +4,48 @@
 
 interface TargetClass
 {
-    /** @return string */
+    /**
+ * @return string 
+*/
     public function getName();
 
-    /** @return bool */
+    /**
+ * @return bool 
+*/
     public function isAbstract();
 
-    /** @return bool */
+    /**
+ * @return bool 
+*/
     public function isFinal();
 
-    /** @return Method[] */
+    /**
+ * @return Method[] 
+*/
     public function getMethods();
 
-    /** @return string */
+    /**
+ * @return string 
+*/
     public function getNamespaceName();
 
-    /** @return bool */
+    /**
+ * @return bool 
+*/
     public function inNamespace();
 
-    /** @return string */
+    /**
+ * @return string 
+*/
     public function getShortName();
 
-    /** @return bool */
+    /**
+ * @return bool 
+*/
     public function implementsInterface($interface);
 
-    /** @return bool */
+    /**
+ * @return bool 
+*/
     public function hasInternalAncestor();
 }

--- vendor/mockery/mockery/library/Mockery/Instantiator.php
+++ PHP_CodeSniffer
@@ -122,16 +122,18 @@
      */
     private function attemptInstantiationViaUnSerialization(ReflectionClass $reflectionClass, $serializedString)
     {
-        set_error_handler(function ($code, $message, $file, $line) use ($reflectionClass, & $error) {
-            $msg = sprintf(
-                'Could not produce an instance of "%s" via un-serialization, since an error was triggered in file "%s" at line "%d"',
-                $reflectionClass->getName(),
-                $file,
-                $line
-            );
+        set_error_handler(
+            function ($code, $message, $file, $line) use ($reflectionClass, & $error) {
+                $msg = sprintf(
+                    'Could not produce an instance of "%s" via un-serialization, since an error was triggered in file "%s" at line "%d"',
+                    $reflectionClass->getName(),
+                    $file,
+                    $line
+                );
 
-            $error = new UnexpectedValueException($msg, 0, new \Exception($message, $code));
-        });
+                $error = new UnexpectedValueException($msg, 0, new \Exception($message, $code));
+            }
+        );
 
         try {
             unserialize($serializedString);

--- vendor/mockery/mockery/library/Mockery/Loader/RequireLoader.php
+++ PHP_CodeSniffer
@@ -23,6 +23,6 @@
         $tmpfname = tempnam($this->path, "Mockery");
         file_put_contents($tmpfname, $definition->getCode());
 
-        require $tmpfname;
+        include $tmpfname;
     }
 }

--- vendor/mockery/mockery/library/Mockery/Loader.php
+++ PHP_CodeSniffer
@@ -119,17 +119,18 @@
     /**
      * Loads the given class or interface.
      *
-     * @param string $className The name of the class to load.
+     * @param  string $className The name of the class to load.
      * @return void
      */
     public function loadClass($className)
     {
         if ($className === 'Mockery') {
-            require $this->getFullPath('Mockery.php');
+            include $this->getFullPath('Mockery.php');
             return;
         }
         if (null === $this->_namespace
-        || $this->_namespace.$this->_namespaceSeparator === substr($className, 0, strlen($this->_namespace.$this->_namespaceSeparator))) {
+            || $this->_namespace.$this->_namespaceSeparator === substr($className, 0, strlen($this->_namespace.$this->_namespaceSeparator))
+        ) {
             $fileName = '';
             $namespace = '';
             if (false !== ($lastNsPos = strripos($className, $this->_namespaceSeparator))) {
@@ -138,14 +139,14 @@
                 $fileName = str_replace($this->_namespaceSeparator, DIRECTORY_SEPARATOR, $namespace) . DIRECTORY_SEPARATOR;
             }
             $fileName .= str_replace('_', DIRECTORY_SEPARATOR, $className) . $this->_fileExtension;
-            require $this->getFullPath($fileName);
+            include $this->getFullPath($fileName);
         }
     }
 
     /**
      * Returns full path for $fileName if _includePath is set, or leaves as-is for PHP's internal search in 'require'.
      *
-     * @param string $fileName relative to include path.
+     * @param  string $fileName relative to include path.
      * @return string
      */
     private function getFullPath($fileName)

--- vendor/mockery/mockery/library/Mockery/Matcher/Any.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Matcher;
@@ -26,7 +26,7 @@
     /**
      * Check if the actual value matches the expected.
      *
-     * @param mixed $actual
+     * @param  mixed $actual
      * @return bool
      */
     public function match(&$actual)

--- vendor/mockery/mockery/library/Mockery/Matcher/AnyOf.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Matcher;
@@ -26,7 +26,7 @@
      * Check if the actual value does not match the expected (in this
      * case it's specifically NOT expected).
      *
-     * @param mixed $actual
+     * @param  mixed $actual
      * @return bool
      */
     public function match(&$actual)

--- vendor/mockery/mockery/library/Mockery/Matcher/Closure.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Matcher;
@@ -26,7 +26,7 @@
     /**
      * Check if the actual value matches the expected.
      *
-     * @param mixed $actual
+     * @param  mixed $actual
      * @return bool
      */
     public function match(&$actual)

--- vendor/mockery/mockery/library/Mockery/Matcher/Contains.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Matcher;
@@ -26,7 +26,7 @@
     /**
      * Check if the actual value matches the expected.
      *
-     * @param mixed $actual
+     * @param  mixed $actual
      * @return bool
      */
     public function match(&$actual)

--- vendor/mockery/mockery/library/Mockery/Matcher/Ducktype.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Matcher;
@@ -26,7 +26,7 @@
     /**
      * Check if the actual value matches the expected.
      *
-     * @param mixed $actual
+     * @param  mixed $actual
      * @return bool
      */
     public function match(&$actual)

--- vendor/mockery/mockery/library/Mockery/Matcher/HasKey.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Matcher;
@@ -26,7 +26,7 @@
     /**
      * Check if the actual value matches the expected.
      *
-     * @param mixed $actual
+     * @param  mixed $actual
      * @return bool
      */
     public function match(&$actual)

--- vendor/mockery/mockery/library/Mockery/Matcher/HasValue.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Matcher;
@@ -26,7 +26,7 @@
     /**
      * Check if the actual value matches the expected.
      *
-     * @param mixed $actual
+     * @param  mixed $actual
      * @return bool
      */
     public function match(&$actual)

--- vendor/mockery/mockery/library/Mockery/Matcher/MatcherAbstract.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Matcher;
@@ -45,7 +45,7 @@
      * Actual passed by reference to preserve reference trail (where applicable)
      * back to the original method parameter.
      *
-     * @param mixed $actual
+     * @param  mixed $actual
      * @return bool
      */
     abstract public function match(&$actual);

--- vendor/mockery/mockery/library/Mockery/Matcher/MustBe.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Matcher;
@@ -26,7 +26,7 @@
     /**
      * Check if the actual value matches the expected.
      *
-     * @param mixed $actual
+     * @param  mixed $actual
      * @return bool
      */
     public function match(&$actual)

--- vendor/mockery/mockery/library/Mockery/Matcher/Not.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Matcher;
@@ -27,7 +27,7 @@
      * Check if the actual value does not match the expected (in this
      * case it's specifically NOT expected).
      *
-     * @param mixed $actual
+     * @param  mixed $actual
      * @return bool
      */
     public function match(&$actual)

--- vendor/mockery/mockery/library/Mockery/Matcher/NotAnyOf.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Matcher;
@@ -26,7 +26,7 @@
      * Check if the actual value does not match the expected (in this
      * case it's specifically NOT expected).
      *
-     * @param mixed $actual
+     * @param  mixed $actual
      * @return bool
      */
     public function match(&$actual)

--- vendor/mockery/mockery/library/Mockery/Matcher/Subset.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Matcher;
@@ -26,7 +26,7 @@
     /**
      * Check if the actual value matches the expected.
      *
-     * @param mixed $actual
+     * @param  mixed $actual
      * @return bool
      */
     public function match(&$actual)

--- vendor/mockery/mockery/library/Mockery/Matcher/Type.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery\Matcher;
@@ -26,7 +26,7 @@
     /**
      * Check if the actual value matches the expected.
      *
-     * @param mixed $actual
+     * @param  mixed $actual
      * @return bool
      */
     public function match(&$actual)
@@ -35,7 +35,8 @@
         if (function_exists($function)) {
             return $function($actual);
         } elseif (is_string($this->_expected)
-        && (class_exists($this->_expected) || interface_exists($this->_expected))) {
+            && (class_exists($this->_expected) || interface_exists($this->_expected))
+        ) {
             return $actual instanceof $this->_expected;
         }
         return false;

--- vendor/mockery/mockery/library/Mockery/Mock.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery;
@@ -134,6 +134,7 @@
 
     /**
      * If shouldIgnoreMissing is called, this value will be returned on all calls to missing methods
+     *
      * @var mixed
      */
     protected $_mockery_defaultReturnValue = null;
@@ -142,8 +143,8 @@
      * We want to avoid constructors since class is copied to Generator.php
      * for inclusion on extending class definitions.
      *
-     * @param \Mockery\Container $container
-     * @param object $partialObject
+     * @param  \Mockery\Container $container
+     * @param  object             $partialObject
      * @return void
      */
     public function mockery_init(\Mockery\Container $container = null, $partialObject = null)
@@ -168,12 +169,14 @@
     /**
      * Set expected method calls
      *
-     * @param mixed
+     * @param  mixed
      * @return \Mockery\Expectation
      */
     public function shouldReceive()
     {
-        /** @var array $nonPublicMethods */
+        /**
+ * @var array $nonPublicMethods 
+*/
         $nonPublicMethods = $this->getNonPublicMethods();
 
         $self = $this;
@@ -207,7 +210,7 @@
     /**
      * Shortcut method for setting an expectation that a method should not be called.
      *
-     * @param mixed
+     * @param  mixed
      * @return \Mockery\Expectation
      */
     public function shouldNotReceive()
@@ -219,7 +222,8 @@
 
     /**
      * Allows additional methods to be mocked that do not explicitly exist on mocked class
-     * @param String $method name of the method to be mocked
+     *
+     * @param  String $method name of the method to be mocked
      * @return Mock
      */
     public function shouldAllowMockingMethod($method)
@@ -230,7 +234,8 @@
 
     /**
      * Set mock to ignore unexpected methods and return Undefined class
-     * @param mixed $returnValue the default return value for calls to missing functions on this mock
+     *
+     * @param  mixed $returnValue the default return value for calls to missing functions on this mock
      * @return Mock
      */
     public function shouldIgnoreMissing($returnValue = null)
@@ -368,7 +373,8 @@
             return true;
         }
         if (isset($this->_mockery_ignoreVerification)
-            && $this->_mockery_ignoreVerification == true) {
+            && $this->_mockery_ignoreVerification == true
+        ) {
             return true;
         }
         $this->_mockery_verified = true;
@@ -401,7 +407,7 @@
      * Set ordering for a group
      *
      * @param mixed $group
-     * @param int $order
+     * @param int   $order
      */
     public function mockery_setGroup($group, $order)
     {
@@ -442,8 +448,8 @@
     /**
      * Validate the current mock's ordering
      *
-     * @param string $method
-     * @param int $order
+     * @param  string $method
+     * @param  int    $order
      * @throws \Mockery\Exception
      * @return void
      */
@@ -481,7 +487,7 @@
     /**
      * Return the expectations director for the given method
      *
-     * @var string $method
+     * @var    string $method
      * @return \Mockery\ExpectationDirector|null
      */
     public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director)
@@ -492,7 +498,7 @@
     /**
      * Return the expectations director for the given method
      *
-     * @var string $method
+     * @var    string $method
      * @return \Mockery\ExpectationDirector|null
      */
     public function mockery_getExpectationsFor($method)
@@ -505,8 +511,8 @@
     /**
      * Find an expectation matching the given method and arguments
      *
-     * @var string $method
-     * @var array $args
+     * @var    string $method
+     * @var    array $args
      * @return \Mockery\Expectation|null
      */
     public function mockery_findExpectation($method, array $args)
@@ -564,8 +570,8 @@
      * expectation where a real return value is required while still taking
      * advantage of expectation matching and call count verification.
      *
-     * @param string $name
-     * @param array $args
+     * @param  string $name
+     * @param  array  $args
      * @return mixed
      */
     public function mockery_callSubjectMethod($name, array $args)
@@ -676,7 +682,8 @@
         }
 
         if (isset($this->_mockery_expectations[$method])
-        && !$this->_mockery_disableExpectationMatching) {
+            && !$this->_mockery_disableExpectationMatching
+        ) {
             $handler = $this->_mockery_expectations[$method];
 
             try {
@@ -750,9 +757,11 @@
             function ($method) {
                 return $method->getName();
             },
-            array_filter($this->mockery_getMethods(), function ($method) {
-                return !$method->isPublic();
-            })
+            array_filter(
+                $this->mockery_getMethods(), function ($method) {
+                    return !$method->isPublic();
+                }
+            )
         );
     }
 }

--- vendor/mockery/mockery/library/Mockery/MockInterface.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery;
@@ -26,8 +26,8 @@
     /**
      * Alternative setup method to constructor
      *
-     * @param \Mockery\Container $container
-     * @param object $partialObject
+     * @param  \Mockery\Container $container
+     * @param  object             $partialObject
      * @return void
      */
     public function mockery_init(\Mockery\Container $container = null, $partialObject = null);
@@ -35,7 +35,7 @@
     /**
      * Set expected method calls
      *
-     * @param mixed ...
+     * @param  mixed ...
      * @return \Mockery\Expectation
      */
     public function shouldReceive();
@@ -43,20 +43,22 @@
     /**
      * Shortcut method for setting an expectation that a method should not be called.
      *
-     * @param mixed ...
+     * @param  mixed ...
      * @return \Mockery\Expectation
      */
     public function shouldNotReceive();
 
     /**
      * Allows additional methods to be mocked that do not explicitly exist on mocked class
+     *
      * @param String $method name of the method to be mocked
      */
     public function shouldAllowMockingMethod($method);
 
     /**
      * Set mock to ignore unexpected methods and return Undefined class
-     * @param mixed $returnValue the default return value for calls to missing functions on this mock
+     *
+     * @param  mixed $returnValue the default return value for calls to missing functions on this mock
      * @return Mock
      */
     public function shouldIgnoreMissing($returnValue = null);
@@ -82,14 +84,14 @@
 
     /**
      * @param $method
-     * @param null $args
+     * @param null   $args
      * @return \Mockery\Expectation
      */
     public function shouldHaveReceived($method, $args = null);
 
     /**
      * @param $method
-     * @param null $args
+     * @param null   $args
      * @return null
      */
     public function shouldNotHaveReceived($method, $args = null);
@@ -107,8 +109,8 @@
     /**
      * Capture calls to this mock and check against expectations
      *
-     * @param string $method
-     * @param array $args
+     * @param  string $method
+     * @param  array $args
      * @return mixed
      */
         /**
@@ -144,7 +146,7 @@
      * Set ordering for a group
      *
      * @param mixed $group
-     * @param int $order
+     * @param int   $order
      */
     public function mockery_setGroup($group, $order);
 
@@ -172,8 +174,8 @@
     /**
      * Validate the current mock's ordering
      *
-     * @param string $method
-     * @param int $order
+     * @param  string $method
+     * @param  int    $order
      * @throws \Mockery\Exception
      * @return void
      */
@@ -189,7 +191,7 @@
     /**
      * Return the expectations director for the given method
      *
-     * @var string $method
+     * @var    string $method
      * @return \Mockery\ExpectationDirector|null
      */
     public function mockery_setExpectationsFor($method, \Mockery\ExpectationDirector $director);
@@ -197,7 +199,7 @@
     /**
      * Return the expectations director for the given method
      *
-     * @var string $method
+     * @var    string $method
      * @return \Mockery\ExpectationDirector|null
      */
     public function mockery_getExpectationsFor($method);
@@ -205,8 +207,8 @@
     /**
      * Find an expectation matching the given method and arguments
      *
-     * @var string $method
-     * @var array $args
+     * @var    string $method
+     * @var    array $args
      * @return \Mockery\Expectation|null
      */
     public function mockery_findExpectation($method, array $args);

--- vendor/mockery/mockery/library/Mockery/Recorder.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery;
@@ -53,8 +53,8 @@
      * recorded. The second parameter is the subject object, passed into
      * a \Mockery::mock() call in the same way as a partial mock requires.
      *
-     * @param \Mockery\MockInterface $mock
-     * @param object $subject
+     * @param  \Mockery\MockInterface $mock
+     * @param  object                 $subject
      * @return void
      */
     public function __construct(\Mockery\MockInterface $mock, $subject)
@@ -80,8 +80,8 @@
      * a new expectation. The actual return value is then returned after being
      * recorded.
      *
-     * @param string $method
-     * @param array $args
+     * @param  string $method
+     * @param  array  $args
      * @return mixed
      */
     public function __call($method, array $args)

--- vendor/mockery/mockery/library/Mockery/Undefined.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 namespace Mockery;
@@ -26,8 +26,8 @@
     /**
      * Call capturing to merely return this same object.
      *
-     * @param string $method
-     * @param array $args
+     * @param  string $method
+     * @param  array  $args
      * @return self
      */
     public function __call($method, array $args)

--- vendor/mockery/mockery/library/Mockery.php
+++ PHP_CodeSniffer
@@ -12,10 +12,10 @@
  * obtain it through the world-wide-web, please send an email
  * to padraic@php.net so we can send you a copy immediately.
  *
- * @category   Mockery
- * @package    Mockery
- * @copyright  Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
- * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
+ * @category  Mockery
+ * @package   Mockery
+ * @copyright Copyright (c) 2010-2014 Pádraic Brady (http://blog.astrumfutura.com)
+ * @license   http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
  */
 
 use Mockery\ExpectationInterface;
@@ -187,7 +187,8 @@
 
     public static function getDefaultGenerator()
     {
-        $generator = new StringManipulationGenerator(array(
+        $generator = new StringManipulationGenerator(
+            array(
             new CallTypeHintPass(),
             new ClassPass(),
             new ClassNamePass(),
@@ -196,7 +197,8 @@
             new MethodDefinitionPass(),
             new RemoveUnserializeForInternalSerializableClassesPass(),
             new RemoveBuiltinMethodsThatAreFinalPass(),
-        ));
+            )
+        );
 
         return new CachingGenerator($generator);
     }
@@ -399,7 +401,7 @@
      * Utility method to format method name and arguments into a string.
      *
      * @param string $method
-     * @param array $arguments
+     * @param array  $arguments
      *
      * @return string
      */
@@ -497,8 +499,8 @@
     /**
      * Utility function to turn public properties and public get* and is* method values into an array.
      *
-     * @param     $object
-     * @param int $nesting
+     * @param $object
+     * @param int    $nesting
      *
      * @return array
      */
@@ -610,9 +612,9 @@
      * Utility function to parse shouldReceive() arguments and generate
      * expectations from such as needed.
      *
-     * @param Mockery\MockInterface $mock
-     * @param array $args
-     * @param callable $add
+     * @param  Mockery\MockInterface $mock
+     * @param  array                 $args
+     * @param  callable              $add
      * @return \Mockery\CompositeExpectation
      */
     public static function parseShouldReturnArgs(\Mockery\MockInterface $mock, $args, $add)
@@ -638,15 +640,17 @@
      * Sets up expectations on the members of the CompositeExpectation and
      * builds up any demeter chain that was passed to shouldReceive.
      *
-     * @param \Mockery\MockInterface $mock
-     * @param string $arg
-     * @param callable $add
+     * @param  \Mockery\MockInterface $mock
+     * @param  string                 $arg
+     * @param  callable               $add
      * @throws Mockery\Exception
      * @return \Mockery\ExpectationDirector
      */
     protected static function buildDemeterChain(\Mockery\MockInterface $mock, $arg, $add)
     {
-        /** @var Mockery\Container $container */
+        /**
+ * @var Mockery\Container $container 
+*/
         $container = $mock->mockery_getContainer();
         $methodNames = explode('->', $arg);
         reset($methodNames);
@@ -662,10 +666,14 @@
             );
         }
 
-        /** @var ExpectationInterface|null $expectations */
+        /**
+ * @var ExpectationInterface|null $expectations 
+*/
         $expectations = null;
 
-        /** @var Callable $nextExp */
+        /**
+ * @var Callable $nextExp 
+*/
         $nextExp = function ($method) use ($add) {
             return $add($method);
         };
@@ -697,8 +705,8 @@
     }
 
     /**
-     * @param \Mockery\Container $container
-     * @param string $method
+     * @param \Mockery\Container           $container
+     * @param string                       $method
      * @param Mockery\ExpectationInterface $exp
      *
      * @return \Mockery\Mock
@@ -715,7 +723,7 @@
 
     /**
      * @param \Mockery\Container $container
-     * @param string $demeterMockKey
+     * @param string             $demeterMockKey
      *
      * @return mixed
      */

--- vendor/mockery/mockery/tests/Bootstrap.php
+++ PHP_CodeSniffer
@@ -56,8 +56,9 @@
 
 require_once "$root/vendor/hamcrest/hamcrest-php/hamcrest/Hamcrest.php";
 
-if (defined('TESTS_GENERATE_REPORT') && TESTS_GENERATE_REPORT === true &&
-    version_compare(PHPUnit_Runner_Version::id(), '3.1.6', '>=')) {
+if (defined('TESTS_GENERATE_REPORT') && TESTS_GENERATE_REPORT === true 
+    && version_compare(PHPUnit_Runner_Version::id(), '3.1.6', '>=')
+) {
 
     /*
      * Add Mutateme library/ directory to the PHPUnit code coverage

--- vendor/mockery/mockery/tests/Mockery/ContainerTest.php
+++ PHP_CodeSniffer
@@ -25,7 +25,9 @@
 class ContainerTest extends MockeryTestCase
 {
 
-    /** @var Mockery\Container */
+    /**
+ * @var Mockery\Container 
+*/
     private $container;
 
     public function setup()
@@ -248,9 +250,11 @@
 
     public function testPassingClosureAsFinalParameterUsedToDefineExpectations()
     {
-        $m = $this->container->mock('foo', function ($m) {
-            $m->shouldReceive('foo')->once()->andReturn('bar');
-        });
+        $m = $this->container->mock(
+            'foo', function ($m) {
+                $m->shouldReceive('foo')->once()->andReturn('bar');
+            }
+        );
         $this->assertEquals('bar', $m->foo());
     }
 
@@ -732,7 +736,11 @@
     {
         $m = $this->container->mock('MockeryTestRef1');
         $m->shouldReceive('foo')->with(
-            Mockery::on(function (&$a) {$a += 1;return true;}),
+            Mockery::on(
+                function (&$a) {
+                    $a += 1;return true;
+                }
+            ),
             Mockery::any()
         );
         $a = 1;
@@ -758,7 +766,11 @@
         @$m = $this->container->mock('DateTime');
         $this->assertInstanceOf("Mockery\MockInterface", $m, "Mocking failed, remove @ error suppresion to debug");
         $m->shouldReceive('modify')->with(
-            Mockery::on(function (&$string) {$string = 'foo'; return true;})
+            Mockery::on(
+                function (&$string) {
+                    $string = 'foo'; return true;
+                }
+            )
         );
         $data ='bar';
         $m->modify($data);
@@ -784,7 +796,11 @@
         @$m = $this->container->mock('MongoCollection');
         $this->assertInstanceOf("Mockery\MockInterface", $m, "Mocking failed, remove @ error suppresion to debug");
         $m->shouldReceive('insert')->with(
-            Mockery::on(function (&$data) {$data['_id'] = 123; return true;}),
+            Mockery::on(
+                function (&$data) {
+                    $data['_id'] = 123; return true;
+                }
+            ),
             Mockery::type('array')
         );
         $data = array('a'=>1,'b'=>2);
@@ -1046,11 +1062,15 @@
     public function testMockeryShouldDistinguishBetweenConstructorParamsAndClosures()
     {
         $obj = new MockeryTestFoo();
-        $mock = $this->container->mock('MockeryTest_ClassMultipleConstructorParams[dave]',
-            array( &$obj, 'foo' ));
+        $mock = $this->container->mock(
+            'MockeryTest_ClassMultipleConstructorParams[dave]',
+            array( &$obj, 'foo' )
+        );
     }
 
-    /** @group nette */
+    /**
+ * @group nette 
+*/
     public function testMockeryShouldNotMockCallstaticMagicMethod()
     {
         $mock = $this->container->mock('MockeryTest_CallStatic');
@@ -1064,33 +1084,43 @@
         $mock = $this->container->mock('MockeryTest_OldStyleConstructor');
     }
 
-    /** @group issue/144 */
+    /**
+ * @group issue/144 
+*/
     public function testMockeryShouldInterpretEmptyArrayAsConstructorArgs()
     {
         $mock = $this->container->mock("EmptyConstructorTest", array());
         $this->assertSame(0, $mock->numberOfConstructorArgs);
     }
 
-    /** @group issue/144 */
+    /**
+ * @group issue/144 
+*/
     public function testMockeryShouldCallConstructorByDefaultWhenRequestingPartials()
     {
         $mock = $this->container->mock("EmptyConstructorTest[foo]");
         $this->assertSame(0, $mock->numberOfConstructorArgs);
     }
 
-    /** @group issue/158 */
+    /**
+ * @group issue/158 
+*/
     public function testMockeryShouldRespectInterfaceWithMethodParamSelf()
     {
         $this->container->mock('MockeryTest_InterfaceWithMethodParamSelf');
     }
 
-    /** @group issue/162 */
+    /**
+ * @group issue/162 
+*/
     public function testMockeryDoesntTryAndMockLowercaseToString()
     {
         $this->container->mock('MockeryTest_Lowercase_ToString');
     }
 
-    /** @group issue/175 */
+    /**
+ * @group issue/175 
+*/
     public function testExistingStaticMethodMocking()
     {
         Mockery::setContainer($this->container);

--- vendor/mockery/mockery/tests/Mockery/DemeterChainTest.php
+++ PHP_CodeSniffer
@@ -23,7 +23,9 @@
 
 class DemeterChainTest extends MockeryTestCase
 {
-    /** @var  Mockery\Mock $this->mock */
+    /**
+ * @var  Mockery\Mock $this->mock 
+*/
     private $mock;
 
     public function setUp()

--- vendor/mockery/mockery/tests/Mockery/ExpectationTest.php
+++ PHP_CodeSniffer
@@ -211,7 +211,11 @@
 
     public function testReturnsValueOfClosure()
     {
-        $this->mock->shouldReceive('foo')->with(5)->andReturnUsing(function ($v) {return $v+1;});
+        $this->mock->shouldReceive('foo')->with(5)->andReturnUsing(
+            function ($v) {
+                return $v+1;
+            }
+        );
         $this->assertEquals(6, $this->mock->foo(5));
     }
 
@@ -272,10 +276,12 @@
 
     public function testAndThrowExceptions()
     {
-        $this->mock->shouldReceive('foo')->andThrowExceptions(array(
+        $this->mock->shouldReceive('foo')->andThrowExceptions(
+            array(
             new OutOfBoundsException,
             new InvalidArgumentException,
-        ));
+            )
+        );
 
         try {
             $this->mock->foo();
@@ -1050,7 +1056,11 @@
     public function testCallableConstraintMatchesArgument()
     {
         $this->mock->shouldReceive('foo')->with(Mockery::type('callable'))->once();
-        $this->mock->foo(function () {return 'f';});
+        $this->mock->foo(
+            function () {
+                return 'f';
+            }
+        );
         $this->container->mockery_verify();
     }
 
@@ -1536,7 +1546,9 @@
 
     public function testOnConstraintMatchesArgument_ClosureEvaluatesToTrue()
     {
-        $function = function ($arg) {return $arg % 2 == 0;};
+        $function = function ($arg) {
+            return $arg % 2 == 0;
+        };
         $this->mock->shouldReceive('foo')->with(Mockery::on($function))->once();
         $this->mock->foo(4);
         $this->container->mockery_verify();
@@ -1547,7 +1559,9 @@
      */
     public function testOnConstraintThrowsExceptionWhenConstraintUnmatched_ClosureEvaluatesToFalse()
     {
-        $function = function ($arg) {return $arg % 2 == 0;};
+        $function = function ($arg) {
+            return $arg % 2 == 0;
+        };
         $this->mock->shouldReceive('foo')->with(Mockery::on($function))->once();
         $this->mock->foo(5);
         $this->container->mockery_verify();
@@ -1674,7 +1688,9 @@
         $this->assertEquals(1, $this->mock->a());
     }
 
-    /** @issue #253 */
+    /**
+ * @issue #253 
+*/
     public function testShouldIgnoreMissingDefaultSelfAndReturnsSelf()
     {
         $this->mock->shouldIgnoreMissing($this->container->self());

--- vendor/mockery/mockery/tests/Mockery/Generator/DefinedTargetClassTest.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class DefinedTargetClassTest extends \PHPUnit_Framework_TestCase
 {
-    /** @test */
+    /**
+ * @test 
+*/
     public function it_knows_if_one_of_its_ancestors_is_internal()
     {
         $target = new DefinedTargetClass(new \ReflectionClass("ArrayObject"));

--- vendor/mockery/mockery/tests/Mockery/Generator/StringManipulation/Pass/CallTypeHintPassTest.php
+++ PHP_CodeSniffer
@@ -17,9 +17,11 @@
     public function shouldRemoveCallTypeHintIfRequired()
     {
         $pass = new CallTypeHintPass;
-        $config = m::mock("Mockery\Generator\MockConfiguration", array(
+        $config = m::mock(
+            "Mockery\Generator\MockConfiguration", array(
             "requiresCallTypeHintRemoval" => true,
-        ))->shouldDeferMissing();
+            )
+        )->shouldDeferMissing();
         $code = $pass->apply(static::CODE, $config);
         $this->assertContains('__call($method, $args)', $code);
     }
@@ -30,9 +32,11 @@
     public function shouldRemoveCallStaticTypeHintIfRequired()
     {
         $pass = new CallTypeHintPass;
-        $config = m::mock("Mockery\Generator\MockConfiguration", array(
+        $config = m::mock(
+            "Mockery\Generator\MockConfiguration", array(
             "requiresCallStaticTypeHintRemoval" => true,
-        ))->shouldDeferMissing();
+            )
+        )->shouldDeferMissing();
         $code = $pass->apply(static::CODE, $config);
         $this->assertContains('__callStatic($method, $args)', $code);
     }

--- vendor/mockery/mockery/tests/Mockery/Generator/StringManipulation/Pass/InterfacePassTest.php
+++ PHP_CodeSniffer
@@ -17,9 +17,11 @@
     {
         $pass = new InterfacePass;
 
-        $config = m::mock("Mockery\Generator\MockConfiguration", array(
+        $config = m::mock(
+            "Mockery\Generator\MockConfiguration", array(
             "getTargetInterfaces" => array(),
-        ));
+            )
+        );
 
         $code = $pass->apply(static::CODE, $config);
         $this->assertEquals(static::CODE, $code);
@@ -32,12 +34,14 @@
     {
         $pass = new InterfacePass;
 
-        $config = m::mock("Mockery\Generator\MockConfiguration", array(
+        $config = m::mock(
+            "Mockery\Generator\MockConfiguration", array(
             "getTargetInterfaces" => array(
                 m::mock(array("getName" => "Dave\Dave")),
                 m::mock(array("getName" => "Paddy\Paddy")),
             ),
-        ));
+            )
+        );
 
         $code = $pass->apply(static::CODE, $config);
 

--- vendor/mockery/mockery/tests/Mockery/HamcrestExpectationTest.php
+++ PHP_CodeSniffer
@@ -37,7 +37,9 @@
         $this->container->mockery_close();
     }
 
-    /** Just a quickie roundup of a few Hamcrest matchers to check nothing obvious out of place **/
+    /**
+ * Just a quickie roundup of a few Hamcrest matchers to check nothing obvious out of place 
+**/
 
     public function testAnythingConstraintMatchesArgument()
     {

--- vendor/mockery/mockery/tests/Mockery/LoaderTest.php
+++ PHP_CodeSniffer
@@ -29,7 +29,7 @@
 
     public function testCallingRegisterRegistersSelfAsSplAutoloaderFunction()
     {
-        require_once 'Mockery/Loader.php';
+        include_once 'Mockery/Loader.php';
         $loader = new \Mockery\Loader;
         $loader->register();
         $expected = array($loader, 'loadClass');

--- vendor/mockery/mockery/tests/Mockery/MockClassWithUnknownTypeHintTest.php
+++ PHP_CodeSniffer
@@ -30,7 +30,9 @@
         $this->container->mockery_close();
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     public function itShouldSuccessfullyBuildTheMock()
     {
         $this->container->mock("test\Mockery\HasUnknownClassAsTypeHintOnMethod");

--- vendor/mockery/mockery/tests/Mockery/MockeryCanMockMultipleInterfacesWhichOverlapTest.php
+++ PHP_CodeSniffer
@@ -26,7 +26,9 @@
 
 class GeneratorTest extends MockeryTestCase
 {
-    /** @test */
+    /**
+ * @test 
+*/
     public function shouldNotDuplicateDoublyInheritedMethods()
     {
         $container = new \Mockery\Container;

--- vendor/mockery/mockery/tests/Mockery/MockingProtectedMethodsTest.php
+++ PHP_CodeSniffer
@@ -60,14 +60,18 @@
         $this->assertEquals("bar", $mock->bar());
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     public function shouldAutomaticallyIgnoreAbstractProtectedMethods()
     {
         $mock = $this->container->mock("test\Mockery\TestWithProtectedMethods")->shouldDeferMissing();
         $this->assertEquals(null, $mock->foo());
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     public function shouldAllowMockingProtectedMethods()
     {
         $mock = $this->container->mock("test\Mockery\TestWithProtectedMethods")
@@ -78,7 +82,9 @@
         $this->assertEquals("notbar", $mock->bar());
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     public function shouldAllowMockingProtectedMethodOnDefinitionTimePartial()
     {
         $mock = $this->container->mock("test\Mockery\TestWithProtectedMethods[protectedBar]")
@@ -88,7 +94,9 @@
         $this->assertEquals("notbar", $mock->bar());
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     public function shouldAllowMockingAbstractProtectedMethods()
     {
         $mock = $this->container->mock("test\Mockery\TestWithProtectedMethods")

--- vendor/mockery/mockery/tests/Mockery/MockingVariadicArgumentsTest.php
+++ PHP_CodeSniffer
@@ -36,7 +36,9 @@
         $this->container->mockery_close();
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     public function shouldAllowMockingVariadicArguments()
     {
         $mock = $this->container->mock("test\Mockery\TestWithVariadicArguments");

--- vendor/mockery/mockery/tests/Mockery/NamedMockTest.php
+++ PHP_CodeSniffer
@@ -23,19 +23,25 @@
 
 class NamedMockTest extends MockeryTestCase
 {
-    /** @test */
+    /**
+ * @test 
+*/
     public function itCreatesANamedMock()
     {
         $mock = Mockery::namedMock("Mockery\Dave123");
         $this->assertEquals("Mockery\Dave123", get_class($mock));
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     public function itCreatesPassesFurtherArgumentsJustLikeMock()
     {
-        $mock = Mockery::namedMock("Mockery\Dave456", "DateTime", array(
+        $mock = Mockery::namedMock(
+            "Mockery\Dave456", "DateTime", array(
             "getDave" => "dave"
-        ));
+            )
+        );
 
         $this->assertInstanceOf("DateTime", $mock);
         $this->assertEquals("dave", $mock->getDave());

--- vendor/mockery/mockery/tests/Mockery/RecorderTest.php
+++ PHP_CodeSniffer
@@ -37,10 +37,12 @@
     public function testRecorderWithSimpleObject()
     {
         $mock = $this->container->mock(new MockeryTestSubject);
-        $mock->shouldExpect(function ($subject) {
-            $user = new MockeryTestSubjectUser($subject);
-            $user->doFoo();
-        });
+        $mock->shouldExpect(
+            function ($subject) {
+                $user = new MockeryTestSubjectUser($subject);
+                $user->doFoo();
+            }
+        );
 
         $this->assertEquals(1, $mock->foo());
         $mock->mockery_verify();
@@ -49,10 +51,12 @@
     public function testArgumentsArePassedAsMethodExpectations()
     {
         $mock = $this->container->mock(new MockeryTestSubject);
-        $mock->shouldExpect(function ($subject) {
-            $user = new MockeryTestSubjectUser($subject);
-            $user->doBar();
-        });
+        $mock->shouldExpect(
+            function ($subject) {
+                $user = new MockeryTestSubjectUser($subject);
+                $user->doBar();
+            }
+        );
 
         $this->assertEquals(4, $mock->bar(2));
         $mock->mockery_verify();
@@ -61,10 +65,12 @@
     public function testArgumentsLooselyMatchedByDefault()
     {
         $mock = $this->container->mock(new MockeryTestSubject);
-        $mock->shouldExpect(function ($subject) {
-            $user = new MockeryTestSubjectUser($subject);
-            $user->doBar();
-        });
+        $mock->shouldExpect(
+            function ($subject) {
+                $user = new MockeryTestSubjectUser($subject);
+                $user->doBar();
+            }
+        );
 
         $this->assertEquals(4, $mock->bar('2'));
         $mock->mockery_verify();
@@ -73,11 +79,13 @@
     public function testMultipleMethodExpectations()
     {
         $mock = $this->container->mock(new MockeryTestSubject);
-        $mock->shouldExpect(function ($subject) {
-            $user = new MockeryTestSubjectUser($subject);
-            $user->doFoo();
-            $user->doBar();
-        });
+        $mock->shouldExpect(
+            function ($subject) {
+                $user = new MockeryTestSubjectUser($subject);
+                $user->doFoo();
+                $user->doBar();
+            }
+        );
 
         $this->assertEquals(1, $mock->foo());
         $this->assertEquals(4, $mock->bar(2));
@@ -87,11 +95,13 @@
     public function testRecordingDoesNotSpecifyExactOrderByDefault()
     {
         $mock = $this->container->mock(new MockeryTestSubject);
-        $mock->shouldExpect(function ($subject) {
-            $user = new MockeryTestSubjectUser($subject);
-            $user->doFoo();
-            $user->doBar();
-        });
+        $mock->shouldExpect(
+            function ($subject) {
+                $user = new MockeryTestSubjectUser($subject);
+                $user->doFoo();
+                $user->doBar();
+            }
+        );
 
         $this->assertEquals(4, $mock->bar(2));
         $this->assertEquals(1, $mock->foo());
@@ -104,12 +114,14 @@
     public function testRecordingDoesSpecifyExactOrderInStrictMode()
     {
         $mock = $this->container->mock(new MockeryTestSubject);
-        $mock->shouldExpect(function ($subject) {
-            $subject->shouldBeStrict();
-            $user = new MockeryTestSubjectUser($subject);
-            $user->doFoo();
-            $user->doBar();
-        });
+        $mock->shouldExpect(
+            function ($subject) {
+                $subject->shouldBeStrict();
+                $user = new MockeryTestSubjectUser($subject);
+                $user->doFoo();
+                $user->doBar();
+            }
+        );
 
         $mock->bar(2);
         $mock->foo();
@@ -122,11 +134,13 @@
     public function testArgumentsAreMatchedExactlyUnderStrictMode()
     {
         $mock = $this->container->mock(new MockeryTestSubject);
-        $mock->shouldExpect(function ($subject) {
-            $subject->shouldBeStrict();
-            $user = new MockeryTestSubjectUser($subject);
-            $user->doBar();
-        });
+        $mock->shouldExpect(
+            function ($subject) {
+                $subject->shouldBeStrict();
+                $user = new MockeryTestSubjectUser($subject);
+                $user->doBar();
+            }
+        );
 
         $mock->bar('2');
     }
@@ -137,10 +151,12 @@
     public function testThrowsExceptionWhenArgumentsNotExpected()
     {
         $mock = $this->container->mock(new MockeryTestSubject);
-        $mock->shouldExpect(function ($subject) {
-            $user = new MockeryTestSubjectUser($subject);
-            $user->doBar();
-        });
+        $mock->shouldExpect(
+            function ($subject) {
+                $user = new MockeryTestSubjectUser($subject);
+                $user->doBar();
+            }
+        );
 
         $mock->bar(4);
     }
@@ -148,10 +164,12 @@
     public function testCallCountUnconstrainedByDefault()
     {
         $mock = $this->container->mock(new MockeryTestSubject);
-        $mock->shouldExpect(function ($subject) {
-            $user = new MockeryTestSubjectUser($subject);
-            $user->doBar();
-        });
+        $mock->shouldExpect(
+            function ($subject) {
+                $user = new MockeryTestSubjectUser($subject);
+                $user->doBar();
+            }
+        );
 
         $mock->bar(2);
         $this->assertEquals(4, $mock->bar(2));
@@ -164,11 +182,13 @@
     public function testCallCountConstrainedInStrictMode()
     {
         $mock = $this->container->mock(new MockeryTestSubject);
-        $mock->shouldExpect(function ($subject) {
-            $subject->shouldBeStrict();
-            $user = new MockeryTestSubjectUser($subject);
-            $user->doBar();
-        });
+        $mock->shouldExpect(
+            function ($subject) {
+                $subject->shouldBeStrict();
+                $user = new MockeryTestSubjectUser($subject);
+                $user->doBar();
+            }
+        );
 
         $mock->bar(2);
         $mock->bar(2);

--- vendor/mockery/mockery/tests/Mockery/SpyTest.php
+++ PHP_CodeSniffer
@@ -17,7 +17,9 @@
         $this->container->mockery_close();
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     public function itVerifiesAMethodWasCalled()
     {
         $spy = m::spy();
@@ -28,7 +30,9 @@
         $spy->shouldHaveReceived("someMethodThatWasNotCalled");
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     public function itVerifiesAMethodWasNotCalled()
     {
         $spy = m::spy();
@@ -39,7 +43,9 @@
         $spy->shouldNotHaveReceived("myMethod");
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     public function itVerifiesAMethodWasNotCalledWithParticularArguments()
     {
         $spy = m::spy();
@@ -51,7 +57,9 @@
         $spy->shouldNotHaveReceived("myMethod", array(123, 456));
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     public function itVerifiesAMethodWasCalledASpecificNumberOfTimes()
     {
         $spy = m::spy();
@@ -64,7 +72,9 @@
         $spy->shouldHaveReceived("myMethod")->twice();
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     public function itVerifiesAMethodWasCalledWithSpecificArguments()
     {
         $spy = m::spy();

--- vendor/mockery/mockery/tests/Mockery/WithFormatterExpectationTest.php
+++ PHP_CodeSniffer
@@ -60,7 +60,9 @@
         );
     }
 
-    /** @test */
+    /**
+ * @test 
+*/
     public function format_objects_should_not_call_getters_with_params()
     {
         $obj = new ClassWithGetterWithParam();

--- vendor/monolog/monolog/src/Monolog/ErrorHandler.php
+++ PHP_CodeSniffer
@@ -187,36 +187,36 @@
     private static function codeToString($code)
     {
         switch ($code) {
-            case E_ERROR:
-                return 'E_ERROR';
-            case E_WARNING:
-                return 'E_WARNING';
-            case E_PARSE:
-                return 'E_PARSE';
-            case E_NOTICE:
-                return 'E_NOTICE';
-            case E_CORE_ERROR:
-                return 'E_CORE_ERROR';
-            case E_CORE_WARNING:
-                return 'E_CORE_WARNING';
-            case E_COMPILE_ERROR:
-                return 'E_COMPILE_ERROR';
-            case E_COMPILE_WARNING:
-                return 'E_COMPILE_WARNING';
-            case E_USER_ERROR:
-                return 'E_USER_ERROR';
-            case E_USER_WARNING:
-                return 'E_USER_WARNING';
-            case E_USER_NOTICE:
-                return 'E_USER_NOTICE';
-            case E_STRICT:
-                return 'E_STRICT';
-            case E_RECOVERABLE_ERROR:
-                return 'E_RECOVERABLE_ERROR';
-            case E_DEPRECATED:
-                return 'E_DEPRECATED';
-            case E_USER_DEPRECATED:
-                return 'E_USER_DEPRECATED';
+        case E_ERROR:
+            return 'E_ERROR';
+        case E_WARNING:
+            return 'E_WARNING';
+        case E_PARSE:
+            return 'E_PARSE';
+        case E_NOTICE:
+            return 'E_NOTICE';
+        case E_CORE_ERROR:
+            return 'E_CORE_ERROR';
+        case E_CORE_WARNING:
+            return 'E_CORE_WARNING';
+        case E_COMPILE_ERROR:
+            return 'E_COMPILE_ERROR';
+        case E_COMPILE_WARNING:
+            return 'E_COMPILE_WARNING';
+        case E_USER_ERROR:
+            return 'E_USER_ERROR';
+        case E_USER_WARNING:
+            return 'E_USER_WARNING';
+        case E_USER_NOTICE:
+            return 'E_USER_NOTICE';
+        case E_STRICT:
+            return 'E_STRICT';
+        case E_RECOVERABLE_ERROR:
+            return 'E_RECOVERABLE_ERROR';
+        case E_DEPRECATED:
+            return 'E_DEPRECATED';
+        case E_USER_DEPRECATED:
+            return 'E_USER_DEPRECATED';
         }
 
         return 'Unknown PHP error';

--- vendor/monolog/monolog/src/Monolog/Formatter/ElasticaFormatter.php
+++ PHP_CodeSniffer
@@ -55,6 +55,7 @@
 
     /**
      * Getter index
+     *
      * @return string
      */
     public function getIndex()
@@ -64,6 +65,7 @@
 
     /**
      * Getter type
+     *
      * @return string
      */
     public function getType()
@@ -74,7 +76,7 @@
     /**
      * Convert a log message into an Elastica Document
      *
-     * @param  array    $record Log message
+     * @param  array $record Log message
      * @return Document
      */
     protected function getDocument($record)

--- vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php
+++ PHP_CodeSniffer
@@ -16,6 +16,7 @@
 
 /**
  * Serializes a log message to GELF
+ *
  * @see http://www.graylog2.org/about/gelf
  *
  * @author Matt Lehner <mlehner@gmail.com>

--- vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php
+++ PHP_CodeSniffer
@@ -79,12 +79,12 @@
     public function formatBatch(array $records)
     {
         switch ($this->batchMode) {
-            case static::BATCH_MODE_NEWLINES:
-                return $this->formatBatchNewlines($records);
+        case static::BATCH_MODE_NEWLINES:
+            return $this->formatBatchNewlines($records);
 
-            case static::BATCH_MODE_JSON:
-            default:
-                return $this->formatBatchJson($records);
+        case static::BATCH_MODE_JSON:
+        default:
+            return $this->formatBatchJson($records);
         }
     }
 
@@ -99,7 +99,7 @@
     /**
      * Return a JSON-encoded array of records.
      *
-     * @param  array  $records
+     * @param  array $records
      * @return string
      */
     protected function formatBatchJson(array $records)
@@ -111,7 +111,7 @@
      * Use new lines to separate records instead of a
      * JSON-encoded array.
      *
-     * @param  array  $records
+     * @param  array $records
      * @return string
      */
     protected function formatBatchNewlines(array $records)
@@ -120,9 +120,11 @@
 
         $oldNewline = $this->appendNewline;
         $this->appendNewline = false;
-        array_walk($records, function (&$value, $key) use ($instance) {
-            $value = $instance->format($value);
-        });
+        array_walk(
+            $records, function (&$value, $key) use ($instance) {
+                $value = $instance->format($value);
+            }
+        );
         $this->appendNewline = $oldNewline;
 
         return implode("\n", $records);

--- vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php
+++ PHP_CodeSniffer
@@ -150,8 +150,8 @@
     /**
      * Return the JSON representation of a value
      *
-     * @param  mixed             $data
-     * @param  bool              $ignoreErrors
+     * @param  mixed $data
+     * @param  bool  $ignoreErrors
      * @throws \RuntimeException if encoding fails and errors are not ignored
      * @return string
      */
@@ -172,7 +172,7 @@
     }
 
     /**
-     * @param  mixed  $data
+     * @param  mixed $data
      * @return string JSON encoded data or null on failure
      */
     private function jsonEncode($data)
@@ -192,8 +192,8 @@
      * inital error is not encoding related or the input can't be cleaned then
      * raise a descriptive exception.
      *
-     * @param  int               $code return code of json_last_error function
-     * @param  mixed             $data data that was meant to be encoded
+     * @param  int   $code return code of json_last_error function
+     * @param  mixed $data data that was meant to be encoded
      * @throws \RuntimeException if failure can't be corrected
      * @return string            JSON encoded data after error correction
      */
@@ -223,27 +223,27 @@
     /**
      * Throws an exception according to a given code with a customized message
      *
-     * @param  int               $code return code of json_last_error function
-     * @param  mixed             $data data that was meant to be encoded
+     * @param  int   $code return code of json_last_error function
+     * @param  mixed $data data that was meant to be encoded
      * @throws \RuntimeException
      */
     private function throwEncodeError($code, $data)
     {
         switch ($code) {
-            case JSON_ERROR_DEPTH:
-                $msg = 'Maximum stack depth exceeded';
-                break;
-            case JSON_ERROR_STATE_MISMATCH:
-                $msg = 'Underflow or the modes mismatch';
-                break;
-            case JSON_ERROR_CTRL_CHAR:
-                $msg = 'Unexpected control character found';
-                break;
-            case JSON_ERROR_UTF8:
-                $msg = 'Malformed UTF-8 characters, possibly incorrectly encoded';
-                break;
-            default:
-                $msg = 'Unknown error';
+        case JSON_ERROR_DEPTH:
+            $msg = 'Maximum stack depth exceeded';
+            break;
+        case JSON_ERROR_STATE_MISMATCH:
+            $msg = 'Underflow or the modes mismatch';
+            break;
+        case JSON_ERROR_CTRL_CHAR:
+            $msg = 'Unexpected control character found';
+            break;
+        case JSON_ERROR_UTF8:
+            $msg = 'Malformed UTF-8 characters, possibly incorrectly encoded';
+            break;
+        default:
+            $msg = 'Unknown error';
         }
 
         throw new \RuntimeException('JSON encoding failed: '.$msg.'. Encoding: '.var_export($data, true));
@@ -262,7 +262,7 @@
      * Function converts the input in place in the passed variable so that it
      * can be used as a callback for array_walk_recursive.
      *
-     * @param mixed &$data Input to check and convert if needed
+     * @param   mixed &$data Input to check and convert if needed
      * @private
      */
     public function detectAndCleanUtf8(&$data)
@@ -270,7 +270,9 @@
         if (is_string($data) && !preg_match('//u', $data)) {
             $data = preg_replace_callback(
                 '/[\x80-\xFF]+/',
-                function ($m) { return utf8_encode($m[0]); },
+                function ($m) {
+                    return utf8_encode($m[0]); 
+                },
                 $data
             );
             $data = str_replace(

--- vendor/monolog/monolog/src/Monolog/Formatter/WildfireFormatter.php
+++ PHP_CodeSniffer
@@ -79,7 +79,8 @@
         }
 
         // Create JSON object describing the appearance of the message in the console
-        $json = $this->toJson(array(
+        $json = $this->toJson(
+            array(
             array(
                 'Type'  => $type,
                 'File'  => $file,
@@ -87,7 +88,8 @@
                 'Label' => $label,
             ),
             $message,
-        ), $handleError);
+            ), $handleError
+        );
 
         // The message itself is a serialization of the above JSON object + it's length
         return sprintf(

--- vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php
+++ PHP_CodeSniffer
@@ -108,7 +108,7 @@
     /**
      * Gets the routing key for the AMQP exchange
      *
-     * @param  array  $record
+     * @param  array $record
      * @return string
      */
     private function getRoutingKey(array $record)
@@ -124,7 +124,7 @@
     }
 
     /**
-     * @param  string      $data
+     * @param  string $data
      * @return AMQPMessage
      */
     private function createAmqpMessage($data)

--- vendor/monolog/monolog/src/Monolog/Handler/BrowserConsoleHandler.php
+++ PHP_CodeSniffer
@@ -140,7 +140,8 @@
             if (empty($context) && empty($extra)) {
                 $script[] = self::call_array('log', self::handleStyles($record['formatted']));
             } else {
-                $script = array_merge($script,
+                $script = array_merge(
+                    $script,
                     array(self::call_array('groupCollapsed', self::handleStyles($record['formatted']))),
                     $context,
                     $extra,
@@ -176,19 +177,21 @@
         static $colors = array('blue', 'green', 'red', 'magenta', 'orange', 'black', 'grey');
         static $labels = array();
 
-        return preg_replace_callback('/macro\s*:(.*?)(?:;|$)/', function ($m) use ($string, &$colors, &$labels) {
-            if (trim($m[1]) === 'autolabel') {
-                // Format the string as a label with consistent auto assigned background color
-                if (!isset($labels[$string])) {
-                    $labels[$string] = $colors[count($labels) % count($colors)];
-                }
-                $color = $labels[$string];
+        return preg_replace_callback(
+            '/macro\s*:(.*?)(?:;|$)/', function ($m) use ($string, &$colors, &$labels) {
+                if (trim($m[1]) === 'autolabel') {
+                    // Format the string as a label with consistent auto assigned background color
+                    if (!isset($labels[$string])) {
+                        $labels[$string] = $colors[count($labels) % count($colors)];
+                    }
+                    $color = $labels[$string];
 
-                return "background-color: $color; color: white; border-radius: 3px; padding: 0 2px 0 2px";
-            }
+                    return "background-color: $color; color: white; border-radius: 3px; padding: 0 2px 0 2px";
+                }
 
-            return $m[1];
-        }, $style);
+                return $m[1];
+            }, $style
+        );
     }
 
     private static function dump($title, array $dict)

--- vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php
+++ PHP_CodeSniffer
@@ -101,8 +101,8 @@
     /**
      * Creates & sends header for a record
      *
-     * @see sendHeader()
-     * @see send()
+     * @see   sendHeader()
+     * @see   send()
      * @param array $record
      */
     protected function write(array $record)

--- vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php
+++ PHP_CodeSniffer
@@ -25,13 +25,15 @@
 
     public function __construct(array $options = array(), $level = Logger::DEBUG, $bubble = true)
     {
-        $this->options = array_merge(array(
+        $this->options = array_merge(
+            array(
             'host'     => 'localhost',
             'port'     => 5984,
             'dbname'   => 'logger',
             'username' => null,
             'password' => null,
-        ), $options);
+            ), $options
+        );
 
         parent::__construct($level, $bubble);
     }
@@ -47,7 +49,8 @@
         }
 
         $url = 'http://'.$basicAuth.$this->options['host'].':'.$this->options['port'].'/'.$this->options['dbname'];
-        $context = stream_context_create(array(
+        $context = stream_context_create(
+            array(
             'http' => array(
                 'method'        => 'POST',
                 'content'       => $record['formatted'],
@@ -55,7 +58,8 @@
                 'max_redirects' => 0,
                 'header'        => 'Content-type: application/json',
             ),
-        ));
+            )
+        );
 
         if (false === @file_get_contents($url, null, $context)) {
             throw new \RuntimeException(sprintf('Could not connect to %s', $url));

--- vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php
+++ PHP_CodeSniffer
@@ -16,7 +16,7 @@
 /**
  * Logs to Cube.
  *
- * @link http://square.github.com/cube/
+ * @link   http://square.github.com/cube/
  * @author Wan Chen <kami@kamisama.me>
  */
 class CubeHandler extends AbstractProcessingHandler
@@ -46,7 +46,8 @@
         if (!in_array($urlInfo['scheme'], $this->acceptedSchemes)) {
             throw new \UnexpectedValueException(
                 'Invalid protocol (' . $urlInfo['scheme']  . ').'
-                . ' Valid options are ' . implode(', ', $this->acceptedSchemes));
+                . ' Valid options are ' . implode(', ', $this->acceptedSchemes)
+            );
         }
 
         $this->scheme = $urlInfo['scheme'];
@@ -80,6 +81,7 @@
 
     /**
      * Establish a connection to a http server
+     *
      * @throws \LogicException when no curl extension
      */
     protected function connectHttp()
@@ -141,10 +143,12 @@
         }
 
         curl_setopt($this->httpConnection, CURLOPT_POSTFIELDS, '['.$data.']');
-        curl_setopt($this->httpConnection, CURLOPT_HTTPHEADER, array(
+        curl_setopt(
+            $this->httpConnection, CURLOPT_HTTPHEADER, array(
             'Content-Type: application/json',
             'Content-Length: ' . strlen('['.$data.']'),
-        ));
+            )
+        );
 
         Curl\Util::execute($this->httpConnection, 5, false);
     }

--- vendor/monolog/monolog/src/Monolog/Handler/Curl/Util.php
+++ PHP_CodeSniffer
@@ -26,7 +26,7 @@
     /**
      * Executes a CURL request with optional retries and exception on failure
      *
-     * @param  resource          $ch curl handler
+     * @param  resource $ch curl handler
      * @throws \RuntimeException
      */
     public static function execute($ch, $retries = 5, $closeAfterDone = true)

--- vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php
+++ PHP_CodeSniffer
@@ -19,7 +19,7 @@
 /**
  * Amazon DynamoDB handler (http://aws.amazon.com/dynamodb/)
  *
- * @link https://github.com/aws/aws-sdk-php/
+ * @link   https://github.com/aws/aws-sdk-php/
  * @author Andrew Lawson <adlawson@gmail.com>
  */
 class DynamoDbHandler extends AbstractProcessingHandler
@@ -62,10 +62,12 @@
         $filtered = $this->filterEmptyFields($record['formatted']);
         $formatted = $this->client->formatAttributes($filtered);
 
-        $this->client->putItem(array(
+        $this->client->putItem(
+            array(
             'TableName' => $this->table,
             'Item' => $formatted,
-        ));
+            )
+        );
     }
 
     /**
@@ -74,9 +76,11 @@
      */
     protected function filterEmptyFields(array $record)
     {
-        return array_filter($record, function ($value) {
-            return !empty($value) || false === $value || 0 === $value;
-        });
+        return array_filter(
+            $record, function ($value) {
+                return !empty($value) || false === $value || 0 === $value;
+            }
+        );
     }
 
     /**

--- vendor/monolog/monolog/src/Monolog/Handler/ElasticSearchHandler.php
+++ PHP_CodeSniffer
@@ -86,6 +86,7 @@
 
     /**
      * Getter options
+     *
      * @return array
      */
     public function getOptions()
@@ -112,7 +113,8 @@
 
     /**
      * Use Elasticsearch bulk API to send list of documents
-     * @param  array             $documents
+     *
+     * @param  array $documents
      * @throws \RuntimeException
      */
     protected function bulkSend(array $documents)

--- vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php
+++ PHP_CodeSniffer
@@ -80,9 +80,13 @@
         } else {
             $minLevelOrList = Logger::toMonologLevel($minLevelOrList);
             $maxLevel = Logger::toMonologLevel($maxLevel);
-            $acceptedLevels = array_values(array_filter(Logger::getLevels(), function ($level) use ($minLevelOrList, $maxLevel) {
-                return $level >= $minLevelOrList && $level <= $maxLevel;
-            }));
+            $acceptedLevels = array_values(
+                array_filter(
+                    Logger::getLevels(), function ($level) use ($minLevelOrList, $maxLevel) {
+                        return $level >= $minLevelOrList && $level <= $maxLevel;
+                    }
+                )
+            );
         }
         $this->acceptedLevels = array_flip($acceptedLevels);
     }

--- vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ActivationStrategyInterface.php
+++ PHP_CodeSniffer
@@ -21,7 +21,7 @@
     /**
      * Returns whether the given record activates the handler.
      *
-     * @param  array   $record
+     * @param  array $record
      * @return Boolean
      */
     public function isHandlerActivated(array $record);

--- vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php
+++ PHP_CodeSniffer
@@ -132,9 +132,11 @@
     {
         if (null !== $this->passthruLevel) {
             $level = $this->passthruLevel;
-            $this->buffer = array_filter($this->buffer, function ($record) use ($level) {
-                return $record['level'] >= $level;
-            });
+            $this->buffer = array_filter(
+                $this->buffer, function ($record) use ($level) {
+                    return $record['level'] >= $level;
+                }
+            );
             if (count($this->buffer) > 0) {
                 $this->handler->handleBatch($this->buffer);
                 $this->buffer = array();

--- vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php
+++ PHP_CodeSniffer
@@ -47,6 +47,7 @@
 
     /**
      * Shared static message index between potentially multiple handlers
+     *
      * @var int
      */
     protected static $messageIndex = 1;
@@ -70,8 +71,8 @@
     /**
      * Creates message header from record
      *
-     * @see createHeader()
-     * @param  array  $record
+     * @see    createHeader()
+     * @param  array $record
      * @return string
      */
     protected function createRecordHeader(array $record)
@@ -95,8 +96,8 @@
     /**
      * Wildfire initialization headers to enable message parsing
      *
-     * @see createHeader()
-     * @see sendHeader()
+     * @see    createHeader()
+     * @see    sendHeader()
      * @return array
      */
     protected function getInitHeaders()
@@ -125,8 +126,8 @@
     /**
      * Creates & sends header for a record, ensuring init headers have been sent prior
      *
-     * @see sendHeader()
-     * @see sendInitHeaders()
+     * @see   sendHeader()
+     * @see   sendInitHeaders()
      * @param array $record
      */
     protected function write(array $record)

--- vendor/monolog/monolog/src/Monolog/Handler/FleepHookHandler.php
+++ PHP_CodeSniffer
@@ -19,7 +19,7 @@
  *
  * You'll need a Fleep.io account to use this handler.
  *
- * @see https://fleep.io/integrations/webhooks/ Fleep Webhooks Documentation
+ * @see    https://fleep.io/integrations/webhooks/ Fleep Webhooks Documentation
  * @author Ando Roots <ando@sqroot.eu>
  */
 class FleepHookHandler extends SocketHandler
@@ -39,9 +39,9 @@
      * For instructions on how to create a new web hook in your conversations
      * see https://fleep.io/integrations/webhooks/
      *
-     * @param  string                    $token  Webhook token
-     * @param  bool|int                  $level  The minimum logging level at which this handler will be triggered
-     * @param  bool                      $bubble Whether the messages that are handled can bubble up the stack or not
+     * @param  string   $token  Webhook token
+     * @param  bool|int $level  The minimum logging level at which this handler will be triggered
+     * @param  bool     $bubble Whether the messages that are handled can bubble up the stack or not
      * @throws MissingExtensionException
      */
     public function __construct($token, $level = Logger::DEBUG, $bubble = true)
@@ -82,7 +82,7 @@
     /**
      * {@inheritdoc}
      *
-     * @param  array  $record
+     * @param  array $record
      * @return string
      */
     protected function generateDataStream($record)
@@ -112,7 +112,7 @@
     /**
      * Builds the body of API call
      *
-     * @param  array  $record
+     * @param  array $record
      * @return string
      */
     private function buildContent($record)

--- vendor/monolog/monolog/src/Monolog/Handler/FlowdockHandler.php
+++ PHP_CodeSniffer
@@ -24,7 +24,7 @@
  * API token - Flowdock API token
  *
  * @author Dominik Liebler <liebler.dominik@gmail.com>
- * @see https://www.flowdock.com/api/push
+ * @see    https://www.flowdock.com/api/push
  */
 class FlowdockHandler extends SocketHandler
 {
@@ -87,7 +87,7 @@
     /**
      * {@inheritdoc}
      *
-     * @param  array  $record
+     * @param  array $record
      * @return string
      */
     protected function generateDataStream($record)
@@ -100,7 +100,7 @@
     /**
      * Builds the body of API call
      *
-     * @param  array  $record
+     * @param  array $record
      * @return string
      */
     private function buildContent($record)

--- vendor/monolog/monolog/src/Monolog/Handler/HandlerInterface.php
+++ PHP_CodeSniffer
@@ -45,7 +45,7 @@
      * Unless the bubbling is interrupted (by returning true), the Logger class will keep on
      * calling further handlers in the stack with a given log record.
      *
-     * @param  array   $record The record to handle
+     * @param  array $record The record to handle
      * @return Boolean true means that this handler handled the record, and that bubbling is not permitted.
      *                        false means the record was either not processed or that this handler allows bubbling.
      */

--- vendor/monolog/monolog/src/Monolog/Handler/HandlerWrapper.php
+++ PHP_CodeSniffer
@@ -37,6 +37,7 @@
 
     /**
      * HandlerWrapper constructor.
+     *
      * @param HandlerInterface $handler
      */
     public function __construct(HandlerInterface $handler)

--- vendor/monolog/monolog/src/Monolog/Handler/HipChatHandler.php
+++ PHP_CodeSniffer
@@ -116,7 +116,7 @@
     /**
      * {@inheritdoc}
      *
-     * @param  array  $record
+     * @param  array $record
      * @return string
      */
     protected function generateDataStream($record)
@@ -129,7 +129,7 @@
     /**
      * Builds the body of API call
      *
-     * @param  array  $record
+     * @param  array $record
      * @return string
      */
     private function buildContent($record)
@@ -192,22 +192,22 @@
     /**
      * Assigns a color to each level of log records.
      *
-     * @param  int    $level
+     * @param  int $level
      * @return string
      */
     protected function getAlertColor($level)
     {
         switch (true) {
-            case $level >= Logger::ERROR:
-                return 'red';
-            case $level >= Logger::WARNING:
-                return 'yellow';
-            case $level >= Logger::INFO:
-                return 'green';
-            case $level == Logger::DEBUG:
-                return 'gray';
-            default:
-                return 'yellow';
+        case $level >= Logger::ERROR:
+            return 'red';
+        case $level >= Logger::WARNING:
+            return 'yellow';
+        case $level >= Logger::INFO:
+            return 'green';
+        case $level == Logger::DEBUG:
+            return 'gray';
+        default:
+            return 'yellow';
         }
     }
 
@@ -253,7 +253,7 @@
      * will be the highest level from the given records. Datetime will be taken
      * from the first record.
      *
-     * @param $records
+     * @param  $records
      * @return array
      */
     private function combineRecords($records)

--- vendor/monolog/monolog/src/Monolog/Handler/IFTTTHandler.php
+++ PHP_CodeSniffer
@@ -60,9 +60,11 @@
         curl_setopt($ch, CURLOPT_POST, true);
         curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
         curl_setopt($ch, CURLOPT_POSTFIELDS, $postString);
-        curl_setopt($ch, CURLOPT_HTTPHEADER, array(
+        curl_setopt(
+            $ch, CURLOPT_HTTPHEADER, array(
             "Content-Type: application/json",
-        ));
+            )
+        );
 
         Curl\Util::execute($ch);
     }

--- vendor/monolog/monolog/src/Monolog/Handler/LogEntriesHandler.php
+++ PHP_CodeSniffer
@@ -45,7 +45,7 @@
     /**
      * {@inheritdoc}
      *
-     * @param  array  $record
+     * @param  array $record
      * @return string
      */
     protected function generateDataStream($record)

--- vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php
+++ PHP_CodeSniffer
@@ -65,9 +65,11 @@
     {
         $level = $this->level;
 
-        $records = array_filter($records, function ($record) use ($level) {
-            return ($record['level'] >= $level);
-        });
+        $records = array_filter(
+            $records, function ($record) use ($level) {
+                return ($record['level'] >= $level);
+            }
+        );
 
         if ($records) {
             $this->send($this->getFormatter()->formatBatch($records), self::ENDPOINT_BATCH);

--- vendor/monolog/monolog/src/Monolog/Handler/MandrillHandler.php
+++ PHP_CodeSniffer
@@ -57,11 +57,15 @@
         curl_setopt($ch, CURLOPT_URL, 'https://mandrillapp.com/api/1.0/messages/send-raw.json');
         curl_setopt($ch, CURLOPT_POST, 1);
         curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
-        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query(array(
-            'key' => $this->apiKey,
-            'raw_message' => (string) $message,
-            'async' => false,
-        )));
+        curl_setopt(
+            $ch, CURLOPT_POSTFIELDS, http_build_query(
+                array(
+                'key' => $this->apiKey,
+                'raw_message' => (string) $message,
+                'async' => false,
+                )
+            )
+        );
 
         Curl\Util::execute($ch);
     }

--- vendor/monolog/monolog/src/Monolog/Handler/MissingExtensionException.php
+++ PHP_CodeSniffer
@@ -14,7 +14,7 @@
 /**
  * Exception can be thrown if an extension for an handler is missing
  *
- * @author  Christian Bergau <cbergau86@gmail.com>
+ * @author Christian Bergau <cbergau86@gmail.com>
  */
 class MissingExtensionException extends \Exception
 {

--- vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php
+++ PHP_CodeSniffer
@@ -24,42 +24,49 @@
 {
     /**
      * The email addresses to which the message will be sent
+     *
      * @var array
      */
     protected $to;
 
     /**
      * The subject of the email
+     *
      * @var string
      */
     protected $subject;
 
     /**
      * Optional headers for the message
+     *
      * @var array
      */
     protected $headers = array();
 
     /**
      * Optional parameters for the message
+     *
      * @var array
      */
     protected $parameters = array();
 
     /**
      * The wordwrap length for the message
+     *
      * @var int
      */
     protected $maxColumnWidth;
 
     /**
      * The Content-type for the message
+     *
      * @var string
      */
     protected $contentType = 'text/plain';
 
     /**
      * The encoding for the message
+     *
      * @var string
      */
     protected $encoding = 'utf-8';

--- vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php
+++ PHP_CodeSniffer
@@ -130,7 +130,7 @@
      * Returns the appname where this log should be sent. Each log can override the default appname, set in this
      * handler's constructor, by providing the appname in it's context.
      *
-     * @param  array       $context
+     * @param  array $context
      * @return null|string
      */
     protected function getAppName(array $context)

--- vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php
+++ PHP_CodeSniffer
@@ -62,7 +62,9 @@
         'dataStorage' => null, // PhpConsole\Storage|null Fixes problem with custom $_SESSION handler(see http://goo.gl/Ne8juJ)
     );
 
-    /** @var Connector */
+    /**
+ * @var Connector 
+*/
     private $connector;
 
     /**

--- vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php
+++ PHP_CodeSniffer
@@ -34,6 +34,7 @@
 
     /**
      * All parameters that can be sent to Pushover
+     *
      * @see https://pushover.net/api
      * @var array
      */
@@ -55,6 +56,7 @@
 
     /**
      * Sounds the api supports by default
+     *
      * @see https://pushover.net/api#sounds
      * @var array
      */
@@ -176,6 +178,7 @@
 
     /**
      * Use the formatted message?
+     *
      * @param bool $value
      */
     public function useFormattedMessage($value)

--- vendor/monolog/monolog/src/Monolog/Handler/RavenHandler.php
+++ PHP_CodeSniffer
@@ -74,22 +74,26 @@
         $level = $this->level;
 
         // filter records based on their level
-        $records = array_filter($records, function ($record) use ($level) {
-            return $record['level'] >= $level;
-        });
+        $records = array_filter(
+            $records, function ($record) use ($level) {
+                return $record['level'] >= $level;
+            }
+        );
 
         if (!$records) {
             return;
         }
 
         // the record with the highest severity is the "main" one
-        $record = array_reduce($records, function ($highest, $record) {
-            if ($record['level'] >= $highest['level']) {
-                return $record;
-            }
+        $record = array_reduce(
+            $records, function ($highest, $record) {
+                if ($record['level'] >= $highest['level']) {
+                    return $record;
+                }
 
-            return $highest;
-        });
+                return $highest;
+            }
+        );
 
         // the other ones are added as a context item
         $logs = array();

--- vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php
+++ PHP_CodeSniffer
@@ -80,10 +80,12 @@
         } else {
             $redisKey = $this->redisKey;
             $capSize = $this->capSize;
-            $this->redisClient->transaction(function ($tx) use ($record, $redisKey, $capSize) {
-                $tx->rpush($redisKey, $record["formatted"]);
-                $tx->ltrim($redisKey, -$capSize, -1);
-            });
+            $this->redisClient->transaction(
+                function ($tx) use ($record, $redisKey, $capSize) {
+                    $tx->rpush($redisKey, $record["formatted"]);
+                    $tx->ltrim($redisKey, -$capSize, -1);
+                }
+            );
         }
     }
 

--- vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php
+++ PHP_CodeSniffer
@@ -127,15 +127,20 @@
         }
 
         // Sorting the files by name to remove the older ones
-        usort($logFiles, function ($a, $b) {
-            return strcmp($b, $a);
-        });
+        usort(
+            $logFiles, function ($a, $b) {
+                return strcmp($b, $a);
+            }
+        );
 
         foreach (array_slice($logFiles, $this->maxFiles) as $file) {
             if (is_writable($file)) {
                 // suppress errors here as unlink() might fail if two processes
                 // are cleaning up/rotating at the same time
-                set_error_handler(function ($errno, $errstr, $errfile, $errline) {});
+                set_error_handler(
+                    function ($errno, $errstr, $errfile, $errline) {
+                    }
+                );
                 unlink($file);
                 restore_error_handler();
             }

--- vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php
+++ PHP_CodeSniffer
@@ -24,42 +24,49 @@
 {
     /**
      * Slack API token
+     *
      * @var string
      */
     private $token;
 
     /**
      * Slack channel (encoded ID or name)
+     *
      * @var string
      */
     private $channel;
 
     /**
      * Name of a bot
+     *
      * @var string
      */
     private $username;
 
     /**
      * Emoji icon name
+     *
      * @var string
      */
     private $iconEmoji;
 
     /**
      * Whether the message should be added to Slack as attachment (plain text otherwise)
+     *
      * @var bool
      */
     private $useAttachment;
 
     /**
      * Whether the the context/extra messages added to Slack as attachments are in a short style
+     *
      * @var bool
      */
     private $useShortAttachment;
 
     /**
      * Whether the attachment should include context and extra data
+     *
      * @var bool
      */
     private $includeContextAndExtra;
@@ -70,15 +77,15 @@
     private $lineFormatter;
 
     /**
-     * @param  string                    $token                  Slack API token
-     * @param  string                    $channel                Slack channel (encoded ID or name)
-     * @param  string                    $username               Name of a bot
-     * @param  bool                      $useAttachment          Whether the message should be added to Slack as attachment (plain text otherwise)
-     * @param  string|null               $iconEmoji              The emoji name to use (or null)
-     * @param  int                       $level                  The minimum logging level at which this handler will be triggered
-     * @param  bool                      $bubble                 Whether the messages that are handled can bubble up the stack or not
-     * @param  bool                      $useShortAttachment     Whether the the context/extra messages added to Slack as attachments are in a short style
-     * @param  bool                      $includeContextAndExtra Whether the attachment should include context and extra data
+     * @param  string      $token                  Slack API token
+     * @param  string      $channel                Slack channel (encoded ID or name)
+     * @param  string      $username               Name of a bot
+     * @param  bool        $useAttachment          Whether the message should be added to Slack as attachment (plain text otherwise)
+     * @param  string|null $iconEmoji              The emoji name to use (or null)
+     * @param  int         $level                  The minimum logging level at which this handler will be triggered
+     * @param  bool        $bubble                 Whether the messages that are handled can bubble up the stack or not
+     * @param  bool        $useShortAttachment     Whether the the context/extra messages added to Slack as attachments are in a short style
+     * @param  bool        $includeContextAndExtra Whether the attachment should include context and extra data
      * @throws MissingExtensionException If no OpenSSL PHP extension configured
      */
     public function __construct($token, $channel, $username = 'Monolog', $useAttachment = true, $iconEmoji = null, $level = Logger::CRITICAL, $bubble = true, $useShortAttachment = false, $includeContextAndExtra = false)
@@ -105,7 +112,7 @@
     /**
      * {@inheritdoc}
      *
-     * @param  array  $record
+     * @param  array $record
      * @return string
      */
     protected function generateDataStream($record)
@@ -118,7 +125,7 @@
     /**
      * Builds the body of API call
      *
-     * @param  array  $record
+     * @param  array $record
      * @return string
      */
     private function buildContent($record)
@@ -252,27 +259,27 @@
      * Returned a Slack message attachment color associated with
      * provided level.
      *
-     * @param  int    $level
+     * @param  int $level
      * @return string
      */
     protected function getAttachmentColor($level)
     {
         switch (true) {
-            case $level >= Logger::ERROR:
-                return 'danger';
-            case $level >= Logger::WARNING:
-                return 'warning';
-            case $level >= Logger::INFO:
-                return 'good';
-            default:
-                return '#e3e4e6';
+        case $level >= Logger::ERROR:
+            return 'danger';
+        case $level >= Logger::WARNING:
+            return 'warning';
+        case $level >= Logger::INFO:
+            return 'good';
+        default:
+            return '#e3e4e6';
         }
     }
 
     /**
      * Stringifies an array of key/value pairs to be used in attachment fields
      *
-     * @param  array  $fields
+     * @param  array $fields
      * @return string
      */
     protected function stringify($fields)

--- vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php
+++ PHP_CodeSniffer
@@ -49,8 +49,8 @@
     /**
      * Creates instance of Swift_Message to be sent
      *
-     * @param  string         $content formatted email body to be sent
-     * @param  array          $records Log records that formed the content
+     * @param  string $content formatted email body to be sent
+     * @param  array  $records Log records that formed the content
      * @return \Swift_Message
      */
     protected function buildMessage($content, array $records)

--- vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php
+++ PHP_CodeSniffer
@@ -90,23 +90,29 @@
             $record = $record['message'];
         }
 
-        return $this->hasRecordThatPasses(function ($rec) use ($record) {
-            return $rec['message'] === $record;
-        }, $level);
+        return $this->hasRecordThatPasses(
+            function ($rec) use ($record) {
+                return $rec['message'] === $record;
+            }, $level
+        );
     }
 
     public function hasRecordThatContains($message, $level)
     {
-        return $this->hasRecordThatPasses(function ($rec) use ($message) {
-            return strpos($rec['message'], $message) !== false;
-        }, $level);
+        return $this->hasRecordThatPasses(
+            function ($rec) use ($message) {
+                return strpos($rec['message'], $message) !== false;
+            }, $level
+        );
     }
 
     public function hasRecordThatMatches($regex, $level)
     {
-        return $this->hasRecordThatPasses(function ($rec) use ($regex) {
-            return preg_match($regex, $rec['message']) > 0;
-        }, $level);
+        return $this->hasRecordThatPasses(
+            function ($rec) use ($regex) {
+                return preg_match($regex, $rec['message']) > 0;
+            }, $level
+        );
     }
 
     public function hasRecordThatPasses($predicate, $level)

--- vendor/monolog/monolog/src/Monolog/Handler/ZendMonitorHandler.php
+++ PHP_CodeSniffer
@@ -16,7 +16,7 @@
 /**
  * Handler sending logs to Zend Monitor
  *
- * @author  Christian Bergau <cbergau86@gmail.com>
+ * @author Christian Bergau <cbergau86@gmail.com>
  */
 class ZendMonitorHandler extends AbstractProcessingHandler
 {
@@ -39,8 +39,8 @@
     /**
      * Construct
      *
-     * @param  int                       $level
-     * @param  bool                      $bubble
+     * @param  int  $level
+     * @param  bool $bubble
      * @throws MissingExtensionException
      */
     public function __construct($level = Logger::DEBUG, $bubble = true)

--- vendor/monolog/monolog/src/Monolog/Logger.php
+++ PHP_CodeSniffer
@@ -278,9 +278,9 @@
     /**
      * Adds a log record.
      *
-     * @param  int     $level   The logging level
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  int    $level   The logging level
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function addRecord($level, $message, array $context = array())
@@ -346,8 +346,8 @@
     /**
      * Adds a log record at the DEBUG level.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function addDebug($message, array $context = array())
@@ -358,8 +358,8 @@
     /**
      * Adds a log record at the INFO level.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function addInfo($message, array $context = array())
@@ -370,8 +370,8 @@
     /**
      * Adds a log record at the NOTICE level.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function addNotice($message, array $context = array())
@@ -382,8 +382,8 @@
     /**
      * Adds a log record at the WARNING level.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function addWarning($message, array $context = array())
@@ -394,8 +394,8 @@
     /**
      * Adds a log record at the ERROR level.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function addError($message, array $context = array())
@@ -406,8 +406,8 @@
     /**
      * Adds a log record at the CRITICAL level.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function addCritical($message, array $context = array())
@@ -418,8 +418,8 @@
     /**
      * Adds a log record at the ALERT level.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function addAlert($message, array $context = array())
@@ -430,8 +430,8 @@
     /**
      * Adds a log record at the EMERGENCY level.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function addEmergency($message, array $context = array())
@@ -452,7 +452,7 @@
     /**
      * Gets the name of the logging level.
      *
-     * @param  int    $level
+     * @param  int $level
      * @return string
      */
     public static function getLevelName($level)
@@ -467,7 +467,7 @@
     /**
      * Converts PSR-3 levels to Monolog ones if necessary
      *
-     * @param string|int Level number (monolog) or name (PSR-3)
+     * @param  string|int Level number (monolog) or name (PSR-3)
      * @return int
      */
     public static function toMonologLevel($level)
@@ -482,7 +482,7 @@
     /**
      * Checks whether the Logger has a handler that listens on the given level
      *
-     * @param  int     $level
+     * @param  int $level
      * @return Boolean
      */
     public function isHandling($level)
@@ -505,9 +505,9 @@
      *
      * This method allows for compatibility with common interfaces.
      *
-     * @param  mixed   $level   The log level
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  mixed  $level   The log level
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function log($level, $message, array $context = array())
@@ -522,8 +522,8 @@
      *
      * This method allows for compatibility with common interfaces.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function debug($message, array $context = array())
@@ -536,8 +536,8 @@
      *
      * This method allows for compatibility with common interfaces.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function info($message, array $context = array())
@@ -550,8 +550,8 @@
      *
      * This method allows for compatibility with common interfaces.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function notice($message, array $context = array())
@@ -564,8 +564,8 @@
      *
      * This method allows for compatibility with common interfaces.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function warn($message, array $context = array())
@@ -578,8 +578,8 @@
      *
      * This method allows for compatibility with common interfaces.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function warning($message, array $context = array())
@@ -592,8 +592,8 @@
      *
      * This method allows for compatibility with common interfaces.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function err($message, array $context = array())
@@ -606,8 +606,8 @@
      *
      * This method allows for compatibility with common interfaces.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function error($message, array $context = array())
@@ -620,8 +620,8 @@
      *
      * This method allows for compatibility with common interfaces.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function crit($message, array $context = array())
@@ -634,8 +634,8 @@
      *
      * This method allows for compatibility with common interfaces.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function critical($message, array $context = array())
@@ -648,8 +648,8 @@
      *
      * This method allows for compatibility with common interfaces.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function alert($message, array $context = array())
@@ -662,8 +662,8 @@
      *
      * This method allows for compatibility with common interfaces.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function emerg($message, array $context = array())
@@ -676,8 +676,8 @@
      *
      * This method allows for compatibility with common interfaces.
      *
-     * @param  string  $message The log message
-     * @param  array   $context The log context
+     * @param  string $message The log message
+     * @param  array  $context The log context
      * @return Boolean Whether the record has been processed
      */
     public function emergency($message, array $context = array())

--- vendor/monolog/monolog/src/Monolog/Processor/MemoryPeakUsageProcessor.php
+++ PHP_CodeSniffer
@@ -14,7 +14,7 @@
 /**
  * Injects memory_get_peak_usage in all records
  *
- * @see Monolog\Processor\MemoryProcessor::__construct() for options
+ * @see    Monolog\Processor\MemoryProcessor::__construct() for options
  * @author Rob Jensen
  */
 class MemoryPeakUsageProcessor extends MemoryProcessor

--- vendor/monolog/monolog/src/Monolog/Processor/MemoryProcessor.php
+++ PHP_CodeSniffer
@@ -41,7 +41,7 @@
     /**
      * Formats bytes into a human readable string if $this->useFormatting is true, otherwise return $bytes as is
      *
-     * @param  int        $bytes
+     * @param  int $bytes
      * @return string|int Formatted string if $this->useFormatting is true, otherwise return $bytes as is
      */
     protected function formatBytes($bytes)

--- vendor/monolog/monolog/src/Monolog/Processor/MemoryUsageProcessor.php
+++ PHP_CodeSniffer
@@ -14,7 +14,7 @@
 /**
  * Injects memory_get_usage in all records
  *
- * @see Monolog\Processor\MemoryProcessor::__construct() for options
+ * @see    Monolog\Processor\MemoryProcessor::__construct() for options
  * @author Rob Jensen
  */
 class MemoryUsageProcessor extends MemoryProcessor

--- vendor/monolog/monolog/src/Monolog/Registry.php
+++ PHP_CodeSniffer
@@ -47,9 +47,9 @@
     /**
      * Adds new logging channel to the registry
      *
-     * @param  Logger                    $logger    Instance of the logging channel
-     * @param  string|null               $name      Name of the logging channel ($logger->getName() by default)
-     * @param  bool                      $overwrite Overwrite instance in the registry if the given name already exists?
+     * @param  Logger      $logger    Instance of the logging channel
+     * @param  string|null $name      Name of the logging channel ($logger->getName() by default)
+     * @param  bool        $overwrite Overwrite instance in the registry if the given name already exists?
      * @throws \InvalidArgumentException If $overwrite set to false and named Logger instance already exists
      */
     public static function addLogger(Logger $logger, $name = null, $overwrite = false)
@@ -106,7 +106,7 @@
     /**
      * Gets Logger instance from the registry
      *
-     * @param  string                    $name Name of the requested Logger instance
+     * @param  string $name Name of the requested Logger instance
      * @throws \InvalidArgumentException If named Logger instance is not in the registry
      * @return Logger                    Requested instance of Logger
      */
@@ -122,8 +122,8 @@
     /**
      * Gets Logger instance from the registry via static method call
      *
-     * @param  string                    $name      Name of the requested Logger instance
-     * @param  array                     $arguments Arguments passed to static method call
+     * @param  string $name      Name of the requested Logger instance
+     * @param  array  $arguments Arguments passed to static method call
      * @throws \InvalidArgumentException If named Logger instance is not in the registry
      * @return Logger                    Requested instance of Logger
      */

--- vendor/monolog/monolog/tests/Monolog/Formatter/JsonFormatterTest.php
+++ PHP_CodeSniffer
@@ -70,9 +70,11 @@
             $this->getRecord(Logger::WARNING),
             $this->getRecord(Logger::DEBUG),
         );
-        array_walk($expected, function (&$value, $key) {
-            $value = json_encode($value);
-        });
+        array_walk(
+            $expected, function (&$value, $key) {
+                $value = json_encode($value);
+            }
+        );
         $this->assertEquals(implode("\n", $expected), $formatter->formatBatch($records));
     }
 
@@ -80,14 +82,16 @@
     {
         $formatter = new JsonFormatter();
         $exception = new \RuntimeException('Foo');
-        $message = $formatter->format(array(
+        $message = $formatter->format(
+            array(
             'level_name' => 'CRITICAL',
             'channel' => 'core',
             'context' => array('exception' => $exception),
             'datetime' => new \DateTime(),
             'extra' => array(),
             'message' => 'foobar',
-        ));
+            )
+        );
 
         if (version_compare(PHP_VERSION, '5.4.0', '>=')) {
             $path = substr(json_encode($exception->getFile(), JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE), 1, -1);
@@ -101,14 +105,16 @@
     {
         $formatter = new JsonFormatter();
         $exception = new \RuntimeException('Foo', 0, new \LogicException('Wut?'));
-        $message = $formatter->format(array(
+        $message = $formatter->format(
+            array(
             'level_name' => 'CRITICAL',
             'channel' => 'core',
             'context' => array('exception' => $exception),
             'datetime' => new \DateTime(),
             'extra' => array(),
             'message' => 'foobar',
-        ));
+            )
+        );
 
         if (version_compare(PHP_VERSION, '5.4.0', '>=')) {
             $pathPrevious = substr(json_encode($exception->getPrevious()->getFile(), JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE), 1, -1);

--- vendor/monolog/monolog/tests/Monolog/Formatter/LineFormatterTest.php
+++ PHP_CodeSniffer
@@ -19,21 +19,24 @@
     public function testDefFormatWithString()
     {
         $formatter = new LineFormatter(null, 'Y-m-d');
-        $message = $formatter->format(array(
+        $message = $formatter->format(
+            array(
             'level_name' => 'WARNING',
             'channel' => 'log',
             'context' => array(),
             'message' => 'foo',
             'datetime' => new \DateTime,
             'extra' => array(),
-        ));
+            )
+        );
         $this->assertEquals('['.date('Y-m-d').'] log.WARNING: foo [] []'."\n", $message);
     }
 
     public function testDefFormatWithArrayContext()
     {
         $formatter = new LineFormatter(null, 'Y-m-d');
-        $message = $formatter->format(array(
+        $message = $formatter->format(
+            array(
             'level_name' => 'ERROR',
             'channel' => 'meh',
             'message' => 'foo',
@@ -45,77 +48,88 @@
                 'bool' => false,
                 'null' => null,
             ),
-        ));
+            )
+        );
         $this->assertEquals('['.date('Y-m-d').'] meh.ERROR: foo {"foo":"bar","baz":"qux","bool":false,"null":null} []'."\n", $message);
     }
 
     public function testDefFormatExtras()
     {
         $formatter = new LineFormatter(null, 'Y-m-d');
-        $message = $formatter->format(array(
+        $message = $formatter->format(
+            array(
             'level_name' => 'ERROR',
             'channel' => 'meh',
             'context' => array(),
             'datetime' => new \DateTime,
             'extra' => array('ip' => '127.0.0.1'),
             'message' => 'log',
-        ));
+            )
+        );
         $this->assertEquals('['.date('Y-m-d').'] meh.ERROR: log [] {"ip":"127.0.0.1"}'."\n", $message);
     }
 
     public function testFormatExtras()
     {
         $formatter = new LineFormatter("[%datetime%] %channel%.%level_name%: %message% %context% %extra.file% %extra%\n", 'Y-m-d');
-        $message = $formatter->format(array(
+        $message = $formatter->format(
+            array(
             'level_name' => 'ERROR',
             'channel' => 'meh',
             'context' => array(),
             'datetime' => new \DateTime,
             'extra' => array('ip' => '127.0.0.1', 'file' => 'test'),
             'message' => 'log',
-        ));
+            )
+        );
         $this->assertEquals('['.date('Y-m-d').'] meh.ERROR: log [] test {"ip":"127.0.0.1"}'."\n", $message);
     }
 
     public function testContextAndExtraOptionallyNotShownIfEmpty()
     {
         $formatter = new LineFormatter(null, 'Y-m-d', false, true);
-        $message = $formatter->format(array(
+        $message = $formatter->format(
+            array(
             'level_name' => 'ERROR',
             'channel' => 'meh',
             'context' => array(),
             'datetime' => new \DateTime,
             'extra' => array(),
             'message' => 'log',
-        ));
+            )
+        );
         $this->assertEquals('['.date('Y-m-d').'] meh.ERROR: log  '."\n", $message);
     }
 
     public function testContextAndExtraReplacement()
     {
         $formatter = new LineFormatter('%context.foo% => %extra.foo%');
-        $message = $formatter->format(array(
+        $message = $formatter->format(
+            array(
             'level_name' => 'ERROR',
             'channel' => 'meh',
             'context' => array('foo' => 'bar'),
             'datetime' => new \DateTime,
             'extra' => array('foo' => 'xbar'),
             'message' => 'log',
-        ));
+            )
+        );
         $this->assertEquals('bar => xbar', $message);
     }
 
     public function testDefFormatWithObject()
     {
         $formatter = new LineFormatter(null, 'Y-m-d');
-        $message = $formatter->format(array(
+        $message = $formatter->format(
+            array(
             'level_name' => 'ERROR',
             'channel' => 'meh',
             'context' => array(),
             'datetime' => new \DateTime,
             'extra' => array('foo' => new TestFoo, 'bar' => new TestBar, 'baz' => array(), 'res' => fopen('php://memory', 'rb')),
             'message' => 'foobar',
-        ));
+            )
+        );
 
         $this->assertEquals('['.date('Y-m-d').'] meh.ERROR: foobar [] {"foo":"[object] (Monolog\\\\Formatter\\\\TestFoo: {\\"foo\\":\\"foo\\"})","bar":"[object] (Monolog\\\\Formatter\\\\TestBar: bar)","baz":[],"res":"[resource] (stream)"}'."\n", $message);
     }
@@ -123,14 +137,16 @@
     public function testDefFormatWithException()
     {
         $formatter = new LineFormatter(null, 'Y-m-d');
-        $message = $formatter->format(array(
+        $message = $formatter->format(
+            array(
             'level_name' => 'CRITICAL',
             'channel' => 'core',
             'context' => array('exception' => new \RuntimeException('Foo')),
             'datetime' => new \DateTime,
             'extra' => array(),
             'message' => 'foobar',
-        ));
+            )
+        );
 
         $path = str_replace('\\/', '/', json_encode(__FILE__));
 
@@ -141,14 +157,16 @@
     {
         $formatter = new LineFormatter(null, 'Y-m-d');
         $previous = new \LogicException('Wut?');
-        $message = $formatter->format(array(
+        $message = $formatter->format(
+            array(
             'level_name' => 'CRITICAL',
             'channel' => 'core',
             'context' => array('exception' => new \RuntimeException('Foo', 0, $previous)),
             'datetime' => new \DateTime,
             'extra' => array(),
             'message' => 'foobar',
-        ));
+            )
+        );
 
         $path = str_replace('\\/', '/', json_encode(__FILE__));
 
@@ -158,7 +176,8 @@
     public function testBatchFormat()
     {
         $formatter = new LineFormatter(null, 'Y-m-d');
-        $message = $formatter->formatBatch(array(
+        $message = $formatter->formatBatch(
+            array(
             array(
                 'level_name' => 'CRITICAL',
                 'channel' => 'test',
@@ -175,7 +194,8 @@
                 'datetime' => new \DateTime,
                 'extra' => array(),
             ),
-        ));
+            )
+        );
         $this->assertEquals('['.date('Y-m-d').'] test.CRITICAL: bar [] []'."\n".'['.date('Y-m-d').'] log.WARNING: foo [] []'."\n", $message);
     }
 

--- vendor/monolog/monolog/tests/Monolog/Formatter/NormalizerFormatterTest.php
+++ PHP_CodeSniffer
@@ -26,7 +26,8 @@
     public function testFormat()
     {
         $formatter = new NormalizerFormatter('Y-m-d');
-        $formatted = $formatter->format(array(
+        $formatted = $formatter->format(
+            array(
             'level_name' => 'ERROR',
             'channel' => 'meh',
             'message' => 'foo',
@@ -39,9 +40,11 @@
                 '-inf' => -INF,
                 'nan' => acos(4),
             ),
-        ));
+            )
+        );
 
-        $this->assertEquals(array(
+        $this->assertEquals(
+            array(
             'level_name' => 'ERROR',
             'channel' => 'meh',
             'message' => 'foo',
@@ -59,7 +62,8 @@
                 '-inf' => '-INF',
                 'nan' => 'NaN',
             ),
-        ), $formatted);
+            ), $formatted
+        );
     }
 
     public function testFormatExceptions()
@@ -67,37 +71,44 @@
         $formatter = new NormalizerFormatter('Y-m-d');
         $e = new \LogicException('bar');
         $e2 = new \RuntimeException('foo', 0, $e);
-        $formatted = $formatter->format(array(
+        $formatted = $formatter->format(
+            array(
             'exception' => $e2,
-        ));
+            )
+        );
 
         $this->assertGreaterThan(5, count($formatted['exception']['trace']));
         $this->assertTrue(isset($formatted['exception']['previous']));
         unset($formatted['exception']['trace'], $formatted['exception']['previous']);
 
-        $this->assertEquals(array(
+        $this->assertEquals(
+            array(
             'exception' => array(
                 'class'   => get_class($e2),
                 'message' => $e2->getMessage(),
                 'code'    => $e2->getCode(),
                 'file'    => $e2->getFile().':'.$e2->getLine(),
             ),
-        ), $formatted);
+            ), $formatted
+        );
     }
 
     public function testFormatToStringExceptionHandle()
     {
         $formatter = new NormalizerFormatter('Y-m-d');
         $this->setExpectedException('RuntimeException', 'Could not convert to string');
-        $formatter->format(array(
+        $formatter->format(
+            array(
             'myObject' => new TestToStringError(),
-        ));
+            )
+        );
     }
 
     public function testBatchFormat()
     {
         $formatter = new NormalizerFormatter('Y-m-d');
-        $formatted = $formatter->formatBatch(array(
+        $formatted = $formatter->formatBatch(
+            array(
             array(
                 'level_name' => 'CRITICAL',
                 'channel' => 'test',
@@ -114,8 +125,10 @@
                 'datetime' => new \DateTime,
                 'extra' => array(),
             ),
-        ));
-        $this->assertEquals(array(
+            )
+        );
+        $this->assertEquals(
+            array(
             array(
                 'level_name' => 'CRITICAL',
                 'channel' => 'test',
@@ -132,7 +145,8 @@
                 'datetime' => date('Y-m-d'),
                 'extra' => array(),
             ),
-        ), $formatted);
+            ), $formatted
+        );
     }
 
     /**
@@ -149,12 +163,14 @@
 
         // set an error handler to assert that the error is not raised anymore
         $that = $this;
-        set_error_handler(function ($level, $message, $file, $line, $context) use ($that) {
-            if (error_reporting() & $level) {
-                restore_error_handler();
-                $that->fail("$message should not be raised");
+        set_error_handler(
+            function ($level, $message, $file, $line, $context) use ($that) {
+                if (error_reporting() & $level) {
+                    restore_error_handler();
+                    $that->fail("$message should not be raised");
+                }
             }
-        });
+        );
 
         $formatter = new NormalizerFormatter();
         $reflMethod = new \ReflectionMethod($formatter, 'toJson');
@@ -173,12 +189,14 @@
 
         // set an error handler to assert that the error is not raised anymore
         $that = $this;
-        set_error_handler(function ($level, $message, $file, $line, $context) use ($that) {
-            if (error_reporting() & $level) {
-                restore_error_handler();
-                $that->fail("$message should not be raised");
+        set_error_handler(
+            function ($level, $message, $file, $line, $context) use ($that) {
+                if (error_reporting() & $level) {
+                    restore_error_handler();
+                    $that->fail("$message should not be raised");
+                }
             }
-        });
+        );
 
         $formatter = new NormalizerFormatter();
         $reflMethod = new \ReflectionMethod($formatter, 'toJson');
@@ -298,9 +316,11 @@
 
         // This happens i.e. in React promises or Guzzle streams where stream wrappers are registered
         // and no file or line are included in the trace because it's treated as internal function
-        set_error_handler(function ($errno, $errstr, $errfile, $errline) {
-            throw new \ErrorException($errstr, 0, $errno, $errfile, $errline);
-        });
+        set_error_handler(
+            function ($errno, $errstr, $errfile, $errline) {
+                throw new \ErrorException($errstr, 0, $errno, $errfile, $errline);
+            }
+        );
 
         try {
             // This will contain $resource and $wrappedResource as arguments in the trace item

--- vendor/monolog/monolog/tests/Monolog/Formatter/ScalarFormatterTest.php
+++ PHP_CodeSniffer
@@ -47,7 +47,8 @@
     public function testFormat()
     {
         $exception = new \Exception('foo');
-        $formatted = $this->formatter->format(array(
+        $formatted = $this->formatter->format(
+            array(
             'foo' => 'string',
             'bar' => 1,
             'baz' => false,
@@ -55,48 +56,61 @@
             'bat' => array('foo' => 'bar'),
             'bap' => \DateTime::createFromFormat(\DateTime::ISO8601, '1970-01-01T00:00:00+0000'),
             'ban' => $exception,
-        ));
+            )
+        );
 
-        $this->assertSame(array(
+        $this->assertSame(
+            array(
             'foo' => 'string',
             'bar' => 1,
             'baz' => false,
             'bam' => $this->encodeJson(array(1, 2, 3)),
             'bat' => $this->encodeJson(array('foo' => 'bar')),
             'bap' => '1970-01-01 00:00:00',
-            'ban' => $this->encodeJson(array(
+            'ban' => $this->encodeJson(
+                array(
                 'class'   => get_class($exception),
                 'message' => $exception->getMessage(),
                 'code'    => $exception->getCode(),
                 'file'    => $exception->getFile() . ':' . $exception->getLine(),
                 'trace'   => $this->buildTrace($exception),
-            )),
-        ), $formatted);
+                )
+            ),
+            ), $formatted
+        );
     }
 
     public function testFormatWithErrorContext()
     {
         $context = array('file' => 'foo', 'line' => 1);
-        $formatted = $this->formatter->format(array(
+        $formatted = $this->formatter->format(
+            array(
             'context' => $context,
-        ));
+            )
+        );
 
-        $this->assertSame(array(
+        $this->assertSame(
+            array(
             'context' => $this->encodeJson($context),
-        ), $formatted);
+            ), $formatted
+        );
     }
 
     public function testFormatWithExceptionContext()
     {
         $exception = new \Exception('foo');
-        $formatted = $this->formatter->format(array(
+        $formatted = $this->formatter->format(
+            array(
             'context' => array(
                 'exception' => $exception,
             ),
-        ));
+            )
+        );
 
-        $this->assertSame(array(
-            'context' => $this->encodeJson(array(
+        $this->assertSame(
+            array(
+            'context' => $this->encodeJson(
+                array(
                 'exception' => array(
                     'class'   => get_class($exception),
                     'message' => $exception->getMessage(),
@@ -104,7 +118,9 @@
                     'file'    => $exception->getFile() . ':' . $exception->getLine(),
                     'trace'   => $this->buildTrace($exception),
                 ),
-            )),
-        ), $formatted);
+                )
+            ),
+            ), $formatted
+        );
     }
 }

--- vendor/monolog/monolog/tests/Monolog/Handler/AbstractProcessingHandlerTest.php
+++ PHP_CodeSniffer
@@ -60,20 +60,27 @@
     public function testProcessRecord()
     {
         $handler = $this->getMockForAbstractClass('Monolog\Handler\AbstractProcessingHandler');
-        $handler->pushProcessor(new WebProcessor(array(
-            'REQUEST_URI' => '',
-            'REQUEST_METHOD' => '',
-            'REMOTE_ADDR' => '',
-            'SERVER_NAME' => '',
-            'UNIQUE_ID' => '',
-        )));
+        $handler->pushProcessor(
+            new WebProcessor(
+                array(
+                'REQUEST_URI' => '',
+                'REQUEST_METHOD' => '',
+                'REMOTE_ADDR' => '',
+                'SERVER_NAME' => '',
+                'UNIQUE_ID' => '',
+                )
+            )
+        );
         $handledRecord = null;
         $handler->expects($this->once())
             ->method('write')
-            ->will($this->returnCallback(function ($record) use (&$handledRecord) {
-                $handledRecord = $record;
-            }))
-        ;
+            ->will(
+                $this->returnCallback(
+                    function ($record) use (&$handledRecord) {
+                        $handledRecord = $record;
+                    }
+                )
+            );
         $handler->handle($this->getRecord());
         $this->assertEquals(6, count($handledRecord['extra']));
     }

--- vendor/monolog/monolog/tests/Monolog/Handler/AmqpHandlerTest.php
+++ PHP_CodeSniffer
@@ -36,14 +36,16 @@
         $exchange = $this->getMock('AMQPExchange', array('publish', 'setName'), array(), '', false);
         $exchange->expects($this->once())
             ->method('setName')
-            ->with('log')
-        ;
+            ->with('log');
         $exchange->expects($this->any())
             ->method('publish')
-            ->will($this->returnCallback(function ($message, $routing_key, $flags = 0, $attributes = array()) use (&$messages) {
-                $messages[] = array($message, $routing_key, $flags, $attributes);
-            }))
-        ;
+            ->will(
+                $this->returnCallback(
+                    function ($message, $routing_key, $flags = 0, $attributes = array()) use (&$messages) {
+                        $messages[] = array($message, $routing_key, $flags, $attributes);
+                    }
+                )
+            );
 
         $handler = new AmqpHandler($exchange, 'log');
 
@@ -89,10 +91,13 @@
 
         $exchange->expects($this->any())
             ->method('basic_publish')
-            ->will($this->returnCallback(function (AMQPMessage $msg, $exchange = "", $routing_key = "", $mandatory = false, $immediate = false, $ticket = null) use (&$messages) {
-                $messages[] = array($msg, $exchange, $routing_key, $mandatory, $immediate, $ticket);
-            }))
-        ;
+            ->will(
+                $this->returnCallback(
+                    function (AMQPMessage $msg, $exchange = "", $routing_key = "", $mandatory = false, $immediate = false, $ticket = null) use (&$messages) {
+                        $messages[] = array($msg, $exchange, $routing_key, $mandatory, $immediate, $ticket);
+                    }
+                )
+            );
 
         $handler = new AmqpHandler($exchange, 'log');
 

--- vendor/monolog/monolog/tests/Monolog/Handler/BufferHandlerTest.php
+++ PHP_CodeSniffer
@@ -144,11 +144,13 @@
     {
         $test = new TestHandler();
         $handler = new BufferHandler($test);
-        $handler->pushProcessor(function ($record) {
-            $record['extra']['foo'] = true;
+        $handler->pushProcessor(
+            function ($record) {
+                $record['extra']['foo'] = true;
 
-            return $record;
-        });
+                return $record;
+            }
+        );
         $handler->handle($this->getRecord(Logger::WARNING));
         $handler->flush();
         $this->assertTrue($test->hasWarningRecords());

--- vendor/monolog/monolog/tests/Monolog/Handler/ChromePHPHandlerTest.php
+++ PHP_CodeSniffer
@@ -33,15 +33,21 @@
         $handler->handle($this->getRecord(Logger::WARNING));
 
         $expected = array(
-            'X-ChromeLogger-Data'   => base64_encode(utf8_encode(json_encode(array(
-                'version' => ChromePHPHandler::VERSION,
-                'columns' => array('label', 'log', 'backtrace', 'type'),
-                'rows' => array(
-                    'test',
-                    'test',
-                ),
-                'request_uri' => '',
-            )))),
+            'X-ChromeLogger-Data'   => base64_encode(
+                utf8_encode(
+                    json_encode(
+                        array(
+                        'version' => ChromePHPHandler::VERSION,
+                        'columns' => array('label', 'log', 'backtrace', 'type'),
+                        'rows' => array(
+                        'test',
+                        'test',
+                        ),
+                        'request_uri' => '',
+                        )
+                    )
+                )
+            ),
         );
 
         $this->assertEquals($expected, $handler->getHeaders());
@@ -57,31 +63,37 @@
         $handler->handle($this->getRecord(Logger::WARNING, str_repeat('a', 100 * 1024)));
 
         $expected = array(
-            'X-ChromeLogger-Data'   => base64_encode(utf8_encode(json_encode(array(
-                'version' => ChromePHPHandler::VERSION,
-                'columns' => array('label', 'log', 'backtrace', 'type'),
-                'rows' => array(
-                    array(
+            'X-ChromeLogger-Data'   => base64_encode(
+                utf8_encode(
+                    json_encode(
+                        array(
+                        'version' => ChromePHPHandler::VERSION,
+                        'columns' => array('label', 'log', 'backtrace', 'type'),
+                        'rows' => array(
+                        array(
                         'test',
                         'test',
                         'unknown',
                         'log',
-                    ),
-                    array(
+                        ),
+                        array(
                         'test',
                         str_repeat('a', 150 * 1024),
                         'unknown',
                         'warn',
-                    ),
-                    array(
+                        ),
+                        array(
                         'monolog',
                         'Incomplete logs, chrome header size limit reached',
                         'unknown',
                         'warn',
-                    ),
-                ),
-                'request_uri' => '',
-            )))),
+                        ),
+                        ),
+                        'request_uri' => '',
+                        )
+                    )
+                )
+            ),
         );
 
         $this->assertEquals($expected, $handler->getHeaders());
@@ -100,17 +112,23 @@
         $handler2->handle($this->getRecord(Logger::WARNING));
 
         $expected = array(
-            'X-ChromeLogger-Data'   => base64_encode(utf8_encode(json_encode(array(
-                'version' => ChromePHPHandler::VERSION,
-                'columns' => array('label', 'log', 'backtrace', 'type'),
-                'rows' => array(
-                    'test',
-                    'test',
-                    'test',
-                    'test',
-                ),
-                'request_uri' => '',
-            )))),
+            'X-ChromeLogger-Data'   => base64_encode(
+                utf8_encode(
+                    json_encode(
+                        array(
+                        'version' => ChromePHPHandler::VERSION,
+                        'columns' => array('label', 'log', 'backtrace', 'type'),
+                        'rows' => array(
+                        'test',
+                        'test',
+                        'test',
+                        'test',
+                        ),
+                        'request_uri' => '',
+                        )
+                    )
+                )
+            ),
         );
 
         $this->assertEquals($expected, $handler2->getHeaders());

--- vendor/monolog/monolog/tests/Monolog/Handler/DynamoDbHandlerTest.php
+++ PHP_CodeSniffer
@@ -53,22 +53,24 @@
         $handler->setFormatter($formatter);
 
         $formatter
-             ->expects($this->once())
-             ->method('format')
-             ->with($record)
-             ->will($this->returnValue($formatted));
+            ->expects($this->once())
+            ->method('format')
+            ->with($record)
+            ->will($this->returnValue($formatted));
         $this->client
-             ->expects($this->once())
-             ->method('formatAttributes')
-             ->with($this->isType('array'))
-             ->will($this->returnValue($formatted));
+            ->expects($this->once())
+            ->method('formatAttributes')
+            ->with($this->isType('array'))
+            ->will($this->returnValue($formatted));
         $this->client
-             ->expects($this->once())
-             ->method('__call')
-             ->with('putItem', array(array(
+            ->expects($this->once())
+            ->method('__call')
+            ->with(
+                'putItem', array(array(
                  'TableName' => 'foo',
                  'Item' => $formatted,
-             )));
+                 ))
+            );
 
         $handler->handle($record);
     }

--- vendor/monolog/monolog/tests/Monolog/Handler/ElasticSearchHandlerTest.php
+++ PHP_CodeSniffer
@@ -207,7 +207,8 @@
 
     /**
      * Return last created document id from ES response
-     * @param  Response    $response Elastica Response object
+     *
+     * @param  Response $response Elastica Response object
      * @return string|null
      */
     protected function getCreatedDocId(Response $response)
@@ -220,6 +221,7 @@
 
     /**
      * Retrieve document by id from Elasticsearch
+     *
      * @param  Client $client     Elastica client
      * @param  string $index
      * @param  string $type

--- vendor/monolog/monolog/tests/Monolog/Handler/FingersCrossedHandlerTest.php
+++ PHP_CodeSniffer
@@ -113,9 +113,11 @@
     public function testHandleWithCallback()
     {
         $test = new TestHandler();
-        $handler = new FingersCrossedHandler(function ($record, $handler) use ($test) {
+        $handler = new FingersCrossedHandler(
+            function ($record, $handler) use ($test) {
                     return $test;
-                });
+            }
+        );
         $handler->handle($this->getRecord(Logger::DEBUG));
         $handler->handle($this->getRecord(Logger::INFO));
         $this->assertFalse($test->hasDebugRecords());
@@ -132,9 +134,11 @@
      */
     public function testHandleWithBadCallbackThrowsException()
     {
-        $handler = new FingersCrossedHandler(function ($record, $handler) {
+        $handler = new FingersCrossedHandler(
+            function ($record, $handler) {
                     return 'foo';
-                });
+            }
+        );
         $handler->handle($this->getRecord(Logger::WARNING));
     }
 
@@ -238,11 +242,13 @@
     {
         $test = new TestHandler();
         $handler = new FingersCrossedHandler($test, Logger::INFO);
-        $handler->pushProcessor(function ($record) {
-            $record['extra']['foo'] = true;
-
-            return $record;
-        });
+        $handler->pushProcessor(
+            function ($record) {
+                $record['extra']['foo'] = true;
+
+                return $record;
+            }
+        );
         $handler->handle($this->getRecord(Logger::WARNING));
         $this->assertTrue($test->hasWarningRecords());
         $records = $test->getRecords();

--- vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerLegacyTest.php
+++ PHP_CodeSniffer
@@ -24,7 +24,7 @@
             $this->markTestSkipped("mlehner/gelf-php not installed");
         }
 
-        require_once __DIR__ . '/GelfMockMessagePublisher.php';
+        include_once __DIR__ . '/GelfMockMessagePublisher.php';
     }
 
     /**

--- vendor/monolog/monolog/tests/Monolog/Handler/GelfHandlerTest.php
+++ PHP_CodeSniffer
@@ -54,8 +54,7 @@
             ->setLevel(7)
             ->setFacility("test")
             ->setShortMessage($record['message'])
-            ->setTimestamp($record['datetime'])
-        ;
+            ->setTimestamp($record['datetime']);
 
         $messagePublisher = $this->getMessagePublisher();
         $messagePublisher->expects($this->once())
@@ -75,8 +74,7 @@
             ->setLevel(4)
             ->setFacility("test")
             ->setShortMessage($record['message'])
-            ->setTimestamp($record['datetime'])
-        ;
+            ->setTimestamp($record['datetime']);
 
         $messagePublisher = $this->getMessagePublisher();
         $messagePublisher->expects($this->once())
@@ -102,8 +100,7 @@
             ->setShortMessage($record['message'])
             ->setTimestamp($record['datetime'])
             ->setAdditional("EXTblarg", 'yep')
-            ->setAdditional("CTXfrom", 'logger')
-        ;
+            ->setAdditional("CTXfrom", 'logger');
 
         $messagePublisher = $this->getMessagePublisher();
         $messagePublisher->expects($this->once())

--- vendor/monolog/monolog/tests/Monolog/Handler/GroupHandlerTest.php
+++ PHP_CodeSniffer
@@ -76,11 +76,13 @@
     {
         $test = new TestHandler();
         $handler = new GroupHandler(array($test));
-        $handler->pushProcessor(function ($record) {
-            $record['extra']['foo'] = true;
+        $handler->pushProcessor(
+            function ($record) {
+                $record['extra']['foo'] = true;
 
-            return $record;
-        });
+                return $record;
+            }
+        );
         $handler->handle($this->getRecord(Logger::WARNING));
         $this->assertTrue($test->hasWarningRecords());
         $records = $test->getRecords();
@@ -94,11 +96,13 @@
     {
         $testHandlers = array(new TestHandler(), new TestHandler());
         $handler = new GroupHandler($testHandlers);
-        $handler->pushProcessor(function ($record) {
-            $record['extra']['foo'] = true;
+        $handler->pushProcessor(
+            function ($record) {
+                $record['extra']['foo'] = true;
 
-            return $record;
-        });
+                return $record;
+            }
+        );
         $handler->handleBatch(array($this->getRecord(Logger::DEBUG), $this->getRecord(Logger::INFO)));
         foreach ($testHandlers as $test) {
             $this->assertTrue($test->hasDebugRecords());

--- vendor/monolog/monolog/tests/Monolog/Handler/HandlerWrapperTest.php
+++ PHP_CodeSniffer
@@ -90,7 +90,8 @@
 
     public function testPushProcessor()
     {
-        $processor = function () {};
+        $processor = function () {
+        };
         $this->handler->expects($this->once())
             ->method('pushProcessor')
             ->with($processor);
@@ -100,7 +101,8 @@
 
     public function testPopProcessor()
     {
-        $processor = function () {};
+        $processor = function () {
+        };
         $this->handler->expects($this->once())
             ->method('popProcessor')
             ->willReturn($processor);

--- vendor/monolog/monolog/tests/Monolog/Handler/HipChatHandlerTest.php
+++ PHP_CodeSniffer
@@ -21,7 +21,9 @@
 class HipChatHandlerTest extends TestCase
 {
     private $res;
-    /** @var  HipChatHandler */
+    /**
+ * @var  HipChatHandler 
+*/
     private $handler;
 
     public function testWriteHeader()

--- vendor/monolog/monolog/tests/Monolog/Handler/NewRelicHandlerTest.php
+++ PHP_CodeSniffer
@@ -53,11 +53,13 @@
     public function testThehandlerCanAddExplodedContextParamsToTheNewRelicTrace()
     {
         $handler = new StubNewRelicHandler(Logger::ERROR, true, self::$appname, true);
-        $handler->handle($this->getRecord(
-            Logger::ERROR,
-            'log message',
-            array('a' => array('key1' => 'value1', 'key2' => 'value2'))
-        ));
+        $handler->handle(
+            $this->getRecord(
+                Logger::ERROR,
+                'log message',
+                array('a' => array('key1' => 'value1', 'key2' => 'value2'))
+            )
+        );
         $this->assertEquals(
             array('context_a_key1' => 'value1', 'context_a_key2' => 'value2'),
             self::$customParameters

--- vendor/monolog/monolog/tests/Monolog/Handler/PHPConsoleHandlerTest.php
+++ PHP_CodeSniffer
@@ -27,11 +27,17 @@
  */
 class PHPConsoleHandlerTest extends TestCase
 {
-    /** @var  Connector|PHPUnit_Framework_MockObject_MockObject */
+    /**
+ * @var  Connector|PHPUnit_Framework_MockObject_MockObject 
+*/
     protected $connector;
-    /** @var  DebugDispatcher|PHPUnit_Framework_MockObject_MockObject */
+    /**
+ * @var  DebugDispatcher|PHPUnit_Framework_MockObject_MockObject 
+*/
     protected $debugDispatcher;
-    /** @var  ErrorDispatcher|PHPUnit_Framework_MockObject_MockObject */
+    /**
+ * @var  ErrorDispatcher|PHPUnit_Framework_MockObject_MockObject 
+*/
     protected $errorDispatcher;
 
     protected function setUp()
@@ -70,7 +76,8 @@
     {
         $connector = $this->getMockBuilder('PhpConsole\Connector')
             ->disableOriginalConstructor()
-            ->setMethods(array(
+            ->setMethods(
+                array(
                 'sendMessage',
                 'onShutDown',
                 'isActiveClient',
@@ -81,7 +88,8 @@
                 'setAllowedIpMasks',
                 'setHeadersLimit',
                 'startEvalRequestsListener',
-            ))
+                )
+            )
             ->getMock();
 
         $connector->expects($this->any())
@@ -101,9 +109,11 @@
 
     protected function initLogger($handlerOptions = array(), $level = Logger::DEBUG)
     {
-        return new Logger('test', array(
+        return new Logger(
+            'test', array(
             new PHPConsoleHandler($handlerOptions, $this->connector, $level),
-        ));
+            )
+        );
     }
 
     public function testInitWithDefaultConnector()
@@ -214,10 +224,18 @@
     public function testOptionUseOwnErrorsAndExceptionsHandler()
     {
         $this->initLogger(array('useOwnErrorsHandler' => true, 'useOwnExceptionsHandler' => true));
-        $this->assertEquals(array(Handler::getInstance(), 'handleError'), set_error_handler(function () {
-        }));
-        $this->assertEquals(array(Handler::getInstance(), 'handleException'), set_exception_handler(function () {
-        }));
+        $this->assertEquals(
+            array(Handler::getInstance(), 'handleError'), set_error_handler(
+                function () {
+                }
+            )
+        );
+        $this->assertEquals(
+            array(Handler::getInstance(), 'handleException'), set_exception_handler(
+                function () {
+                }
+            )
+        );
     }
 
     public static function provideConnectorMethodsOptionsSets()

--- vendor/monolog/monolog/tests/Monolog/Handler/PushoverHandlerTest.php
+++ PHP_CodeSniffer
@@ -17,8 +17,9 @@
 /**
  * Almost all examples (expected header, titles, messages) taken from
  * https://www.pushover.net/api
+ *
  * @author Sebastian Göttschkes <sebastian.goettschkes@googlemail.com>
- * @see https://www.pushover.net/api
+ * @see    https://www.pushover.net/api
  */
 class PushoverHandlerTest extends TestCase
 {

--- vendor/monolog/monolog/tests/Monolog/Handler/RavenHandlerTest.php
+++ PHP_CodeSniffer
@@ -23,7 +23,7 @@
             $this->markTestSkipped('raven/raven not installed');
         }
 
-        require_once __DIR__ . '/MockRavenClient.php';
+        include_once __DIR__ . '/MockRavenClient.php';
     }
 
     /**
@@ -171,9 +171,13 @@
         $logFormatter->expects($this->once())->method('formatBatch');
 
         $formatter = $this->getMock('Monolog\\Formatter\\FormatterInterface');
-        $formatter->expects($this->once())->method('format')->with($this->callback(function ($record) {
-            return $record['level'] == 400;
-        }));
+        $formatter->expects($this->once())->method('format')->with(
+            $this->callback(
+                function ($record) {
+                    return $record['level'] == 400;
+                }
+            )
+        );
 
         $handler = $this->getHandler($this->getRavenClient());
         $handler->setBatchFormatter($logFormatter);

--- vendor/monolog/monolog/tests/Monolog/Handler/RedisHandlerTest.php
+++ PHP_CodeSniffer
@@ -114,9 +114,13 @@
         // Redis uses multi
         $redis->expects($this->once())
             ->method('transaction')
-            ->will($this->returnCallback(function ($cb) use ($redisTransaction) {
-                $cb($redisTransaction);
-            }));
+            ->will(
+                $this->returnCallback(
+                    function ($cb) use ($redisTransaction) {
+                        $cb($redisTransaction);
+                    }
+                )
+            );
 
         $record = $this->getRecord(Logger::WARNING, 'test', array('data' => new \stdClass, 'foo' => 34));
 

--- vendor/monolog/monolog/tests/Monolog/Handler/RotatingFileHandlerTest.php
+++ PHP_CodeSniffer
@@ -37,12 +37,14 @@
         $this->lastError = null;
         $self = $this;
         // workaround with &$self used for PHP 5.3
-        set_error_handler(function($code, $message) use (&$self) {
-            $self->lastError = array(
+        set_error_handler(
+            function ($code, $message) use (&$self) {
+                $self->lastError = array(
                 'code' => $code,
                 'message' => $message,
-            );
-        });
+                );
+            }
+        );
     }
 
     private function assertErrorWasTriggered($code, $message)
@@ -107,13 +109,13 @@
     public function rotationTests()
     {
         $now = time();
-        $dayCallback = function($ago) use ($now) {
+        $dayCallback = function ($ago) use ($now) {
             return $now + 86400 * $ago;
         };
-        $monthCallback = function($ago) {
+        $monthCallback = function ($ago) {
             return gmmktime(0, 0, 0, date('n') + $ago, date('d'), date('Y'));
         };
-        $yearCallback = function($ago) {
+        $yearCallback = function ($ago) {
             return gmmktime(0, 0, 0, date('n'), date('d'), date('Y') + $ago);
         };
 

--- vendor/monolog/monolog/tests/Monolog/Handler/SwiftMailerHandlerTest.php
+++ PHP_CodeSniffer
@@ -16,7 +16,9 @@
 
 class SwiftMailerHandlerTest extends TestCase
 {
-    /** @var \Swift_Mailer|\PHPUnit_Framework_MockObject_MockObject */
+    /**
+ * @var \Swift_Mailer|\PHPUnit_Framework_MockObject_MockObject 
+*/
     private $mailer;
 
     public function setUp()
@@ -50,11 +52,15 @@
         $expectedMessage = new \Swift_Message();
         $this->mailer->expects($this->once())
             ->method('send')
-            ->with($this->callback(function ($value) use ($expectedMessage) {
-                return $value instanceof \Swift_Message
-                    && $value->getSubject() === 'Emergency'
-                    && $value === $expectedMessage;
-            }));
+            ->with(
+                $this->callback(
+                    function ($value) use ($expectedMessage) {
+                        return $value instanceof \Swift_Message
+                        && $value->getSubject() === 'Emergency'
+                        && $value === $expectedMessage;
+                    }
+                )
+            );
 
         // Callback dynamically changes subject based on number of logged records
         $callback = function ($content, array $records) use ($expectedMessage) {
@@ -81,10 +87,14 @@
 
         $this->mailer->expects($this->once())
             ->method('send')
-            ->with($this->callback(function ($value) use (&$receivedMessage) {
-                $receivedMessage = $value;
-                return true;
-            }));
+            ->with(
+                $this->callback(
+                    function ($value) use (&$receivedMessage) {
+                        $receivedMessage = $value;
+                        return true;
+                    }
+                )
+            );
 
         $handler = new SwiftMailerHandler($this->mailer, $messageTemplate);
 

--- vendor/monolog/monolog/tests/Monolog/Handler/TestHandlerTest.php
+++ PHP_CodeSniffer
@@ -28,9 +28,11 @@
         $record = $this->getRecord($level, 'test'.$method);
         $this->assertFalse($handler->{'has'.$method}($record), 'has'.$method);
         $this->assertFalse($handler->{'has'.$method.'ThatContains'}('test'), 'has'.$method.'ThatContains');
-        $this->assertFalse($handler->{'has'.$method.'ThatPasses'}(function ($rec) {
-            return true;
-        }), 'has'.$method.'ThatPasses');
+        $this->assertFalse(
+            $handler->{'has'.$method.'ThatPasses'}(function ($rec) {
+                return true;
+            }), 'has'.$method.'ThatPasses'
+        );
         $this->assertFalse($handler->{'has'.$method.'ThatMatches'}('/test\w+/'));
         $this->assertFalse($handler->{'has'.$method.'Records'}(), 'has'.$method.'Records');
         $handler->handle($record);
@@ -39,9 +41,11 @@
         $this->assertTrue($handler->{'has'.$method}($record), 'has'.$method);
         $this->assertTrue($handler->{'has'.$method}('test'.$method), 'has'.$method);
         $this->assertTrue($handler->{'has'.$method.'ThatContains'}('test'), 'has'.$method.'ThatContains');
-        $this->assertTrue($handler->{'has'.$method.'ThatPasses'}(function ($rec) {
-            return true;
-        }), 'has'.$method.'ThatPasses');
+        $this->assertTrue(
+            $handler->{'has'.$method.'ThatPasses'}(function ($rec) {
+                return true;
+            }), 'has'.$method.'ThatPasses'
+        );
         $this->assertTrue($handler->{'has'.$method.'ThatMatches'}('/test\w+/'));
         $this->assertTrue($handler->{'has'.$method.'Records'}(), 'has'.$method.'Records');
 

--- vendor/monolog/monolog/tests/Monolog/Handler/WhatFailureGroupHandlerTest.php
+++ PHP_CodeSniffer
@@ -76,11 +76,13 @@
     {
         $test = new TestHandler();
         $handler = new WhatFailureGroupHandler(array($test));
-        $handler->pushProcessor(function ($record) {
-            $record['extra']['foo'] = true;
+        $handler->pushProcessor(
+            function ($record) {
+                $record['extra']['foo'] = true;
 
-            return $record;
-        });
+                return $record;
+            }
+        );
         $handler->handle($this->getRecord(Logger::WARNING));
         $this->assertTrue($test->hasWarningRecords());
         $records = $test->getRecords();
@@ -95,11 +97,13 @@
         $test = new TestHandler();
         $exception = new ExceptionTestHandler();
         $handler = new WhatFailureGroupHandler(array($exception, $test, $exception));
-        $handler->pushProcessor(function ($record) {
-            $record['extra']['foo'] = true;
+        $handler->pushProcessor(
+            function ($record) {
+                $record['extra']['foo'] = true;
 
-            return $record;
-        });
+                return $record;
+            }
+        );
         $handler->handle($this->getRecord(Logger::WARNING));
         $this->assertTrue($test->hasWarningRecords());
         $records = $test->getRecords();

--- vendor/monolog/monolog/tests/Monolog/LoggerTest.php
+++ PHP_CodeSniffer
@@ -167,10 +167,12 @@
         // handler1 has been removed
         $this->assertEquals(array($handler2), $logger->getHandlers());
 
-        $logger->setHandlers(array(
+        $logger->setHandlers(
+            array(
             "AMapKey" => $handler1,
             "Woop" => $handler2,
-        ));
+            )
+        );
 
         // Keys have been scrubbed
         $this->assertEquals(array($handler1, $handler2), $logger->getHandlers());
@@ -214,11 +216,13 @@
         $logger = new Logger(__METHOD__);
         $handler = new TestHandler;
         $logger->pushHandler($handler);
-        $logger->pushProcessor(function ($record) {
-            $record['extra']['win'] = true;
+        $logger->pushProcessor(
+            function ($record) {
+                $record['extra']['win'] = true;
 
-            return $record;
-        });
+                return $record;
+            }
+        );
         $logger->addError('test');
         list($record) = $handler->getRecords();
         $this->assertTrue($record['extra']['win']);
@@ -233,23 +237,19 @@
         $handler = $this->getMock('Monolog\Handler\HandlerInterface');
         $handler->expects($this->any())
             ->method('isHandling')
-            ->will($this->returnValue(true))
-        ;
+            ->will($this->returnValue(true));
         $handler->expects($this->any())
             ->method('handle')
-            ->will($this->returnValue(true))
-        ;
+            ->will($this->returnValue(true));
         $logger->pushHandler($handler);
 
         $processor = $this->getMockBuilder('Monolog\Processor\WebProcessor')
             ->disableOriginalConstructor()
             ->setMethods(array('__invoke'))
-            ->getMock()
-        ;
+            ->getMock();
         $processor->expects($this->once())
             ->method('__invoke')
-            ->will($this->returnArgument(0))
-        ;
+            ->will($this->returnArgument(0));
         $logger->pushProcessor($processor);
 
         $logger->addError('test');
@@ -264,13 +264,14 @@
         $handler = $this->getMock('Monolog\Handler\HandlerInterface');
         $handler->expects($this->once())
             ->method('isHandling')
-            ->will($this->returnValue(false))
-        ;
+            ->will($this->returnValue(false));
         $logger->pushHandler($handler);
         $that = $this;
-        $logger->pushProcessor(function ($record) use ($that) {
-            $that->fail('The processor should not be called');
-        });
+        $logger->pushProcessor(
+            function ($record) use ($that) {
+                $that->fail('The processor should not be called');
+            }
+        );
         $logger->addAlert('test');
     }
 
@@ -284,33 +285,27 @@
         $handler1 = $this->getMock('Monolog\Handler\HandlerInterface');
         $handler1->expects($this->never())
             ->method('isHandling')
-            ->will($this->returnValue(false))
-        ;
+            ->will($this->returnValue(false));
         $handler1->expects($this->once())
             ->method('handle')
-            ->will($this->returnValue(false))
-        ;
+            ->will($this->returnValue(false));
         $logger->pushHandler($handler1);
 
         $handler2 = $this->getMock('Monolog\Handler\HandlerInterface');
         $handler2->expects($this->once())
             ->method('isHandling')
-            ->will($this->returnValue(true))
-        ;
+            ->will($this->returnValue(true));
         $handler2->expects($this->once())
             ->method('handle')
-            ->will($this->returnValue(false))
-        ;
+            ->will($this->returnValue(false));
         $logger->pushHandler($handler2);
 
         $handler3 = $this->getMock('Monolog\Handler\HandlerInterface');
         $handler3->expects($this->once())
             ->method('isHandling')
-            ->will($this->returnValue(false))
-        ;
+            ->will($this->returnValue(false));
         $handler3->expects($this->never())
-            ->method('handle')
-        ;
+            ->method('handle');
         $logger->pushHandler($handler3);
 
         $logger->debug('test');
@@ -324,31 +319,25 @@
         $handler1 = $this->getMock('Monolog\Handler\HandlerInterface');
         $handler1->expects($this->never())
             ->method('isHandling')
-            ->will($this->returnValue(false))
-        ;
+            ->will($this->returnValue(false));
         $handler1->expects($this->once())
             ->method('handle')
-            ->will($this->returnValue(false))
-        ;
+            ->will($this->returnValue(false));
 
         $handler2 = $this->getMock('Monolog\Handler\HandlerInterface');
         $handler2->expects($this->once())
             ->method('isHandling')
-            ->will($this->returnValue(true))
-        ;
+            ->will($this->returnValue(true));
         $handler2->expects($this->once())
             ->method('handle')
-            ->will($this->returnValue(false))
-        ;
+            ->will($this->returnValue(false));
 
         $handler3 = $this->getMock('Monolog\Handler\HandlerInterface');
         $handler3->expects($this->once())
             ->method('isHandling')
-            ->will($this->returnValue(false))
-        ;
+            ->will($this->returnValue(false));
         $handler3->expects($this->never())
-            ->method('handle')
-        ;
+            ->method('handle');
 
         $logger = new Logger(__METHOD__, array('last' => $handler3, 'second' => $handler2, 'first' => $handler1));
 
@@ -365,23 +354,19 @@
         $handler1 = $this->getMock('Monolog\Handler\HandlerInterface');
         $handler1->expects($this->any())
             ->method('isHandling')
-            ->will($this->returnValue(true))
-        ;
+            ->will($this->returnValue(true));
         $handler1->expects($this->once())
             ->method('handle')
-            ->will($this->returnValue(false))
-        ;
+            ->will($this->returnValue(false));
         $logger->pushHandler($handler1);
 
         $handler2 = $this->getMock('Monolog\Handler\HandlerInterface');
         $handler2->expects($this->any())
             ->method('isHandling')
-            ->will($this->returnValue(true))
-        ;
+            ->will($this->returnValue(true));
         $handler2->expects($this->once())
             ->method('handle')
-            ->will($this->returnValue(false))
-        ;
+            ->will($this->returnValue(false));
         $logger->pushHandler($handler2);
 
         $logger->debug('test');
@@ -397,22 +382,18 @@
         $handler1 = $this->getMock('Monolog\Handler\HandlerInterface');
         $handler1->expects($this->any())
             ->method('isHandling')
-            ->will($this->returnValue(true))
-        ;
+            ->will($this->returnValue(true));
         $handler1->expects($this->never())
-            ->method('handle')
-        ;
+            ->method('handle');
         $logger->pushHandler($handler1);
 
         $handler2 = $this->getMock('Monolog\Handler\HandlerInterface');
         $handler2->expects($this->any())
             ->method('isHandling')
-            ->will($this->returnValue(true))
-        ;
+            ->will($this->returnValue(true));
         $handler2->expects($this->once())
             ->method('handle')
-            ->will($this->returnValue(true))
-        ;
+            ->will($this->returnValue(true));
         $logger->pushHandler($handler2);
 
         $logger->debug('test');
@@ -428,8 +409,7 @@
         $handler1 = $this->getMock('Monolog\Handler\HandlerInterface');
         $handler1->expects($this->any())
             ->method('isHandling')
-            ->will($this->returnValue(false))
-        ;
+            ->will($this->returnValue(false));
 
         $logger->pushHandler($handler1);
         $this->assertFalse($logger->isHandling(Logger::DEBUG));
@@ -437,8 +417,7 @@
         $handler2 = $this->getMock('Monolog\Handler\HandlerInterface');
         $handler2->expects($this->any())
             ->method('isHandling')
-            ->will($this->returnValue(true))
-        ;
+            ->will($this->returnValue(true));
 
         $logger->pushHandler($handler2);
         $this->assertTrue($logger->isHandling(Logger::DEBUG));
@@ -516,7 +495,9 @@
     public function setTimezoneProvider()
     {
         return array_map(
-            function ($tz) { return array(new \DateTimeZone($tz)); },
+            function ($tz) {
+                return array(new \DateTimeZone($tz)); 
+            },
             \DateTimeZone::listIdentifiers()
         );
     }

--- vendor/monolog/monolog/tests/Monolog/TestCase.php
+++ PHP_CodeSniffer
@@ -51,7 +51,13 @@
         $formatter = $this->getMock('Monolog\\Formatter\\FormatterInterface');
         $formatter->expects($this->any())
             ->method('format')
-            ->will($this->returnCallback(function ($record) { return $record['message']; }));
+            ->will(
+                $this->returnCallback(
+                    function ($record) {
+                        return $record['message']; 
+                    }
+                )
+            );
 
         return $formatter;
     }

--- vendor/mtdowling/cron-expression/src/Cron/AbstractField.php
+++ PHP_CodeSniffer
@@ -90,7 +90,7 @@
         }
 
         if ($dateValue > $offset && 0 === $stepSize) {
-          return false;
+            return false;
         }
 
         for ($i = $offset; $i <= $to; $i+= $stepSize) {
@@ -106,7 +106,7 @@
      * Returns a range of values for the given cron expression
      *
      * @param string $expression The expression to evaluate
-     * @param int $max           Maximum offset for range
+     * @param int    $max        Maximum offset for range
      *
      * @return array
      */

--- vendor/mtdowling/cron-expression/src/Cron/CronExpression.php
+++ PHP_CodeSniffer
@@ -46,7 +46,7 @@
     /**
      * Factory method to create a new CronExpression.
      *
-     * @param string $expression The CRON expression to create.  There are
+     * @param string       $expression   The CRON expression to create.  There are several special predefined values which can be used to substitute the CRON expression: `@yearly`, `@annually` - Run once a year, midnight, Jan. 1 - 0 0 1 1 * `@monthly` - Run once a month, midnight, first of month - 0 0 1 * * `@weekly` - Run once a week, midnight on Sun - 0 0 * * 0 `@daily` - Run once a day, midnight - 0 0 * * * `@hourly` - Run once an hour, first minute - 0 * * * * several special predefined values which can be used to substitute the CRON expression: `@yearly`, `@annually` - Run once a year, midnight, Jan. 1 - 0 0 1 1 * `@monthly` - Run once a month, midnight, first of month - 0 0 1 * * `@weekly` - Run once a week, midnight on Sun - 0 0 * * 0 `@daily` - Run once a day, midnight - 0 0 * * * `@hourly` - Run once an hour, first minute - 0 * * * *
      *                           several special predefined values which can be used to substitute the
      *                           CRON expression:
      *
@@ -83,7 +83,7 @@
      * @param string $expression The CRON expression to validate.
      *
      * @return bool True if a valid CRON expression was passed. False if not.
-     * @see Cron\CronExpression::factory
+     * @see    Cron\CronExpression::factory
      */
     public static function isValidExpression($expression)
     {
@@ -199,7 +199,7 @@
      *
      * @return \DateTime
      * @throws \RuntimeException on too many iterations
-     * @see Cron\CronExpression::getNextRunDate
+     * @see    Cron\CronExpression::getNextRunDate
      */
     public function getPreviousRunDate($currentTime = 'now', $nth = 0, $allowCurrentDate = false)
     {

--- vendor/mtdowling/cron-expression/src/Cron/FieldFactory.php
+++ PHP_CodeSniffer
@@ -4,6 +4,7 @@
 
 /**
  * CRON field factory implementing a flyweight factory
+ *
  * @link http://en.wikipedia.org/wiki/Cron
  */
 class FieldFactory
@@ -25,28 +26,28 @@
     {
         if (!isset($this->fields[$position])) {
             switch ($position) {
-                case 0:
-                    $this->fields[$position] = new MinutesField();
-                    break;
-                case 1:
-                    $this->fields[$position] = new HoursField();
-                    break;
-                case 2:
-                    $this->fields[$position] = new DayOfMonthField();
-                    break;
-                case 3:
-                    $this->fields[$position] = new MonthField();
-                    break;
-                case 4:
-                    $this->fields[$position] = new DayOfWeekField();
-                    break;
-                case 5:
-                    $this->fields[$position] = new YearField();
-                    break;
-                default:
-                    throw new \InvalidArgumentException(
-                        $position . ' is not a valid position'
-                    );
+            case 0:
+                $this->fields[$position] = new MinutesField();
+                break;
+            case 1:
+                $this->fields[$position] = new HoursField();
+                break;
+            case 2:
+                $this->fields[$position] = new DayOfMonthField();
+                break;
+            case 3:
+                $this->fields[$position] = new MonthField();
+                break;
+            case 4:
+                $this->fields[$position] = new DayOfWeekField();
+                break;
+            case 5:
+                $this->fields[$position] = new YearField();
+                break;
+            default:
+                throw new \InvalidArgumentException(
+                    $position . ' is not a valid position'
+                );
             }
         }
 

--- vendor/mtdowling/cron-expression/src/Cron/HoursField.php
+++ PHP_CodeSniffer
@@ -41,8 +41,9 @@
         $position = $invert ? count($hours) - 1 : 0;
         if (count($hours) > 1) {
             for ($i = 0; $i < count($hours) - 1; $i++) {
-                if ((!$invert && $current_hour >= $hours[$i] && $current_hour < $hours[$i + 1]) ||
-                    ($invert && $current_hour > $hours[$i] && $current_hour <= $hours[$i + 1])) {
+                if ((!$invert && $current_hour >= $hours[$i] && $current_hour < $hours[$i + 1]) 
+                    || ($invert && $current_hour > $hours[$i] && $current_hour <= $hours[$i + 1])
+                ) {
                     $position = $invert ? $i : $i + 1;
                     break;
                 }

--- vendor/mtdowling/cron-expression/src/Cron/MinutesField.php
+++ PHP_CodeSniffer
@@ -33,8 +33,9 @@
         $position = $invert ? count($minutes) - 1 : 0;
         if (count($minutes) > 1) {
             for ($i = 0; $i < count($minutes) - 1; $i++) {
-                if ((!$invert && $current_minute >= $minutes[$i] && $current_minute < $minutes[$i + 1]) ||
-                    ($invert && $current_minute > $minutes[$i] && $current_minute <= $minutes[$i + 1])) {
+                if ((!$invert && $current_minute >= $minutes[$i] && $current_minute < $minutes[$i + 1]) 
+                    || ($invert && $current_minute > $minutes[$i] && $current_minute <= $minutes[$i + 1])
+                ) {
                     $position = $invert ? $i : $i + 1;
                     break;
                 }

--- vendor/mtdowling/cron-expression/tests/Cron/CronExpressionTest.php
+++ PHP_CodeSniffer
@@ -269,23 +269,27 @@
     public function testProvidesMultipleRunDates()
     {
         $cron = CronExpression::factory('*/2 * * * *');
-        $this->assertEquals(array(
+        $this->assertEquals(
+            array(
             new DateTime('2008-11-09 00:00:00'),
             new DateTime('2008-11-09 00:02:00'),
             new DateTime('2008-11-09 00:04:00'),
             new DateTime('2008-11-09 00:06:00')
-        ), $cron->getMultipleRunDates(4, '2008-11-09 00:00:00', false, true));
+            ), $cron->getMultipleRunDates(4, '2008-11-09 00:00:00', false, true)
+        );
     }
 
     /**
      * @covers Cron\CronExpression::getMultipleRunDates
      * @covers Cron\CronExpression::setMaxIterationCount
      */
-    public function testProvidesMultipleRunDatesForTheFarFuture() {
+    public function testProvidesMultipleRunDatesForTheFarFuture() 
+    {
         // Fails with the default 1000 iteration limit
         $cron = CronExpression::factory('0 0 12 1 * */2');
         $cron->setMaxIterationCount(2000);
-        $this->assertEquals(array(
+        $this->assertEquals(
+            array(
             new DateTime('2016-01-12 00:00:00'),
             new DateTime('2018-01-12 00:00:00'),
             new DateTime('2020-01-12 00:00:00'),
@@ -295,7 +299,8 @@
             new DateTime('2028-01-12 00:00:00'),
             new DateTime('2030-01-12 00:00:00'),
             new DateTime('2032-01-12 00:00:00'),
-        ), $cron->getMultipleRunDates(9, '2015-04-28 00:00:00', false, true));
+            ), $cron->getMultipleRunDates(9, '2015-04-28 00:00:00', false, true)
+        );
     }
 
     /**
@@ -366,7 +371,8 @@
     /**
      * @see https://github.com/mtdowling/cron-expression/issues/20
      */
-    public function testIssue20() {
+    public function testIssue20() 
+    {
         $e = CronExpression::factory('* * * * MON#1');
         $this->assertTrue($e->isDue(new DateTime('2014-04-07 00:00:00')));
         $this->assertFalse($e->isDue(new DateTime('2014-04-14 00:00:00')));

--- vendor/mtdowling/cron-expression/tests/Cron/DayOfWeekFieldTest.php
+++ PHP_CodeSniffer
@@ -103,7 +103,8 @@
     /**
      * @see https://github.com/mtdowling/cron-expression/issues/47
      */
-    public function testIssue47() {
+    public function testIssue47() 
+    {
         $f = new DayOfWeekField();
         $this->assertFalse($f->validate('mon,'));
         $this->assertFalse($f->validate('mon-'));

--- vendor/mtdowling/cron-expression/tests/Cron/HoursFieldTest.php
+++ PHP_CodeSniffer
@@ -19,7 +19,7 @@
         $this->assertTrue($f->validate('1'));
         $this->assertTrue($f->validate('*'));
         $this->assertTrue($f->validate('*/3,1,1-12'));
-     }
+    }
 
     /**
      * @covers Cron\HoursField::increment

--- vendor/nesbot/carbon/src/Carbon/Carbon.php
+++ PHP_CodeSniffer
@@ -476,7 +476,8 @@
     public function __get($name)
     {
         switch (true) {
-            case array_key_exists($name, $formats = array(
+        case array_key_exists(
+            $name, $formats = array(
                 'year' => 'Y',
                 'yearIso' => 'o',
                 'month' => 'n',
@@ -490,41 +491,42 @@
                 'weekOfYear' => 'W',
                 'daysInMonth' => 't',
                 'timestamp' => 'U',
-            )):
-                return (int) $this->format($formats[$name]);
+            )
+        ):
+            return (int) $this->format($formats[$name]);
 
-            case $name === 'weekOfMonth':
-                return (int) ceil($this->day / static::DAYS_PER_WEEK);
+        case $name === 'weekOfMonth':
+            return (int) ceil($this->day / static::DAYS_PER_WEEK);
 
-            case $name === 'age':
-                return (int) $this->diffInYears();
+        case $name === 'age':
+            return (int) $this->diffInYears();
 
-            case $name === 'quarter':
-                return (int) ceil($this->month / 3);
+        case $name === 'quarter':
+            return (int) ceil($this->month / 3);
 
-            case $name === 'offset':
-                return $this->getOffset();
+        case $name === 'offset':
+            return $this->getOffset();
 
-            case $name === 'offsetHours':
-                return $this->getOffset() / static::SECONDS_PER_MINUTE / static::MINUTES_PER_HOUR;
+        case $name === 'offsetHours':
+            return $this->getOffset() / static::SECONDS_PER_MINUTE / static::MINUTES_PER_HOUR;
 
-            case $name === 'dst':
-                return $this->format('I') === '1';
+        case $name === 'dst':
+            return $this->format('I') === '1';
 
-            case $name === 'local':
-                return $this->offset === $this->copy()->setTimezone(date_default_timezone_get())->offset;
+        case $name === 'local':
+            return $this->offset === $this->copy()->setTimezone(date_default_timezone_get())->offset;
 
-            case $name === 'utc':
-                return $this->offset === 0;
+        case $name === 'utc':
+            return $this->offset === 0;
 
-            case $name === 'timezone' || $name === 'tz':
-                return $this->getTimezone();
+        case $name === 'timezone' || $name === 'tz':
+            return $this->getTimezone();
 
-            case $name === 'timezoneName' || $name === 'tzName':
-                return $this->getTimezone()->getName();
+        case $name === 'timezoneName' || $name === 'tzName':
+            return $this->getTimezone()->getName();
 
-            default:
-                throw new InvalidArgumentException(sprintf("Unknown getter '%s'", $name));
+        default:
+            throw new InvalidArgumentException(sprintf("Unknown getter '%s'", $name));
         }
     }
 
@@ -557,41 +559,41 @@
     public function __set($name, $value)
     {
         switch ($name) {
-            case 'year':
-                $this->setDate($value, $this->month, $this->day);
-                break;
-
-            case 'month':
-                $this->setDate($this->year, $value, $this->day);
-                break;
-
-            case 'day':
-                $this->setDate($this->year, $this->month, $value);
-                break;
-
-            case 'hour':
-                $this->setTime($value, $this->minute, $this->second);
-                break;
-
-            case 'minute':
-                $this->setTime($this->hour, $value, $this->second);
-                break;
-
-            case 'second':
-                $this->setTime($this->hour, $this->minute, $value);
-                break;
-
-            case 'timestamp':
-                parent::setTimestamp($value);
-                break;
-
-            case 'timezone':
-            case 'tz':
-                $this->setTimezone($value);
-                break;
+        case 'year':
+            $this->setDate($value, $this->month, $this->day);
+            break;
+
+        case 'month':
+            $this->setDate($this->year, $value, $this->day);
+            break;
+
+        case 'day':
+            $this->setDate($this->year, $this->month, $value);
+            break;
+
+        case 'hour':
+            $this->setTime($value, $this->minute, $this->second);
+            break;
+
+        case 'minute':
+            $this->setTime($this->hour, $value, $this->second);
+            break;
+
+        case 'second':
+            $this->setTime($this->hour, $this->minute, $value);
+            break;
+
+        case 'timestamp':
+            parent::setTimestamp($value);
+            break;
+
+        case 'timezone':
+        case 'tz':
+            $this->setTimezone($value);
+            break;
 
-            default:
-                throw new InvalidArgumentException(sprintf("Unknown setter '%s'", $name));
+        default:
+            throw new InvalidArgumentException(sprintf("Unknown setter '%s'", $name));
         }
     }
 
@@ -959,7 +961,7 @@
         static::translator()->setLocale($locale);
 
         // Ensure the locale has been loaded.
-        static::translator()->addResource('array', require __DIR__.'/Lang/'.$locale.'.php', $locale);
+        static::translator()->addResource('array', include __DIR__.'/Lang/'.$locale.'.php', $locale);
     }
 
     ///////////////////////////////////////////////////////////////////
@@ -2053,9 +2055,11 @@
         }
 
         $period = new DatePeriod($start, $ci, $end);
-        $vals = array_filter(iterator_to_array($period), function (DateTime $date) use ($callback) {
-            return call_user_func($callback, Carbon::instance($date));
-        });
+        $vals = array_filter(
+            iterator_to_array($period), function (DateTime $date) use ($callback) {
+                return call_user_func($callback, Carbon::instance($date));
+            }
+        );
 
         $diff = count($vals);
 
@@ -2072,9 +2076,11 @@
      */
     public function diffInWeekdays(Carbon $dt = null, $abs = true)
     {
-        return $this->diffInDaysFiltered(function (Carbon $date) {
-            return $date->isWeekday();
-        }, $dt, $abs);
+        return $this->diffInDaysFiltered(
+            function (Carbon $date) {
+                return $date->isWeekday();
+            }, $dt, $abs
+        );
     }
 
     /**
@@ -2087,9 +2093,11 @@
      */
     public function diffInWeekendDays(Carbon $dt = null, $abs = true)
     {
-        return $this->diffInDaysFiltered(function (Carbon $date) {
-            return $date->isWeekend();
-        }, $dt, $abs);
+        return $this->diffInDaysFiltered(
+            function (Carbon $date) {
+                return $date->isWeekend();
+            }, $dt, $abs
+        );
     }
 
     /**
@@ -2189,39 +2197,39 @@
         $diffInterval = $this->diff($other);
 
         switch (true) {
-            case ($diffInterval->y > 0):
-                $unit = 'year';
-                $count = $diffInterval->y;
-                break;
-
-            case ($diffInterval->m > 0):
-                $unit = 'month';
-                $count = $diffInterval->m;
-                break;
-
-            case ($diffInterval->d > 0):
-                $unit = 'day';
-                $count = $diffInterval->d;
-                if ($count >= self::DAYS_PER_WEEK) {
-                    $unit = 'week';
-                    $count = (int) ($count / self::DAYS_PER_WEEK);
-                }
-                break;
+        case ($diffInterval->y > 0):
+            $unit = 'year';
+            $count = $diffInterval->y;
+            break;
+
+        case ($diffInterval->m > 0):
+            $unit = 'month';
+            $count = $diffInterval->m;
+            break;
+
+        case ($diffInterval->d > 0):
+            $unit = 'day';
+            $count = $diffInterval->d;
+            if ($count >= self::DAYS_PER_WEEK) {
+                $unit = 'week';
+                $count = (int) ($count / self::DAYS_PER_WEEK);
+            }
+            break;
 
-            case ($diffInterval->h > 0):
-                $unit = 'hour';
-                $count = $diffInterval->h;
-                break;
-
-            case ($diffInterval->i > 0):
-                $unit = 'minute';
-                $count = $diffInterval->i;
-                break;
-
-            default:
-                $count = $diffInterval->s;
-                $unit = 'second';
-                break;
+        case ($diffInterval->h > 0):
+            $unit = 'hour';
+            $count = $diffInterval->h;
+            break;
+
+        case ($diffInterval->i > 0):
+            $unit = 'minute';
+            $count = $diffInterval->i;
+            break;
+
+        default:
+            $count = $diffInterval->s;
+            $unit = 'second';
+            break;
         }
 
         if ($count === 0) {

--- vendor/nesbot/carbon/src/Carbon/CarbonInterval.php
+++ PHP_CodeSniffer
@@ -183,34 +183,34 @@
         $arg = count($args) === 0 ? 1 : $args[0];
 
         switch ($name) {
-            case 'years':
-            case 'year':
-                return new static($arg);
-
-            case 'months':
-            case 'month':
-                return new static(null, $arg);
-
-            case 'weeks':
-            case 'week':
-                return new static(null, null, $arg);
-
-            case 'days':
-            case 'dayz':
-            case 'day':
-                return new static(null, null, null, $arg);
-
-            case 'hours':
-            case 'hour':
-                return new static(null, null, null, null, $arg);
-
-            case 'minutes':
-            case 'minute':
-                return new static(null, null, null, null, null, $arg);
-
-            case 'seconds':
-            case 'second':
-                return new static(null, null, null, null, null, null, $arg);
+        case 'years':
+        case 'year':
+            return new static($arg);
+
+        case 'months':
+        case 'month':
+            return new static(null, $arg);
+
+        case 'weeks':
+        case 'week':
+            return new static(null, null, $arg);
+
+        case 'days':
+        case 'dayz':
+        case 'day':
+            return new static(null, null, null, $arg);
+
+        case 'hours':
+        case 'hour':
+            return new static(null, null, null, null, $arg);
+
+        case 'minutes':
+        case 'minute':
+            return new static(null, null, null, null, null, $arg);
+
+        case 'seconds':
+        case 'second':
+            return new static(null, null, null, null, null, null, $arg);
         }
     }
 
@@ -298,7 +298,7 @@
         static::translator()->setLocale($locale);
 
         // Ensure the locale has been loaded.
-        static::translator()->addResource('array', require __DIR__.'/Lang/'.$locale.'.php', $locale);
+        static::translator()->addResource('array', include __DIR__.'/Lang/'.$locale.'.php', $locale);
     }
 
     ///////////////////////////////////////////////////////////////////
@@ -317,33 +317,33 @@
     public function __get($name)
     {
         switch ($name) {
-            case 'years':
-                return $this->y;
+        case 'years':
+            return $this->y;
 
-            case 'months':
-                return $this->m;
+        case 'months':
+            return $this->m;
 
-            case 'dayz':
-                return $this->d;
+        case 'dayz':
+            return $this->d;
 
-            case 'hours':
-                return $this->h;
+        case 'hours':
+            return $this->h;
 
-            case 'minutes':
-                return $this->i;
+        case 'minutes':
+            return $this->i;
 
-            case 'seconds':
-                return $this->s;
+        case 'seconds':
+            return $this->s;
 
-            case 'weeks':
-                return (int)floor($this->d / Carbon::DAYS_PER_WEEK);
+        case 'weeks':
+            return (int)floor($this->d / Carbon::DAYS_PER_WEEK);
 
-            case 'daysExcludeWeeks':
-            case 'dayzExcludeWeeks':
-                return $this->d % Carbon::DAYS_PER_WEEK;
+        case 'daysExcludeWeeks':
+        case 'dayzExcludeWeeks':
+            return $this->d % Carbon::DAYS_PER_WEEK;
 
-            default:
-                throw new InvalidArgumentException(sprintf("Unknown getter '%s'", $name));
+        default:
+            throw new InvalidArgumentException(sprintf("Unknown getter '%s'", $name));
         }
     }
 
@@ -358,33 +358,33 @@
     public function __set($name, $val)
     {
         switch ($name) {
-            case 'years':
-                $this->y = $val;
-                break;
-
-            case 'months':
-                $this->m = $val;
-                break;
-
-            case 'weeks':
-                $this->d = $val * Carbon::DAYS_PER_WEEK;
-                break;
-
-            case 'dayz':
-                $this->d = $val;
-                break;
-
-            case 'hours':
-                $this->h = $val;
-                break;
-
-            case 'minutes':
-                $this->i = $val;
-                break;
-
-            case 'seconds':
-                $this->s = $val;
-                break;
+        case 'years':
+            $this->y = $val;
+            break;
+
+        case 'months':
+            $this->m = $val;
+            break;
+
+        case 'weeks':
+            $this->d = $val * Carbon::DAYS_PER_WEEK;
+            break;
+
+        case 'dayz':
+            $this->d = $val;
+            break;
+
+        case 'hours':
+            $this->h = $val;
+            break;
+
+        case 'minutes':
+            $this->i = $val;
+            break;
+
+        case 'seconds':
+            $this->s = $val;
+            break;
         }
     }
 
@@ -419,41 +419,41 @@
         $arg = count($args) === 0 ? 1 : $args[0];
 
         switch ($name) {
-            case 'years':
-            case 'year':
-                $this->years = $arg;
-                break;
-
-            case 'months':
-            case 'month':
-                $this->months = $arg;
-                break;
-
-            case 'weeks':
-            case 'week':
-                $this->dayz = $arg * Carbon::DAYS_PER_WEEK;
-                break;
-
-            case 'days':
-            case 'dayz':
-            case 'day':
-                $this->dayz = $arg;
-                break;
-
-            case 'hours':
-            case 'hour':
-                $this->hours = $arg;
-                break;
-
-            case 'minutes':
-            case 'minute':
-                $this->minutes = $arg;
-                break;
-
-            case 'seconds':
-            case 'second':
-                $this->seconds = $arg;
-                break;
+        case 'years':
+        case 'year':
+            $this->years = $arg;
+            break;
+
+        case 'months':
+        case 'month':
+            $this->months = $arg;
+            break;
+
+        case 'weeks':
+        case 'week':
+            $this->dayz = $arg * Carbon::DAYS_PER_WEEK;
+            break;
+
+        case 'days':
+        case 'dayz':
+        case 'day':
+            $this->dayz = $arg;
+            break;
+
+        case 'hours':
+        case 'hour':
+            $this->hours = $arg;
+            break;
+
+        case 'minutes':
+        case 'minute':
+            $this->minutes = $arg;
+            break;
+
+        case 'seconds':
+        case 'second':
+            $this->seconds = $arg;
+            break;
         }
 
         return $this;

--- vendor/nikic/php-parser/grammar/analyze.php
+++ PHP_CodeSniffer
@@ -12,19 +12,25 @@
 
 const RULE_BLOCK = '(?<name>[a-z_]++):(?<rules>[^\'"/{};]*+(?:(?:(?&string)|(?&comment)|(?&code)|/|})[^\'"/{};]*+)*+);';
 
-$usedTerminals = array_flip(array(
+$usedTerminals = array_flip(
+    array(
     'T_VARIABLE', 'T_STRING', 'T_INLINE_HTML', 'T_ENCAPSED_AND_WHITESPACE',
     'T_LNUMBER', 'T_DNUMBER', 'T_CONSTANT_ENCAPSED_STRING', 'T_STRING_VARNAME', 'T_NUM_STRING'
-));
-$unusedNonterminals = array_flip(array(
+    )
+);
+$unusedNonterminals = array_flip(
+    array(
     'case_separator', 'optional_comma'
-));
+    )
+);
 
-function regex($regex) {
+function regex($regex) 
+{
     return '~' . LIB . '(?:' . str_replace('~', '\~', $regex) . ')~';
 }
 
-function magicSplit($regex, $string) {
+function magicSplit($regex, $string) 
+{
     $pieces = preg_split(regex('(?:(?&string)|(?&comment)|(?&code))(*SKIP)(*FAIL)|' . $regex), $string);
 
     foreach ($pieces as &$piece) {
@@ -80,8 +86,7 @@
                     $part = '<strong><em>' . $part . '</em></strong>';
                 }
             } elseif ((ctype_upper($part[0]) && isset($usedTerminals[$part]))
-                      || (ctype_lower($part[0]) && !isset($unusedNonterminals[$part]))
-
+                || (ctype_lower($part[0]) && !isset($unusedNonterminals[$part]))
             ) {
                 $part = '<span style="background-color: blue; color: white;">' . $part . '</span>';
             }

--- vendor/nikic/php-parser/grammar/rebuildParsers.php
+++ PHP_CodeSniffer
@@ -83,10 +83,11 @@
 /// Preprocessing functions ///
 ///////////////////////////////
 
-function resolveNodes($code) {
+function resolveNodes($code) 
+{
     return preg_replace_callback(
         '~\b(?<name>[A-Z][a-zA-Z_\\\\]++)\s*' . PARAMS . '~',
-        function($matches) {
+        function ($matches) {
             // recurse
             $matches['params'] = resolveNodes($matches['params']);
 
@@ -106,10 +107,11 @@
     );
 }
 
-function resolveMacros($code) {
+function resolveMacros($code) 
+{
     return preg_replace_callback(
         '~\b(?<!::|->)(?!array\()(?<name>[a-z][A-Za-z]++)' . ARGS . '~',
-        function($matches) {
+        function ($matches) {
             // recurse
             $matches['args'] = resolveMacros($matches['args']);
 
@@ -201,25 +203,29 @@
     );
 }
 
-function assertArgs($num, $args, $name) {
+function assertArgs($num, $args, $name) 
+{
     if ($num != count($args)) {
         die('Wrong argument count for ' . $name . '().');
     }
 }
 
-function resolveStackAccess($code) {
+function resolveStackAccess($code) 
+{
     $code = preg_replace('/\$\d+/', '$this->semStack[$0]', $code);
     $code = preg_replace('/#(\d+)/', '$$1', $code);
     return $code;
 }
 
-function removeTrailingWhitespace($code) {
+function removeTrailingWhitespace($code) 
+{
     $lines = explode("\n", $code);
     $lines = array_map('rtrim', $lines);
     return implode("\n", $lines);
 }
 
-function ensureDirExists($dir) {
+function ensureDirExists($dir) 
+{
     if (!is_dir($dir)) {
         mkdir($dir, 0777, true);
     }
@@ -229,11 +235,13 @@
 /// Regex helper functions ///
 //////////////////////////////
 
-function regex($regex) {
+function regex($regex) 
+{
     return '~' . LIB . '(?:' . str_replace('~', '\~', $regex) . ')~';
 }
 
-function magicSplit($regex, $string) {
+function magicSplit($regex, $string) 
+{
     $pieces = preg_split(regex('(?:(?&string)|(?&comment)|(?&code))(*SKIP)(*FAIL)|' . $regex), $string);
 
     foreach ($pieces as &$piece) {

--- vendor/nikic/php-parser/lib/bootstrap.php
+++ PHP_CodeSniffer
@@ -1,6 +1,6 @@
 <?php
 
 if (!class_exists('PhpParser\Autoloader')) {
-    require __DIR__ . '/PhpParser/Autoloader.php';
+    include __DIR__ . '/PhpParser/Autoloader.php';
 }
 PhpParser\Autoloader::register();

--- vendor/nikic/php-parser/lib/PhpParser/Autoloader.php
+++ PHP_CodeSniffer
@@ -7,7 +7,9 @@
  */
 class Autoloader
 {
-    /** @var bool Whether the autoloader has been registered. */
+    /**
+ * @var bool Whether the autoloader has been registered. 
+*/
     private static $registered = false;
 
     /**
@@ -15,7 +17,8 @@
      *
      * @param bool $prepend Whether to prepend the autoloader instead of appending
      */
-    static public function register($prepend = false) {
+    static public function register($prepend = false) 
+    {
         if (self::$registered === true) {
             return;
         }
@@ -29,11 +32,12 @@
      *
      * @param string $class A class name.
      */
-    static public function autoload($class) {
+    static public function autoload($class) 
+    {
         if (0 === strpos($class, 'PhpParser\\')) {
             $fileName = __DIR__ . strtr(substr($class, 9), '\\', '/') . '.php';
             if (file_exists($fileName)) {
-                require $fileName;
+                include $fileName;
             }
         }
     }

--- vendor/nikic/php-parser/lib/PhpParser/Builder/Class_.php
+++ PHP_CodeSniffer
@@ -24,7 +24,8 @@
      *
      * @param string $name Name of the class
      */
-    public function __construct($name) {
+    public function __construct($name) 
+    {
         $this->name = $name;
     }
 
@@ -35,7 +36,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function extend($class) {
+    public function extend($class) 
+    {
         $this->extends = $this->normalizeName($class);
 
         return $this;
@@ -48,7 +50,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function implement() {
+    public function implement() 
+    {
         foreach (func_get_args() as $interface) {
             $this->implements[] = $this->normalizeName($interface);
         }
@@ -61,7 +64,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function makeAbstract() {
+    public function makeAbstract() 
+    {
         $this->setModifier(Stmt\Class_::MODIFIER_ABSTRACT);
 
         return $this;
@@ -72,7 +76,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function makeFinal() {
+    public function makeFinal() 
+    {
         $this->setModifier(Stmt\Class_::MODIFIER_FINAL);
 
         return $this;
@@ -85,7 +90,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function addStmt($stmt) {
+    public function addStmt($stmt) 
+    {
         $stmt = $this->normalizeNode($stmt);
 
         $targets = array(
@@ -110,12 +116,15 @@
      *
      * @return Stmt\Class_ The built class node
      */
-    public function getNode() {
-        return new Stmt\Class_($this->name, array(
+    public function getNode() 
+    {
+        return new Stmt\Class_(
+            $this->name, array(
             'type' => $this->type,
             'extends' => $this->extends,
             'implements' => $this->implements,
             'stmts' => array_merge($this->uses, $this->constants, $this->properties, $this->methods),
-        ), $this->attributes);
+            ), $this->attributes
+        );
     }
 }
\ No newline at end of file

--- vendor/nikic/php-parser/lib/PhpParser/Builder/Declaration.php
+++ PHP_CodeSniffer
@@ -19,7 +19,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function addStmts(array $stmts) {
+    public function addStmts(array $stmts) 
+    {
         foreach ($stmts as $stmt) {
             $this->addStmt($stmt);
         }
@@ -34,7 +35,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function setDocComment($docComment) {
+    public function setDocComment($docComment) 
+    {
         $this->attributes['comments'] = array(
             $this->normalizeDocComment($docComment)
         );

--- vendor/nikic/php-parser/lib/PhpParser/Builder/Function_.php
+++ PHP_CodeSniffer
@@ -16,7 +16,8 @@
      *
      * @param string $name Name of the function
      */
-    public function __construct($name) {
+    public function __construct($name) 
+    {
         $this->name = $name;
     }
 
@@ -27,7 +28,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function addStmt($stmt) {
+    public function addStmt($stmt) 
+    {
         $this->stmts[] = $this->normalizeNode($stmt);
 
         return $this;
@@ -38,12 +40,15 @@
      *
      * @return Stmt\Function_ The built function node
      */
-    public function getNode() {
-        return new Stmt\Function_($this->name, array(
+    public function getNode() 
+    {
+        return new Stmt\Function_(
+            $this->name, array(
             'byRef'      => $this->returnByRef,
             'params'     => $this->params,
             'returnType' => $this->returnType,
             'stmts'      => $this->stmts,
-        ), $this->attributes);
+            ), $this->attributes
+        );
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Builder/FunctionLike.php
+++ PHP_CodeSniffer
@@ -17,7 +17,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function makeReturnByRef() {
+    public function makeReturnByRef() 
+    {
         $this->returnByRef = true;
 
         return $this;
@@ -30,7 +31,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function addParam($param) {
+    public function addParam($param) 
+    {
         $param = $this->normalizeNode($param);
 
         if (!$param instanceof Node\Param) {
@@ -49,7 +51,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function addParams(array $params) {
+    public function addParams(array $params) 
+    {
         foreach ($params as $param) {
             $this->addParam($param);
         }

--- vendor/nikic/php-parser/lib/PhpParser/Builder/Interface_.php
+++ PHP_CodeSniffer
@@ -18,7 +18,8 @@
      *
      * @param string $name Name of the interface
      */
-    public function __construct($name) {
+    public function __construct($name) 
+    {
         $this->name = $name;
     }
 
@@ -29,7 +30,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function extend() {
+    public function extend() 
+    {
         foreach (func_get_args() as $interface) {
             $this->extends[] = $this->normalizeName($interface);
         }
@@ -44,23 +46,24 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function addStmt($stmt) {
+    public function addStmt($stmt) 
+    {
         $stmt = $this->normalizeNode($stmt);
 
         $type = $stmt->getType();
         switch ($type) {
-            case 'Stmt_ClassConst':
-                $this->constants[] = $stmt;
-                break;
-
-            case 'Stmt_ClassMethod':
-                // we erase all statements in the body of an interface method
-                $stmt->stmts = null;
-                $this->methods[] = $stmt;
-                break;
+        case 'Stmt_ClassConst':
+            $this->constants[] = $stmt;
+            break;
+
+        case 'Stmt_ClassMethod':
+            // we erase all statements in the body of an interface method
+            $stmt->stmts = null;
+            $this->methods[] = $stmt;
+            break;
 
-            default:
-                throw new \LogicException(sprintf('Unexpected node of type "%s"', $type));
+        default:
+            throw new \LogicException(sprintf('Unexpected node of type "%s"', $type));
         }
 
         return $this;
@@ -71,10 +74,13 @@
      *
      * @return Stmt\Interface_ The built interface node
      */
-    public function getNode() {
-        return new Stmt\Interface_($this->name, array(
+    public function getNode() 
+    {
+        return new Stmt\Interface_(
+            $this->name, array(
             'extends' => $this->extends,
             'stmts' => array_merge($this->constants, $this->methods),
-        ), $this->attributes);
+            ), $this->attributes
+        );
     }
 }
\ No newline at end of file

--- vendor/nikic/php-parser/lib/PhpParser/Builder/Method.php
+++ PHP_CodeSniffer
@@ -17,7 +17,8 @@
      *
      * @param string $name Name of the method
      */
-    public function __construct($name) {
+    public function __construct($name) 
+    {
         $this->name = $name;
     }
 
@@ -26,7 +27,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function makePublic() {
+    public function makePublic() 
+    {
         $this->setModifier(Stmt\Class_::MODIFIER_PUBLIC);
 
         return $this;
@@ -37,7 +39,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function makeProtected() {
+    public function makeProtected() 
+    {
         $this->setModifier(Stmt\Class_::MODIFIER_PROTECTED);
 
         return $this;
@@ -48,7 +51,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function makePrivate() {
+    public function makePrivate() 
+    {
         $this->setModifier(Stmt\Class_::MODIFIER_PRIVATE);
 
         return $this;
@@ -59,7 +63,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function makeStatic() {
+    public function makeStatic() 
+    {
         $this->setModifier(Stmt\Class_::MODIFIER_STATIC);
 
         return $this;
@@ -70,7 +75,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function makeAbstract() {
+    public function makeAbstract() 
+    {
         if (!empty($this->stmts)) {
             throw new \LogicException('Cannot make method with statements abstract');
         }
@@ -86,7 +92,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function makeFinal() {
+    public function makeFinal() 
+    {
         $this->setModifier(Stmt\Class_::MODIFIER_FINAL);
 
         return $this;
@@ -99,7 +106,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function addStmt($stmt) {
+    public function addStmt($stmt) 
+    {
         if (null === $this->stmts) {
             throw new \LogicException('Cannot add statements to an abstract method');
         }
@@ -114,13 +122,16 @@
      *
      * @return Stmt\ClassMethod The built method node
      */
-    public function getNode() {
-        return new Stmt\ClassMethod($this->name, array(
+    public function getNode() 
+    {
+        return new Stmt\ClassMethod(
+            $this->name, array(
             'type'       => $this->type,
             'byRef'      => $this->returnByRef,
             'params'     => $this->params,
             'returnType' => $this->returnType,
             'stmts'      => $this->stmts,
-        ), $this->attributes);
+            ), $this->attributes
+        );
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Builder/Namespace_.php
+++ PHP_CodeSniffer
@@ -16,7 +16,8 @@
      *
      * @param Node\Name|string|null $name Name of the namespace
      */
-    public function __construct($name) {
+    public function __construct($name) 
+    {
         $this->name = null !== $name ? $this->normalizeName($name) : null;
     }
 
@@ -27,7 +28,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function addStmt($stmt) {
+    public function addStmt($stmt) 
+    {
         $this->stmts[] = $this->normalizeNode($stmt);
 
         return $this;
@@ -40,7 +42,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function addStmts(array $stmts) {
+    public function addStmts(array $stmts) 
+    {
         foreach ($stmts as $stmt) {
             $this->addStmt($stmt);
         }
@@ -53,7 +56,8 @@
      *
      * @return Node The built node
      */
-    public function getNode() {
+    public function getNode() 
+    {
         return new Stmt\Namespace_($this->name, $this->stmts);
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Builder/Param.php
+++ PHP_CodeSniffer
@@ -18,7 +18,8 @@
      *
      * @param string $name Name of the parameter
      */
-    public function __construct($name) {
+    public function __construct($name) 
+    {
         $this->name = $name;
     }
 
@@ -29,7 +30,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function setDefault($value) {
+    public function setDefault($value) 
+    {
         $this->default = $this->normalizeValue($value);
 
         return $this;
@@ -42,7 +44,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function setTypeHint($type) {
+    public function setTypeHint($type) 
+    {
         if (in_array($type, array('array', 'callable', 'string', 'int', 'float', 'bool'))) {
             $this->type = $type;
         } else {
@@ -57,7 +60,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function makeByRef() {
+    public function makeByRef() 
+    {
         $this->byRef = true;
 
         return $this;
@@ -68,7 +72,8 @@
      *
      * @return Node\Param The built parameter node
      */
-    public function getNode() {
+    public function getNode() 
+    {
         return new Node\Param(
             $this->name, $this->default, $this->type, $this->byRef
         );

--- vendor/nikic/php-parser/lib/PhpParser/Builder/Property.php
+++ PHP_CodeSniffer
@@ -18,7 +18,8 @@
      *
      * @param string $name Name of the property
      */
-    public function __construct($name) {
+    public function __construct($name) 
+    {
         $this->name = $name;
     }
 
@@ -27,7 +28,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function makePublic() {
+    public function makePublic() 
+    {
         $this->setModifier(Stmt\Class_::MODIFIER_PUBLIC);
 
         return $this;
@@ -38,7 +40,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function makeProtected() {
+    public function makeProtected() 
+    {
         $this->setModifier(Stmt\Class_::MODIFIER_PROTECTED);
 
         return $this;
@@ -49,7 +52,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function makePrivate() {
+    public function makePrivate() 
+    {
         $this->setModifier(Stmt\Class_::MODIFIER_PRIVATE);
 
         return $this;
@@ -60,7 +64,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function makeStatic() {
+    public function makeStatic() 
+    {
         $this->setModifier(Stmt\Class_::MODIFIER_STATIC);
 
         return $this;
@@ -73,7 +78,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function setDefault($value) {
+    public function setDefault($value) 
+    {
         $this->default = $this->normalizeValue($value);
 
         return $this;
@@ -86,7 +92,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function setDocComment($docComment) {
+    public function setDocComment($docComment) 
+    {
         $this->attributes = array(
             'comments' => array($this->normalizeDocComment($docComment))
         );
@@ -99,7 +106,8 @@
      *
      * @return Stmt\Property The built property node
      */
-    public function getNode() {
+    public function getNode() 
+    {
         return new Stmt\Property(
             $this->type !== 0 ? $this->type : Stmt\Class_::MODIFIER_PUBLIC,
             array(

--- vendor/nikic/php-parser/lib/PhpParser/Builder/Trait_.php
+++ PHP_CodeSniffer
@@ -17,7 +17,8 @@
      *
      * @param string $name Name of the interface
      */
-    public function __construct($name) {
+    public function __construct($name) 
+    {
         $this->name = $name;
     }
 
@@ -28,7 +29,8 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    public function addStmt($stmt) {
+    public function addStmt($stmt) 
+    {
         $stmt = $this->normalizeNode($stmt);
 
         if ($stmt instanceof Stmt\Property) {
@@ -47,7 +49,8 @@
      *
      * @return Stmt\Trait_ The built interface node
      */
-    public function getNode() {
+    public function getNode() 
+    {
         return new Stmt\Trait_(
             $this->name, array_merge($this->properties, $this->methods), $this->attributes
         );

--- vendor/nikic/php-parser/lib/PhpParser/Builder/Use_.php
+++ PHP_CodeSniffer
@@ -9,7 +9,8 @@
 /**
  * @method $this as(string $alias) Sets alias for used name.
  */
-class Use_ extends BuilderAbstract {
+class Use_ extends BuilderAbstract
+{
     protected $name;
     protected $type;
     protected $alias = null;
@@ -20,7 +21,8 @@
      * @param Node\Name|string $name Name of the entity (namespace, class, function, constant) to alias
      * @param int              $type One of the Stmt\Use_::TYPE_* constants
      */
-    public function __construct($name, $type) {
+    public function __construct($name, $type) 
+    {
         $this->name = $this->normalizeName($name);
         $this->type = $type;
     }
@@ -32,11 +34,13 @@
      *
      * @return $this The builder instance (for fluid interface)
      */
-    protected function as_($alias) {
+    protected function as_($alias) 
+    {
         $this->alias = $alias;
         return $this;
     }
-    public function __call($name, $args) {
+    public function __call($name, $args) 
+    {
         if (method_exists($this, $name . '_')) {
             return call_user_func_array(array($this, $name . '_'), $args);
         }
@@ -49,10 +53,13 @@
      *
      * @return Node The built node
      */
-    public function getNode() {
+    public function getNode() 
+    {
         $alias = null !== $this->alias ? $this->alias : $this->name->getLast();
-        return new Stmt\Use_(array(
+        return new Stmt\Use_(
+            array(
             new Stmt\UseUse($this->name, $alias)
-        ), $this->type);
+            ), $this->type
+        );
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/BuilderAbstract.php
+++ PHP_CodeSniffer
@@ -8,7 +8,8 @@
 use PhpParser\Node\Scalar;
 use PhpParser\Comment;
 
-abstract class BuilderAbstract implements Builder {
+abstract class BuilderAbstract implements Builder
+{
     /**
      * Normalizes a node: Converts builder objects to nodes.
      *
@@ -16,7 +17,8 @@
      *
      * @return Node The normalized node
      */
-    protected function normalizeNode($node) {
+    protected function normalizeNode($node) 
+    {
         if ($node instanceof Builder) {
             return $node->getNode();
         } elseif ($node instanceof Node) {
@@ -33,7 +35,8 @@
      *
      * @return Name The normalized name
      */
-    protected function normalizeName($name) {
+    protected function normalizeName($name) 
+    {
         if ($name instanceof Name) {
             return $name;
         } elseif (is_string($name)) {
@@ -61,7 +64,8 @@
      *
      * @return Expr The normalized value
      */
-    protected function normalizeValue($value) {
+    protected function normalizeValue($value) 
+    {
         if ($value instanceof Node) {
             return $value;
         } elseif (is_null($value)) {
@@ -109,7 +113,8 @@
      *
      * @return Comment\Doc The normalized doc comment
      */
-    protected function normalizeDocComment($docComment) {
+    protected function normalizeDocComment($docComment) 
+    {
         if ($docComment instanceof Comment\Doc) {
             return $docComment;
         } else if (is_string($docComment)) {
@@ -124,7 +129,8 @@
      *
      * @param int $modifier Modifier to set
      */
-    protected function setModifier($modifier) {
+    protected function setModifier($modifier) 
+    {
         Stmt\Class_::verifyModifier($this->type, $modifier);
         $this->type |= $modifier;
     }

--- vendor/nikic/php-parser/lib/PhpParser/BuilderFactory.php
+++ PHP_CodeSniffer
@@ -25,7 +25,8 @@
      *
      * @return Builder\Namespace_ The created namespace builder
      */
-    protected function _namespace($name) {
+    protected function _namespace($name) 
+    {
         return new Builder\Namespace_($name);
     }
 
@@ -36,7 +37,8 @@
      *
      * @return Builder\Class_ The created class builder
      */
-    protected function _class($name) {
+    protected function _class($name) 
+    {
         return new Builder\Class_($name);
     }
 
@@ -47,7 +49,8 @@
      *
      * @return Builder\Interface_ The created interface builder
      */
-    protected function _interface($name) {
+    protected function _interface($name) 
+    {
         return new Builder\Interface_($name);
     }
 
@@ -58,7 +61,8 @@
      *
      * @return Builder\Trait_ The created trait builder
      */
-    protected function _trait($name) {
+    protected function _trait($name) 
+    {
         return new Builder\Trait_($name);
     }
 
@@ -69,7 +73,8 @@
      *
      * @return Builder\Method The created method builder
      */
-    public function method($name) {
+    public function method($name) 
+    {
         return new Builder\Method($name);
     }
 
@@ -80,7 +85,8 @@
      *
      * @return Builder\Param The created parameter builder
      */
-    public function param($name) {
+    public function param($name) 
+    {
         return new Builder\Param($name);
     }
 
@@ -91,7 +97,8 @@
      *
      * @return Builder\Property The created property builder
      */
-    public function property($name) {
+    public function property($name) 
+    {
         return new Builder\Property($name);
     }
 
@@ -102,7 +109,8 @@
      *
      * @return Builder\Function_ The created function builder
      */
-    protected function _function($name) {
+    protected function _function($name) 
+    {
         return new Builder\Function_($name);
     }
 
@@ -113,11 +121,13 @@
      *
      * @return Builder\Use_ The create use builder
      */
-    protected function _use($name) {
+    protected function _use($name) 
+    {
         return new Builder\Use_($name, Use_::TYPE_NORMAL);
     }
 
-    public function __call($name, array $args) {
+    public function __call($name, array $args) 
+    {
         if (method_exists($this, '_' . $name)) {
             return call_user_func_array(array($this, '_' . $name), $args);
         }

--- vendor/nikic/php-parser/lib/PhpParser/Comment.php
+++ PHP_CodeSniffer
@@ -15,7 +15,8 @@
      * @param int    $startLine    Line number the comment started on
      * @param int    $startFilePos File offset the comment started on
      */
-    public function __construct($text, $startLine = -1, $startFilePos = -1) {
+    public function __construct($text, $startLine = -1, $startFilePos = -1) 
+    {
         $this->text = $text;
         $this->line = $startLine;
         $this->filePos = $startFilePos;
@@ -26,7 +27,8 @@
      *
      * @return string The comment text (including comment delimiters like /*)
      */
-    public function getText() {
+    public function getText() 
+    {
         return $this->text;
     }
 
@@ -37,7 +39,8 @@
      *
      * @deprecated Construct a new comment instead
      */
-    public function setText($text) {
+    public function setText($text) 
+    {
         $this->text = $text;
     }
 
@@ -46,7 +49,8 @@
      *
      * @return int Line number
      */
-    public function getLine() {
+    public function getLine() 
+    {
         return $this->line;
     }
 
@@ -57,7 +61,8 @@
      *
      * @deprecated Construct a new comment instead
      */
-    public function setLine($line) {
+    public function setLine($line) 
+    {
         $this->line = $line;
     }
 
@@ -66,7 +71,8 @@
      *
      * @return int File offset
      */
-    public function getFilePos() {
+    public function getFilePos() 
+    {
         return $this->filePos;
     }
 
@@ -75,7 +81,8 @@
      *
      * @return string The comment text (including comment delimiters like /*)
      */
-    public function __toString() {
+    public function __toString() 
+    {
         return $this->text;
     }
 
@@ -89,7 +96,8 @@
      *
      * @return mixed|string
      */
-    public function getReformattedText() {
+    public function getReformattedText() 
+    {
         $text = trim($this->text);
         $newlinePos = strpos($text, "\n");
         if (false === $newlinePos) {
@@ -136,7 +144,8 @@
         return $text;
     }
 
-    private function getShortestWhitespacePrefixLen($str) {
+    private function getShortestWhitespacePrefixLen($str) 
+    {
         $lines = explode("\n", $str);
         $shortestPrefixLen = INF;
         foreach ($lines as $line) {

--- vendor/nikic/php-parser/lib/PhpParser/Error.php
+++ PHP_CodeSniffer
@@ -14,7 +14,8 @@
      * @param array|int $attributes Attributes of node/token where error occurred
      *                              (or start line of error -- deprecated)
      */
-    public function __construct($message, $attributes = array()) {
+    public function __construct($message, $attributes = array()) 
+    {
         $this->rawMessage = (string) $message;
         if (is_array($attributes)) {
             $this->attributes = $attributes;
@@ -29,7 +30,8 @@
      *
      * @return string Error message
      */
-    public function getRawMessage() {
+    public function getRawMessage() 
+    {
         return $this->rawMessage;
     }
 
@@ -38,7 +40,8 @@
      *
      * @return int Error start line
      */
-    public function getStartLine() {
+    public function getStartLine() 
+    {
         return isset($this->attributes['startLine']) ? $this->attributes['startLine'] : -1;
     }
 
@@ -47,7 +50,8 @@
      *
      * @return int Error end line
      */
-    public function getEndLine() {
+    public function getEndLine() 
+    {
         return isset($this->attributes['endLine']) ? $this->attributes['endLine'] : -1;
     }
 
@@ -57,7 +61,8 @@
      *
      * @return array
      */
-    public function getAttributes() {
+    public function getAttributes() 
+    {
         return $this->attributes;
     }
 
@@ -66,7 +71,8 @@
      *
      * @param string $message Error message
      */
-    public function setRawMessage($message) {
+    public function setRawMessage($message) 
+    {
         $this->rawMessage = (string) $message;
         $this->updateMessage();
     }
@@ -76,7 +82,8 @@
      *
      * @param int $line Error start line
      */
-    public function setStartLine($line) {
+    public function setStartLine($line) 
+    {
         $this->attributes['startLine'] = (int) $line;
         $this->updateMessage();
     }
@@ -88,17 +95,19 @@
      *
      * @return bool
      */
-    public function hasColumnInfo() {
+    public function hasColumnInfo() 
+    {
         return isset($this->attributes['startFilePos']) && isset($this->attributes['endFilePos']);
     }
 
     /**
      * Gets the start column (1-based) into the line where the error started.
      *
-     * @param string $code Source code of the file
+     * @param  string $code Source code of the file
      * @return int
      */
-    public function getStartColumn($code) {
+    public function getStartColumn($code) 
+    {
         if (!$this->hasColumnInfo()) {
             throw new \RuntimeException('Error does not have column information');
         }
@@ -109,10 +118,11 @@
     /**
      * Gets the end column (1-based) into the line where the error ended.
      *
-     * @param string $code Source code of the file
+     * @param  string $code Source code of the file
      * @return int
      */
-    public function getEndColumn($code) {
+    public function getEndColumn($code) 
+    {
         if (!$this->hasColumnInfo()) {
             throw new \RuntimeException('Error does not have column information');
         }
@@ -120,7 +130,8 @@
         return $this->toColumn($code, $this->attributes['endFilePos']);
     }
 
-    private function toColumn($code, $pos) {
+    private function toColumn($code, $pos) 
+    {
         if ($pos > strlen($code)) {
             throw new \RuntimeException('Invalid position information');
         }
@@ -136,7 +147,8 @@
     /**
      * Updates the exception message after a change to rawMessage or rawLine.
      */
-    protected function updateMessage() {
+    protected function updateMessage() 
+    {
         $this->message = $this->rawMessage;
 
         if (-1 === $this->getStartLine()) {
@@ -146,13 +158,19 @@
         }
     }
 
-    /** @deprecated Use getStartLine() instead */
-    public function getRawLine() {
+    /**
+ * @deprecated Use getStartLine() instead 
+*/
+    public function getRawLine() 
+    {
         return $this->getStartLine();
     }
 
-    /** @deprecated Use setStartLine() instead */
-    public function setRawLine($line) {
+    /**
+ * @deprecated Use setStartLine() instead 
+*/
+    public function setRawLine($line) 
+    {
         $this->setStartLine($line);
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Lexer/Emulative.php
+++ PHP_CodeSniffer
@@ -23,7 +23,8 @@
     const PHP_5_6 = '5.6.0rc1';
     const PHP_5_5 = '5.5.0beta1';
 
-    public function __construct(array $options = array()) {
+    public function __construct(array $options = array()) 
+    {
         parent::__construct($options);
 
         $newKeywordsPerVersion = array(
@@ -57,7 +58,8 @@
         $this->tokenMap[self::T_POW_EQUAL] = Tokens::T_POW_EQUAL;
     }
 
-    public function startLexing($code) {
+    public function startLexing($code) 
+    {
         $this->inObjectAccess = false;
 
         $preprocessedCode = $this->preprocessCode($code);
@@ -79,17 +81,20 @@
      * by real tokens or replaced with their original content (e.g. if they occurred
      * inside a string, i.e. a place where they don't have a special meaning).
      */
-    protected function preprocessCode($code) {
+    protected function preprocessCode($code) 
+    {
         if (version_compare(PHP_VERSION, self::PHP_7_0, '>=')) {
             return $code;
         }
 
         $code = str_replace('??', '~__EMU__COALESCE__~', $code);
         $code = str_replace('<=>', '~__EMU__SPACESHIP__~', $code);
-        $code = preg_replace_callback('(yield[ \n\r\t]+from)', function($matches) {
-            // Encoding $0 in order to preserve exact whitespace
-            return '~__EMU__YIELDFROM__' . bin2hex($matches[0]) . '__~';
-        }, $code);
+        $code = preg_replace_callback(
+            '(yield[ \n\r\t]+from)', function ($matches) {
+                // Encoding $0 in order to preserve exact whitespace
+                return '~__EMU__YIELDFROM__' . bin2hex($matches[0]) . '__~';
+            }, $code
+        );
 
         if (version_compare(PHP_VERSION, self::PHP_5_6, '>=')) {
             return $code;
@@ -106,7 +111,8 @@
      * Replaces the ~__EMU__...~ sequences with real tokens or their original
      * value.
      */
-    protected function postprocessTokens() {
+    protected function postprocessTokens() 
+    {
         // we need to manually iterate and manage a count because we'll change
         // the tokens array on the way
         for ($i = 0, $c = count($this->tokens); $i < $c; ++$i) {
@@ -149,10 +155,10 @@
 
                 array_splice($this->tokens, $i, 3, $replace);
                 $c -= 3 - count($replace);
-            // for multichar tokens (e.g. strings) replace any ~__EMU__...~ sequences
-            // in their content with the original character sequence
+                // for multichar tokens (e.g. strings) replace any ~__EMU__...~ sequences
+                // in their content with the original character sequence
             } elseif (is_array($this->tokens[$i])
-                      && 0 !== strpos($this->tokens[$i][1], '__EMU__')
+                && 0 !== strpos($this->tokens[$i][1], '__EMU__')
             ) {
                 $this->tokens[$i][1] = preg_replace_callback(
                     '(~__EMU__([A-Z]++)__(?:([A-Za-z0-9]++)__)?~)',
@@ -167,7 +173,8 @@
      * This method is a callback for restoring EMU sequences in
      * multichar tokens (like strings) to their original value.
      */
-    public function restoreContentCallback(array $matches) {
+    public function restoreContentCallback(array $matches) 
+    {
         if ('ELLIPSIS' === $matches[1]) {
             return '...';
         } else if ('POW' === $matches[1]) {
@@ -185,7 +192,8 @@
         }
     }
 
-    public function getNextToken(&$value = null, &$startAttributes = null, &$endAttributes = null) {
+    public function getNextToken(&$value = null, &$startAttributes = null, &$endAttributes = null) 
+    {
         $token = parent::getNextToken($value, $startAttributes, $endAttributes);
 
         // replace new keywords by their respective tokens. This is not done

--- vendor/nikic/php-parser/lib/PhpParser/Lexer.php
+++ PHP_CodeSniffer
@@ -27,7 +27,8 @@
      *                       'endTokenPos', 'startFilePos', 'endFilePos'. The option defaults to the
      *                       first three. For more info see getNextToken() docs.
      */
-    public function __construct(array $options = array()) {
+    public function __construct(array $options = array()) 
+    {
         // map from internal tokens to PhpParser tokens
         $this->tokenMap = $this->createTokenMap();
 
@@ -52,7 +53,8 @@
      *
      * @throws Error on lexing errors (unterminated comment or unexpected character)
      */
-    public function startLexing($code) {
+    public function startLexing($code) 
+    {
         $scream = ini_set('xdebug.scream', '0');
 
         $this->resetErrors();
@@ -69,18 +71,24 @@
         $this->filePos = 0;
     }
 
-    protected function resetErrors() {
+    protected function resetErrors() 
+    {
         if (function_exists('error_clear_last')) {
             error_clear_last();
         } else {
             // set error_get_last() to defined state by forcing an undefined variable error
-            set_error_handler(function() { return false; }, 0);
+            set_error_handler(
+                function () {
+                    return false; 
+                }, 0
+            );
             @$undefinedVariable;
             restore_error_handler();
         }
     }
 
-    protected function handleErrors() {
+    protected function handleErrors() 
+    {
         $error = error_get_last();
         if (null === $error) {
             return;
@@ -97,10 +105,12 @@
             '~^Unexpected character in input:  \'(.)\' \(ASCII=([0-9]+)\)~s',
             $error['message'], $matches
         )) {
-            throw new Error(sprintf(
-                'Unexpected character "%s" (ASCII %d)',
-                $matches[1], $matches[2]
-            ));
+            throw new Error(
+                sprintf(
+                    'Unexpected character "%s" (ASCII %d)',
+                    $matches[1], $matches[2]
+                )
+            );
         }
 
         // PHP cuts error message after null byte, so need special case
@@ -131,7 +141,8 @@
      *
      * @return int Token id
      */
-    public function getNextToken(&$value = null, &$startAttributes = null, &$endAttributes = null) {
+    public function getNextToken(&$value = null, &$startAttributes = null, &$endAttributes = null) 
+    {
         $startAttributes = array();
         $endAttributes   = array();
 
@@ -210,7 +221,8 @@
      *
      * @return array Array of tokens in token_get_all() format
      */
-    public function getTokens() {
+    public function getTokens() 
+    {
         return $this->tokens;
     }
 
@@ -219,7 +231,8 @@
      *
      * @return string Remaining text
      */
-    public function handleHaltCompiler() {
+    public function handleHaltCompiler() 
+    {
         // text after T_HALT_COMPILER, still including ();
         $textAfter = substr($this->code, $this->filePos);
 
@@ -246,7 +259,8 @@
      *
      * @return array The token map
      */
-    protected function createTokenMap() {
+    protected function createTokenMap() 
+    {
         $tokenMap = array();
 
         // 256 is the minimum possible token number, as everything below

--- vendor/nikic/php-parser/lib/PhpParser/Node/Arg.php
+++ PHP_CodeSniffer
@@ -6,11 +6,17 @@
 
 class Arg extends NodeAbstract
 {
-    /** @var Expr Value to pass */
+    /**
+ * @var Expr Value to pass 
+*/
     public $value;
-    /** @var bool Whether to pass by ref */
+    /**
+ * @var bool Whether to pass by ref 
+*/
     public $byRef;
-    /** @var bool Whether to unpack the argument */
+    /**
+ * @var bool Whether to unpack the argument 
+*/
     public $unpack;
 
     /**
@@ -21,14 +27,16 @@
      * @param bool  $unpack     Whether to unpack the argument
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $value, $byRef = false, $unpack = false, array $attributes = array()) {
+    public function __construct(Expr $value, $byRef = false, $unpack = false, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->value = $value;
         $this->byRef = $byRef;
         $this->unpack = $unpack;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('value', 'byRef', 'unpack');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Const_.php
+++ PHP_CodeSniffer
@@ -6,25 +6,31 @@
 
 class Const_ extends NodeAbstract
 {
-    /** @var string Name */
+    /**
+ * @var string Name 
+*/
     public $name;
-    /** @var Expr Value */
+    /**
+ * @var Expr Value 
+*/
     public $value;
 
     /**
      * Constructs a const node for use in class const and const statements.
      *
-     * @param string  $name       Name
-     * @param Expr    $value      Value
-     * @param array   $attributes Additional attributes
+     * @param string $name       Name
+     * @param Expr   $value      Value
+     * @param array  $attributes Additional attributes
      */
-    public function __construct($name, Expr $value, array $attributes = array()) {
+    public function __construct($name, Expr $value, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->name = $name;
         $this->value = $value;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('name', 'value');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Array_.php
+++ PHP_CodeSniffer
@@ -10,7 +10,9 @@
     const KIND_LONG = 1;  // array() syntax
     const KIND_SHORT = 2; // [] syntax
 
-    /** @var ArrayItem[] Items */
+    /**
+ * @var ArrayItem[] Items 
+*/
     public $items;
 
     /**
@@ -19,12 +21,14 @@
      * @param ArrayItem[] $items      Items of the array
      * @param array       $attributes Additional attributes
      */
-    public function __construct(array $items = array(), array $attributes = array()) {
+    public function __construct(array $items = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->items = $items;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('items');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ArrayDimFetch.php
+++ PHP_CodeSniffer
@@ -6,9 +6,13 @@
 
 class ArrayDimFetch extends Expr
 {
-    /** @var Expr Variable */
+    /**
+ * @var Expr Variable 
+*/
     public $var;
-    /** @var null|Expr Array index / dim */
+    /**
+ * @var null|Expr Array index / dim 
+*/
     public $dim;
 
     /**
@@ -18,13 +22,15 @@
      * @param null|Expr $dim        Array index / dim
      * @param array     $attributes Additional attributes
      */
-    public function __construct(Expr $var, Expr $dim = null, array $attributes = array()) {
+    public function __construct(Expr $var, Expr $dim = null, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->var = $var;
         $this->dim = $dim;
     }
 
-    public function getSubnodeNames() {
+    public function getSubnodeNames() 
+    {
         return array('var', 'dim');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ArrayItem.php
+++ PHP_CodeSniffer
@@ -6,11 +6,17 @@
 
 class ArrayItem extends Expr
 {
-    /** @var null|Expr Key */
+    /**
+ * @var null|Expr Key 
+*/
     public $key;
-    /** @var Expr Value */
+    /**
+ * @var Expr Value 
+*/
     public $value;
-    /** @var bool Whether to assign by reference */
+    /**
+ * @var bool Whether to assign by reference 
+*/
     public $byRef;
 
     /**
@@ -21,14 +27,16 @@
      * @param bool      $byRef      Whether to assign by reference
      * @param array     $attributes Additional attributes
      */
-    public function __construct(Expr $value, Expr $key = null, $byRef = false, array $attributes = array()) {
+    public function __construct(Expr $value, Expr $key = null, $byRef = false, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->key = $key;
         $this->value = $value;
         $this->byRef = $byRef;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('key', 'value', 'byRef');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Assign.php
+++ PHP_CodeSniffer
@@ -6,9 +6,13 @@
 
 class Assign extends Expr
 {
-    /** @var Expr Variable */
+    /**
+ * @var Expr Variable 
+*/
     public $var;
-    /** @var Expr Expression */
+    /**
+ * @var Expr Expression 
+*/
     public $expr;
 
     /**
@@ -18,13 +22,15 @@
      * @param Expr  $expr       Expression
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $var, Expr $expr, array $attributes = array()) {
+    public function __construct(Expr $var, Expr $expr, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->var = $var;
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('var', 'expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignOp.php
+++ PHP_CodeSniffer
@@ -6,9 +6,13 @@
 
 abstract class AssignOp extends Expr
 {
-    /** @var Expr Variable */
+    /**
+ * @var Expr Variable 
+*/
     public $var;
-    /** @var Expr Expression */
+    /**
+ * @var Expr Expression 
+*/
     public $expr;
 
     /**
@@ -18,13 +22,15 @@
      * @param Expr  $expr       Expression
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $var, Expr $expr, array $attributes = array()) {
+    public function __construct(Expr $var, Expr $expr, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->var = $var;
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('var', 'expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/AssignRef.php
+++ PHP_CodeSniffer
@@ -6,9 +6,13 @@
 
 class AssignRef extends Expr
 {
-    /** @var Expr Variable reference is assigned to */
+    /**
+ * @var Expr Variable reference is assigned to 
+*/
     public $var;
-    /** @var Expr Variable which is referenced */
+    /**
+ * @var Expr Variable which is referenced 
+*/
     public $expr;
 
     /**
@@ -18,13 +22,15 @@
      * @param Expr  $expr       Expression
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $var, Expr $expr, array $attributes = array()) {
+    public function __construct(Expr $var, Expr $expr, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->var = $var;
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('var', 'expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BinaryOp.php
+++ PHP_CodeSniffer
@@ -6,9 +6,13 @@
 
 abstract class BinaryOp extends Expr
 {
-    /** @var Expr The left hand side expression */
+    /**
+ * @var Expr The left hand side expression 
+*/
     public $left;
-    /** @var Expr The right hand side expression */
+    /**
+ * @var Expr The right hand side expression 
+*/
     public $right;
 
     /**
@@ -18,13 +22,15 @@
      * @param Expr  $right      The right hand side expression
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $left, Expr $right, array $attributes = array()) {
+    public function __construct(Expr $left, Expr $right, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->left = $left;
         $this->right = $right;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('left', 'right');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BitwiseNot.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class BitwiseNot extends Expr
 {
-    /** @var Expr Expression */
+    /**
+ * @var Expr Expression 
+*/
     public $expr;
 
     /**
@@ -15,12 +17,14 @@
      * @param Expr  $expr       Expression
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $expr, array $attributes = array()) {
+    public function __construct(Expr $expr, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/BooleanNot.php
+++ PHP_CodeSniffer
@@ -6,21 +6,25 @@
 
 class BooleanNot extends Expr
 {
-    /** @var Expr Expression */
+    /**
+ * @var Expr Expression 
+*/
     public $expr;
 
     /**
      * Constructs a boolean not node.
      *
-     * @param Expr $expr       Expression
-     * @param array               $attributes Additional attributes
+     * @param Expr  $expr       Expression
+     * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $expr, array $attributes = array()) {
+    public function __construct(Expr $expr, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Cast.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 abstract class Cast extends Expr
 {
-    /** @var Expr Expression */
+    /**
+ * @var Expr Expression 
+*/
     public $expr;
 
     /**
@@ -15,12 +17,14 @@
      * @param Expr  $expr       Expression
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $expr, array $attributes = array()) {
+    public function __construct(Expr $expr, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ClassConstFetch.php
+++ PHP_CodeSniffer
@@ -7,9 +7,13 @@
 
 class ClassConstFetch extends Expr
 {
-    /** @var Name|Expr Class name */
+    /**
+ * @var Name|Expr Class name 
+*/
     public $class;
-    /** @var string Constant name */
+    /**
+ * @var string Constant name 
+*/
     public $name;
 
     /**
@@ -19,13 +23,15 @@
      * @param string    $name       Constant name
      * @param array     $attributes Additional attributes
      */
-    public function __construct($class, $name, array $attributes = array()) {
+    public function __construct($class, $name, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->class = $class;
         $this->name = $name;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('class', 'name');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Clone_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Clone_ extends Expr
 {
-    /** @var Expr Expression */
+    /**
+ * @var Expr Expression 
+*/
     public $expr;
 
     /**
@@ -15,12 +17,14 @@
      * @param Expr  $expr       Expression
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $expr, array $attributes = array()) {
+    public function __construct(Expr $expr, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Closure.php
+++ PHP_CodeSniffer
@@ -8,17 +8,29 @@
 
 class Closure extends Expr implements FunctionLike
 {
-    /** @var bool Whether the closure is static */
+    /**
+ * @var bool Whether the closure is static 
+*/
     public $static;
-    /** @var bool Whether to return by reference */
+    /**
+ * @var bool Whether to return by reference 
+*/
     public $byRef;
-    /** @var Node\Param[] Parameters */
+    /**
+ * @var Node\Param[] Parameters 
+*/
     public $params;
-    /** @var ClosureUse[] use()s */
+    /**
+ * @var ClosureUse[] use()s 
+*/
     public $uses;
-    /** @var null|string|Node\Name Return type */
+    /**
+ * @var null|string|Node\Name Return type 
+*/
     public $returnType;
-    /** @var Node[] Statements */
+    /**
+ * @var Node[] Statements 
+*/
     public $stmts;
 
     /**
@@ -33,7 +45,8 @@
      *                          'stmts'      => array(): Statements
      * @param array $attributes Additional attributes
      */
-    public function __construct(array $subNodes = array(), array $attributes = array()) {
+    public function __construct(array $subNodes = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->static = isset($subNodes['static']) ? $subNodes['static'] : false;
         $this->byRef = isset($subNodes['byRef']) ? $subNodes['byRef'] : false;
@@ -43,23 +56,28 @@
         $this->stmts = isset($subNodes['stmts']) ? $subNodes['stmts'] : array();
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('static', 'byRef', 'params', 'uses', 'returnType', 'stmts');
     }
 
-    public function returnsByRef() {
+    public function returnsByRef() 
+    {
         return $this->byRef;
     }
 
-    public function getParams() {
+    public function getParams() 
+    {
         return $this->params;
     }
 
-    public function getReturnType() {
+    public function getReturnType() 
+    {
         return $this->returnType;
     }
 
-    public function getStmts() {
+    public function getStmts() 
+    {
         return $this->stmts;
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ClosureUse.php
+++ PHP_CodeSniffer
@@ -6,25 +6,31 @@
 
 class ClosureUse extends Expr
 {
-    /** @var string Name of variable */
+    /**
+ * @var string Name of variable 
+*/
     public $var;
-    /** @var bool Whether to use by reference */
+    /**
+ * @var bool Whether to use by reference 
+*/
     public $byRef;
 
     /**
      * Constructs a closure use node.
      *
-     * @param string      $var        Name of variable
-     * @param bool        $byRef      Whether to use by reference
-     * @param array       $attributes Additional attributes
+     * @param string $var        Name of variable
+     * @param bool   $byRef      Whether to use by reference
+     * @param array  $attributes Additional attributes
      */
-    public function __construct($var, $byRef = false, array $attributes = array()) {
+    public function __construct($var, $byRef = false, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->var = $var;
         $this->byRef = $byRef;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('var', 'byRef');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ConstFetch.php
+++ PHP_CodeSniffer
@@ -7,7 +7,9 @@
 
 class ConstFetch extends Expr
 {
-    /** @var Name Constant name */
+    /**
+ * @var Name Constant name 
+*/
     public $name;
 
     /**
@@ -16,12 +18,14 @@
      * @param Name  $name       Constant name
      * @param array $attributes Additional attributes
      */
-    public function __construct(Name $name, array $attributes = array()) {
+    public function __construct(Name $name, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->name = $name;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('name');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Empty_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Empty_ extends Expr
 {
-    /** @var Expr Expression */
+    /**
+ * @var Expr Expression 
+*/
     public $expr;
 
     /**
@@ -15,12 +17,14 @@
      * @param Expr  $expr       Expression
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $expr, array $attributes = array()) {
+    public function __construct(Expr $expr, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ErrorSuppress.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class ErrorSuppress extends Expr
 {
-    /** @var Expr Expression */
+    /**
+ * @var Expr Expression 
+*/
     public $expr;
 
     /**
@@ -15,12 +17,14 @@
      * @param Expr  $expr       Expression
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $expr, array $attributes = array()) {
+    public function __construct(Expr $expr, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Eval_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Eval_ extends Expr
 {
-    /** @var Expr Expression */
+    /**
+ * @var Expr Expression 
+*/
     public $expr;
 
     /**
@@ -15,12 +17,14 @@
      * @param Expr  $expr       Expression
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $expr, array $attributes = array()) {
+    public function __construct(Expr $expr, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Exit_.php
+++ PHP_CodeSniffer
@@ -10,21 +10,25 @@
     const KIND_EXIT = 1;
     const KIND_DIE = 2;
 
-    /** @var null|Expr Expression */
+    /**
+ * @var null|Expr Expression 
+*/
     public $expr;
 
     /**
      * Constructs an exit() node.
      *
      * @param null|Expr $expr       Expression
-     * @param array                    $attributes Additional attributes
+     * @param array     $attributes Additional attributes
      */
-    public function __construct(Expr $expr = null, array $attributes = array()) {
+    public function __construct(Expr $expr = null, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/FuncCall.php
+++ PHP_CodeSniffer
@@ -7,25 +7,31 @@
 
 class FuncCall extends Expr
 {
-    /** @var Node\Name|Expr Function name */
+    /**
+ * @var Node\Name|Expr Function name 
+*/
     public $name;
-    /** @var Node\Arg[] Arguments */
+    /**
+ * @var Node\Arg[] Arguments 
+*/
     public $args;
 
     /**
      * Constructs a function call node.
      *
      * @param Node\Name|Expr $name       Function name
-     * @param Node\Arg[]                    $args       Arguments
-     * @param array                                   $attributes Additional attributes
+     * @param Node\Arg[]     $args       Arguments
+     * @param array          $attributes Additional attributes
      */
-    public function __construct($name, array $args = array(), array $attributes = array()) {
+    public function __construct($name, array $args = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->name = $name;
         $this->args = $args;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('name', 'args');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Include_.php
+++ PHP_CodeSniffer
@@ -11,9 +11,13 @@
     const TYPE_REQUIRE      = 3;
     const TYPE_REQUIRE_ONCE = 4;
 
-    /** @var Expr Expression */
+    /**
+ * @var Expr Expression 
+*/
     public $expr;
-    /** @var int Type of include */
+    /**
+ * @var int Type of include 
+*/
     public $type;
 
     /**
@@ -23,13 +27,15 @@
      * @param int   $type       Type of include
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $expr, $type, array $attributes = array()) {
+    public function __construct(Expr $expr, $type, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
         $this->type = $type;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr', 'type');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Instanceof_.php
+++ PHP_CodeSniffer
@@ -7,9 +7,13 @@
 
 class Instanceof_ extends Expr
 {
-    /** @var Expr Expression */
+    /**
+ * @var Expr Expression 
+*/
     public $expr;
-    /** @var Name|Expr Class name */
+    /**
+ * @var Name|Expr Class name 
+*/
     public $class;
 
     /**
@@ -19,13 +23,15 @@
      * @param Name|Expr $class      Class name
      * @param array     $attributes Additional attributes
      */
-    public function __construct(Expr $expr, $class, array $attributes = array()) {
+    public function __construct(Expr $expr, $class, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
         $this->class = $class;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr', 'class');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Isset_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Isset_ extends Expr
 {
-    /** @var Expr[] Variables */
+    /**
+ * @var Expr[] Variables 
+*/
     public $vars;
 
     /**
@@ -15,12 +17,14 @@
      * @param Expr[] $vars       Variables
      * @param array  $attributes Additional attributes
      */
-    public function __construct(array $vars, array $attributes = array()) {
+    public function __construct(array $vars, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->vars = $vars;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('vars');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/List_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class List_ extends Expr
 {
-    /** @var Expr[] List of variables to assign to */
+    /**
+ * @var Expr[] List of variables to assign to 
+*/
     public $vars;
 
     /**
@@ -15,12 +17,14 @@
      * @param Expr[] $vars       List of variables to assign to
      * @param array  $attributes Additional attributes
      */
-    public function __construct(array $vars, array $attributes = array()) {
+    public function __construct(array $vars, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->vars = $vars;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('vars');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/MethodCall.php
+++ PHP_CodeSniffer
@@ -7,11 +7,17 @@
 
 class MethodCall extends Expr
 {
-    /** @var Expr Variable holding object */
+    /**
+ * @var Expr Variable holding object 
+*/
     public $var;
-    /** @var string|Expr Method name */
+    /**
+ * @var string|Expr Method name 
+*/
     public $name;
-    /** @var Arg[] Arguments */
+    /**
+ * @var Arg[] Arguments 
+*/
     public $args;
 
     /**
@@ -22,14 +28,16 @@
      * @param Arg[]       $args       Arguments
      * @param array       $attributes Additional attributes
      */
-    public function __construct(Expr $var, $name, array $args = array(), array $attributes = array()) {
+    public function __construct(Expr $var, $name, array $args = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->var = $var;
         $this->name = $name;
         $this->args = $args;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('var', 'name', 'args');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/New_.php
+++ PHP_CodeSniffer
@@ -7,9 +7,13 @@
 
 class New_ extends Expr
 {
-    /** @var Node\Name|Expr|Node\Stmt\Class_ Class name */
+    /**
+ * @var Node\Name|Expr|Node\Stmt\Class_ Class name 
+*/
     public $class;
-    /** @var Node\Arg[] Arguments */
+    /**
+ * @var Node\Arg[] Arguments 
+*/
     public $args;
 
     /**
@@ -19,13 +23,15 @@
      * @param Node\Arg[]                      $args       Arguments
      * @param array                           $attributes Additional attributes
      */
-    public function __construct($class, array $args = array(), array $attributes = array()) {
+    public function __construct($class, array $args = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->class = $class;
         $this->args = $args;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('class', 'args');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/PostDec.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class PostDec extends Expr
 {
-    /** @var Expr Variable */
+    /**
+ * @var Expr Variable 
+*/
     public $var;
 
     /**
@@ -15,12 +17,14 @@
      * @param Expr  $var        Variable
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $var, array $attributes = array()) {
+    public function __construct(Expr $var, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->var = $var;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('var');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/PostInc.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class PostInc extends Expr
 {
-    /** @var Expr Variable */
+    /**
+ * @var Expr Variable 
+*/
     public $var;
 
     /**
@@ -15,12 +17,14 @@
      * @param Expr  $var        Variable
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $var, array $attributes = array()) {
+    public function __construct(Expr $var, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->var = $var;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('var');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/PreDec.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class PreDec extends Expr
 {
-    /** @var Expr Variable */
+    /**
+ * @var Expr Variable 
+*/
     public $var;
 
     /**
@@ -15,12 +17,14 @@
      * @param Expr  $var        Variable
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $var, array $attributes = array()) {
+    public function __construct(Expr $var, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->var = $var;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('var');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/PreInc.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class PreInc extends Expr
 {
-    /** @var Expr Variable */
+    /**
+ * @var Expr Variable 
+*/
     public $var;
 
     /**
@@ -15,12 +17,14 @@
      * @param Expr  $var        Variable
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $var, array $attributes = array()) {
+    public function __construct(Expr $var, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->var = $var;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('var');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Print_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Print_ extends Expr
 {
-    /** @var Expr Expression */
+    /**
+ * @var Expr Expression 
+*/
     public $expr;
 
     /**
@@ -15,12 +17,14 @@
      * @param Expr  $expr       Expression
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $expr, array $attributes = array()) {
+    public function __construct(Expr $expr, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/PropertyFetch.php
+++ PHP_CodeSniffer
@@ -6,9 +6,13 @@
 
 class PropertyFetch extends Expr
 {
-    /** @var Expr Variable holding object */
+    /**
+ * @var Expr Variable holding object 
+*/
     public $var;
-    /** @var string|Expr Property name */
+    /**
+ * @var string|Expr Property name 
+*/
     public $name;
 
     /**
@@ -18,13 +22,15 @@
      * @param string|Expr $name       Property name
      * @param array       $attributes Additional attributes
      */
-    public function __construct(Expr $var, $name, array $attributes = array()) {
+    public function __construct(Expr $var, $name, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->var = $var;
         $this->name = $name;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('var', 'name');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/ShellExec.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class ShellExec extends Expr
 {
-    /** @var array Encapsed string array */
+    /**
+ * @var array Encapsed string array 
+*/
     public $parts;
 
     /**
@@ -15,12 +17,14 @@
      * @param array $parts      Encapsed string array
      * @param array $attributes Additional attributes
      */
-    public function __construct(array $parts, array $attributes = array()) {
+    public function __construct(array $parts, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->parts = $parts;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('parts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/StaticCall.php
+++ PHP_CodeSniffer
@@ -7,11 +7,17 @@
 
 class StaticCall extends Expr
 {
-    /** @var Node\Name|Expr Class name */
+    /**
+ * @var Node\Name|Expr Class name 
+*/
     public $class;
-    /** @var string|Expr Method name */
+    /**
+ * @var string|Expr Method name 
+*/
     public $name;
-    /** @var Node\Arg[] Arguments */
+    /**
+ * @var Node\Arg[] Arguments 
+*/
     public $args;
 
     /**
@@ -22,14 +28,16 @@
      * @param Node\Arg[]     $args       Arguments
      * @param array          $attributes Additional attributes
      */
-    public function __construct($class, $name, array $args = array(), array $attributes = array()) {
+    public function __construct($class, $name, array $args = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->class = $class;
         $this->name = $name;
         $this->args = $args;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('class', 'name', 'args');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/StaticPropertyFetch.php
+++ PHP_CodeSniffer
@@ -7,9 +7,13 @@
 
 class StaticPropertyFetch extends Expr
 {
-    /** @var Name|Expr Class name */
+    /**
+ * @var Name|Expr Class name 
+*/
     public $class;
-    /** @var string|Expr Property name */
+    /**
+ * @var string|Expr Property name 
+*/
     public $name;
 
     /**
@@ -19,13 +23,15 @@
      * @param string|Expr $name       Property name
      * @param array       $attributes Additional attributes
      */
-    public function __construct($class, $name, array $attributes = array()) {
+    public function __construct($class, $name, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->class = $class;
         $this->name = $name;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('class', 'name');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Ternary.php
+++ PHP_CodeSniffer
@@ -6,11 +6,17 @@
 
 class Ternary extends Expr
 {
-    /** @var Expr Condition */
+    /**
+ * @var Expr Condition 
+*/
     public $cond;
-    /** @var null|Expr Expression for true */
+    /**
+ * @var null|Expr Expression for true 
+*/
     public $if;
-    /** @var Expr Expression for false */
+    /**
+ * @var Expr Expression for false 
+*/
     public $else;
 
     /**
@@ -19,16 +25,18 @@
      * @param Expr      $cond       Condition
      * @param null|Expr $if         Expression for true
      * @param Expr      $else       Expression for false
-     * @param array                    $attributes Additional attributes
+     * @param array     $attributes Additional attributes
      */
-    public function __construct(Expr $cond, $if, Expr $else, array $attributes = array()) {
+    public function __construct(Expr $cond, $if, Expr $else, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->cond = $cond;
         $this->if = $if;
         $this->else = $else;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('cond', 'if', 'else');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/UnaryMinus.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class UnaryMinus extends Expr
 {
-    /** @var Expr Expression */
+    /**
+ * @var Expr Expression 
+*/
     public $expr;
 
     /**
@@ -15,12 +17,14 @@
      * @param Expr  $expr       Expression
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $expr, array $attributes = array()) {
+    public function __construct(Expr $expr, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/UnaryPlus.php
+++ PHP_CodeSniffer
@@ -6,21 +6,25 @@
 
 class UnaryPlus extends Expr
 {
-    /** @var Expr Expression */
+    /**
+ * @var Expr Expression 
+*/
     public $expr;
 
     /**
      * Constructs a unary plus node.
      *
-     * @param Expr $expr       Expression
-     * @param array               $attributes Additional attributes
+     * @param Expr  $expr       Expression
+     * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $expr, array $attributes = array()) {
+    public function __construct(Expr $expr, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Variable.php
+++ PHP_CodeSniffer
@@ -6,21 +6,25 @@
 
 class Variable extends Expr
 {
-    /** @var string|Expr Name */
+    /**
+ * @var string|Expr Name 
+*/
     public $name;
 
     /**
      * Constructs a variable node.
      *
      * @param string|Expr $name       Name
-     * @param array                      $attributes Additional attributes
+     * @param array       $attributes Additional attributes
      */
-    public function __construct($name, array $attributes = array()) {
+    public function __construct($name, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->name = $name;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('name');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/Yield_.php
+++ PHP_CodeSniffer
@@ -6,9 +6,13 @@
 
 class Yield_ extends Expr
 {
-    /** @var null|Expr Key expression */
+    /**
+ * @var null|Expr Key expression 
+*/
     public $key;
-    /** @var null|Expr Value expression */
+    /**
+ * @var null|Expr Value expression 
+*/
     public $value;
 
     /**
@@ -18,13 +22,15 @@
      * @param null|Expr $key        Key expression
      * @param array     $attributes Additional attributes
      */
-    public function __construct(Expr $value = null, Expr $key = null, array $attributes = array()) {
+    public function __construct(Expr $value = null, Expr $key = null, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->key = $key;
         $this->value = $value;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('key', 'value');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Expr/YieldFrom.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class YieldFrom extends Expr
 {
-    /** @var Expr Expression to yield from */
+    /**
+ * @var Expr Expression to yield from 
+*/
     public $expr;
 
     /**
@@ -15,12 +17,14 @@
      * @param Expr  $expr       Expression
      * @param array $attributes Additional attributes
      */
-    public function __construct(Expr $expr, array $attributes = array()) {
+    public function __construct(Expr $expr, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Name/FullyQualified.php
+++ PHP_CodeSniffer
@@ -9,7 +9,8 @@
      *
      * @return bool Whether the name is unqualified
      */
-    public function isUnqualified() {
+    public function isUnqualified() 
+    {
         return false;
     }
 
@@ -18,7 +19,8 @@
      *
      * @return bool Whether the name is qualified
      */
-    public function isQualified() {
+    public function isQualified() 
+    {
         return false;
     }
 
@@ -27,7 +29,8 @@
      *
      * @return bool Whether the name is fully qualified
      */
-    public function isFullyQualified() {
+    public function isFullyQualified() 
+    {
         return true;
     }
 
@@ -36,7 +39,8 @@
      *
      * @return bool Whether the name is relative
      */
-    public function isRelative() {
+    public function isRelative() 
+    {
         return false;
     }
 }
\ No newline at end of file

--- vendor/nikic/php-parser/lib/PhpParser/Node/Name/Relative.php
+++ PHP_CodeSniffer
@@ -9,7 +9,8 @@
      *
      * @return bool Whether the name is unqualified
      */
-    public function isUnqualified() {
+    public function isUnqualified() 
+    {
         return false;
     }
 
@@ -18,7 +19,8 @@
      *
      * @return bool Whether the name is qualified
      */
-    public function isQualified() {
+    public function isQualified() 
+    {
         return false;
     }
 
@@ -27,7 +29,8 @@
      *
      * @return bool Whether the name is fully qualified
      */
-    public function isFullyQualified() {
+    public function isFullyQualified() 
+    {
         return false;
     }
 
@@ -36,7 +39,8 @@
      *
      * @return bool Whether the name is relative
      */
-    public function isRelative() {
+    public function isRelative() 
+    {
         return true;
     }
 }
\ No newline at end of file

--- vendor/nikic/php-parser/lib/PhpParser/Node/Name.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Name extends NodeAbstract
 {
-    /** @var string[] Parts of the name */
+    /**
+ * @var string[] Parts of the name 
+*/
     public $parts;
 
     /**
@@ -15,7 +17,8 @@
      * @param string|array $parts      Parts of the name (or name as string)
      * @param array        $attributes Additional attributes
      */
-    public function __construct($parts, array $attributes = array()) {
+    public function __construct($parts, array $attributes = array()) 
+    {
         if (!is_array($parts)) {
             $parts = explode('\\', $parts);
         }
@@ -24,7 +27,8 @@
         $this->parts = $parts;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('parts');
     }
 
@@ -33,7 +37,8 @@
      *
      * @return string First part of the name
      */
-    public function getFirst() {
+    public function getFirst() 
+    {
         return $this->parts[0];
     }
 
@@ -42,7 +47,8 @@
      *
      * @return string Last part of the name
      */
-    public function getLast() {
+    public function getLast() 
+    {
         return $this->parts[count($this->parts) - 1];
     }
 
@@ -51,7 +57,8 @@
      *
      * @return bool Whether the name is unqualified
      */
-    public function isUnqualified() {
+    public function isUnqualified() 
+    {
         return 1 == count($this->parts);
     }
 
@@ -60,7 +67,8 @@
      *
      * @return bool Whether the name is qualified
      */
-    public function isQualified() {
+    public function isQualified() 
+    {
         return 1 < count($this->parts);
     }
 
@@ -69,7 +77,8 @@
      *
      * @return bool Whether the name is fully qualified
      */
-    public function isFullyQualified() {
+    public function isFullyQualified() 
+    {
         return false;
     }
 
@@ -78,7 +87,8 @@
      *
      * @return bool Whether the name is relative
      */
-    public function isRelative() {
+    public function isRelative() 
+    {
         return false;
     }
 
@@ -89,7 +99,8 @@
      *
      * @return string String representation
      */
-    public function toString($separator = '\\') {
+    public function toString($separator = '\\') 
+    {
         return implode($separator, $this->parts);
     }
 
@@ -99,7 +110,8 @@
      *
      * @return string String representation
      */
-    public function __toString() {
+    public function __toString() 
+    {
         return implode('\\', $this->parts);
     }
 
@@ -110,7 +122,8 @@
      *
      * @param string|array|self $name The name to set the whole name to
      */
-    public function set($name) {
+    public function set($name) 
+    {
         $this->parts = self::prepareName($name);
     }
 
@@ -121,7 +134,8 @@
      *
      * @param string|array|self $name Name to prepend
      */
-    public function prepend($name) {
+    public function prepend($name) 
+    {
         $this->parts = array_merge(self::prepareName($name), $this->parts);
     }
 
@@ -132,7 +146,8 @@
      *
      * @param string|array|self $name Name to append
      */
-    public function append($name) {
+    public function append($name) 
+    {
         $this->parts = array_merge($this->parts, self::prepareName($name));
     }
 
@@ -143,7 +158,8 @@
      *
      * @param string|array|self $name The name to set the first part to
      */
-    public function setFirst($name) {
+    public function setFirst($name) 
+    {
         array_splice($this->parts, 0, 1, self::prepareName($name));
     }
 
@@ -152,7 +168,8 @@
      *
      * @param string|array|self $name The name to set the last part to
      */
-    public function setLast($name) {
+    public function setLast($name) 
+    {
         array_splice($this->parts, -1, 1, self::prepareName($name));
     }
 
@@ -169,7 +186,8 @@
      *
      * @return static Sliced name
      */
-    public function slice($offset) {
+    public function slice($offset) 
+    {
         // TODO negative offset and length
         if ($offset < 0 || $offset > count($this->parts)) {
             throw new \OutOfBoundsException(sprintf('Offset %d is out of bounds', $offset));
@@ -190,7 +208,8 @@
      *
      * @return static Concatenated name
      */
-    public static function concat($name1, $name2, array $attributes = []) {
+    public static function concat($name1, $name2, array $attributes = []) 
+    {
         return new static(
             array_merge(self::prepareName($name1), self::prepareName($name2)), $attributes
         );
@@ -204,7 +223,8 @@
      *
      * @return array Prepared name
      */
-    private static function prepareName($name) {
+    private static function prepareName($name) 
+    {
         if (is_string($name)) {
             return explode('\\', $name);
         } elseif (is_array($name)) {

--- vendor/nikic/php-parser/lib/PhpParser/Node/Param.php
+++ PHP_CodeSniffer
@@ -7,15 +7,25 @@
 
 class Param extends NodeAbstract
 {
-    /** @var null|string|Name Typehint */
+    /**
+ * @var null|string|Name Typehint 
+*/
     public $type;
-    /** @var bool Whether parameter is passed by reference */
+    /**
+ * @var bool Whether parameter is passed by reference 
+*/
     public $byRef;
-    /** @var bool Whether this is a variadic argument */
+    /**
+ * @var bool Whether this is a variadic argument 
+*/
     public $variadic;
-    /** @var string Name */
+    /**
+ * @var string Name 
+*/
     public $name;
-    /** @var null|Expr Default value */
+    /**
+ * @var null|Expr Default value 
+*/
     public $default;
 
     /**
@@ -28,7 +38,8 @@
      * @param bool             $variadic   Whether this is a variadic argument
      * @param array            $attributes Additional attributes
      */
-    public function __construct($name, Expr $default = null, $type = null, $byRef = false, $variadic = false, array $attributes = array()) {
+    public function __construct($name, Expr $default = null, $type = null, $byRef = false, $variadic = false, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->type = $type;
         $this->byRef = $byRef;
@@ -41,7 +52,8 @@
         }
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('type', 'byRef', 'variadic', 'name', 'default');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/DNumber.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class DNumber extends Scalar
 {
-    /** @var float Number value */
+    /**
+ * @var float Number value 
+*/
     public $value;
 
     /**
@@ -15,12 +17,14 @@
      * @param float $value      Value of the number
      * @param array $attributes Additional attributes
      */
-    public function __construct($value, array $attributes = array()) {
+    public function __construct($value, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->value = $value;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('value');
     }
 
@@ -33,7 +37,8 @@
      *
      * @return float The parsed number
      */
-    public static function parse($str) {
+    public static function parse($str) 
+    {
         // if string contains any of .eE just cast it to float
         if (false !== strpbrk($str, '.eE')) {
             return (float) $str;

--- vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/Encapsed.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Encapsed extends Scalar
 {
-    /** @var array Encaps list */
+    /**
+ * @var array Encaps list 
+*/
     public $parts;
 
     /**
@@ -15,12 +17,14 @@
      * @param array $parts      Encaps list
      * @param array $attributes Additional attributes
      */
-    public function __construct(array $parts, array $attributes = array()) {
+    public function __construct(array $parts, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->parts = $parts;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('parts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/EncapsedStringPart.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class EncapsedStringPart extends Scalar
 {
-    /** @var string String value */
+    /**
+ * @var string String value 
+*/
     public $value;
 
     /**
@@ -15,12 +17,14 @@
      * @param string $value      String value
      * @param array  $attributes Additional attributes
      */
-    public function __construct($value, array $attributes = array()) {
+    public function __construct($value, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->value = $value;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('value');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/LNumber.php
+++ PHP_CodeSniffer
@@ -13,7 +13,9 @@
     const KIND_DEC = 10;
     const KIND_HEX = 16;
 
-    /** @var int Number value */
+    /**
+ * @var int Number value 
+*/
     public $value;
 
     /**
@@ -22,12 +24,14 @@
      * @param int   $value      Value of the number
      * @param array $attributes Additional attributes
      */
-    public function __construct($value, array $attributes = array()) {
+    public function __construct($value, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->value = $value;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('value');
     }
 
@@ -40,7 +44,8 @@
      *
      * @return LNumber The constructed LNumber, including kind attribute
      */
-    public static function fromString($str, array $attributes = array(), $allowInvalidOctal = false) {
+    public static function fromString($str, array $attributes = array(), $allowInvalidOctal = false) 
+    {
         if ('0' !== $str[0] || '0' === $str) {
             $attributes['kind'] = LNumber::KIND_DEC;
             return new LNumber((int) $str, $attributes);

--- vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/Class_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 
 class Class_ extends MagicConst
 {
-    public function getName() {
+    public function getName() 
+    {
         return '__CLASS__';
     }
 }
\ No newline at end of file

--- vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/Dir.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 
 class Dir extends MagicConst
 {
-    public function getName() {
+    public function getName() 
+    {
         return '__DIR__';
     }
 }
\ No newline at end of file

--- vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/File.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 
 class File extends MagicConst
 {
-    public function getName() {
+    public function getName() 
+    {
         return '__FILE__';
     }
 }
\ No newline at end of file

--- vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/Function_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 
 class Function_ extends MagicConst
 {
-    public function getName() {
+    public function getName() 
+    {
         return '__FUNCTION__';
     }
 }
\ No newline at end of file

--- vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/Line.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 
 class Line extends MagicConst
 {
-    public function getName() {
+    public function getName() 
+    {
         return '__LINE__';
     }
 }
\ No newline at end of file

--- vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/Method.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 
 class Method extends MagicConst
 {
-    public function getName() {
+    public function getName() 
+    {
         return '__METHOD__';
     }
 }
\ No newline at end of file

--- vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/Namespace_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 
 class Namespace_ extends MagicConst
 {
-    public function getName() {
+    public function getName() 
+    {
         return '__NAMESPACE__';
     }
 }
\ No newline at end of file

--- vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst/Trait_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,8 @@
 
 class Trait_ extends MagicConst
 {
-    public function getName() {
+    public function getName() 
+    {
         return '__TRAIT__';
     }
 }
\ No newline at end of file

--- vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/MagicConst.php
+++ PHP_CodeSniffer
@@ -11,11 +11,13 @@
      *
      * @param array $attributes Additional attributes
      */
-    public function __construct(array $attributes = array()) {
+    public function __construct(array $attributes = array()) 
+    {
         parent::__construct($attributes);
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array();
     }
 

--- vendor/nikic/php-parser/lib/PhpParser/Node/Scalar/String_.php
+++ PHP_CodeSniffer
@@ -13,7 +13,9 @@
     const KIND_HEREDOC = 3;
     const KIND_NOWDOC = 4;
 
-    /** @var string String value */
+    /**
+ * @var string String value 
+*/
     public $value;
 
     protected static $replacements = array(
@@ -33,12 +35,14 @@
      * @param string $value      Value of the string
      * @param array  $attributes Additional attributes
      */
-    public function __construct($value, array $attributes = array()) {
+    public function __construct($value, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->value = $value;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('value');
     }
 
@@ -47,12 +51,13 @@
      *
      * Parses a string token.
      *
-     * @param string $str String token content
-     * @param bool $parseUnicodeEscape Whether to parse PHP 7 \u escapes
+     * @param string $str                String token content
+     * @param bool   $parseUnicodeEscape Whether to parse PHP 7 \u escapes
      *
      * @return string The parsed string
      */
-    public static function parse($str, $parseUnicodeEscape = true) {
+    public static function parse($str, $parseUnicodeEscape = true) 
+    {
         $bLength = 0;
         if ('b' === $str[0] || 'B' === $str[0]) {
             $bLength = 1;
@@ -76,13 +81,14 @@
      *
      * Parses escape sequences in strings (all string types apart from single quoted).
      *
-     * @param string      $str   String without quotes
-     * @param null|string $quote Quote type
-     * @param bool $parseUnicodeEscape Whether to parse PHP 7 \u escapes
+     * @param string      $str                String without quotes
+     * @param null|string $quote              Quote type
+     * @param bool        $parseUnicodeEscape Whether to parse PHP 7 \u escapes
      *
      * @return string String with escape sequences parsed
      */
-    public static function parseEscapeSequences($str, $quote, $parseUnicodeEscape = true) {
+    public static function parseEscapeSequences($str, $quote, $parseUnicodeEscape = true) 
+    {
         if (null !== $quote) {
             $str = str_replace('\\' . $quote, $quote, $str);
         }
@@ -94,7 +100,7 @@
 
         return preg_replace_callback(
             '~\\\\([\\\\$nrtfve]|[xX][0-9a-fA-F]{1,2}|[0-7]{1,3}' . $extra . ')~',
-            function($matches) {
+            function ($matches) {
                 $str = $matches[1];
 
                 if (isset(self::$replacements[$str])) {
@@ -111,7 +117,8 @@
         );
     }
 
-    private static function codePointToUtf8($num) {
+    private static function codePointToUtf8($num) 
+    {
         if ($num <= 0x7F) {
             return chr($num);
         }
@@ -133,13 +140,14 @@
      *
      * Parses a constant doc string.
      *
-     * @param string $startToken Doc string start token content (<<<SMTHG)
-     * @param string $str        String token content
-     * @param bool $parseUnicodeEscape Whether to parse PHP 7 \u escapes
+     * @param string $startToken         Doc string start token content (<<<SMTHG)
+     * @param string $str                String token content
+     * @param bool   $parseUnicodeEscape Whether to parse PHP 7 \u escapes
      *
      * @return string Parsed string
      */
-    public static function parseDocString($startToken, $str, $parseUnicodeEscape = true) {
+    public static function parseDocString($startToken, $str, $parseUnicodeEscape = true) 
+    {
         // strip last newline (thanks tokenizer for sticking it into the string!)
         $str = preg_replace('~(\r\n|\n|\r)\z~', '', $str);
 

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Break_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Break_ extends Node\Stmt
 {
-    /** @var null|Node\Expr Number of loops to break */
+    /**
+ * @var null|Node\Expr Number of loops to break 
+*/
     public $num;
 
     /**
@@ -15,12 +17,14 @@
      * @param null|Node\Expr $num        Number of loops to break
      * @param array          $attributes Additional attributes
      */
-    public function __construct(Node\Expr $num = null, array $attributes = array()) {
+    public function __construct(Node\Expr $num = null, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->num = $num;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('num');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Case_.php
+++ PHP_CodeSniffer
@@ -6,9 +6,13 @@
 
 class Case_ extends Node\Stmt
 {
-    /** @var null|Node\Expr $cond Condition (null for default) */
+    /**
+ * @var null|Node\Expr $cond Condition (null for default) 
+*/
     public $cond;
-    /** @var Node[] Statements */
+    /**
+ * @var Node[] Statements 
+*/
     public $stmts;
 
     /**
@@ -18,13 +22,15 @@
      * @param Node[]         $stmts      Statements
      * @param array          $attributes Additional attributes
      */
-    public function __construct($cond, array $stmts = array(), array $attributes = array()) {
+    public function __construct($cond, array $stmts = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->cond = $cond;
         $this->stmts = $stmts;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('cond', 'stmts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Catch_.php
+++ PHP_CodeSniffer
@@ -6,11 +6,17 @@
 
 class Catch_ extends Node\Stmt
 {
-    /** @var Node\Name Class of exception */
+    /**
+ * @var Node\Name Class of exception 
+*/
     public $type;
-    /** @var string Variable for exception */
+    /**
+ * @var string Variable for exception 
+*/
     public $var;
-    /** @var Node[] Statements */
+    /**
+ * @var Node[] Statements 
+*/
     public $stmts;
 
     /**
@@ -21,14 +27,16 @@
      * @param Node[]    $stmts      Statements
      * @param array     $attributes Additional attributes
      */
-    public function __construct(Node\Name $type, $var, array $stmts = array(), array $attributes = array()) {
+    public function __construct(Node\Name $type, $var, array $stmts = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->type = $type;
         $this->var = $var;
         $this->stmts = $stmts;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('type', 'var', 'stmts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Class_.php
+++ PHP_CodeSniffer
@@ -16,11 +16,17 @@
 
     const VISIBILITY_MODIFER_MASK = 7; // 1 | 2 | 4
 
-    /** @var int Type */
+    /**
+ * @var int Type 
+*/
     public $type;
-    /** @var null|Node\Name Name of extended class */
+    /**
+ * @var null|Node\Name Name of extended class 
+*/
     public $extends;
-    /** @var Node\Name[] Names of implemented interfaces */
+    /**
+ * @var Node\Name[] Names of implemented interfaces 
+*/
     public $implements;
 
     protected static $specialNames = array(
@@ -40,7 +46,8 @@
      *                                'stmts'      => array(): Statements
      * @param array       $attributes Additional attributes
      */
-    public function __construct($name, array $subNodes = array(), array $attributes = array()) {
+    public function __construct($name, array $subNodes = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->type = isset($subNodes['type']) ? $subNodes['type'] : 0;
         $this->name = $name;
@@ -69,26 +76,31 @@
         }
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('type', 'name', 'extends', 'implements', 'stmts');
     }
 
-    public function isAbstract() {
+    public function isAbstract() 
+    {
         return (bool) ($this->type & self::MODIFIER_ABSTRACT);
     }
 
-    public function isFinal() {
+    public function isFinal() 
+    {
         return (bool) ($this->type & self::MODIFIER_FINAL);
     }
 
-    public function isAnonymous() {
+    public function isAnonymous() 
+    {
         return null === $this->name;
     }
 
     /**
      * @internal
      */
-    public static function verifyModifier($a, $b) {
+    public static function verifyModifier($a, $b) 
+    {
         if ($a & self::VISIBILITY_MODIFER_MASK && $b & self::VISIBILITY_MODIFER_MASK) {
             throw new Error('Multiple access type modifiers are not allowed');
         }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassConst.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class ClassConst extends Node\Stmt
 {
-    /** @var Node\Const_[] Constant declarations */
+    /**
+ * @var Node\Const_[] Constant declarations 
+*/
     public $consts;
 
     /**
@@ -15,12 +17,14 @@
      * @param Node\Const_[] $consts     Constant declarations
      * @param array         $attributes Additional attributes
      */
-    public function __construct(array $consts, array $attributes = array()) {
+    public function __construct(array $consts, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->consts = $consts;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('consts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassLike.php
+++ PHP_CodeSniffer
@@ -4,10 +4,15 @@
 
 use PhpParser\Node;
 
-abstract class ClassLike extends Node\Stmt {
-    /** @var string Name */
+abstract class ClassLike extends Node\Stmt
+{
+    /**
+ * @var string Name 
+*/
     public $name;
-    /** @var Node[] Statements */
+    /**
+ * @var Node[] Statements 
+*/
     public $stmts;
 
     /**
@@ -15,7 +20,8 @@
      *
      * @return ClassMethod[]
      */
-    public function getMethods() {
+    public function getMethods() 
+    {
         $methods = array();
         foreach ($this->stmts as $stmt) {
             if ($stmt instanceof ClassMethod) {
@@ -32,7 +38,8 @@
      *
      * @return ClassMethod|null Method node or null if the method does not exist
      */
-    public function getMethod($name) {
+    public function getMethod($name) 
+    {
         $lowerName = strtolower($name);
         foreach ($this->stmts as $stmt) {
             if ($stmt instanceof ClassMethod && $lowerName === strtolower($stmt->name)) {

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ClassMethod.php
+++ PHP_CodeSniffer
@@ -8,32 +8,45 @@
 
 class ClassMethod extends Node\Stmt implements FunctionLike
 {
-    /** @var int Type */
+    /**
+ * @var int Type 
+*/
     public $type;
-    /** @var bool Whether to return by reference */
+    /**
+ * @var bool Whether to return by reference 
+*/
     public $byRef;
-    /** @var string Name */
+    /**
+ * @var string Name 
+*/
     public $name;
-    /** @var Node\Param[] Parameters */
+    /**
+ * @var Node\Param[] Parameters 
+*/
     public $params;
-    /** @var null|string|Node\Name Return type */
+    /**
+ * @var null|string|Node\Name Return type 
+*/
     public $returnType;
-    /** @var Node[] Statements */
+    /**
+ * @var Node[] Statements 
+*/
     public $stmts;
 
     /**
      * Constructs a class method node.
      *
-     * @param string      $name       Name
-     * @param array       $subNodes   Array of the following optional subnodes:
+     * @param string $name       Name
+     * @param array  $subNodes   Array of the following optional subnodes: 'type'       => MODIFIER_PUBLIC: Type 'byRef'      => false          : Whether to return by reference 'params'     => array()        : Parameters 'returnType' => null           : Return type 'stmts'      => array()        : Statements
      *                                'type'       => MODIFIER_PUBLIC: Type
      *                                'byRef'      => false          : Whether to return by reference
      *                                'params'     => array()        : Parameters
      *                                'returnType' => null           : Return type
      *                                'stmts'      => array()        : Statements
-     * @param array       $attributes Additional attributes
+     * @param array  $attributes Additional attributes
      */
-    public function __construct($name, array $subNodes = array(), array $attributes = array()) {
+    public function __construct($name, array $subNodes = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->type = isset($subNodes['type']) ? $subNodes['type'] : 0;
         $this->byRef = isset($subNodes['byRef'])  ? $subNodes['byRef']  : false;
@@ -44,58 +57,69 @@
 
         if ($this->type & Class_::MODIFIER_STATIC) {
             switch (strtolower($this->name)) {
-                case '__construct':
-                    throw new Error(sprintf('Constructor %s() cannot be static', $this->name));
-                case '__destruct':
-                    throw new Error(sprintf('Destructor %s() cannot be static', $this->name));
-                case '__clone':
-                    throw new Error(sprintf('Clone method %s() cannot be static', $this->name));
+            case '__construct':
+                throw new Error(sprintf('Constructor %s() cannot be static', $this->name));
+            case '__destruct':
+                throw new Error(sprintf('Destructor %s() cannot be static', $this->name));
+            case '__clone':
+                throw new Error(sprintf('Clone method %s() cannot be static', $this->name));
             }
         }
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('type', 'byRef', 'name', 'params', 'returnType', 'stmts');
     }
 
-    public function returnsByRef() {
+    public function returnsByRef() 
+    {
         return $this->byRef;
     }
 
-    public function getParams() {
+    public function getParams() 
+    {
         return $this->params;
     }
 
-    public function getReturnType() {
+    public function getReturnType() 
+    {
         return $this->returnType;
     }
 
-    public function getStmts() {
+    public function getStmts() 
+    {
         return $this->stmts;
     }
 
-    public function isPublic() {
+    public function isPublic() 
+    {
         return ($this->type & Class_::MODIFIER_PUBLIC) !== 0
             || ($this->type & Class_::VISIBILITY_MODIFER_MASK) === 0;
     }
 
-    public function isProtected() {
+    public function isProtected() 
+    {
         return (bool) ($this->type & Class_::MODIFIER_PROTECTED);
     }
 
-    public function isPrivate() {
+    public function isPrivate() 
+    {
         return (bool) ($this->type & Class_::MODIFIER_PRIVATE);
     }
 
-    public function isAbstract() {
+    public function isAbstract() 
+    {
         return (bool) ($this->type & Class_::MODIFIER_ABSTRACT);
     }
 
-    public function isFinal() {
+    public function isFinal() 
+    {
         return (bool) ($this->type & Class_::MODIFIER_FINAL);
     }
 
-    public function isStatic() {
+    public function isStatic() 
+    {
         return (bool) ($this->type & Class_::MODIFIER_STATIC);
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Const_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Const_ extends Node\Stmt
 {
-    /** @var Node\Const_[] Constant declarations */
+    /**
+ * @var Node\Const_[] Constant declarations 
+*/
     public $consts;
 
     /**
@@ -15,12 +17,14 @@
      * @param Node\Const_[] $consts     Constant declarations
      * @param array         $attributes Additional attributes
      */
-    public function __construct(array $consts, array $attributes = array()) {
+    public function __construct(array $consts, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->consts = $consts;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('consts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Continue_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Continue_ extends Node\Stmt
 {
-    /** @var null|Node\Expr Number of loops to continue */
+    /**
+ * @var null|Node\Expr Number of loops to continue 
+*/
     public $num;
 
     /**
@@ -15,12 +17,14 @@
      * @param null|Node\Expr $num        Number of loops to continue
      * @param array          $attributes Additional attributes
      */
-    public function __construct(Node\Expr $num = null, array $attributes = array()) {
+    public function __construct(Node\Expr $num = null, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->num = $num;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('num');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Declare_.php
+++ PHP_CodeSniffer
@@ -5,9 +5,13 @@
 use PhpParser\Node;
 class Declare_ extends Node\Stmt
 {
-    /** @var DeclareDeclare[] List of declares */
+    /**
+ * @var DeclareDeclare[] List of declares 
+*/
     public $declares;
-    /** @var Node[] Statements */
+    /**
+ * @var Node[] Statements 
+*/
     public $stmts;
 
     /**
@@ -17,13 +21,15 @@
      * @param Node[]|null      $stmts      Statements
      * @param array            $attributes Additional attributes
      */
-    public function __construct(array $declares, array $stmts = null, array $attributes = array()) {
+    public function __construct(array $declares, array $stmts = null, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->declares = $declares;
         $this->stmts = $stmts;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('declares', 'stmts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/DeclareDeclare.php
+++ PHP_CodeSniffer
@@ -6,9 +6,13 @@
 
 class DeclareDeclare extends Node\Stmt
 {
-    /** @var string Key */
+    /**
+ * @var string Key 
+*/
     public $key;
-    /** @var Node\Expr Value */
+    /**
+ * @var Node\Expr Value 
+*/
     public $value;
 
     /**
@@ -18,13 +22,15 @@
      * @param Node\Expr $value      Value
      * @param array     $attributes Additional attributes
      */
-    public function __construct($key, Node\Expr $value, array $attributes = array()) {
+    public function __construct($key, Node\Expr $value, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->key = $key;
         $this->value = $value;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('key', 'value');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Do_.php
+++ PHP_CodeSniffer
@@ -6,9 +6,13 @@
 
 class Do_ extends Node\Stmt
 {
-    /** @var Node\Expr Condition */
+    /**
+ * @var Node\Expr Condition 
+*/
     public $cond;
-    /** @var Node[] Statements */
+    /**
+ * @var Node[] Statements 
+*/
     public $stmts;
 
     /**
@@ -18,13 +22,15 @@
      * @param Node[]    $stmts      Statements
      * @param array     $attributes Additional attributes
      */
-    public function __construct(Node\Expr $cond, array $stmts = array(), array $attributes = array()) {
+    public function __construct(Node\Expr $cond, array $stmts = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->cond = $cond;
         $this->stmts = $stmts;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('cond', 'stmts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Echo_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Echo_ extends Node\Stmt
 {
-    /** @var Node\Expr[] Expressions */
+    /**
+ * @var Node\Expr[] Expressions 
+*/
     public $exprs;
 
     /**
@@ -15,12 +17,14 @@
      * @param Node\Expr[] $exprs      Expressions
      * @param array       $attributes Additional attributes
      */
-    public function __construct(array $exprs, array $attributes = array()) {
+    public function __construct(array $exprs, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->exprs = $exprs;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('exprs');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Else_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Else_ extends Node\Stmt
 {
-    /** @var Node[] Statements */
+    /**
+ * @var Node[] Statements 
+*/
     public $stmts;
 
     /**
@@ -15,12 +17,14 @@
      * @param Node[] $stmts      Statements
      * @param array  $attributes Additional attributes
      */
-    public function __construct(array $stmts = array(), array $attributes = array()) {
+    public function __construct(array $stmts = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->stmts = $stmts;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('stmts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/ElseIf_.php
+++ PHP_CodeSniffer
@@ -6,9 +6,13 @@
 
 class ElseIf_ extends Node\Stmt
 {
-    /** @var Node\Expr Condition */
+    /**
+ * @var Node\Expr Condition 
+*/
     public $cond;
-    /** @var Node[] Statements */
+    /**
+ * @var Node[] Statements 
+*/
     public $stmts;
 
     /**
@@ -18,13 +22,15 @@
      * @param Node[]    $stmts      Statements
      * @param array     $attributes Additional attributes
      */
-    public function __construct(Node\Expr $cond, array $stmts = array(), array $attributes = array()) {
+    public function __construct(Node\Expr $cond, array $stmts = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->cond = $cond;
         $this->stmts = $stmts;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('cond', 'stmts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/For_.php
+++ PHP_CodeSniffer
@@ -6,13 +6,21 @@
 
 class For_ extends Node\Stmt
 {
-    /** @var Node\Expr[] Init expressions */
+    /**
+ * @var Node\Expr[] Init expressions 
+*/
     public $init;
-    /** @var Node\Expr[] Loop conditions */
+    /**
+ * @var Node\Expr[] Loop conditions 
+*/
     public $cond;
-    /** @var Node\Expr[] Loop expressions */
+    /**
+ * @var Node\Expr[] Loop expressions 
+*/
     public $loop;
-    /** @var Node[] Statements */
+    /**
+ * @var Node[] Statements 
+*/
     public $stmts;
 
     /**
@@ -25,7 +33,8 @@
      *                          'stmts' => array(): Statements
      * @param array $attributes Additional attributes
      */
-    public function __construct(array $subNodes = array(), array $attributes = array()) {
+    public function __construct(array $subNodes = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->init = isset($subNodes['init']) ? $subNodes['init'] : array();
         $this->cond = isset($subNodes['cond']) ? $subNodes['cond'] : array();
@@ -33,7 +42,8 @@
         $this->stmts = isset($subNodes['stmts']) ? $subNodes['stmts'] : array();
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('init', 'cond', 'loop', 'stmts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Foreach_.php
+++ PHP_CodeSniffer
@@ -6,15 +6,25 @@
 
 class Foreach_ extends Node\Stmt
 {
-    /** @var Node\Expr Expression to iterate */
+    /**
+ * @var Node\Expr Expression to iterate 
+*/
     public $expr;
-    /** @var null|Node\Expr Variable to assign key to */
+    /**
+ * @var null|Node\Expr Variable to assign key to 
+*/
     public $keyVar;
-    /** @var bool Whether to assign value by reference */
+    /**
+ * @var bool Whether to assign value by reference 
+*/
     public $byRef;
-    /** @var Node\Expr Variable to assign value to */
+    /**
+ * @var Node\Expr Variable to assign value to 
+*/
     public $valueVar;
-    /** @var Node[] Statements */
+    /**
+ * @var Node[] Statements 
+*/
     public $stmts;
 
     /**
@@ -28,7 +38,8 @@
      *                              'stmts'  => array(): Statements
      * @param array     $attributes Additional attributes
      */
-    public function __construct(Node\Expr $expr, Node\Expr $valueVar, array $subNodes = array(), array $attributes = array()) {
+    public function __construct(Node\Expr $expr, Node\Expr $valueVar, array $subNodes = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
         $this->keyVar = isset($subNodes['keyVar']) ? $subNodes['keyVar'] : null;
@@ -37,7 +48,8 @@
         $this->stmts = isset($subNodes['stmts']) ? $subNodes['stmts'] : array();
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr', 'keyVar', 'byRef', 'valueVar', 'stmts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Function_.php
+++ PHP_CodeSniffer
@@ -7,15 +7,25 @@
 
 class Function_ extends Node\Stmt implements FunctionLike
 {
-    /** @var bool Whether function returns by reference */
+    /**
+ * @var bool Whether function returns by reference 
+*/
     public $byRef;
-    /** @var string Name */
+    /**
+ * @var string Name 
+*/
     public $name;
-    /** @var Node\Param[] Parameters */
+    /**
+ * @var Node\Param[] Parameters 
+*/
     public $params;
-    /** @var null|string|Node\Name Return type */
+    /**
+ * @var null|string|Node\Name Return type 
+*/
     public $returnType;
-    /** @var Node[] Statements */
+    /**
+ * @var Node[] Statements 
+*/
     public $stmts;
 
     /**
@@ -29,7 +39,8 @@
      *                           'stmts'      => array(): Statements
      * @param array  $attributes Additional attributes
      */
-    public function __construct($name, array $subNodes = array(), array $attributes = array()) {
+    public function __construct($name, array $subNodes = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->byRef = isset($subNodes['byRef']) ? $subNodes['byRef'] : false;
         $this->name = $name;
@@ -38,23 +49,28 @@
         $this->stmts = isset($subNodes['stmts']) ? $subNodes['stmts'] : array();
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('byRef', 'name', 'params', 'returnType', 'stmts');
     }
 
-    public function returnsByRef() {
+    public function returnsByRef() 
+    {
         return $this->byRef;
     }
 
-    public function getParams() {
+    public function getParams() 
+    {
         return $this->params;
     }
 
-    public function getReturnType() {
+    public function getReturnType() 
+    {
         return $this->returnType;
     }
 
-    public function getStmts() {
+    public function getStmts() 
+    {
         return $this->stmts;
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Global_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Global_ extends Node\Stmt
 {
-    /** @var Node\Expr[] Variables */
+    /**
+ * @var Node\Expr[] Variables 
+*/
     public $vars;
 
     /**
@@ -15,12 +17,14 @@
      * @param Node\Expr[] $vars       Variables to unset
      * @param array       $attributes Additional attributes
      */
-    public function __construct(array $vars, array $attributes = array()) {
+    public function __construct(array $vars, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->vars = $vars;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('vars');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Goto_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Goto_ extends Stmt
 {
-    /** @var string Name of label to jump to */
+    /**
+ * @var string Name of label to jump to 
+*/
     public $name;
 
     /**
@@ -15,12 +17,14 @@
      * @param string $name       Name of label to jump to
      * @param array  $attributes Additional attributes
      */
-    public function __construct($name, array $attributes = array()) {
+    public function __construct($name, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->name = $name;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('name');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/GroupUse.php
+++ PHP_CodeSniffer
@@ -7,11 +7,17 @@
 
 class GroupUse extends Stmt
 {
-    /** @var int Type of group use */
+    /**
+ * @var int Type of group use 
+*/
     public $type;
-    /** @var Name Prefix for uses */
+    /**
+ * @var Name Prefix for uses 
+*/
     public $prefix;
-    /** @var UseUse[] Uses */
+    /**
+ * @var UseUse[] Uses 
+*/
     public $uses;
 
     /**
@@ -22,14 +28,16 @@
      * @param int      $type       Type of group use
      * @param array    $attributes Additional attributes
      */
-    public function __construct(Name $prefix, array $uses, $type = Use_::TYPE_NORMAL, array $attributes = array()) {
+    public function __construct(Name $prefix, array $uses, $type = Use_::TYPE_NORMAL, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->type = $type;
         $this->prefix = $prefix;
         $this->uses = $uses;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('type', 'prefix', 'uses');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/HaltCompiler.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class HaltCompiler extends Stmt
 {
-    /** @var string Remaining text after halt compiler statement. */
+    /**
+ * @var string Remaining text after halt compiler statement. 
+*/
     public $remaining;
 
     /**
@@ -15,12 +17,14 @@
      * @param string $remaining  Remaining text after halt compiler statement.
      * @param array  $attributes Additional attributes
      */
-    public function __construct($remaining, array $attributes = array()) {
+    public function __construct($remaining, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->remaining = $remaining;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('remaining');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/If_.php
+++ PHP_CodeSniffer
@@ -6,13 +6,21 @@
 
 class If_ extends Node\Stmt
 {
-    /** @var Node\Expr Condition expression */
+    /**
+ * @var Node\Expr Condition expression 
+*/
     public $cond;
-    /** @var Node[] Statements */
+    /**
+ * @var Node[] Statements 
+*/
     public $stmts;
-    /** @var ElseIf_[] Elseif clauses */
+    /**
+ * @var ElseIf_[] Elseif clauses 
+*/
     public $elseifs;
-    /** @var null|Else_ Else clause */
+    /**
+ * @var null|Else_ Else clause 
+*/
     public $else;
 
     /**
@@ -25,7 +33,8 @@
      *                              'else'    => null   : Else clause
      * @param array     $attributes Additional attributes
      */
-    public function __construct(Node\Expr $cond, array $subNodes = array(), array $attributes = array()) {
+    public function __construct(Node\Expr $cond, array $subNodes = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->cond = $cond;
         $this->stmts = isset($subNodes['stmts']) ? $subNodes['stmts'] : array();
@@ -33,7 +42,8 @@
         $this->else = isset($subNodes['else']) ? $subNodes['else'] : null;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('cond', 'stmts', 'elseifs', 'else');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/InlineHTML.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class InlineHTML extends Stmt
 {
-    /** @var string String */
+    /**
+ * @var string String 
+*/
     public $value;
 
     /**
@@ -15,12 +17,14 @@
      * @param string $value      String
      * @param array  $attributes Additional attributes
      */
-    public function __construct($value, array $attributes = array()) {
+    public function __construct($value, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->value = $value;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('value');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Interface_.php
+++ PHP_CodeSniffer
@@ -7,7 +7,9 @@
 
 class Interface_ extends ClassLike
 {
-    /** @var Node\Name[] Extended interfaces */
+    /**
+ * @var Node\Name[] Extended interfaces 
+*/
     public $extends;
 
     protected static $specialNames = array(
@@ -25,7 +27,8 @@
      *                           'stmts'   => array(): Statements
      * @param array  $attributes Additional attributes
      */
-    public function __construct($name, array $subNodes = array(), array $attributes = array()) {
+    public function __construct($name, array $subNodes = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->name = $name;
         $this->extends = isset($subNodes['extends']) ? $subNodes['extends'] : array();
@@ -45,7 +48,8 @@
         }
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('name', 'extends', 'stmts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Label.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Label extends Stmt
 {
-    /** @var string Name */
+    /**
+ * @var string Name 
+*/
     public $name;
 
     /**
@@ -15,12 +17,14 @@
      * @param string $name       Name
      * @param array  $attributes Additional attributes
      */
-    public function __construct($name, array $attributes = array()) {
+    public function __construct($name, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->name = $name;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('name');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Namespace_.php
+++ PHP_CodeSniffer
@@ -7,9 +7,13 @@
 
 class Namespace_ extends Node\Stmt
 {
-    /** @var null|Node\Name Name */
+    /**
+ * @var null|Node\Name Name 
+*/
     public $name;
-    /** @var Node[] Statements */
+    /**
+ * @var Node[] Statements 
+*/
     public $stmts;
 
     protected static $specialNames = array(
@@ -25,7 +29,8 @@
      * @param null|Node[]    $stmts      Statements
      * @param array          $attributes Additional attributes
      */
-    public function __construct(Node\Name $name = null, $stmts = array(), array $attributes = array()) {
+    public function __construct(Node\Name $name = null, $stmts = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->name = $name;
         $this->stmts = $stmts;
@@ -46,7 +51,8 @@
         }
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('name', 'stmts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Nop.php
+++ PHP_CodeSniffer
@@ -4,10 +4,13 @@
 
 use PhpParser\Node;
 
-/** Nop/empty statement (;). */
+/**
+ * Nop/empty statement (;). 
+*/
 class Nop extends Node\Stmt
 {
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array();
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Property.php
+++ PHP_CodeSniffer
@@ -7,9 +7,13 @@
 
 class Property extends Node\Stmt
 {
-    /** @var int Modifiers */
+    /**
+ * @var int Modifiers 
+*/
     public $type;
-    /** @var PropertyProperty[] Properties */
+    /**
+ * @var PropertyProperty[] Properties 
+*/
     public $props;
 
     /**
@@ -19,7 +23,8 @@
      * @param PropertyProperty[] $props      Properties
      * @param array              $attributes Additional attributes
      */
-    public function __construct($type, array $props, array $attributes = array()) {
+    public function __construct($type, array $props, array $attributes = array()) 
+    {
         if ($type & Class_::MODIFIER_ABSTRACT) {
             throw new Error('Properties cannot be declared abstract');
         }
@@ -33,24 +38,29 @@
         $this->props = $props;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('type', 'props');
     }
 
-    public function isPublic() {
+    public function isPublic() 
+    {
         return ($this->type & Class_::MODIFIER_PUBLIC) !== 0
             || ($this->type & Class_::VISIBILITY_MODIFER_MASK) === 0;
     }
 
-    public function isProtected() {
+    public function isProtected() 
+    {
         return (bool) ($this->type & Class_::MODIFIER_PROTECTED);
     }
 
-    public function isPrivate() {
+    public function isPrivate() 
+    {
         return (bool) ($this->type & Class_::MODIFIER_PRIVATE);
     }
 
-    public function isStatic() {
+    public function isStatic() 
+    {
         return (bool) ($this->type & Class_::MODIFIER_STATIC);
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/PropertyProperty.php
+++ PHP_CodeSniffer
@@ -6,9 +6,13 @@
 
 class PropertyProperty extends Node\Stmt
 {
-    /** @var string Name */
+    /**
+ * @var string Name 
+*/
     public $name;
-    /** @var null|Node\Expr Default */
+    /**
+ * @var null|Node\Expr Default 
+*/
     public $default;
 
     /**
@@ -18,13 +22,15 @@
      * @param null|Node\Expr $default    Default value
      * @param array          $attributes Additional attributes
      */
-    public function __construct($name, Node\Expr $default = null, array $attributes = array()) {
+    public function __construct($name, Node\Expr $default = null, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->name = $name;
         $this->default = $default;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('name', 'default');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Return_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Return_ extends Node\Stmt
 {
-    /** @var null|Node\Expr Expression */
+    /**
+ * @var null|Node\Expr Expression 
+*/
     public $expr;
 
     /**
@@ -15,12 +17,14 @@
      * @param null|Node\Expr $expr       Expression
      * @param array          $attributes Additional attributes
      */
-    public function __construct(Node\Expr $expr = null, array $attributes = array()) {
+    public function __construct(Node\Expr $expr = null, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Static_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Static_ extends Stmt
 {
-    /** @var StaticVar[] Variable definitions */
+    /**
+ * @var StaticVar[] Variable definitions 
+*/
     public $vars;
 
     /**
@@ -15,12 +17,14 @@
      * @param StaticVar[] $vars       Variable definitions
      * @param array       $attributes Additional attributes
      */
-    public function __construct(array $vars, array $attributes = array()) {
+    public function __construct(array $vars, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->vars = $vars;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('vars');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/StaticVar.php
+++ PHP_CodeSniffer
@@ -6,9 +6,13 @@
 
 class StaticVar extends Node\Stmt
 {
-    /** @var string Name */
+    /**
+ * @var string Name 
+*/
     public $name;
-    /** @var null|Node\Expr Default value */
+    /**
+ * @var null|Node\Expr Default value 
+*/
     public $default;
 
     /**
@@ -18,13 +22,15 @@
      * @param null|Node\Expr $default    Default value
      * @param array          $attributes Additional attributes
      */
-    public function __construct($name, Node\Expr $default = null, array $attributes = array()) {
+    public function __construct($name, Node\Expr $default = null, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->name = $name;
         $this->default = $default;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('name', 'default');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Switch_.php
+++ PHP_CodeSniffer
@@ -6,9 +6,13 @@
 
 class Switch_ extends Node\Stmt
 {
-    /** @var Node\Expr Condition */
+    /**
+ * @var Node\Expr Condition 
+*/
     public $cond;
-    /** @var Case_[] Case list */
+    /**
+ * @var Case_[] Case list 
+*/
     public $cases;
 
     /**
@@ -18,13 +22,15 @@
      * @param Case_[]   $cases      Case list
      * @param array     $attributes Additional attributes
      */
-    public function __construct(Node\Expr $cond, array $cases, array $attributes = array()) {
+    public function __construct(Node\Expr $cond, array $cases, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->cond = $cond;
         $this->cases = $cases;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('cond', 'cases');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Throw_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Throw_ extends Node\Stmt
 {
-    /** @var Node\Expr Expression */
+    /**
+ * @var Node\Expr Expression 
+*/
     public $expr;
 
     /**
@@ -15,12 +17,14 @@
      * @param Node\Expr $expr       Expression
      * @param array     $attributes Additional attributes
      */
-    public function __construct(Node\Expr $expr, array $attributes = array()) {
+    public function __construct(Node\Expr $expr, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->expr = $expr;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('expr');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Trait_.php
+++ PHP_CodeSniffer
@@ -13,13 +13,15 @@
      * @param Node[] $stmts      Statements
      * @param array  $attributes Additional attributes
      */
-    public function __construct($name, array $stmts = array(), array $attributes = array()) {
+    public function __construct($name, array $stmts = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->name = $name;
         $this->stmts = $stmts;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('name', 'stmts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUse.php
+++ PHP_CodeSniffer
@@ -7,9 +7,13 @@
 
 class TraitUse extends Node\Stmt
 {
-    /** @var Node\Name[] Traits */
+    /**
+ * @var Node\Name[] Traits 
+*/
     public $traits;
-    /** @var TraitUseAdaptation[] Adaptations */
+    /**
+ * @var TraitUseAdaptation[] Adaptations 
+*/
     public $adaptations;
 
     /**
@@ -19,13 +23,15 @@
      * @param TraitUseAdaptation[] $adaptations Adaptations
      * @param array                $attributes  Additional attributes
      */
-    public function __construct(array $traits, array $adaptations = array(), array $attributes = array()) {
+    public function __construct(array $traits, array $adaptations = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->traits = $traits;
         $this->adaptations = $adaptations;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('traits', 'adaptations');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUseAdaptation/Alias.php
+++ PHP_CodeSniffer
@@ -6,9 +6,13 @@
 
 class Alias extends Node\Stmt\TraitUseAdaptation
 {
-    /** @var null|int New modifier */
+    /**
+ * @var null|int New modifier 
+*/
     public $newModifier;
-    /** @var null|string New name */
+    /**
+ * @var null|string New name 
+*/
     public $newName;
 
     /**
@@ -20,7 +24,8 @@
      * @param null|string    $newName     New name
      * @param array          $attributes  Additional attributes
      */
-    public function __construct($trait, $method, $newModifier, $newName, array $attributes = array()) {
+    public function __construct($trait, $method, $newModifier, $newName, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->trait = $trait;
         $this->method = $method;
@@ -28,7 +33,8 @@
         $this->newName = $newName;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('trait', 'method', 'newModifier', 'newName');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUseAdaptation/Precedence.php
+++ PHP_CodeSniffer
@@ -6,25 +6,29 @@
 
 class Precedence extends Node\Stmt\TraitUseAdaptation
 {
-    /** @var Node\Name[] Overwritten traits */
+    /**
+ * @var Node\Name[] Overwritten traits 
+*/
     public $insteadof;
 
     /**
      * Constructs a trait use precedence adaptation node.
      *
-     * @param Node\Name   $trait       Trait name
-     * @param string      $method      Method name
-     * @param Node\Name[] $insteadof   Overwritten traits
-     * @param array       $attributes  Additional attributes
+     * @param Node\Name   $trait      Trait name
+     * @param string      $method     Method name
+     * @param Node\Name[] $insteadof  Overwritten traits
+     * @param array       $attributes Additional attributes
      */
-    public function __construct(Node\Name $trait, $method, array $insteadof, array $attributes = array()) {
+    public function __construct(Node\Name $trait, $method, array $insteadof, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->trait = $trait;
         $this->method = $method;
         $this->insteadof = $insteadof;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('trait', 'method', 'insteadof');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TraitUseAdaptation.php
+++ PHP_CodeSniffer
@@ -6,8 +6,12 @@
 
 abstract class TraitUseAdaptation extends Node\Stmt
 {
-    /** @var Node\Name Trait name */
+    /**
+ * @var Node\Name Trait name 
+*/
     public $trait;
-    /** @var string Method name */
+    /**
+ * @var string Method name 
+*/
     public $method;
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/TryCatch.php
+++ PHP_CodeSniffer
@@ -7,11 +7,17 @@
 
 class TryCatch extends Node\Stmt
 {
-    /** @var Node[] Statements */
+    /**
+ * @var Node[] Statements 
+*/
     public $stmts;
-    /** @var Catch_[] Catches */
+    /**
+ * @var Catch_[] Catches 
+*/
     public $catches;
-    /** @var null|Node[] Finally statements */
+    /**
+ * @var null|Node[] Finally statements 
+*/
     public $finallyStmts;
 
     /**
@@ -22,7 +28,8 @@
      * @param null|Node[] $finallyStmts Finally statements (null means no finally clause)
      * @param array|null  $attributes   Additional attributes
      */
-    public function __construct(array $stmts, array $catches, array $finallyStmts = null, array $attributes = array()) {
+    public function __construct(array $stmts, array $catches, array $finallyStmts = null, array $attributes = array()) 
+    {
         if (empty($catches) && null === $finallyStmts) {
             throw new Error('Cannot use try without catch or finally');
         }
@@ -33,7 +40,8 @@
         $this->finallyStmts = $finallyStmts;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('stmts', 'catches', 'finallyStmts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Unset_.php
+++ PHP_CodeSniffer
@@ -6,7 +6,9 @@
 
 class Unset_ extends Node\Stmt
 {
-    /** @var Node\Expr[] Variables to unset */
+    /**
+ * @var Node\Expr[] Variables to unset 
+*/
     public $vars;
 
     /**
@@ -15,12 +17,14 @@
      * @param Node\Expr[] $vars       Variables to unset
      * @param array       $attributes Additional attributes
      */
-    public function __construct(array $vars, array $attributes = array()) {
+    public function __construct(array $vars, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->vars = $vars;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('vars');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/Use_.php
+++ PHP_CodeSniffer
@@ -12,16 +12,26 @@
      * Stmt\UseUse is unknown. It's only the other way around for mixed group use declarations.
      */
     const TYPE_UNKNOWN = 0;
-    /** Class or namespace import */
+    /**
+ * Class or namespace import 
+*/
     const TYPE_NORMAL = 1;
-    /** Function import */
+    /**
+ * Function import 
+*/
     const TYPE_FUNCTION = 2;
-    /** Constant import */
+    /**
+ * Constant import 
+*/
     const TYPE_CONSTANT = 3;
 
-    /** @var int Type of alias */
+    /**
+ * @var int Type of alias 
+*/
     public $type;
-    /** @var UseUse[] Aliases */
+    /**
+ * @var UseUse[] Aliases 
+*/
     public $uses;
 
     /**
@@ -31,13 +41,15 @@
      * @param int      $type       Type of alias
      * @param array    $attributes Additional attributes
      */
-    public function __construct(array $uses, $type = self::TYPE_NORMAL, array $attributes = array()) {
+    public function __construct(array $uses, $type = self::TYPE_NORMAL, array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->type = $type;
         $this->uses = $uses;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('type', 'uses');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/UseUse.php
+++ PHP_CodeSniffer
@@ -7,11 +7,17 @@
 
 class UseUse extends Node\Stmt
 {
-    /** @var int One of the Stmt\Use_::TYPE_* constants. Will only differ from TYPE_UNKNOWN for mixed group uses */
+    /**
+ * @var int One of the Stmt\Use_::TYPE_* constants. Will only differ from TYPE_UNKNOWN for mixed group uses 
+*/
     public $type;
-    /** @var Node\Name Namespace, class, function or constant to alias */
+    /**
+ * @var Node\Name Namespace, class, function or constant to alias 
+*/
     public $name;
-    /** @var string Alias */
+    /**
+ * @var string Alias 
+*/
     public $alias;
 
     /**
@@ -22,16 +28,19 @@
      * @param int         $type       Type of the use element (for mixed group use declarations only)
      * @param array       $attributes Additional attributes
      */
-    public function __construct(Node\Name $name, $alias = null, $type = Use_::TYPE_UNKNOWN, array $attributes = array()) {
+    public function __construct(Node\Name $name, $alias = null, $type = Use_::TYPE_UNKNOWN, array $attributes = array()) 
+    {
         if (null === $alias) {
             $alias = $name->getLast();
         }
 
         if ('self' == strtolower($alias) || 'parent' == strtolower($alias)) {
-            throw new Error(sprintf(
-                'Cannot use %s as %s because \'%2$s\' is a special class name',
-                $name, $alias
-            ));
+            throw new Error(
+                sprintf(
+                    'Cannot use %s as %s because \'%2$s\' is a special class name',
+                    $name, $alias
+                )
+            );
         }
 
         parent::__construct($attributes);
@@ -40,7 +49,8 @@
         $this->alias = $alias;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('type', 'name', 'alias');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/Node/Stmt/While_.php
+++ PHP_CodeSniffer
@@ -6,9 +6,13 @@
 
 class While_ extends Node\Stmt
 {
-    /** @var Node\Expr Condition */
+    /**
+ * @var Node\Expr Condition 
+*/
     public $cond;
-    /** @var Node[] Statements */
+    /**
+ * @var Node[] Statements 
+*/
     public $stmts;
 
     /**
@@ -18,13 +22,15 @@
      * @param Node[]    $stmts      Statements
      * @param array     $attributes Additional attributes
      */
-    public function __construct(Node\Expr $cond, array $stmts = array(), array $attributes = array()) {
+    public function __construct(Node\Expr $cond, array $stmts = array(), array $attributes = array()) 
+    {
         parent::__construct($attributes);
         $this->cond = $cond;
         $this->stmts = $stmts;
     }
 
-    public function getSubNodeNames() {
+    public function getSubNodeNames() 
+    {
         return array('cond', 'stmts');
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/NodeAbstract.php
+++ PHP_CodeSniffer
@@ -11,7 +11,8 @@
      *
      * @param array $attributes Array of attributes
      */
-    public function __construct(array $attributes = array()) {
+    public function __construct(array $attributes = array()) 
+    {
         $this->attributes = $attributes;
     }
 
@@ -20,7 +21,8 @@
      *
      * @return string Type of the node
      */
-    public function getType() {
+    public function getType() 
+    {
         return strtr(substr(rtrim(get_class($this), '_'), 15), '\\', '_');
     }
 
@@ -29,7 +31,8 @@
      *
      * @return int Line
      */
-    public function getLine() {
+    public function getLine() 
+    {
         return $this->getAttribute('startLine', -1);
     }
 
@@ -38,7 +41,8 @@
      *
      * @param int $line Line
      */
-    public function setLine($line) {
+    public function setLine($line) 
+    {
         $this->setAttribute('startLine', (int) $line);
     }
 
@@ -49,7 +53,8 @@
      *
      * @return null|Comment\Doc Doc comment object or null
      */
-    public function getDocComment() {
+    public function getDocComment() 
+    {
         $comments = $this->getAttribute('comments');
         if (!$comments) {
             return null;
@@ -63,15 +68,18 @@
         return $lastComment;
     }
 
-    public function setAttribute($key, $value) {
+    public function setAttribute($key, $value) 
+    {
         $this->attributes[$key] = $value;
     }
 
-    public function hasAttribute($key) {
+    public function hasAttribute($key) 
+    {
         return array_key_exists($key, $this->attributes);
     }
 
-    public function &getAttribute($key, $default = null) {
+    public function &getAttribute($key, $default = null) 
+    {
         if (!array_key_exists($key, $this->attributes)) {
             return $default;
         } else {
@@ -79,7 +87,8 @@
         }
     }
 
-    public function getAttributes() {
+    public function getAttributes() 
+    {
         return $this->attributes;
     }
 }

--- vendor/nikic/php-parser/lib/PhpParser/NodeDumper.php
+++ PHP_CodeSniffer
@@ -12,7 +12,8 @@
      * @param array $options Boolean option 'dumpComments' controls whether comments should be
      *                       dumped
      */
-    public function __construct(array $options = []) {
+    public function __construct(array $options = []) 
+    {
         $this->dumpComments = !empty($options['dumpComments']);
     }
 
@@ -23,7 +24,8 @@
      *
      * @return string Dumped value
      */
-    public function dump($node) {
+    public function dump($node) 
+    {
         if ($node instanceof Node) {
             $r = $node->getType() . '(';
 

--- vendor/nikic/php-parser/lib/PhpParser/NodeTraverser.php
+++ PHP_CodeSniffer
@@ -19,7 +19,8 @@
      *
      * @param bool $cloneNodes Should the traverser clone the nodes when traversing the AST
      */
-    public function __construct($cloneNodes = false) {
+    public function __construct($cloneNodes = false) 
+    {
         $this->visitors = array();
         $this->cloneNodes = $cloneNodes;
     }
@@ -29,7 +30,8 @@
      *
      * @param NodeVisitor $visitor Visitor to add
      */
-    public function addVisitor(NodeVisitor $visitor) {
+    public function addVisitor(NodeVisitor $visitor) 
+    {
         $this->visitors[] = $visitor;
     }
 
@@ -38,7 +40,8 @@
      *
      * @param NodeVisitor $visitor
      */
-    public function removeVisitor(NodeVisitor $visitor) {
+    public function removeVisitor(NodeVisitor $visitor) 
+    {
         foreach ($this->visitors as $index => $storedVisitor) {
             if ($storedVisitor === $visitor) {
                 unset($this->visitors[$index]);
@@ -54,7 +57,8 @@
      *
      * @return Node[] Traversed array of nodes
      */
-    public function traverse(array $nodes) {
+    public function traverse(array $nodes) 
+    {
         foreach ($this->visitors as $visitor) {
             if (null !== $return = $visitor->beforeTraverse($nodes)) {
                 $nodes = $return;
@@ -72,7 +76,8 @@
         return $nodes;
     }
 
-    protected function traverseNode(Node $node) {
+    protected function traverseNode(Node $node) 
+    {
         if ($this->cloneNodes) {
             $node = clone $node;
         }
@@ -114,7 +119,8 @@
         return $node;
     }
 
-    protected function traverseArray(array $nodes) {
+    protected function traverseArray(array $nodes) 
+    {
         $doNodes = array();
 
         foreach ($nodes as $i => &$node) {

--- vendor/nikic/php-parser/lib/PhpParser/NodeVisitor/NameResolver.php
+++ PHP_CodeSniffer
@@ -12,17 +12,23 @@
 
 class NameResolver extends NodeVisitorAbstract
 {
-    /** @var null|Name Current namespace */
+    /**
+ * @var null|Name Current namespace 
+*/
     protected $namespace;
 
-    /** @var array Map of format [aliasType => [aliasName => originalName]] */
+    /**
+ * @var array Map of format [aliasType => [aliasName => originalName]] 
+*/
     protected $aliases;
 
-    public function beforeTraverse(array $nodes) {
+    public function beforeTraverse(array $nodes) 
+    {
         $this->resetState();
     }
 
-    public function enterNode(Node $node) {
+    public function enterNode(Node $node) 
+    {
         if ($node instanceof Stmt\Namespace_) {
             $this->resetState($node->name);
         } elseif ($node instanceof Stmt\Use_) {
@@ -57,7 +63,7 @@
             $this->addNamespacedName($node);
             $this->resolveSignature($node);
         } elseif ($node instanceof Stmt\ClassMethod
-                  || $node instanceof Expr\Closure
+            || $node instanceof Expr\Closure
         ) {
             $this->resolveSignature($node);
         } elseif ($node instanceof Stmt\Const_) {
@@ -65,10 +71,10 @@
                 $this->addNamespacedName($const);
             }
         } elseif ($node instanceof Expr\StaticCall
-                  || $node instanceof Expr\StaticPropertyFetch
-                  || $node instanceof Expr\ClassConstFetch
-                  || $node instanceof Expr\New_
-                  || $node instanceof Expr\Instanceof_
+            || $node instanceof Expr\StaticPropertyFetch
+            || $node instanceof Expr\ClassConstFetch
+            || $node instanceof Expr\New_
+            || $node instanceof Expr\Instanceof_
         ) {
             if ($node->class instanceof Name) {
                 $node->class = $this->resolveClassName($node->class);
@@ -101,7 +107,8 @@
         }
     }
 
-    protected function resetState(Name $namespace = null) {
+    protected function resetState(Name $namespace = null) 
+    {
         $this->namespace = $namespace;
         $this->aliases   = array(
             Stmt\Use_::TYPE_NORMAL   => array(),
@@ -110,7 +117,8 @@
         );
     }
 
-    protected function addAlias(Stmt\UseUse $use, $type, Name $prefix = null) {
+    protected function addAlias(Stmt\UseUse $use, $type, Name $prefix = null) 
+    {
         // Add prefix for group uses
         $name = $prefix ? Name::concat($prefix, $use->name) : $use->name;
         // Type is determined either by individual element or whole use declaration
@@ -142,8 +150,11 @@
         $this->aliases[$type][$aliasName] = $name;
     }
 
-    /** @param Stmt\Function_|Stmt\ClassMethod|Expr\Closure $node */
-    private function resolveSignature($node) {
+    /**
+ * @param Stmt\Function_|Stmt\ClassMethod|Expr\Closure $node 
+*/
+    private function resolveSignature($node) 
+    {
         foreach ($node->params as $param) {
             if ($param->type instanceof Name) {
                 $param->type = $this->resolveClassName($param->type);
@@ -154,7 +165,8 @@
         }
     }
 
-    protected function resolveClassName(Name $name) {
+    protected function resolveClassName(Name $name) 
+    {
         // don't resolve special class names
         if (in_array(strtolower($name->toString()), array('self', 'parent', 'static'))) {
             if (!$name->isUnqualified()) {
@@ -187,7 +199,8 @@
         return new FullyQualified($name->parts, $name->getAttributes());
     }
 
-    protected function resolveOtherName(Name $name, $type) {
+    protected function resolveOtherName(Name $name, $type) 
+    {
         // fully qualified names are already resolved
         if ($name->isFullyQualified()) {
             return $name;
@@ -223,7 +236,8 @@
         return new FullyQualified($name->parts, $name->getAttributes());
     }
 
-    protected function addNamespacedName(Node $node) {
+    protected function addNamespacedName(Node $node) 
+    {
         if (null !== $this->namespace) {
             $node->namespacedName = Name::concat($this->namespace, $node->name);
         } else {

--- vendor/nikic/php-parser/lib/PhpParser/NodeVisitorAbstract.php
+++ PHP_CodeSniffer
@@ -7,8 +7,16 @@
  */
 class NodeVisitorAbstract implements NodeVisitor
 {
-    public function beforeTraverse(array $nodes)    { }
-    public function enterNode(Node $node) { }
-    public function leaveNode(Node $node) { }
-    public function afterTraverse(array $nodes)     { }
+    public function beforeTraverse(array $nodes)    
+    { 
+    }
+    public function enterNode(Node $node) 
+    { 
+    }
+    public function leaveNode(Node $node) 
+    { 
+    }
+    public function afterTraverse(array $nodes)     
+    { 
+    }
 }
\ No newline at end of file

--- vendor/nikic/php-parser/lib/PhpParser/Parser/Multiple.php
+++ PHP_CodeSniffer
@@ -5,10 +5,15 @@
 use PhpParser\Error;
 use PhpParser\Parser;
 
-class Multiple implements Parser {
-    /** @var Parser[] List of parsers to try, in order of preference */
+class Multiple implements Parser
+{
+    /**
+ * @var Parser[] List of parsers to try, in order of preference 
+*/
     private $parsers;
-    /** @var Error[] Errors collected during last parse */
+    /**
+ * @var Error[] Errors collected during last parse 
+*/
     private $errors;
 
     /**
@@ -20,12 +25,14 @@
      *
      * @param Parser[] $parsers
      */
-    public function __construct(array $parsers) {
+    public function __construct(array $parsers) 
+    {
         $this->parsers = $parsers;
         $this->errors = [];
     }
 
-    public function parse($code) {
+    public function parse($code) 
+    {
         list($firstStmts, $firstErrors, $firstError) = $this->tryParse($this->parsers[0], $code);
         if ($firstErrors === []) {
             $this->errors = [];
@@ -47,16 +54,19 @@
         return $firstStmts;
     }
 
-    public function getErrors() {
+    public function getErrors() 
+    {
         return $this->errors;
     }
 
-    private function tryParse(Parser $parser, $code) {
+    private function tryParse(Parser $parser, $code) 
+    {
         $stmts = null;
         $error = null;
         try {
             $stmts = $parser->parse($code);
-        } catch (Error $error) {}
+        } catch (Error $error) {
+        }
         $errors = $parser->getErrors();
         return [$stmts, $errors, $error];
     }

